========== file tests/java/SelectionSort.java ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

/*@ predicate Sorted{L}(int a[], integer l, integer h) =
  @   \forall integer i j; l <= i <= j < h ==> a[i] <= a[j] ;
  @*/

/*@ predicate Swap{L1,L2}(int a[], integer i, integer j) =
  @   \at(a[i],L1) == \at(a[j],L2) &&
  @   \at(a[j],L1) == \at(a[i],L2) &&
  @   \forall integer k; k != i && k != j ==> \at(a[k],L1) == \at(a[k],L2);
  @*/

/*@ inductive Permut{L1,L2}(int a[], integer l, integer h) {
  @  case Permut_refl{L}: 
  @   \forall int a[], integer l h; Permut{L,L}(a, l, h) ;
  @  case Permut_sym{L1,L2}: 
  @    \forall int a[], integer l h; 
  @      Permut{L1,L2}(a, l, h) ==> Permut{L2,L1}(a, l, h) ;
  @  case Permut_trans{L1,L2,L3}: 
  @    \forall int a[], integer l h; 
  @      Permut{L1,L2}(a, l, h) && Permut{L2,L3}(a, l, h) ==> 
  @        Permut{L1,L3}(a, l, h) ;
  @  case Permut_swap{L1,L2}: 
  @    \forall int a[], integer l h i j; 
  @       l <= i <= h && l <= j <= h && Swap{L1,L2}(a, i, j) ==> 
  @     Permut{L1,L2}(a, l, h) ;
  @ }
  @*/

class SelectionSort {

    /*@ requires t != null && 
      @    0 <= i < t.length && 0 <= j < t.length;
      @ assigns t[i],t[j];
      @ ensures Swap{Old,Here}(t,i,j);
      @*/
    void swap(int t[], int i, int j) {
	int tmp = t[i];
	t[i] = t[j];
	t[j] = tmp;
    }
    
    /*@ requires t != null;
      @ behavior sorted:
      @   ensures Sorted(t,0,t.length);
      @ behavior permutation:
      @   ensures Permut{Old,Here}(t,0,t.length-1);
      @*/
    void sort(int t[]) {
	int i,j;
	int mi,mv;
	/*@ loop_invariant 0 <= i;
	  @ for sorted: 
	  @  loop_invariant Sorted(t,0,i) && 
	  @   (\forall integer k1 k2 ; 
	  @      0 <= k1 < i <= k2 < t.length ==> t[k1] <= t[k2]) ;
	  @ for permutation:
	  @   loop_invariant Permut{Pre,Here}(t,0,t.length-1);
	  @ loop_variant t.length - i;
	  @*/
	for (i=0; i<t.length-1; i++) {
	    // look for minimum value among t[i..n-1]
	    mv = t[i]; mi = i;
	    /*@ loop_invariant i < j && i <= mi < t.length;
	      @ for sorted:
	      @  loop_invariant mv == t[mi] &&
	      @   (\forall integer k; i <= k < j ==> t[k] >= mv);
	      @ // useless ! for permutation:
	      @ // loop_invariant Permut{Pre,Here}(t,0,t.length-1);
	      @ loop_variant t.length - j;
	      @*/
	    for (j=i+1; j < t.length; j++) {
		if (t[j] < mv) { 
		    mi = j ; mv = t[j]; 
		}
	    }
	    Before: 
	    swap(t,i,mi);
	    //@ for permutation: assert Permut{Before,Here}(t,0,t.length-1);
	}
    }

}



/*
Local Variables:
compile-command: "make SelectionSort.why3ml"
End:
*/


========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function SelectionSort_swap for method SelectionSort.swap
Generating JC function SelectionSort_sort for method SelectionSort.sort
Generating JC function cons_SelectionSort for constructor SelectionSort
Generating JC function Object_registerNatives for method Object.registerNatives
Generating JC function Object_hashCode for method Object.hashCode
Generating JC function Object_equals for method Object.equals
Generating JC function Object_clone for method Object.clone
Generating JC function Object_toString for method Object.toString
Generating JC function Object_notify for method Object.notify
Generating JC function Object_notifyAll for method Object.notifyAll
Generating JC function Object_wait_long for method Object.wait
Generating JC function Object_wait_long_int for method Object.wait
Generating JC function Object_wait for method Object.wait
Generating JC function Object_finalize for method Object.finalize
Generating JC function cons_Object for constructor Object
Done.
========== file tests/java/SelectionSort.jc ==========
# InvariantPolicy = Arguments
# TerminationPolicy = always
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

predicate Non_null_intM{Here}(intM[0..] x) =
(\offset_max(x) >= -1)

predicate Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) >= 0)

String[0..] any_string()
;

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Exception = Object with {
}

tag SelectionSort = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  int32 intP;
}

boolean non_null_intM(! intM[0..] x)
behavior default:
  assigns \nothing;
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(! intM[0..-1] x)
behavior default:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && (\result == (\offset_max(x) + 1))));
;

boolean non_null_Object(! Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

predicate Sorted{L}(intM[0..] a, integer l, integer h) =
(\forall integer i;
  (\forall integer j;
    ((((l <= i) && (i <= j)) && (j < h)) ==> ((a + i).intP <= (a + j).intP))))

predicate Swap{L1, L2}(intM[0..] a_0, integer i_0, integer j_0) =
(((\at((a_0 + i_0).intP,L1) == \at((a_0 + j_0).intP,L2)) &&
   (\at((a_0 + j_0).intP,L1) == \at((a_0 + i_0).intP,L2))) &&
  (\forall integer k;
    (((k != i_0) && (k != j_0)) ==>
      (\at((a_0 + k).intP,L1) == \at((a_0 + k).intP,L2)))))

predicate Permut{L1, L2}(intM[0..] a_1, integer l_0, integer h_0) {
case Permut_refl{L}: (\forall intM[0..] a_2;
                       (\forall integer l_1;
                         (\forall integer h_1;
                           Permut{L, L}(a_2, l_1, h_1))));
  
  case Permut_sym{L1, L2}: (\forall intM[0..] a_3;
                             (\forall integer l_2;
                               (\forall integer h_2;
                                 (Permut{L1,
                                   L2}(a_3, l_2, h_2) ==>
                                   Permut{L2,
                                   L1}(a_3, l_2, h_2)))));
  
  case Permut_trans{L1, L2, L3}: (\forall intM[0..] a_4;
                                   (\forall integer l_3;
                                     (\forall integer h_3;
                                       ((Permut{L1,
                                          L2}(a_4, l_3, h_3) &&
                                          Permut{L2,
                                          L3}(a_4, l_3, h_3)) ==>
                                         Permut{L1,
                                         L3}(a_4, l_3, h_3)))));
  
  case Permut_swap{L1, L2}: (\forall intM[0..] a_5;
                              (\forall integer l_4;
                                (\forall integer h_4;
                                  (\forall integer i_1;
                                    (\forall integer j_1;
                                      (((((l_4 <= i_1) && (i_1 <= h_4)) &&
                                          ((l_4 <= j_1) && (j_1 <= h_4))) &&
                                         Swap{L1,
                                         L2}(a_5, i_1, j_1)) ==>
                                        Permut{L1,
                                        L2}(a_5, l_4, h_4)))))));
  
}

exception Throwable of Throwable[0..]

exception Exception of Exception[0..]

unit SelectionSort_swap(SelectionSort[0] this_2, intM[0..] t, int32 i_2,
                        int32 j_2)
  requires (K_10 : ((K_9 : ((K_8 : Non_null_intM(t)) &&
                             (K_7 : ((K_6 : (0 <= i_2)) &&
                                      (K_5 : (i_2 < (\offset_max(t) + 1))))))) &&
                     (K_4 : ((K_3 : (0 <= j_2)) &&
                              (K_2 : (j_2 < (\offset_max(t) + 1)))))));
behavior default:
  assigns (t + [i_2..i_2]).intP,
  (t + [j_2..j_2]).intP;
  ensures (K_1 : Swap{Old, Here}(t, i_2, j_2));
{  
   {  
      (var int32 tmp = (K_14 : (t + i_2).intP));
      
      {  (K_12 : ((t + i_2).intP = (K_11 : (t + j_2).intP)));
         (K_13 : ((t + j_2).intP = tmp))
      }
   }
}

unit SelectionSort_sort(SelectionSort[0] this_0, intM[0..] t_0)
  requires (K_17 : Non_null_intM(t_0));
behavior sorted:
  ensures (K_15 : Sorted{Here}(t_0, 0, (\offset_max(t_0) + 1)));
behavior permutation:
  ensures (K_16 : Permut{Old, Here}(t_0, 0, ((\offset_max(t_0) + 1) - 1)));
{  
   {  
      (var int32 i_3);
      
      {  
         (var int32 j_3);
         
         {  
            (var int32 mi);
            
            {  
               (var int32 mv);
               
               loop 
               behavior default:
                 invariant (K_18 : (0 <= i_3));
               behavior sorted:
                 invariant (K_21 : ((K_20 : Sorted{Here}(t_0, 0, i_3)) &&
                                     (K_19 : (\forall integer k1;
                                               (\forall integer k2;
                                                 (((((0 <= k1) && (k1 < i_3)) &&
                                                     (i_3 <= k2)) &&
                                                    (k2 <
                                                      (\offset_max(t_0) + 1))) ==>
                                                   ((t_0 + k1).intP <=
                                                     (t_0 + k2).intP)))))));
               behavior permutation:
                 invariant (K_22 : Permut{Pre,
                           Here}(t_0, 0, ((\offset_max(t_0) + 1) - 1)));
               
               variant (K_23 : ((\offset_max(t_0) + 1) - i_3));
               for ((i_3 = 0) ; (K_47 : (i_3 <
                                          (K_46 : (((K_45 : java_array_length_intM(
                                                    t_0)) -
                                                     1) :> int32)))) ; 
               (K_44 : (i_3 ++)))
               {  
                  {  (mv = (K_24 : (t_0 + i_3).intP));
                     (mi = i_3);
                     
                     loop 
                     behavior default:
                       invariant (K_29 : ((K_28 : (i_3 < j_3)) &&
                                           (K_27 : ((K_26 : (i_3 <= mi)) &&
                                                     (K_25 : (mi <
                                                               (\offset_max(t_0) +
                                                                 1)))))));
                     behavior sorted:
                       invariant (K_32 : ((K_31 : (mv == (t_0 + mi).intP)) &&
                                           (K_30 : (\forall integer k_0;
                                                     (((i_3 <= k_0) &&
                                                        (k_0 < j_3)) ==>
                                                       ((t_0 + k_0).intP >=
                                                         mv))))));
                     
                     variant (K_33 : ((\offset_max(t_0) + 1) - j_3));
                     for ((j_3 = (K_40 : ((i_3 + 1) :> int32))) ; (K_39 : 
                                                                  (j_3 <
                                                                    (K_38 : java_array_length_intM(
                                                                    t_0)))) ; 
                     (K_37 : (j_3 ++)))
                     {  (if (K_36 : ((K_35 : (t_0 + j_3).intP) < mv)) then 
                        {  (mi = j_3);
                           (mv = (K_34 : (t_0 + j_3).intP))
                        } else ())
                     };
                     (Before : 
                     {  (K_41 : SelectionSort_swap(this_0, t_0, i_3, mi));
                        (K_43 : 
                        (assert for permutation: (K_42 : Permut{Before,
                                                 Here}(t_0, 0,
                                                       ((\offset_max(t_0) +
                                                          1) -
                                                         1)))))
                     })
                  }
               }
            }
         }
      }
   }
}

unit cons_SelectionSort(! SelectionSort[0] this_3){()}

unit Object_registerNatives()
;

int32 Object_hashCode(Object[0] this_4)
;

boolean Object_equals(Object[0] this_5, Object[0..] obj)
;

Object[0..] Object_clone(Object[0] this_6)
;

String[0..] Object_toString(Object[0] this_7)
;

unit Object_notify(Object[0] this_8)
;

unit Object_notifyAll(Object[0] this_9)
;

unit Object_wait_long(Object[0] this_10, long timeout)
;

unit Object_wait_long_int(Object[0] this_11, long timeout_0, int32 nanos)
;

unit Object_wait(Object[0] this_12)
;

unit Object_finalize(Object[0] this_13)
;

unit cons_Object(! Object[0] this_14){()}

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/SelectionSort.jloc tests/java/SelectionSort.jc && make -f tests/java/SelectionSort.makefile gui"
End:
*/
========== file tests/java/SelectionSort.jloc ==========
[K_10]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 80

[K_11]
file = "HOME/tests/java/SelectionSort.java"
line = 68
begin = 8
end = 12

[K_12]
file = "HOME/tests/java/SelectionSort.java"
line = 68
begin = 1
end = 12

[K_13]
file = "HOME/tests/java/SelectionSort.java"
line = 69
begin = 1
end = 11

[K_14]
file = "HOME/tests/java/SelectionSort.java"
line = 67
begin = 11
end = 15

[K_15]
file = "HOME/tests/java/SelectionSort.java"
line = 74
begin = 18
end = 38

[K_16]
file = "HOME/tests/java/SelectionSort.java"
line = 76
begin = 18
end = 50

[K_17]
file = "HOME/tests/java/SelectionSort.java"
line = 72
begin = 17
end = 26

[K_18]
file = "HOME/tests/java/SelectionSort.java"
line = 81
begin = 20
end = 26

[K_19]
file = "HOME/tests/java/SelectionSort.java"
line = 84
begin = 8
end = 90

[K_20]
file = "HOME/tests/java/SelectionSort.java"
line = 83
begin = 21
end = 34

[K_21]
file = "HOME/tests/java/SelectionSort.java"
line = 83
begin = 21
end = 130

[K_22]
file = "HOME/tests/java/SelectionSort.java"
line = 87
begin = 22
end = 54

[K_23]
file = "HOME/tests/java/SelectionSort.java"
line = 88
begin = 18
end = 30

[K_24]
file = "HOME/tests/java/SelectionSort.java"
line = 92
begin = 10
end = 14

[K_1]
file = "HOME/tests/java/SelectionSort.java"
line = 64
begin = 16
end = 37

[K_25]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 38
end = 51

[K_2]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 37
end = 49

[K_26]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 40

[K_3]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 32
end = 38

[Object_equals]
name = "Method equals"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[K_27]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 51

[K_4]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 32
end = 49

[K_28]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 29

[K_5]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 16
end = 28

[K_29]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 51

[K_6]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 11
end = 17

[K_7]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 11
end = 28

[K_8]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 26

[K_9]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 59

[Object_notify]
name = "Method notify"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[cons_SelectionSort]
name = "Constructor of class SelectionSort"
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Object]
name = "Constructor of class Object"
file = "HOME/"
line = 0
begin = -1
end = -1

[SelectionSort_swap]
name = "Method swap"
file = "HOME/tests/java/SelectionSort.java"
line = 66
begin = 9
end = 13

[K_30]
file = "HOME/tests/java/SelectionSort.java"
line = 96
begin = 12
end = 56

[K_31]
file = "HOME/tests/java/SelectionSort.java"
line = 95
begin = 25
end = 36

[K_32]
file = "HOME/tests/java/SelectionSort.java"
line = 95
begin = 25
end = 97

[K_33]
file = "HOME/tests/java/SelectionSort.java"
line = 99
begin = 22
end = 34

[K_34]
file = "HOME/tests/java/SelectionSort.java"
line = 103
begin = 20
end = 24

[K_35]
file = "HOME/tests/java/SelectionSort.java"
line = 102
begin = 6
end = 10

[K_36]
file = "HOME/tests/java/SelectionSort.java"
line = 102
begin = 6
end = 15

[K_37]
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 31
end = 34

[K_38]
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[Object_wait_long_int]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[K_39]
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 17
end = 29

[Object_wait_long]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[Object_hashCode]
name = "Method hashCode"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[Object_notifyAll]
name = "Method notifyAll"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[K_40]
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 12
end = 15

[K_41]
file = "HOME/tests/java/SelectionSort.java"
line = 107
begin = 5
end = 17

[K_42]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[K_43]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[K_44]
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 25
end = 28

[Object_toString]
name = "Method toString"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[K_45]
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[K_46]
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 23

[K_47]
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 11
end = 23

[Object_registerNatives]
name = "Method registerNatives"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[Object_clone]
name = "Method clone"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[Object_wait]
name = "Method wait"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[SelectionSort_sort]
name = "Method sort"
file = "HOME/tests/java/SelectionSort.java"
line = 78
begin = 9
end = 13

[Object_finalize]
name = "Method finalize"
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

========== jessie execution ==========
Generating Why function SelectionSort_swap
Generating Why function SelectionSort_sort
Generating Why function cons_SelectionSort
Generating Why function cons_Object
========== file tests/java/SelectionSort.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs SelectionSort.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs SelectionSort.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3LIB ?=$(WHYLIB)/why3

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/SelectionSort_why.sx

project: why/SelectionSort.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/SelectionSort_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/SelectionSort_why.vo

coq/SelectionSort_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/SelectionSort_why.v: why/SelectionSort.why
	@echo 'why -coq [...] why/SelectionSort.why' && $(WHY) $(JESSIELIBFILES) why/SelectionSort.why && rm -f coq/jessie_why.v

coq-goals: goals coq/SelectionSort_ctx_why.vo
	for f in why/*_po*.why; do make -f SelectionSort.makefile coq/`basename $$f .why`_why.v ; done

coq/SelectionSort_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/SelectionSort_ctx_why.v: why/SelectionSort_ctx.why
	@echo 'why -coq [...] why/SelectionSort_ctx.why' && $(WHY) why/SelectionSort_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export SelectionSort_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/SelectionSort_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/SelectionSort_ctx_why.vo

pvs: pvs/SelectionSort_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/SelectionSort_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/SelectionSort_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/SelectionSort_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/SelectionSort_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/SelectionSort_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/SelectionSort_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/SelectionSort_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/SelectionSort_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/SelectionSort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/SelectionSort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/SelectionSort_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/SelectionSort_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/SelectionSort_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/SelectionSort_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: SelectionSort.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/SelectionSort_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/SelectionSort_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: SelectionSort.mlw
	@echo 'why3ml [...] $<' && why3ide -I $(JESSIE3LIB) $<

-include SelectionSort.depend

depend: coq/SelectionSort_why.v
	-$(COQDEP) -I coq coq/SelectionSort*_why.v > SelectionSort.depend

clean:
	rm -f coq/*.vo

========== file tests/java/SelectionSort.loc ==========
[JC_103]
file = "HOME/tests/java/SelectionSort.java"
line = 81
begin = 20
end = 26

[JC_104]
file = "HOME/"
line = 0
begin = -1
end = -1

[SelectionSort_sort_ensures_sorted]
name = "Method sort"
behavior = "Behavior `sorted'"
file = "HOME/tests/java/SelectionSort.java"
line = 78
begin = 9
end = 13

[JC_105]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_106]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_40]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 11
end = 17

[JC_107]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[JC_41]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 16
end = 28

[JC_108]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 29

[JC_42]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 32
end = 38

[JC_220]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_109]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 40

[JC_43]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 37
end = 49

[JC_221]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[JC_44]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 80

[JC_222]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_45]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_223]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_46]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 26

[JC_224]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_47]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 11
end = 17

[JC_225]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 16
end = 28

[JC_226]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_49]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 32
end = 38

[JC_227]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_228]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_229]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 386
begin = 22
end = 26

[JC_110]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 38
end = 51

[JC_111]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 51

[JC_112]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_113]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_114]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_115]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[JC_116]
kind = UserCall
file = "HOME/tests/java/SelectionSort.jc"
line = 218
begin = 32
end = 72

[JC_50]
file = "HOME/tests/java/SelectionSort.java"
line = 62
begin = 37
end = 49

[JC_117]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[JC_51]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 80

[JC_118]
file = "HOME/tests/java/SelectionSort.java"
line = 83
begin = 21
end = 34

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_230]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_119]
file = "HOME/tests/java/SelectionSort.java"
line = 84
begin = 8
end = 90

[JC_53]
file = "HOME/tests/java/SelectionSort.java"
line = 64
begin = 16
end = 37

[JC_231]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_54]
file = "HOME/tests/java/SelectionSort.java"
line = 66
begin = 9
end = 13

[JC_232]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_55]
file = "HOME/tests/java/SelectionSort.jc"
line = 131
begin = 9
end = 16

[JC_233]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_56]
file = "HOME/tests/java/SelectionSort.java"
line = 64
begin = 16
end = 37

[JC_234]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_57]
file = "HOME/tests/java/SelectionSort.java"
line = 66
begin = 9
end = 13

[JC_235]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[JC_58]
file = "HOME/tests/java/SelectionSort.jc"
line = 131
begin = 9
end = 16

[JC_236]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_59]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_237]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 430
begin = 22
end = 26

[JC_238]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_239]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_120]
file = "HOME/tests/java/SelectionSort.java"
line = 83
begin = 21
end = 130

[SelectionSort_sort_ensures_default]
name = "Method sort"
behavior = "default behavior"
file = "HOME/tests/java/SelectionSort.java"
line = 78
begin = 9
end = 13

[JC_121]
file = "HOME/tests/java/SelectionSort.java"
line = 81
begin = 20
end = 26

[JC_122]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_123]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_124]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_125]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[JC_126]
file = "HOME/tests/java/SelectionSort.java"
line = 95
begin = 25
end = 36

[JC_60]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_127]
file = "HOME/tests/java/SelectionSort.java"
line = 96
begin = 12
end = 56

[JC_61]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.java"
line = 67
begin = 11
end = 15

[JC_128]
file = "HOME/tests/java/SelectionSort.java"
line = 95
begin = 25
end = 97

[JC_62]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.java"
line = 68
begin = 8
end = 12

[JC_240]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_129]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 29

[JC_63]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.jc"
line = 139
begin = 18
end = 58

[JC_241]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_64]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.jc"
line = 140
begin = 18
end = 38

[JC_242]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
file = "HOME/tests/java/SelectionSort.java"
line = 72
begin = 17
end = 26

[JC_243]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_66]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_244]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/java/SelectionSort.java"
line = 72
begin = 17
end = 26

[JC_245]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 481
begin = 19
end = 27

[JC_68]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_246]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_69]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_247]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_248]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_249]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_130]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 40

[JC_131]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 38
end = 51

[JC_132]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 51

[JC_133]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_134]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_135]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_136]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[JC_70]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_137]
kind = UserCall
file = "HOME/tests/java/SelectionSort.jc"
line = 218
begin = 32
end = 72

[JC_71]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_138]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[JC_72]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_250]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_139]
file = "HOME/tests/java/SelectionSort.java"
line = 87
begin = 22
end = 54

[JC_73]
file = "HOME/tests/java/SelectionSort.java"
line = 74
begin = 18
end = 38

[JC_251]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_74]
file = "HOME/tests/java/SelectionSort.java"
line = 74
begin = 18
end = 38

[JC_252]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
file = "HOME/tests/java/SelectionSort.java"
line = 76
begin = 18
end = 50

[JC_253]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_76]
file = "HOME/tests/java/SelectionSort.java"
line = 76
begin = 18
end = 50

[JC_254]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
file = "HOME/tests/java/SelectionSort.java"
line = 81
begin = 20
end = 26

[JC_255]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_78]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_256]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_79]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_257]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_258]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_140]
file = "HOME/tests/java/SelectionSort.java"
line = 81
begin = 20
end = 26

[JC_141]
file = "HOME/"
line = 0
begin = -1
end = -1

[SelectionSort_sort_ensures_permutation]
name = "Method sort"
behavior = "Behavior `permutation'"
file = "HOME/tests/java/SelectionSort.java"
line = 78
begin = 9
end = 13

[JC_142]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_143]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_144]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[cons_SelectionSort_ensures_default]
name = "Constructor of class SelectionSort"
behavior = "default behavior"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_145]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 29

[cons_Object_safety]
name = "Constructor of class Object"
behavior = "Safety"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_146]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 40

[JC_80]
file = "HOME/tests/java/SelectionSort.jc"
line = 164
begin = 15
end = 3584

[JC_147]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 38
end = 51

[JC_81]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[JC_148]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 51

[SelectionSort_swap_ensures_default]
name = "Method swap"
behavior = "default behavior"
file = "HOME/tests/java/SelectionSort.java"
line = 66
begin = 9
end = 13

[JC_82]
kind = IndexBounds
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 21

[JC_149]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
kind = ArithOverflow
file = "HOME/tests/java/SelectionSort.java"
line = 90
begin = 13
end = 23

[JC_84]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.java"
line = 92
begin = 10
end = 14

[JC_85]
kind = ArithOverflow
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 12
end = 15

[JC_86]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 29

[JC_87]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 33
end = 40

[JC_88]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 38
end = 51

[JC_1]
file = "HOME/tests/java/SelectionSort.jc"
line = 23
begin = 12
end = 22

[JC_89]
file = "HOME/tests/java/SelectionSort.java"
line = 93
begin = 24
end = 51

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/SelectionSort.jc"
line = 23
begin = 12
end = 22

[cons_SelectionSort_safety]
name = "Constructor of class SelectionSort"
behavior = "Safety"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_150]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_151]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_152]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[JC_9]
file = "HOME/tests/java/SelectionSort.jc"
line = 52
begin = 8
end = 21

[JC_153]
kind = UserCall
file = "HOME/tests/java/SelectionSort.jc"
line = 218
begin = 32
end = 72

[JC_154]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[JC_155]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_156]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_90]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_157]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_91]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_158]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_92]
file = "HOME/tests/java/SelectionSort.jc"
line = 191
begin = 21
end = 1600

[JC_159]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
kind = UserCall
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[JC_94]
kind = IndexBounds
file = "HOME/tests/java/SelectionSort.java"
line = 101
begin = 21
end = 29

[JC_95]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.java"
line = 102
begin = 6
end = 10

[JC_96]
kind = PointerDeref
file = "HOME/tests/java/SelectionSort.java"
line = 103
begin = 20
end = 24

[JC_97]
kind = ArithOverflow
file = "HOME/tests/java/SelectionSort.jc"
line = 211
begin = 30
end = 36

[JC_98]
file = "HOME/tests/java/SelectionSort.java"
line = 99
begin = 22
end = 34

[JC_99]
kind = UserCall
file = "HOME/tests/java/SelectionSort.jc"
line = 218
begin = 32
end = 72

[JC_160]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_161]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_162]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_163]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_164]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_165]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 22
begin = 31
end = 46

[JC_166]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_167]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_168]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_169]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_170]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_171]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_172]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_173]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 74
begin = 22
end = 30

[JC_174]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_175]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_176]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_177]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_178]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_179]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/java/SelectionSort.jc"
line = 52
begin = 8
end = 21

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/SelectionSort.jc"
line = 55
begin = 11
end = 66

[JC_14]
file = "HOME/tests/java/SelectionSort.jc"
line = 54
begin = 10
end = 18

[JC_15]
file = "HOME/tests/java/SelectionSort.jc"
line = 55
begin = 11
end = 66

[JC_16]
file = "HOME/tests/java/SelectionSort.jc"
line = 54
begin = 10
end = 18

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_180]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_181]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 122
begin = 19
end = 25

[JC_19]
file = "HOME/tests/java/SelectionSort.jc"
line = 58
begin = 8
end = 30

[JC_182]
file = "HOME/"
line = 0
begin = -1
end = -1

[SelectionSort_swap_safety]
name = "Method swap"
behavior = "Safety"
file = "HOME/tests/java/SelectionSort.java"
line = 66
begin = 9
end = 13

[JC_183]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_184]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_185]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_186]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_187]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_188]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_189]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 184
begin = 28
end = 33

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
file = "HOME/tests/java/SelectionSort.jc"
line = 58
begin = 8
end = 30

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Object_ensures_default]
name = "Constructor of class Object"
behavior = "default behavior"
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_200]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/java/SelectionSort.jc"
line = 61
begin = 11
end = 103

[JC_201]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_24]
file = "HOME/tests/java/SelectionSort.jc"
line = 60
begin = 10
end = 18

[JC_202]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/tests/java/SelectionSort.jc"
line = 61
begin = 11
end = 103

[JC_203]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[JC_26]
file = "HOME/tests/java/SelectionSort.jc"
line = 60
begin = 10
end = 18

[JC_204]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_205]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 243
begin = 29
end = 35

[JC_190]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_206]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_191]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/tests/java/SelectionSort.jc"
line = 65
begin = 8
end = 23

[JC_207]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_192]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_208]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_193]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_209]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_194]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_195]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[JC_196]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_197]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 207
begin = 18
end = 26

[JC_198]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_199]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
file = "HOME/tests/java/SelectionSort.jc"
line = 65
begin = 8
end = 23

[JC_32]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_210]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_33]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_211]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_212]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_213]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 267
begin = 29
end = 38

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_214]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_37]
file = "HOME/tests/java/SelectionSort.jc"
line = 67
begin = 11
end = 65

[JC_215]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
file = "HOME/tests/java/SelectionSort.jc"
line = 67
begin = 11
end = 65

[JC_216]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_39]
file = "HOME/tests/java/SelectionSort.java"
line = 61
begin = 17
end = 26

[JC_217]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_218]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_219]
file = "HOME/lib/java_api/java/lang/Object.java"
line = 333
begin = 29
end = 33

[SelectionSort_sort_safety]
name = "Method sort"
behavior = "Safety"
file = "HOME/tests/java/SelectionSort.java"
line = 78
begin = 9
end = 13

[JC_100]
file = "HOME/tests/java/SelectionSort.java"
line = 108
begin = 33
end = 68

[JC_101]
kind = ArithOverflow
file = "HOME/tests/java/SelectionSort.jc"
line = 186
begin = 24
end = 30

[JC_102]
file = "HOME/tests/java/SelectionSort.java"
line = 88
begin = 18
end = 30

========== file tests/java/why/SelectionSort.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

logic Exception_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Exception_parenttag_Object : parenttag(Exception_tag, Object_tag)

predicate Non_null_Object(x_1:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x_1), (0))

predicate Non_null_intM(x_0:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x_0), neg_int((1)))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic integer_of_int32: int32 -> int

predicate Swap(a_0:Object pointer, i_0:int, j_0:int,
 intM_intP_at_L2:(Object, int32) memory,
 intM_intP_at_L1:(Object, int32) memory) =
 ((integer_of_int32(select(intM_intP_at_L1, shift(a_0, i_0))) = integer_of_int32(
                                                                select(intM_intP_at_L2,
                                                                shift(a_0,
                                                                j_0))))
 and ((integer_of_int32(select(intM_intP_at_L1, shift(a_0, j_0))) = integer_of_int32(
                                                                    select(intM_intP_at_L2,
                                                                    shift(a_0,
                                                                    i_0))))
     and (forall k:int.
          (((k <> i_0) and (k <> j_0)) ->
           (integer_of_int32(select(intM_intP_at_L1, shift(a_0, k))) = 
           integer_of_int32(select(intM_intP_at_L2, shift(a_0, k))))))))

inductive Permut: Object pointer, int, int, (Object, int32) memory,
                  (Object, int32) memory -> prop =
 | Permut_refl: (forall intM_intP_at_L:(Object, int32) memory.
                 (forall a_2:Object pointer.
                  (forall l_1:int.
                   (forall h_1:int.
                    Permut(a_2, l_1, h_1, intM_intP_at_L, intM_intP_at_L)))))
 | Permut_sym: (forall intM_intP_at_L2:(Object, int32) memory.
                (forall intM_intP_at_L1:(Object, int32) memory.
                 (forall a_3:Object pointer.
                  (forall l_2:int.
                   (forall h_2:int.
                    (Permut(a_3, l_2, h_2, intM_intP_at_L2, intM_intP_at_L1) ->
                     Permut(a_3, l_2, h_2, intM_intP_at_L1, intM_intP_at_L2)))))))
 | Permut_trans: (forall intM_intP_at_L3:(Object, int32) memory.
                  (forall intM_intP_at_L2:(Object, int32) memory.
                   (forall intM_intP_at_L1:(Object, int32) memory.
                    (forall a_4:Object pointer.
                     (forall l_3:int.
                      (forall h_3:int.
                       ((Permut(a_4, l_3, h_3, intM_intP_at_L2,
                         intM_intP_at_L1)
                        and Permut(a_4, l_3, h_3, intM_intP_at_L3,
                            intM_intP_at_L2)) ->
                        Permut(a_4, l_3, h_3, intM_intP_at_L3,
                        intM_intP_at_L1))))))))
 | Permut_swap: (forall intM_intP_at_L2:(Object, int32) memory.
                 (forall intM_intP_at_L1:(Object, int32) memory.
                  (forall a_5:Object pointer.
                   (forall l_4:int.
                    (forall h_4:int.
                     (forall i_1:int.
                      (forall j_1:int.
                       ((le_int(l_4, i_1)
                        and (le_int(i_1, h_4)
                            and (le_int(l_4, j_1)
                                and (le_int(j_1, h_4)
                                    and Swap(a_5, i_1, j_1, intM_intP_at_L2,
                                        intM_intP_at_L1))))) ->
                        Permut(a_5, l_4, h_4, intM_intP_at_L2,
                        intM_intP_at_L1)))))))))
 
logic SelectionSort_tag:  -> Object tag_id

axiom SelectionSort_parenttag_Object :
 parenttag(SelectionSort_tag, Object_tag)

predicate Sorted(a:Object pointer, l:int, h:int,
 intM_intP_at_L:(Object, int32) memory) =
 (forall i:int.
  (forall j:int.
   ((le_int(l, i) and (le_int(i, j) and lt_int(j, h))) ->
    le_int(integer_of_int32(select(intM_intP_at_L, shift(a, i))),
    integer_of_int32(select(intM_intP_at_L, shift(a, j)))))))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

axiom byte_extensionality :
 (forall x:byte.
  (forall y:byte[eq_int(integer_of_byte(x), integer_of_byte(y))].
   (eq_int(integer_of_byte(x), integer_of_byte(y)) -> (x = y))))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

axiom char_extensionality :
 (forall x:char.
  (forall y:char[eq_int(integer_of_char(x), integer_of_char(y))].
   (eq_int(integer_of_char(x), integer_of_char(y)) -> (x = y))))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

predicate eq_byte(x:byte, y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

predicate eq_char(x:char, y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long, y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short, y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_Exception(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_SelectionSort(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_intM(p:Object pointer, a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer, a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_extensionality :
 (forall x:long.
  (forall y:long[eq_int(integer_of_long(x), integer_of_long(y))].
   (eq_int(integer_of_long(x), integer_of_long(y)) -> (x = y))))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_Exception(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_SelectionSort(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_intM(p:Object pointer, b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer, b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_extensionality :
 (forall x:short.
  (forall y:short[eq_int(integer_of_short(x), integer_of_short(y))].
   (eq_int(integer_of_short(x), integer_of_short(y)) -> (x = y))))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

predicate strict_valid_root_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_SelectionSort(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_intM(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_SelectionSort(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer, a:int, b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer, a:int, b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

exception Exception_exc of Object pointer

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

parameter Object_alloc_table : Object alloc_table ref

parameter Object_clone :
 this_6:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_clone_requires :
 this_6:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_equals :
 this_5:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_equals_requires :
 this_5:Object pointer ->
  obj:Object pointer -> { } bool reads Object_alloc_table { true }

parameter Object_finalize :
 this_13:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_finalize_requires :
 this_13:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_hashCode :
 this_4:Object pointer -> { } int32 reads Object_alloc_table { true }

parameter Object_hashCode_requires :
 this_4:Object pointer -> { } int32 reads Object_alloc_table { true }

parameter Object_notify :
 this_8:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll :
 this_9:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notifyAll_requires :
 this_9:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_notify_requires :
 this_8:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_registerNatives : tt:unit -> { } unit { true }

parameter Object_registerNatives_requires : tt:unit -> { } unit { true }

parameter Object_tag_table : Object tag_table ref

parameter Object_toString :
 this_7:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_toString_requires :
 this_7:Object pointer ->
  { } Object pointer reads Object_alloc_table { true }

parameter Object_wait :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long :
 this_10:Object pointer ->
  timeout:long -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int :
 this_11:Object pointer ->
  timeout_0:long -> nanos:int32 -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_int_requires :
 this_11:Object pointer ->
  timeout_0:long -> nanos:int32 -> { } unit reads Object_alloc_table { true }

parameter Object_wait_long_requires :
 this_10:Object pointer ->
  timeout:long -> { } unit reads Object_alloc_table { true }

parameter Object_wait_requires :
 this_12:Object pointer -> { } unit reads Object_alloc_table { true }

exception Return_label_exc of unit

parameter intM_intP : (Object, int32) memory ref

parameter SelectionSort_sort :
 this_0:Object pointer ->
  t_0:Object pointer ->
   { } unit reads Object_alloc_table,intM_intP writes intM_intP
   { ((JC_76:
      Permut(t_0, (0),
      sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
      intM_intP, intM_intP@))
     and (JC_74:
         Sorted(t_0, (0), add_int(offset_max(Object_alloc_table, t_0), (1)),
         intM_intP))) }

parameter SelectionSort_sort_requires :
 this_0:Object pointer ->
  t_0:Object pointer ->
   { (JC_65: Non_null_intM(t_0, Object_alloc_table))} unit
   reads Object_alloc_table,intM_intP writes intM_intP
   { ((JC_76:
      Permut(t_0, (0),
      sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
      intM_intP, intM_intP@))
     and (JC_74:
         Sorted(t_0, (0), add_int(offset_max(Object_alloc_table, t_0), (1)),
         intM_intP))) }

parameter SelectionSort_swap :
 this_2:Object pointer ->
  t:Object pointer ->
   i_2:int32 ->
    j_2:int32 ->
     { } unit reads Object_alloc_table,intM_intP writes intM_intP
     { (JC_58:
       ((JC_56:
        Swap(t, integer_of_int32(i_2), integer_of_int32(j_2), intM_intP,
        intM_intP@))
       and (JC_57:
           not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
           pset_union(pset_range(pset_singleton(t), integer_of_int32(j_2),
                      integer_of_int32(j_2)),
           pset_range(pset_singleton(t), integer_of_int32(i_2),
           integer_of_int32(i_2))))))) }

parameter SelectionSort_swap_requires :
 this_2:Object pointer ->
  t:Object pointer ->
   i_2:int32 ->
    j_2:int32 ->
     { (JC_44:
       ((JC_39: Non_null_intM(t, Object_alloc_table))
       and ((JC_40: le_int((0), integer_of_int32(i_2)))
           and ((JC_41:
                lt_int(integer_of_int32(i_2),
                add_int(offset_max(Object_alloc_table, t), (1))))
               and ((JC_42: le_int((0), integer_of_int32(j_2)))
                   and (JC_43:
                       lt_int(integer_of_int32(j_2),
                       add_int(offset_max(Object_alloc_table, t), (1)))))))))}
     unit reads Object_alloc_table,intM_intP writes intM_intP
     { (JC_58:
       ((JC_56:
        Swap(t, integer_of_int32(i_2), integer_of_int32(j_2), intM_intP,
        intM_intP@))
       and (JC_57:
           not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
           pset_union(pset_range(pset_singleton(t), integer_of_int32(j_2),
                      integer_of_int32(j_2)),
           pset_range(pset_singleton(t), integer_of_int32(i_2),
           integer_of_int32(i_2))))))) }

exception Throwable_exc of Object pointer

parameter alloc_struct_Exception :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_Exception_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_SelectionSort :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_SelectionSort(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, SelectionSort_tag)))) }

parameter alloc_struct_SelectionSort_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_SelectionSort(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, SelectionSort_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter alloc_struct_intM_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter any_string_0 : tt:unit -> { } Object pointer { true }

parameter any_string_0_requires : tt:unit -> { } Object pointer { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_Object :
 this_14:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Object_requires :
 this_14:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_SelectionSort :
 this_3:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_SelectionSort_requires :
 this_3:Object pointer -> { } unit reads Object_alloc_table { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter java_array_length_intM :
 x_3:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_25:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (result = add_int(offset_max(Object_alloc_table, x_3), (1)))))) }

parameter java_array_length_intM_requires :
 x_3:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_25:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (result = add_int(offset_max(Object_alloc_table, x_3), (1)))))) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_4:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_38:
    (if result then (offset_max(Object_alloc_table, x_4) = (0))
     else (x_4 = null))) }

parameter non_null_Object_requires :
 x_4:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_38:
    (if result then (offset_max(Object_alloc_table, x_4) = (0))
     else (x_4 = null))) }

parameter non_null_intM :
 x_2:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_15:
    (if result then ge_int(offset_max(Object_alloc_table, x_2), neg_int((1)))
     else (x_2 = null))) }

parameter non_null_intM_requires :
 x_2:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_15:
    (if result then ge_int(offset_max(Object_alloc_table, x_2), neg_int((1)))
     else (x_2 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

let SelectionSort_sort_ensures_default =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_0, (0), (0), Object_alloc_table)
        and (JC_67: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let mi = ref (any_int32 void) in
     (let mv = ref (any_int32 void) in
     begin
       (let jessie_<num> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (loop_3:
       while true do
       { invariant (JC_103: le_int((0), integer_of_int32(i_3)))  }
        begin
          [ { } unit { true } ];
         try
          begin
            (if (K_47:
                ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 
                                                    (K_46:
                                                    (safe_int32_of_integer_ 
                                                     ((sub_int (K_45:
                                                               (let jessie_<num> =
                                                               t_0 in
                                                               (JC_107:
                                                               (java_array_length_intM jessie_<num>))))) (1)))))))
            then
             begin
               (let jessie_<num> =
               (mv := (K_24:
                      ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !i_3))))) in
               void); (let jessie_<num> = (mi := !i_3) in void);
              (let jessie_<num> =
              (j_3 := (K_40:
                      (safe_int32_of_integer_ ((add_int (integer_of_int32 !i_3)) (1))))) in
              void);
              try
               (loop_4:
               while true do
               { invariant
                   (JC_111:
                   ((JC_108:
                    lt_int(integer_of_int32(i_3), integer_of_int32(j_3)))
                   and ((JC_109:
                        le_int(integer_of_int32(i_3), integer_of_int32(mi)))
                       and (JC_110:
                           lt_int(integer_of_int32(mi),
                           add_int(offset_max(Object_alloc_table, t_0), (1)))))))
                  }
                begin
                  [ { } unit { true } ];
                 try
                  begin
                    (if (K_39:
                        ((lt_int_ (integer_of_int32 !j_3)) (K_38:
                                                           (let jessie_<num> =
                                                           t_0 in
                                                           (JC_115:
                                                           (java_array_length_intM jessie_<num>))))))
                    then
                     (if (K_36:
                         ((lt_int_ (integer_of_int32 (K_35:
                                                     ((safe_acc_ !intM_intP) 
                                                      ((shift t_0) (integer_of_int32 !j_3)))))) 
                          (integer_of_int32 !mv)))
                     then
                      (let jessie_<num> =
                      begin
                        (let jessie_<num> = (mi := !j_3) in void);
                       (mv := (K_34:
                              ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !j_3)))));
                       !mv end in void) else void)
                    else (raise (Loop_exit_exc void)));
                   (raise (Loop_continue_exc void)) end with
                  Loop_continue_exc jessie_<num> ->
                  (let jessie_<num> =
                  (K_37:
                  (let jessie_<num> = !j_3 in
                  begin
                    (let jessie_<num> =
                    (j_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
                    void); jessie_<num> end)) in void) end end done) with
               Loop_exit_exc jessie_<num> -> void end;
              (Before:
              (K_41:
              (let jessie_<num> = this_0 in
              (let jessie_<num> = t_0 in
              (let jessie_<num> = !i_3 in
              (let jessie_<num> = !mi in
              (JC_116:
              ((((SelectionSort_swap jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))))))
             end else (raise (Loop_exit_exc void)));
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> ->
          (let jessie_<num> =
          (K_44:
          (let jessie_<num> = !i_3 in
          begin
            (let jessie_<num> =
            (i_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
            void); jessie_<num> end)) in void) end end done) with
       Loop_exit_exc jessie_<num> -> void end end)))); (raise Return) end with
   Return -> void end) { (JC_69: true) }

let SelectionSort_sort_ensures_permutation =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_0, (0), (0), Object_alloc_table)
        and (JC_67: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let mi = ref (any_int32 void) in
     (let mv = ref (any_int32 void) in
     begin
       (let jessie_<num> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (loop_7:
       while true do
       { invariant
           (JC_139:
           Permut(t_0, (0),
           sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
           intM_intP, intM_intP@init))  }
        begin
          [ { } unit reads i_3
            { (JC_140: le_int((0), integer_of_int32(i_3))) } ];
         try
          begin
            (if (K_47:
                ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 
                                                    (K_46:
                                                    (safe_int32_of_integer_ 
                                                     ((sub_int (K_45:
                                                               (let jessie_<num> =
                                                               t_0 in
                                                               (JC_144:
                                                               (java_array_length_intM jessie_<num>))))) (1)))))))
            then
             (Before:
             (K_41:
             begin
               (let jessie_<num> =
               (mv := (K_24:
                      ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !i_3))))) in
               void); (let jessie_<num> = (mi := !i_3) in void);
              (let jessie_<num> =
              (j_3 := (K_40:
                      (safe_int32_of_integer_ ((add_int (integer_of_int32 !i_3)) (1))))) in
              void);
              try
               (loop_8:
               while true do
               { invariant (JC_150: true)  }
                begin
                  [ { } unit reads Object_alloc_table,i_3,j_3,mi
                    { (JC_148:
                      ((JC_145:
                       lt_int(integer_of_int32(i_3), integer_of_int32(j_3)))
                      and ((JC_146:
                           le_int(integer_of_int32(i_3),
                           integer_of_int32(mi)))
                          and (JC_147:
                              lt_int(integer_of_int32(mi),
                              add_int(offset_max(Object_alloc_table, t_0),
                              (1))))))) } ];
                 try
                  begin
                    (if (K_39:
                        ((lt_int_ (integer_of_int32 !j_3)) (K_38:
                                                           (let jessie_<num> =
                                                           t_0 in
                                                           (JC_152:
                                                           (java_array_length_intM jessie_<num>))))))
                    then
                     (if (K_36:
                         ((lt_int_ (integer_of_int32 (K_35:
                                                     ((safe_acc_ !intM_intP) 
                                                      ((shift t_0) (integer_of_int32 !j_3)))))) 
                          (integer_of_int32 !mv)))
                     then
                      (let jessie_<num> =
                      begin
                        (let jessie_<num> = (mi := !j_3) in void);
                       (mv := (K_34:
                              ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !j_3)))));
                       !mv end in void) else void)
                    else (raise (Loop_exit_exc void)));
                   (raise (Loop_continue_exc void)) end with
                  Loop_continue_exc jessie_<num> ->
                  (let jessie_<num> =
                  (K_37:
                  (let jessie_<num> = !j_3 in
                  begin
                    (let jessie_<num> =
                    (j_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
                    void); jessie_<num> end)) in void) end end done) with
               Loop_exit_exc jessie_<num> -> void end;
              (let jessie_<num> = this_0 in
              (let jessie_<num> = t_0 in
              (let jessie_<num> = !i_3 in
              (let jessie_<num> = !mi in
              (JC_153:
              ((((SelectionSort_swap jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))));
              (K_43:
              (assert
              { (JC_154:
                Permut(t_0, (0),
                sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                (1)), intM_intP, intM_intP@Before)) }; void)) end))
            else (raise (Loop_exit_exc void)));
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> ->
          (let jessie_<num> =
          (K_44:
          (let jessie_<num> = !i_3 in
          begin
            (let jessie_<num> =
            (i_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
            void); jessie_<num> end)) in void) end end done) with
       Loop_exit_exc jessie_<num> -> void end end)))); (raise Return) end with
   Return -> void end)
  { (JC_75:
    Permut(t_0, (0),
    sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)), (1)),
    intM_intP, intM_intP@)) }

let SelectionSort_sort_ensures_sorted =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_0, (0), (0), Object_alloc_table)
        and (JC_67: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let mi = ref (any_int32 void) in
     (let mv = ref (any_int32 void) in
     begin
       (let jessie_<num> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (loop_5:
       while true do
       { invariant
           (JC_120:
           ((JC_118: Sorted(t_0, (0), integer_of_int32(i_3), intM_intP))
           and (JC_119:
               (forall k1:int.
                (forall k2:int.
                 ((le_int((0), k1)
                  and (lt_int(k1, integer_of_int32(i_3))
                      and (le_int(integer_of_int32(i_3), k2)
                          and lt_int(k2,
                              add_int(offset_max(Object_alloc_table, t_0),
                              (1)))))) ->
                  le_int(integer_of_int32(select(intM_intP, shift(t_0, k1))),
                  integer_of_int32(select(intM_intP, shift(t_0, k2))))))))))
          }
        begin
          [ { } unit reads i_3
            { (JC_121: le_int((0), integer_of_int32(i_3))) } ];
         try
          begin
            (if (K_47:
                ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 
                                                    (K_46:
                                                    (safe_int32_of_integer_ 
                                                     ((sub_int (K_45:
                                                               (let jessie_<num> =
                                                               t_0 in
                                                               (JC_125:
                                                               (java_array_length_intM jessie_<num>))))) (1)))))))
            then
             begin
               (let jessie_<num> =
               (mv := (K_24:
                      ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !i_3))))) in
               void); (let jessie_<num> = (mi := !i_3) in void);
              (let jessie_<num> =
              (j_3 := (K_40:
                      (safe_int32_of_integer_ ((add_int (integer_of_int32 !i_3)) (1))))) in
              void);
              try
               (loop_6:
               while true do
               { invariant
                   (JC_128:
                   ((JC_126:
                    (integer_of_int32(mv) = integer_of_int32(select(intM_intP,
                                                             shift(t_0,
                                                             integer_of_int32(mi))))))
                   and (JC_127:
                       (forall k_0:int.
                        ((le_int(integer_of_int32(i_3), k_0)
                         and lt_int(k_0, integer_of_int32(j_3))) ->
                         ge_int(integer_of_int32(select(intM_intP,
                                                 shift(t_0, k_0))),
                         integer_of_int32(mv)))))))  }
                begin
                  [ { } unit reads Object_alloc_table,i_3,j_3,mi
                    { (JC_132:
                      ((JC_129:
                       lt_int(integer_of_int32(i_3), integer_of_int32(j_3)))
                      and ((JC_130:
                           le_int(integer_of_int32(i_3),
                           integer_of_int32(mi)))
                          and (JC_131:
                              lt_int(integer_of_int32(mi),
                              add_int(offset_max(Object_alloc_table, t_0),
                              (1))))))) } ];
                 try
                  begin
                    (if (K_39:
                        ((lt_int_ (integer_of_int32 !j_3)) (K_38:
                                                           (let jessie_<num> =
                                                           t_0 in
                                                           (JC_136:
                                                           (java_array_length_intM jessie_<num>))))))
                    then
                     (if (K_36:
                         ((lt_int_ (integer_of_int32 (K_35:
                                                     ((safe_acc_ !intM_intP) 
                                                      ((shift t_0) (integer_of_int32 !j_3)))))) 
                          (integer_of_int32 !mv)))
                     then
                      (let jessie_<num> =
                      begin
                        (let jessie_<num> = (mi := !j_3) in void);
                       (mv := (K_34:
                              ((safe_acc_ !intM_intP) ((shift t_0) (integer_of_int32 !j_3)))));
                       !mv end in void) else void)
                    else (raise (Loop_exit_exc void)));
                   (raise (Loop_continue_exc void)) end with
                  Loop_continue_exc jessie_<num> ->
                  (let jessie_<num> =
                  (K_37:
                  (let jessie_<num> = !j_3 in
                  begin
                    (let jessie_<num> =
                    (j_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
                    void); jessie_<num> end)) in void) end end done) with
               Loop_exit_exc jessie_<num> -> void end;
              (Before:
              (K_41:
              (let jessie_<num> = this_0 in
              (let jessie_<num> = t_0 in
              (let jessie_<num> = !i_3 in
              (let jessie_<num> = !mi in
              (JC_137:
              ((((SelectionSort_swap jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))))))
             end else (raise (Loop_exit_exc void)));
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> ->
          (let jessie_<num> =
          (K_44:
          (let jessie_<num> = !i_3 in
          begin
            (let jessie_<num> =
            (i_3 := (safe_int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1)))) in
            void); jessie_<num> end)) in void) end end done) with
       Loop_exit_exc jessie_<num> -> void end end)))); (raise Return) end with
   Return -> void end)
  { (JC_73:
    Sorted(t_0, (0), add_int(offset_max(Object_alloc_table, t_0), (1)),
    intM_intP)) }

let SelectionSort_sort_safety =
 fun (this_0 : Object pointer) (t_0 : Object pointer) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_0, (0), (0), Object_alloc_table)
        and (JC_67: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  try
   begin
     (let i_3 = ref (any_int32 void) in
     (let j_3 = ref (any_int32 void) in
     (let mi = ref (any_int32 void) in
     (let mv = ref (any_int32 void) in
     begin
       (let jessie_<num> = (i_3 := (safe_int32_of_integer_ (0))) in void);
      try
       (loop_1:
       while true do
       { invariant (JC_79: true)
         variant (JC_102 : sub_int(add_int(offset_max(Object_alloc_table,
                                           t_0),
                                   (1)),
                           integer_of_int32(i_3))) }
        begin
          [ { } unit reads i_3
            { (JC_77: le_int((0), integer_of_int32(i_3))) } ];
         try
          begin
            (if (K_47:
                ((lt_int_ (integer_of_int32 !i_3)) (integer_of_int32 
                                                    (K_46:
                                                    (JC_83:
                                                    (int32_of_integer_ 
                                                     ((sub_int (K_45:
                                                               (let jessie_<num> =
                                                               t_0 in
                                                               (JC_82:
                                                               (assert
                                                               { ge_int(
                                                                 offset_max(Object_alloc_table,
                                                                 jessie_<num>),
                                                                 (-1)) };
                                                               (JC_81:
                                                               (java_array_length_intM_requires jessie_<num>))))))) (1))))))))
            then
             begin
               (let jessie_<num> =
               (mv := (K_24:
                      (JC_84:
                      ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) 
                       (integer_of_int32 !i_3))))) in void);
              (let jessie_<num> = (mi := !i_3) in void);
              (let jessie_<num> =
              (j_3 := (K_40:
                      (JC_85:
                      (int32_of_integer_ ((add_int (integer_of_int32 !i_3)) (1)))))) in
              void);
              try
               (loop_2:
               while true do
               { invariant (JC_91: true)
                 variant (JC_98 : sub_int(add_int(offset_max(Object_alloc_table,
                                                  t_0),
                                          (1)),
                                  integer_of_int32(j_3))) }
                begin
                  [ { } unit reads Object_alloc_table,i_3,j_3,mi
                    { (JC_89:
                      ((JC_86:
                       lt_int(integer_of_int32(i_3), integer_of_int32(j_3)))
                      and ((JC_87:
                           le_int(integer_of_int32(i_3),
                           integer_of_int32(mi)))
                          and (JC_88:
                              lt_int(integer_of_int32(mi),
                              add_int(offset_max(Object_alloc_table, t_0),
                              (1))))))) } ];
                 try
                  begin
                    (if (K_39:
                        ((lt_int_ (integer_of_int32 !j_3)) (K_38:
                                                           (let jessie_<num> =
                                                           t_0 in
                                                           (JC_94:
                                                           (assert
                                                           { ge_int(offset_max(Object_alloc_table,
                                                                    jessie_<num>),
                                                             (-1)) };
                                                           (JC_93:
                                                           (java_array_length_intM_requires jessie_<num>))))))))
                    then
                     (if (K_36:
                         ((lt_int_ (integer_of_int32 (K_35:
                                                     (JC_95:
                                                     ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) 
                                                      (integer_of_int32 !j_3)))))) 
                          (integer_of_int32 !mv)))
                     then
                      (let jessie_<num> =
                      begin
                        (let jessie_<num> = (mi := !j_3) in void);
                       (mv := (K_34:
                              (JC_96:
                              ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) 
                               (integer_of_int32 !j_3))))); !mv end in void)
                     else void) else (raise (Loop_exit_exc void)));
                   (raise (Loop_continue_exc void)) end with
                  Loop_continue_exc jessie_<num> ->
                  (let jessie_<num> =
                  (K_37:
                  (let jessie_<num> = !j_3 in
                  begin
                    (let jessie_<num> =
                    (j_3 := (JC_97:
                            (int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1))))) in
                    void); jessie_<num> end)) in void) end end done) with
               Loop_exit_exc jessie_<num> -> void end;
              (Before:
              (K_41:
              (let jessie_<num> = this_0 in
              (let jessie_<num> = t_0 in
              (let jessie_<num> = !i_3 in
              (let jessie_<num> = !mi in
              (JC_99:
              ((((SelectionSort_swap_requires jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))))))
             end else (raise (Loop_exit_exc void)));
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> ->
          (let jessie_<num> =
          (K_44:
          (let jessie_<num> = !i_3 in
          begin
            (let jessie_<num> =
            (i_3 := (JC_101:
                    (int32_of_integer_ ((add_int (integer_of_int32 jessie_<num>)) (1))))) in
            void); jessie_<num> end)) in void) end end done) with
       Loop_exit_exc jessie_<num> -> void end end)))); (raise Return) end with
   Return -> void end) { true }

let SelectionSort_swap_ensures_default =
 fun (this_2 : Object pointer) (t : Object pointer) (i_2 : int32) (j_2 : int32) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_2, (0), (0), Object_alloc_table)
        and (JC_51:
            ((JC_46: Non_null_intM(t, Object_alloc_table))
            and ((JC_47: le_int((0), integer_of_int32(i_2)))
                and ((JC_48:
                     lt_int(integer_of_int32(i_2),
                     add_int(offset_max(Object_alloc_table, t), (1))))
                    and ((JC_49: le_int((0), integer_of_int32(j_2)))
                        and (JC_50:
                            lt_int(integer_of_int32(j_2),
                            add_int(offset_max(Object_alloc_table, t), (1))))))))))) }
  (init:
  try
   begin
     (let jessie_<num> =
     (let tmp =
     (K_14: ((safe_acc_ !intM_intP) ((shift t) (integer_of_int32 i_2)))) in
     (K_12:
     begin
       (let jessie_<num> =
       (let jessie_<num> =
       (K_11: ((safe_acc_ !intM_intP) ((shift t) (integer_of_int32 j_2)))) in
       (let jessie_<num> = t in
       (let jessie_<num> = (integer_of_int32 i_2) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (((safe_upd_ intM_intP) jessie_<num>) jessie_<num>))))) in void);
      (K_13:
      (let jessie_<num> = tmp in
      (let jessie_<num> = t in
      (let jessie_<num> = (integer_of_int32 j_2) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      begin   (((safe_upd_ intM_intP) jessie_<num>) jessie_<num>); jessie_<num> end)))))
     end)) in void); (raise Return) end with Return -> void end)
  { (JC_55:
    ((JC_53:
     Swap(t, integer_of_int32(i_2), integer_of_int32(j_2), intM_intP,
     intM_intP@))
    and (JC_54:
        not_assigns(Object_alloc_table@, intM_intP@, intM_intP,
        pset_union(pset_range(pset_singleton(t), integer_of_int32(j_2),
                   integer_of_int32(j_2)),
        pset_range(pset_singleton(t), integer_of_int32(i_2),
        integer_of_int32(i_2))))))) }

let SelectionSort_swap_safety =
 fun (this_2 : Object pointer) (t : Object pointer) (i_2 : int32) (j_2 : int32) ->
  { (left_valid_struct_intM(t, (0), Object_alloc_table)
    and (valid_struct_SelectionSort(this_2, (0), (0), Object_alloc_table)
        and (JC_51:
            ((JC_46: Non_null_intM(t, Object_alloc_table))
            and ((JC_47: le_int((0), integer_of_int32(i_2)))
                and ((JC_48:
                     lt_int(integer_of_int32(i_2),
                     add_int(offset_max(Object_alloc_table, t), (1))))
                    and ((JC_49: le_int((0), integer_of_int32(j_2)))
                        and (JC_50:
                            lt_int(integer_of_int32(j_2),
                            add_int(offset_max(Object_alloc_table, t), (1))))))))))) }
  (init:
  try
   begin
     (let jessie_<num> =
     (let tmp =
     (K_14:
     (JC_61:
     ((((offset_acc_ !Object_alloc_table) !intM_intP) t) (integer_of_int32 i_2)))) in
     (K_12:
     begin
       (let jessie_<num> =
       (let jessie_<num> =
       (K_11:
       (JC_62:
       ((((offset_acc_ !Object_alloc_table) !intM_intP) t) (integer_of_int32 j_2)))) in
       (let jessie_<num> = t in
       (let jessie_<num> = (integer_of_int32 i_2) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (JC_63:
       (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
       void);
      (K_13:
      (let jessie_<num> = tmp in
      (let jessie_<num> = t in
      (let jessie_<num> = (integer_of_int32 j_2) in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      begin
        (JC_64:
        (((((offset_upd_ !Object_alloc_table) intM_intP) jessie_<num>) jessie_<num>) jessie_<num>));
       jessie_<num> end))))) end)) in void); (raise Return) end with Return ->
   void end) { true }

let cons_Object_ensures_default =
 fun (this_14 : Object pointer) ->
  { valid_struct_Object(this_14, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { (JC_255: true) }

let cons_Object_safety =
 fun (this_14 : Object pointer) ->
  { valid_struct_Object(this_14, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { true }

let cons_SelectionSort_ensures_default =
 fun (this_3 : Object pointer) ->
  { valid_struct_SelectionSort(this_3, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { (JC_159: true) }

let cons_SelectionSort_safety =
 fun (this_3 : Object pointer) ->
  { valid_struct_SelectionSort(this_3, (0), (0), Object_alloc_table) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { true }


========== make project execution ==========
why --project [...] why/SelectionSort.why
========== file tests/java/why/SelectionSort.wpr ==========
<project name="SelectionSort" context="why/SelectionSort_ctx.why">
  <function name="Method swap">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/SelectionSort_po48.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "64" begin = "16" end = "37"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/SelectionSort_po49.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "66" begin = "9" end = "13"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/SelectionSort_po50.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "67" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po51.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "67" begin = "11" end = "15"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po52.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "68" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po53.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "68" begin = "8" end = "12"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    </behavior>
  </function>
  <function name="Method sort">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="default behavior">
    <goal why_file="why/SelectionSort_po1.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "81" begin = "20" end = "26"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po2.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "24" end = "29"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po3.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "33" end = "40"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po4.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "38" end = "51"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po5.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "24" end = "29"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po6.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "33" end = "40"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po7.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "38" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po8.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "24" end = "29"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po9.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "33" end = "40"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po10.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "93" begin = "38" end = "51"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po11.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "81" begin = "20" end = "26"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
    <behavior name="Safety">
    <goal why_file="why/SelectionSort_po25.why">
      <location file = "why/SelectionSort.why" line = "1240" begin = "65" end = "316"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/SelectionSort_po26.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "90" begin = "13" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po27.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "90" begin = "13" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po28.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "92" begin = "10" end = "14"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po29.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "92" begin = "10" end = "14"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po30.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "101" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po31.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "101" begin = "12" end = "15"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po32.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "102" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po33.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "102" begin = "6" end = "10"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/SelectionSort_po34.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "211" begin = "30" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po35.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "211" begin = "30" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po36.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "99" begin = "22" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/SelectionSort_po37.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "99" begin = "22" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/SelectionSort_po38.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "211" begin = "30" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po39.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "211" begin = "30" end = "36"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/SelectionSort_po40.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "99" begin = "22" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/SelectionSort_po41.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "99" begin = "22" end = "34"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/SelectionSort_po42.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "218" begin = "32" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/SelectionSort_po43.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "218" begin = "32" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/SelectionSort_po44.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "218" begin = "32" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/SelectionSort_po45.why">
      <location file = "HOME/tests/java/SelectionSort.jc" line = "218" begin = "32" end = "72"/>
      <explain kind = "Pre"
text = "UserCall"/>
    </goal>
    <goal why_file="why/SelectionSort_po46.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "88" begin = "18" end = "30"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/SelectionSort_po47.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "88" begin = "18" end = "30"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Behavior `sorted'">
    <goal why_file="why/SelectionSort_po15.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "83" begin = "21" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po16.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "84" begin = "8" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po17.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "95" begin = "25" end = "36"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po18.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "96" begin = "12" end = "56"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po19.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "95" begin = "25" end = "36"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po20.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "96" begin = "12" end = "56"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po21.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "96" begin = "12" end = "56"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po22.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "83" begin = "21" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po23.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "84" begin = "8" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/SelectionSort_po24.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "74" begin = "18" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Behavior `permutation'">
    <goal why_file="why/SelectionSort_po12.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "87" begin = "22" end = "54"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/SelectionSort_po13.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "108" begin = "33" end = "68"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/SelectionSort_po14.why">
      <location file = "HOME/tests/java/SelectionSort.java" line = "87" begin = "22" end = "54"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    </behavior>
  </function>
  <function name="Constructor of class SelectionSort">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Constructor of class Object">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
</project>
========== file tests/java/why/SelectionSort_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic Exception_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

predicate Non_null_Object(x_1: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_1) >= 0)

predicate Non_null_intM(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic integer_of_int32 : int32 -> int

predicate Swap(a_0: Object pointer, i_0: int, j_0: int,
  intM_intP_at_L2: (Object, int32) memory, intM_intP_at_L1: (Object,
  int32) memory) =
  ((integer_of_int32(select(intM_intP_at_L1, shift(a_0,
   i_0))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, j_0)))) and
   ((integer_of_int32(select(intM_intP_at_L1, shift(a_0,
    j_0))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, i_0)))) and
    (forall k:int.
      (((k <> i_0) and (k <> j_0)) ->
       (integer_of_int32(select(intM_intP_at_L1, shift(a_0,
       k))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, k))))))))

inductive Permut: Object pointer, int, int, (Object, int32) memory, (Object,
                  int32) memory -> prop =
  | Permut_refl: (forall intM_intP_at_L:(Object, int32) memory.
                   (forall a_2:Object pointer.
                     (forall l_1:int.
                       (forall h_1:int. Permut(a_2, l_1, h_1, intM_intP_at_L,
                         intM_intP_at_L)))))
  | Permut_sym: (forall intM_intP_at_L2:(Object, int32) memory.
                  (forall intM_intP_at_L1:(Object, int32) memory.
                    (forall a_3:Object pointer.
                      (forall l_2:int.
                        (forall h_2:int.
                          (Permut(a_3, l_2, h_2, intM_intP_at_L2,
                           intM_intP_at_L1) -> Permut(a_3, l_2, h_2,
                           intM_intP_at_L1, intM_intP_at_L2)))))))
  | Permut_trans: (forall intM_intP_at_L3:(Object, int32) memory.
                    (forall intM_intP_at_L2:(Object, int32) memory.
                      (forall intM_intP_at_L1:(Object, int32) memory.
                        (forall a_4:Object pointer.
                          (forall l_3:int.
                            (forall h_3:int.
                              ((Permut(a_4, l_3, h_3, intM_intP_at_L2,
                                intM_intP_at_L1) and Permut(a_4, l_3, h_3,
                                intM_intP_at_L3, intM_intP_at_L2)) ->
                               Permut(a_4, l_3, h_3, intM_intP_at_L3,
                               intM_intP_at_L1))))))))
  | Permut_swap: (forall intM_intP_at_L2:(Object, int32) memory.
                   (forall intM_intP_at_L1:(Object, int32) memory.
                     (forall a_5:Object pointer.
                       (forall l_4:int.
                         (forall h_4:int.
                           (forall i_1:int.
                             (forall j_1:int.
                               (((l_4 <= i_1) and
                                 ((i_1 <= h_4) and
                                  ((l_4 <= j_1) and
                                   ((j_1 <= h_4) and Swap(a_5, i_1, j_1,
                                    intM_intP_at_L2, intM_intP_at_L1))))) ->
                                Permut(a_5, l_4, h_4, intM_intP_at_L2,
                                intM_intP_at_L1)))))))))



logic SelectionSort_tag : Object tag_id

axiom SelectionSort_parenttag_Object: parenttag(SelectionSort_tag,
  Object_tag)

predicate Sorted(a: Object pointer, l: int, h: int, intM_intP_at_L: (Object,
  int32) memory) =
  (forall i:int.
    (forall j:int.
      (((l <= i) and ((i <= j) and (j < h))) ->
       (integer_of_int32(select(intM_intP_at_L, shift(a,
       i))) <= integer_of_int32(select(intM_intP_at_L, shift(a, j)))))))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_extensionality:
  (forall x:byte.
    (forall y:byte [(integer_of_byte(x) = integer_of_byte(y))].
      ((integer_of_byte(x) = integer_of_byte(y)) -> (x = y))))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_extensionality:
  (forall x:char.
    (forall y:char [(integer_of_char(x) = integer_of_char(y))].
      ((integer_of_char(x) = integer_of_char(y)) -> (x = y))))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32 [(integer_of_int32(x) = integer_of_int32(y))].
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag : Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_SelectionSort(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_extensionality:
  (forall x:long.
    (forall y:long [(integer_of_long(x) = integer_of_long(y))].
      ((integer_of_long(x) = integer_of_long(y)) -> (x = y))))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_SelectionSort(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_extensionality:
  (forall x:short.
    (forall y:short [(integer_of_short(x) = integer_of_short(y))].
      ((integer_of_short(x) = integer_of_short(y)) -> (x = y))))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_SelectionSort(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) =
  strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_SelectionSort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/SelectionSort_po1.why ==========
goal SelectionSort_sort_ensures_default_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_103": (0 <= integer_of_int32(i_3)))

========== file tests/java/why/SelectionSort_po10.why ==========
goal SelectionSort_sort_ensures_default_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

========== file tests/java/why/SelectionSort_po11.why ==========
goal SelectionSort_sort_ensures_default_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_103": (0 <= integer_of_int32(i_3_1)))

========== file tests/java/why/SelectionSort_po12.why ==========
goal SelectionSort_sort_ensures_permutation_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP, intM_intP))

========== file tests/java/why/SelectionSort_po13.why ==========
goal SelectionSort_sort_ensures_permutation_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  ("JC_140": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_150": true) ->
  ("JC_148":
  (("JC_145": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_146": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_147": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  ("JC_154": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP0))

========== file tests/java/why/SelectionSort_po14.why ==========
goal SelectionSort_sort_ensures_permutation_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  ("JC_140": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_150": true) ->
  ("JC_148":
  (("JC_145": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_146": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_147": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  ("JC_154": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP))

========== file tests/java/why/SelectionSort_po15.why ==========
goal SelectionSort_sort_ensures_sorted_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_120": ("JC_118": Sorted(t_0, 0, integer_of_int32(i_3), intM_intP)))

========== file tests/java/why/SelectionSort_po16.why ==========
goal SelectionSort_sort_ensures_sorted_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < integer_of_int32(i_3)) and
    ((integer_of_int32(i_3) <= k2) and (k2 < (offset_max(Object_alloc_table,
     t_0) + 1))))) ->
  ("JC_120":
  ("JC_119": (integer_of_int32(select(intM_intP, shift(t_0,
  k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))

========== file tests/java/why/SelectionSort_po17.why ==========
goal SelectionSort_sort_ensures_sorted_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_128":
  ("JC_126": (integer_of_int32(mv) = integer_of_int32(select(intM_intP0,
  shift(t_0, integer_of_int32(mi)))))))

========== file tests/java/why/SelectionSort_po18.why ==========
goal SelectionSort_sort_ensures_sorted_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv))))

========== file tests/java/why/SelectionSort_po19.why ==========
goal SelectionSort_sort_ensures_sorted_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_128":
  ("JC_126": (integer_of_int32(mv1) = integer_of_int32(select(intM_intP0,
  shift(t_0, integer_of_int32(mi1)))))))

========== file tests/java/why/SelectionSort_po2.why ==========
goal SelectionSort_sort_ensures_default_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3))))

========== file tests/java/why/SelectionSort_po20.why ==========
goal SelectionSort_sort_ensures_sorted_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_1))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv1))))

========== file tests/java/why/SelectionSort_po21.why ==========
goal SelectionSort_sort_ensures_sorted_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_1))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv0))))

========== file tests/java/why/SelectionSort_po22.why ==========
goal SelectionSort_sort_ensures_sorted_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_120": ("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_1), intM_intP1)))

========== file tests/java/why/SelectionSort_po23.why ==========
goal SelectionSort_sort_ensures_sorted_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < integer_of_int32(i_3_1)) and
    ((integer_of_int32(i_3_1) <= k2) and
     (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_120":
  ("JC_119": (integer_of_int32(select(intM_intP1, shift(t_0,
  k1))) <= integer_of_int32(select(intM_intP1, shift(t_0, k2))))))

========== file tests/java/why/SelectionSort_po24.why ==========
goal SelectionSort_sort_ensures_sorted_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) >= integer_of_int32(result1)) ->
  ("JC_73": Sorted(t_0, 0, (offset_max(Object_alloc_table, t_0) + 1),
  intM_intP0))

========== file tests/java/why/SelectionSort_po25.why ==========
goal SelectionSort_sort_safety_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1))

========== file tests/java/why/SelectionSort_po26.why ==========
goal SelectionSort_sort_safety_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ((-2147483648) <= (result0 - 1))

========== file tests/java/why/SelectionSort_po27.why ==========
goal SelectionSort_sort_safety_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ((result0 - 1) <= 2147483647)

========== file tests/java/why/SelectionSort_po28.why ==========
goal SelectionSort_sort_safety_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0))

========== file tests/java/why/SelectionSort_po29.why ==========
goal SelectionSort_sort_safety_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/SelectionSort_po3.why ==========
goal SelectionSort_sort_ensures_default_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi))))

========== file tests/java/why/SelectionSort_po30.why ==========
goal SelectionSort_sort_safety_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  ((-2147483648) <= (integer_of_int32(i_3_0) + 1))

========== file tests/java/why/SelectionSort_po31.why ==========
goal SelectionSort_sort_safety_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  ((integer_of_int32(i_3_0) + 1) <= 2147483647)

========== file tests/java/why/SelectionSort_po32.why ==========
goal SelectionSort_sort_safety_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0))

========== file tests/java/why/SelectionSort_po33.why ==========
goal SelectionSort_sort_safety_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/SelectionSort_po34.why ==========
goal SelectionSort_sort_safety_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  ((-2147483648) <= (integer_of_int32(j_3_0) + 1))

========== file tests/java/why/SelectionSort_po35.why ==========
goal SelectionSort_sort_safety_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  ((integer_of_int32(j_3_0) + 1) <= 2147483647)

========== file tests/java/why/SelectionSort_po36.why ==========
goal SelectionSort_sort_safety_po_12:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  (0 <= ("JC_98": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(j_3_0))))

========== file tests/java/why/SelectionSort_po37.why ==========
goal SelectionSort_sort_safety_po_13:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  (("JC_98": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(j_3_1))) < ("JC_98":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(j_3_0))))

========== file tests/java/why/SelectionSort_po38.why ==========
goal SelectionSort_sort_safety_po_14:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  ((-2147483648) <= (integer_of_int32(j_3_0) + 1))

========== file tests/java/why/SelectionSort_po39.why ==========
goal SelectionSort_sort_safety_po_15:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  ((integer_of_int32(j_3_0) + 1) <= 2147483647)

========== file tests/java/why/SelectionSort_po4.why ==========
goal SelectionSort_sort_ensures_default_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi) < (offset_max(Object_alloc_table,
  t_0) + 1))))

========== file tests/java/why/SelectionSort_po40.why ==========
goal SelectionSort_sort_safety_po_16:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  (0 <= ("JC_98": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(j_3_0))))

========== file tests/java/why/SelectionSort_po41.why ==========
goal SelectionSort_sort_safety_po_17:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  (("JC_98": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(j_3_1))) < ("JC_98":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(j_3_0))))

========== file tests/java/why/SelectionSort_po42.why ==========
goal SelectionSort_sort_safety_po_18:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44": ("JC_39": Non_null_intM(t_0, Object_alloc_table)))

========== file tests/java/why/SelectionSort_po43.why ==========
goal SelectionSort_sort_safety_po_19:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  ("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

========== file tests/java/why/SelectionSort_po44.why ==========
goal SelectionSort_sort_safety_po_20:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44": ("JC_42": (0 <= integer_of_int32(mi0))))

========== file tests/java/why/SelectionSort_po45.why ==========
goal SelectionSort_sort_safety_po_21:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

========== file tests/java/why/SelectionSort_po46.why ==========
goal SelectionSort_sort_safety_po_22:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  (("JC_39": Non_null_intM(t_0, Object_alloc_table)) and
   (("JC_40": (0 <= integer_of_int32(i_3_0))) and
    (("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
     t_0) + 1))) and
     (("JC_42": (0 <= integer_of_int32(mi0))) and
      ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
      t_0) + 1)))))))) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  (0 <= ("JC_102": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(i_3_0))))

========== file tests/java/why/SelectionSort_po47.why ==========
goal SelectionSort_sort_safety_po_23:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  (("JC_39": Non_null_intM(t_0, Object_alloc_table)) and
   (("JC_40": (0 <= integer_of_int32(i_3_0))) and
    (("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
     t_0) + 1))) and
     (("JC_42": (0 <= integer_of_int32(mi0))) and
      ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
      t_0) + 1)))))))) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  (("JC_102": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(i_3_1))) < ("JC_102":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(i_3_0))))

========== file tests/java/why/SelectionSort_po48.why ==========
goal SelectionSort_swap_ensures_default_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  forall result0:int32.
  (result0 = select(intM_intP, shift(t, integer_of_int32(j_2)))) ->
  forall intM_intP0:(Object,
  int32) memory.
  (intM_intP0 = store(intM_intP, shift(t, integer_of_int32(i_2)),
  result0)) ->
  forall intM_intP1:(Object,
  int32) memory.
  (intM_intP1 = store(intM_intP0, shift(t, integer_of_int32(j_2)),
  result)) ->
  ("JC_55":
  ("JC_53": Swap(t, integer_of_int32(i_2), integer_of_int32(j_2), intM_intP1,
  intM_intP)))

========== file tests/java/why/SelectionSort_po49.why ==========
goal SelectionSort_swap_ensures_default_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  forall result0:int32.
  (result0 = select(intM_intP, shift(t, integer_of_int32(j_2)))) ->
  forall intM_intP0:(Object,
  int32) memory.
  (intM_intP0 = store(intM_intP, shift(t, integer_of_int32(i_2)),
  result0)) ->
  forall intM_intP1:(Object,
  int32) memory.
  (intM_intP1 = store(intM_intP0, shift(t, integer_of_int32(j_2)),
  result)) ->
  ("JC_55":
  ("JC_54": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t), integer_of_int32(j_2),
  integer_of_int32(j_2)), pset_range(pset_singleton(t),
  integer_of_int32(i_2), integer_of_int32(i_2))))))

========== file tests/java/why/SelectionSort_po5.why ==========
goal SelectionSort_sort_ensures_default_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_1))))

========== file tests/java/why/SelectionSort_po50.why ==========
goal SelectionSort_swap_safety_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  (offset_min(Object_alloc_table, t) <= integer_of_int32(i_2))

========== file tests/java/why/SelectionSort_po51.why ==========
goal SelectionSort_swap_safety_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))

========== file tests/java/why/SelectionSort_po52.why ==========
goal SelectionSort_swap_safety_po_3:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  ((offset_min(Object_alloc_table, t) <= integer_of_int32(i_2)) and
   (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  (offset_min(Object_alloc_table, t) <= integer_of_int32(j_2))

========== file tests/java/why/SelectionSort_po53.why ==========
goal SelectionSort_swap_safety_po_4:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  ((offset_min(Object_alloc_table, t) <= integer_of_int32(i_2)) and
   (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  (integer_of_int32(j_2) <= offset_max(Object_alloc_table, t))

========== file tests/java/why/SelectionSort_po6.why ==========
goal SelectionSort_sort_ensures_default_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi1))))

========== file tests/java/why/SelectionSort_po7.why ==========
goal SelectionSort_sort_ensures_default_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi1) < (offset_max(Object_alloc_table,
  t_0) + 1))))

========== file tests/java/why/SelectionSort_po8.why ==========
goal SelectionSort_sort_ensures_default_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_1))))

========== file tests/java/why/SelectionSort_po9.why ==========
goal SelectionSort_sort_ensures_default_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))))

========== generation of Simplify VC output ==========
why -simplify [...] why/SelectionSort.why
========== file tests/java/simplify/SelectionSort_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (ge_real (real_sqrt x) real_constant_0_0e) |@true|))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom sqr_sqrt
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (real_sqrt (real_mul x x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(BG_PUSH
 ;; Why axiom math_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))))

(BG_PUSH
 ;; Why axiom math_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0)
 (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))))

(BG_PUSH
 ;; Why axiom computer_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))))

(BG_PUSH
 ;; Why axiom computer_div_bound
 (FORALL (x y)
 (IMPLIES (AND (>= x 0) (> y 0))
 (AND (<= 0 (computer_div x y)) (<= (computer_div x y) x)))))

(BG_PUSH
 ;; Why axiom computer_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (< (abs_int (computer_mod x y)) (abs_int y))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (< (abs_int (computer_mod x y)) (abs_int y))))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_pos
 (FORALL (x y) (IMPLIES (AND (>= x 0) (NEQ y 0)) (>= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_neg
 (FORALL (x y) (IMPLIES (AND (<= x 0) (NEQ y 0)) (<= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_rounds_toward_zero
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom disj_sym
 (FORALL (s1 s2)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|) (EQ (disj_mybag s2 s1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_refl
 (FORALL (sa) (EQ (sub_mybag sa sa) |@true|)))

(BG_PUSH
 ;; Why axiom sub_disj
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))

 (FORALL (s1 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (FORALL (s2)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_in
 (FORALL (s1 s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))

 (FORALL (s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (FORALL (s1)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_sub
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))

 (FORALL (s1 s2)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (FORALL (s3)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_refl
 (FORALL (sa m) (EQ (frame_between sa m m) |@true|)))

(BG_PUSH
 ;; Why axiom frame_between_gen
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (FORALL (v) (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|)))))))

(BG_PUSH
 ;; Why axiom frame_between_gen2
 (FORALL (sa m1 m2 m3)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub1
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 s13)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (FORALL (m2 m1)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s23 m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub2
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 m1 m2)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s13 s23)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_pointer
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (EQ (select m1 p) (select m2 p)))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (FORALL (v) (EQ (select m1 p) (select m2 p))))))))

(BG_PUSH
 ;; Why axiom frame_between_sub
 (FORALL (sa sb m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (sb)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))))

(BG_PUSH
 ;; Why axiom Exception_parenttag_Object
 (EQ (parenttag Exception_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x_1 Object_alloc_table)
  (>= (offset_max Object_alloc_table x_1) 0))

(DEFPRED (Non_null_intM x_0 Object_alloc_table)
  (>= (offset_max Object_alloc_table x_0) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(DEFPRED (Swap a_0 i_0 j_0 intM_intP_at_L2 intM_intP_at_L1)
  (AND
  (EQ (integer_of_int32 (select intM_intP_at_L1 (shift a_0 i_0)))
  (integer_of_int32 (select intM_intP_at_L2 (shift a_0 j_0))))
  (AND
  (EQ (integer_of_int32 (select intM_intP_at_L1 (shift a_0 j_0)))
  (integer_of_int32 (select intM_intP_at_L2 (shift a_0 i_0))))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i_0) (NEQ k j_0))
  (EQ (integer_of_int32 (select intM_intP_at_L1 (shift a_0 k)))
  (integer_of_int32 (select intM_intP_at_L2 (shift a_0 k)))))))))

(BG_PUSH
 ;; Why axiom Permut_inversion
 (FORALL (aux_1 aux_2 aux_3 aux_4 aux_5)
 (IMPLIES (EQ (Permut aux_1 aux_2 aux_3 aux_4 aux_5) |@true|)
 (OR
 (EXISTS (intM_intP_at_L)
 (EXISTS (a_2)
 (EXISTS (l_1)
 (EXISTS (h_1)
 (AND (EQ aux_1 a_2)
 (AND (EQ aux_2 l_1)
 (AND (EQ aux_3 h_1)
 (AND (EQ aux_4 intM_intP_at_L) (EQ aux_5 intM_intP_at_L)))))))))
 (OR
 (EXISTS (intM_intP_at_L2)
 (EXISTS (intM_intP_at_L1)
 (EXISTS (a_3)
 (EXISTS (l_2)
 (EXISTS (h_2)
 (AND (EQ (Permut a_3 l_2 h_2 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (AND (EQ aux_1 a_3)
 (AND (EQ aux_2 l_2)
 (AND (EQ aux_3 h_2)
 (AND (EQ aux_4 intM_intP_at_L1) (EQ aux_5 intM_intP_at_L2)))))))))))
 (OR
 (EXISTS (intM_intP_at_L3)
 (EXISTS (intM_intP_at_L2)
 (EXISTS (intM_intP_at_L1)
 (EXISTS (a_4)
 (EXISTS (l_3)
 (EXISTS (h_3)
 (AND
 (AND (EQ (Permut a_4 l_3 h_3 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (EQ (Permut a_4 l_3 h_3 intM_intP_at_L3 intM_intP_at_L2) |@true|))
 (AND (EQ aux_1 a_4)
 (AND (EQ aux_2 l_3)
 (AND (EQ aux_3 h_3)
 (AND (EQ aux_4 intM_intP_at_L3) (EQ aux_5 intM_intP_at_L1))))))))))))
 (EXISTS (intM_intP_at_L2)
 (EXISTS (intM_intP_at_L1)
 (EXISTS (a_5)
 (EXISTS (l_4)
 (EXISTS (h_4)
 (EXISTS (i_1)
 (EXISTS (j_1)
 (AND
 (AND (<= l_4 i_1)
 (AND (<= i_1 h_4)
 (AND (<= l_4 j_1)
 (AND (<= j_1 h_4) (Swap a_5 i_1 j_1 intM_intP_at_L2 intM_intP_at_L1)))))
 (AND (EQ aux_1 a_5)
 (AND (EQ aux_2 l_4)
 (AND (EQ aux_3 h_4)
 (AND (EQ aux_4 intM_intP_at_L2) (EQ aux_5 intM_intP_at_L1)))))))))))))))))))

(BG_PUSH
 ;; Why axiom Permut_refl
 (FORALL (intM_intP_at_L a_2 l_1 h_1)
 (EQ (Permut a_2 l_1 h_1 intM_intP_at_L intM_intP_at_L) |@true|)))

(BG_PUSH
 ;; Why axiom Permut_sym
 (FORALL (intM_intP_at_L2 intM_intP_at_L1 a_3 l_2 h_2)
 (IMPLIES (EQ (Permut a_3 l_2 h_2 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (EQ (Permut a_3 l_2 h_2 intM_intP_at_L1 intM_intP_at_L2) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_trans
 (FORALL (intM_intP_at_L3 intM_intP_at_L2 intM_intP_at_L1 a_4 l_3 h_3)
 (IMPLIES
 (AND (EQ (Permut a_4 l_3 h_3 intM_intP_at_L2 intM_intP_at_L1) |@true|)
 (EQ (Permut a_4 l_3 h_3 intM_intP_at_L3 intM_intP_at_L2) |@true|))
 (EQ (Permut a_4 l_3 h_3 intM_intP_at_L3 intM_intP_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_swap
 (FORALL (intM_intP_at_L2 intM_intP_at_L1 a_5 l_4 h_4 i_1 j_1)
 (IMPLIES
 (AND (<= l_4 i_1)
 (AND (<= i_1 h_4)
 (AND (<= l_4 j_1)
 (AND (<= j_1 h_4) (Swap a_5 i_1 j_1 intM_intP_at_L2 intM_intP_at_L1)))))
 (EQ (Permut a_5 l_4 h_4 intM_intP_at_L2 intM_intP_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom SelectionSort_parenttag_Object
 (EQ (parenttag SelectionSort_tag Object_tag) |@true|))

(DEFPRED (Sorted a l h intM_intP_at_L)
  (FORALL (i j)
  (IMPLIES (AND (<= l i) (AND (<= i j) (< j h)))
  (<= (integer_of_int32 (select intM_intP_at_L (shift a i))) (integer_of_int32
                                                             (select
                                                             intM_intP_at_L 
                                                             (shift a j)))))))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom byte_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 128) x) (<= x 127))
 (EQ (integer_of_byte (byte_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom byte_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_byte x) (integer_of_byte y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom byte_range
 (FORALL (x)
 (AND (<= (- 0 128) (integer_of_byte x)) (<= (integer_of_byte x) 127))))

(BG_PUSH
 ;; Why axiom char_coerce
 (FORALL (x)
 (IMPLIES (AND (<= 0 x) (<= x 65535))
 (EQ (integer_of_char (char_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom char_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_char x) (integer_of_char y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom char_range
 (FORALL (x) (AND (<= 0 (integer_of_char x)) (<= (integer_of_char x) 65535))))

(DEFPRED (eq_byte x y) (EQ (integer_of_byte x) (integer_of_byte y)))

(DEFPRED (eq_char x y) (EQ (integer_of_char x) (integer_of_char y)))

(DEFPRED (eq_int32 x y) (EQ (integer_of_int32 x) (integer_of_int32 y)))

(DEFPRED (eq_long x y) (EQ (integer_of_long x) (integer_of_long y)))

(DEFPRED (eq_short x y) (EQ (integer_of_short x) (integer_of_short y)))

(BG_PUSH
 ;; Why axiom int32_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_2147483648) x)
 (<= x constant_too_large_2147483647))
 (EQ (integer_of_int32 (int32_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int32_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_int32 x) (integer_of_int32 y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom int32_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_2147483648) (integer_of_int32 x))
 (<= (integer_of_int32 x) constant_too_large_2147483647))))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_Exception p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_SelectionSort p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_intM p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

(BG_PUSH
 ;; Why axiom long_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_9223372036854775808) x)
 (<= x constant_too_large_9223372036854775807))
 (EQ (integer_of_long (long_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom long_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_long x) (integer_of_long y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom long_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_9223372036854775808) (integer_of_long x))
 (<= (integer_of_long x) constant_too_large_9223372036854775807))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_Exception p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_SelectionSort p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_intM p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(BG_PUSH
 ;; Why axiom short_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 32768) x) (<= x 32767))
 (EQ (integer_of_short (short_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom short_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_short x) (integer_of_short y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom short_range
 (FORALL (x)
 (AND (<= (- 0 32768) (integer_of_short x)) (<= (integer_of_short x) 32767))))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Exception p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_SelectionSort p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_intM p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Exception p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_SelectionSort p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; SelectionSort_sort_ensures_default_po_1, File "HOME/tests/java/SelectionSort.java", line 81, characters 20-26
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3) (IMPLIES (EQ i_3 result) (<= 0 (integer_of_int32 i_3))))))))))

;; SelectionSort_sort_ensures_default_po_2, File "HOME/tests/java/SelectionSort.java", line 93, characters 24-29
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(< (integer_of_int32 i_3_0) (integer_of_int32 j_3))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_3, File "HOME/tests/java/SelectionSort.java", line 93, characters 33-40
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(<= (integer_of_int32 i_3_0) (integer_of_int32 mi))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_4, File "HOME/tests/java/SelectionSort.java", line 93, characters 38-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(< (integer_of_int32 mi) (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_5, File "HOME/tests/java/SelectionSort.java", line 93, characters 24-29
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(< (integer_of_int32 i_3_0) (integer_of_int32 j_3_1))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_6, File "HOME/tests/java/SelectionSort.java", line 93, characters 33-40
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(<= (integer_of_int32 i_3_0) (integer_of_int32 mi1))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_7, File "HOME/tests/java/SelectionSort.java", line 93, characters 38-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(< (integer_of_int32 mi1) (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_8, File "HOME/tests/java/SelectionSort.java", line 93, characters 24-29
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(< (integer_of_int32 i_3_0) (integer_of_int32 j_3_1))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_9, File "HOME/tests/java/SelectionSort.java", line 93, characters 33-40
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_10, File "HOME/tests/java/SelectionSort.java", line 93, characters 38-51
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_default_po_11, File "HOME/tests/java/SelectionSort.java", line 81, characters 20-26
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(FORALL (intM_intP0)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP0 intM_intP)
         (not_assigns
         Object_alloc_table intM_intP intM_intP0 (pset_union
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 mi0) 
                                                 (integer_of_int32 mi0)) 
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 i_3_0) 
                                                 (integer_of_int32 i_3_0)))))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1) (IMPLIES (EQ i_3_1 result5) (<= 0 (integer_of_int32 i_3_1))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_permutation_po_1, File "HOME/tests/java/SelectionSort.java", line 87, characters 22-54
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(EQ (Permut
t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP intM_intP) |@true|))))))))))

;; SelectionSort_sort_ensures_permutation_po_2, File "HOME/tests/java/SelectionSort.java", line 108, characters 33-68
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(FORALL (intM_intP1)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 mi0) 
                                                  (integer_of_int32 mi0)) 
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 i_3_0) 
                                                  (integer_of_int32 i_3_0)))))
(EQ (Permut
t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP1 intM_intP0) |@true|))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_permutation_po_3, File "HOME/tests/java/SelectionSort.java", line 87, characters 22-54
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP0 intM_intP) |@true|)
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(FORALL (intM_intP1)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 mi0) 
                                                  (integer_of_int32 mi0)) 
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 i_3_0) 
                                                  (integer_of_int32 i_3_0)))))
(IMPLIES (EQ (Permut
         t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP1 intM_intP0) |@true|)
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 result5)
(EQ (Permut
t_0 0 (- (+ (offset_max Object_alloc_table t_0) 1) 1) intM_intP1 intM_intP) |@true|)))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_1, File "HOME/tests/java/SelectionSort.java", line 83, characters 21-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result) (Sorted t_0 0 (integer_of_int32 i_3) intM_intP))))))))))

;; SelectionSort_sort_ensures_sorted_po_2, File "HOME/tests/java/SelectionSort.java", line 84, characters 8-90
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (k1)
(FORALL (k2)
(IMPLIES (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3))
         (AND (<= (integer_of_int32 i_3) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
(<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                         (select
                                                         intM_intP (shift
                                                                   t_0 k2))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_3, File "HOME/tests/java/SelectionSort.java", line 95, characters 25-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(EQ (integer_of_int32 mv)
(integer_of_int32 (select intM_intP0 (shift t_0 (integer_of_int32 mi))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_4, File "HOME/tests/java/SelectionSort.java", line 96, characters 12-56
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (k_0)
(IMPLIES (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3)))
(>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                           mv)))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_5, File "HOME/tests/java/SelectionSort.java", line 95, characters 25-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND
         (EQ (integer_of_int32 mv0)
         (integer_of_int32
         (select intM_intP0 (shift t_0 (integer_of_int32 mi0)))))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_0)))
         (>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                                    mv0)))))
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP0 (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP0 (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(EQ (integer_of_int32 mv1)
(integer_of_int32 (select intM_intP0 (shift t_0 (integer_of_int32 mi1)))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_6, File "HOME/tests/java/SelectionSort.java", line 96, characters 12-56
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND
         (EQ (integer_of_int32 mv0)
         (integer_of_int32
         (select intM_intP0 (shift t_0 (integer_of_int32 mi0)))))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_0)))
         (>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                                    mv0)))))
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP0 (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP0 (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(FORALL (k_0)
(IMPLIES (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_1)))
(>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                           mv1))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_7, File "HOME/tests/java/SelectionSort.java", line 96, characters 12-56
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND
         (EQ (integer_of_int32 mv0)
         (integer_of_int32
         (select intM_intP0 (shift t_0 (integer_of_int32 mi0)))))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_0)))
         (>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                                    mv0)))))
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP0 (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(FORALL (k_0)
(IMPLIES (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_1)))
(>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                           mv0))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_8, File "HOME/tests/java/SelectionSort.java", line 83, characters 21-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND
         (EQ (integer_of_int32 mv0)
         (integer_of_int32
         (select intM_intP0 (shift t_0 (integer_of_int32 mi0)))))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_0)))
         (>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                                    mv0)))))
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(FORALL (intM_intP1)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 mi0) 
                                                  (integer_of_int32 mi0)) 
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 i_3_0) 
                                                  (integer_of_int32 i_3_0)))))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 result5)
(Sorted t_0 0 (integer_of_int32 i_3_1) intM_intP1))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_9, File "HOME/tests/java/SelectionSort.java", line 84, characters 8-90
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(FORALL (result2)
(IMPLIES (EQ result2
         (select intM_intP0 (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES (AND
         (EQ (integer_of_int32 mv0)
         (integer_of_int32
         (select intM_intP0 (shift t_0 (integer_of_int32 mi0)))))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= (integer_of_int32 i_3_0) k_0)
         (< k_0 (integer_of_int32 j_3_0)))
         (>= (integer_of_int32 (select intM_intP0 (shift t_0 k_0))) (integer_of_int32
                                                                    mv0)))))
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(FORALL (intM_intP1)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP1 intM_intP0)
         (not_assigns
         Object_alloc_table intM_intP0 intM_intP1 (pset_union
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 mi0) 
                                                  (integer_of_int32 mi0)) 
                                                  (pset_range
                                                  (pset_singleton t_0) 
                                                  (integer_of_int32 i_3_0) 
                                                  (integer_of_int32 i_3_0)))))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 result5)
(FORALL (k1)
(FORALL (k2)
(IMPLIES (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_1))
         (AND (<= (integer_of_int32 i_3_1) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
(<= (integer_of_int32 (select intM_intP1 (shift t_0 k1))) (integer_of_int32
                                                          (select
                                                          intM_intP1 
                                                          (shift t_0 k2))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_ensures_sorted_po_10, File "HOME/tests/java/SelectionSort.java", line 74, characters 18-38
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP0)
(IMPLIES (AND (Sorted t_0 0 (integer_of_int32 i_3_0) intM_intP0)
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (< k1 (integer_of_int32 i_3_0))
         (AND (<= (integer_of_int32 i_3_0) k2)
         (< k2 (+ (offset_max Object_alloc_table t_0) 1)))))
         (<= (integer_of_int32 (select intM_intP0 (shift t_0 k1))) (integer_of_int32
                                                                   (select
                                                                   intM_intP0 
                                                                   (shift
                                                                   t_0 k2)))))))
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (>= (integer_of_int32 i_3_0) (integer_of_int32 result1))
(Sorted t_0 0 (+ (offset_max Object_alloc_table t_0) 1) intM_intP0))))))))))))))))))

;; SelectionSort_sort_safety_po_1, File "why/SelectionSort.why", line 1240, characters 65-316
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(>= (offset_max Object_alloc_table t_0) (- 0 1)))))))))))))

;; SelectionSort_sort_safety_po_2, File "HOME/tests/java/SelectionSort.java", line 90, characters 13-23
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(<= (- 0 constant_too_large_2147483648) (- result0 1))))))))))))))))

;; SelectionSort_sort_safety_po_3, File "HOME/tests/java/SelectionSort.java", line 90, characters 13-23
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(<= (- result0 1) constant_too_large_2147483647)))))))))))))))

;; SelectionSort_sort_safety_po_4, File "HOME/tests/java/SelectionSort.java", line 92, characters 10-14
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))))))))))))))))))))

;; SelectionSort_sort_safety_po_5, File "HOME/tests/java/SelectionSort.java", line 92, characters 10-14
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0))))))))))))))))))))

;; SelectionSort_sort_safety_po_6, File "HOME/tests/java/SelectionSort.java", line 101, characters 12-15
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_7, File "HOME/tests/java/SelectionSort.java", line 101, characters 12-15
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647)))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_8, File "HOME/tests/java/SelectionSort.java", line 102, characters 6-10
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0)))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_9, File "HOME/tests/java/SelectionSort.java", line 102, characters 6-10
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_10, File "HOME/tests/java/SelectionSort.jc", line 211, characters 30-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1)))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_11, File "HOME/tests/java/SelectionSort.jc", line 211, characters 30-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_12, File "HOME/tests/java/SelectionSort.java", line 99, characters 22-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1))
         (<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(<= 0 (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_13, File "HOME/tests/java/SelectionSort.java", line 99, characters 22-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 mv0))
(FORALL (mi1)
(IMPLIES (EQ mi1 j_3_0)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(FORALL (mv1)
(IMPLIES (EQ mv1 result6)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1))
         (<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result7)
(< (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_1)) 
(- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_14, File "HOME/tests/java/SelectionSort.jc", line 211, characters 30-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_15, File "HOME/tests/java/SelectionSort.jc", line 211, characters 30-36
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647)))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_16, File "HOME/tests/java/SelectionSort.java", line 99, characters 22-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1))
         (<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(<= 0 (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_0))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_17, File "HOME/tests/java/SelectionSort.java", line 99, characters 22-34
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(FORALL (mv0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (< (integer_of_int32 j_3_0) result4)
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 j_3_0))
         (<= (integer_of_int32 j_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5 (select intM_intP (shift t_0 (integer_of_int32 j_3_0))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 mv0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 j_3_0) 1))
         (<= (+ (integer_of_int32 j_3_0) 1) constant_too_large_2147483647))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 j_3_0) 1))
(FORALL (j_3_1)
(IMPLIES (EQ j_3_1 result6)
(< (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_1)) 
(- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 j_3_0))))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_18, File "HOME/tests/java/SelectionSort.jc", line 218, characters 32-72
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(Non_null_intM t_0 Object_alloc_table))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_19, File "HOME/tests/java/SelectionSort.jc", line 218, characters 32-72
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(< (integer_of_int32 i_3_0) (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_20, File "HOME/tests/java/SelectionSort.jc", line 218, characters 32-72
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4) (<= 0 (integer_of_int32 mi0)))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_21, File "HOME/tests/java/SelectionSort.jc", line 218, characters 32-72
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_22, File "HOME/tests/java/SelectionSort.java", line 88, characters 18-30
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_3_0))
         (AND
         (< (integer_of_int32 i_3_0) (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (intM_intP0)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP0 intM_intP)
         (not_assigns
         Object_alloc_table intM_intP intM_intP0 (pset_union
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 mi0) 
                                                 (integer_of_int32 mi0)) 
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 i_3_0) 
                                                 (integer_of_int32 i_3_0)))))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 result5)
(<= 0 (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 i_3_0))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_sort_safety_po_23, File "HOME/tests/java/SelectionSort.java", line 88, characters 18-30
(FORALL (this_0)
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_0 0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_3)
(IMPLIES (EQ i_3 result)
(FORALL (i_3_0)
(FORALL (intM_intP)
(IMPLIES TRUE
(IMPLIES (<= 0 (integer_of_int32 i_3_0))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(IMPLIES (< (integer_of_int32 i_3_0) (integer_of_int32 result1))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 i_3_0))
         (<= (integer_of_int32 i_3_0) (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 (integer_of_int32 i_3_0))))
(FORALL (mv)
(IMPLIES (EQ mv result2)
(FORALL (mi)
(IMPLIES (EQ mi i_3_0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) (+ (integer_of_int32 i_3_0) 1))
(FORALL (j_3)
(IMPLIES (EQ j_3 result3)
(FORALL (j_3_0)
(FORALL (mi0)
(IMPLIES TRUE
(IMPLIES (AND (< (integer_of_int32 i_3_0) (integer_of_int32 j_3_0))
         (AND (<= (integer_of_int32 i_3_0) (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result4)
(IMPLIES (AND (<= result4 constant_too_large_2147483647)
         (AND (>= result4 0)
         (EQ result4 (+ (offset_max Object_alloc_table t_0) 1))))
(IMPLIES (>= (integer_of_int32 j_3_0) result4)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_3_0))
         (AND
         (< (integer_of_int32 i_3_0) (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 (integer_of_int32 mi0))
         (< (integer_of_int32 mi0) (+ (offset_max Object_alloc_table t_0) 1))))))
(FORALL (intM_intP0)
(IMPLIES (AND
         (Swap
         t_0 (integer_of_int32 i_3_0) (integer_of_int32 mi0) intM_intP0 intM_intP)
         (not_assigns
         Object_alloc_table intM_intP intM_intP0 (pset_union
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 mi0) 
                                                 (integer_of_int32 mi0)) 
                                                 (pset_range
                                                 (pset_singleton t_0) 
                                                 (integer_of_int32 i_3_0) 
                                                 (integer_of_int32 i_3_0)))))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 i_3_0) 1))
         (<= (+ (integer_of_int32 i_3_0) 1) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 i_3_0) 1))
(FORALL (i_3_1)
(IMPLIES (EQ i_3_1 result5)
(< (- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 i_3_1)) 
(- (+ (offset_max Object_alloc_table t_0) 1) (integer_of_int32 i_3_0))))))))))))))))))))))))))))))))))))))))))))))))))

;; SelectionSort_swap_ensures_default_po_1, File "HOME/tests/java/SelectionSort.java", line 64, characters 16-37
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t (integer_of_int32 i_2))))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t (integer_of_int32 j_2))))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0
         (|why__store| intM_intP (shift t (integer_of_int32 i_2)) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1
         (|why__store| intM_intP0 (shift t (integer_of_int32 j_2)) result))
(Swap t (integer_of_int32 i_2) (integer_of_int32 j_2) intM_intP1 intM_intP))))))))))))))))

;; SelectionSort_swap_ensures_default_po_2, File "HOME/tests/java/SelectionSort.java", line 66, characters 9-13
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t (integer_of_int32 i_2))))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP (shift t (integer_of_int32 j_2))))
(FORALL (intM_intP0)
(IMPLIES (EQ intM_intP0
         (|why__store| intM_intP (shift t (integer_of_int32 i_2)) result0))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1
         (|why__store| intM_intP0 (shift t (integer_of_int32 j_2)) result))
(not_assigns
Object_alloc_table intM_intP intM_intP1 (pset_union
                                        (pset_range
                                        (pset_singleton t) (integer_of_int32
                                                           j_2) (integer_of_int32
                                                                j_2)) 
                                        (pset_range
                                        (pset_singleton t) (integer_of_int32
                                                           i_2) (integer_of_int32
                                                                i_2)))))))))))))))))))

;; SelectionSort_swap_safety_po_1, File "HOME/tests/java/SelectionSort.java", line 67, characters 11-15
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(<= (offset_min Object_alloc_table t) (integer_of_int32 i_2))))))))

;; SelectionSort_swap_safety_po_2, File "HOME/tests/java/SelectionSort.java", line 67, characters 11-15
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(<= (integer_of_int32 i_2) (offset_max Object_alloc_table t))))))))

;; SelectionSort_swap_safety_po_3, File "HOME/tests/java/SelectionSort.java", line 68, characters 8-12
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t) (integer_of_int32 i_2))
         (<= (integer_of_int32 i_2) (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t (integer_of_int32 i_2))))
(<= (offset_min Object_alloc_table t) (integer_of_int32 j_2))))))))))))

;; SelectionSort_swap_safety_po_4, File "HOME/tests/java/SelectionSort.java", line 68, characters 8-12
(FORALL (this_2)
(FORALL (t)
(FORALL (i_2)
(FORALL (j_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t 0 Object_alloc_table)
         (AND (valid_struct_SelectionSort this_2 0 0 Object_alloc_table)
         (AND (Non_null_intM t Object_alloc_table)
         (AND (<= 0 (integer_of_int32 i_2))
         (AND
         (< (integer_of_int32 i_2) (+ (offset_max Object_alloc_table t) 1))
         (AND (<= 0 (integer_of_int32 j_2))
         (< (integer_of_int32 j_2) (+ (offset_max Object_alloc_table t) 1))))))))
(IMPLIES (AND (<= (offset_min Object_alloc_table t) (integer_of_int32 i_2))
         (<= (integer_of_int32 i_2) (offset_max Object_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t (integer_of_int32 i_2))))
(<= (integer_of_int32 j_2) (offset_max Object_alloc_table t))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/SelectionSort_why.sx : .........................?........................... (52/0/1/0/0)
total   :  53
valid   :  52 ( 98%)
invalid :   0 (  0%)
unknown :   1 (  2%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/SelectionSort.why
========== file tests/java/why/SelectionSort_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic Exception_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

predicate Non_null_Object(x_1: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_1) >= 0)

predicate Non_null_intM(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic integer_of_int32 : int32 -> int

predicate Swap(a_0: Object pointer, i_0: int, j_0: int,
  intM_intP_at_L2: (Object, int32) memory, intM_intP_at_L1: (Object,
  int32) memory) =
  ((integer_of_int32(select(intM_intP_at_L1, shift(a_0,
   i_0))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, j_0)))) and
   ((integer_of_int32(select(intM_intP_at_L1, shift(a_0,
    j_0))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, i_0)))) and
    (forall k:int.
      (((k <> i_0) and (k <> j_0)) ->
       (integer_of_int32(select(intM_intP_at_L1, shift(a_0,
       k))) = integer_of_int32(select(intM_intP_at_L2, shift(a_0, k))))))))

logic Permut : Object pointer, int, int, (Object, int32) memory, (Object,
int32) memory -> prop

axiom Permut_inversion:
  (forall aux_1:Object pointer.
    (forall aux_2:int.
      (forall aux_3:int.
        (forall aux_4:(Object, int32) memory.
          (forall aux_5:(Object, int32) memory [Permut(aux_1, aux_2, aux_3,
            aux_4, aux_5)].
            (Permut(aux_1, aux_2, aux_3, aux_4, aux_5) ->
             ((exists intM_intP_at_L:(Object, int32) memory.
                (exists a_2:Object pointer.
                  (exists l_1:int.
                    (exists h_1:int.
                      ((aux_1 = a_2) and
                       ((aux_2 = l_1) and
                        ((aux_3 = h_1) and
                         ((aux_4 = intM_intP_at_L) and
                          (aux_5 = intM_intP_at_L))))))))) or
              ((exists intM_intP_at_L2:(Object, int32) memory.
                 (exists intM_intP_at_L1:(Object, int32) memory.
                   (exists a_3:Object pointer.
                     (exists l_2:int.
                       (exists h_2:int.
                         (Permut(a_3, l_2, h_2, intM_intP_at_L2,
                          intM_intP_at_L1) and
                          ((aux_1 = a_3) and
                           ((aux_2 = l_2) and
                            ((aux_3 = h_2) and
                             ((aux_4 = intM_intP_at_L1) and
                              (aux_5 = intM_intP_at_L2))))))))))) or
               ((exists intM_intP_at_L3:(Object, int32) memory.
                  (exists intM_intP_at_L2:(Object, int32) memory.
                    (exists intM_intP_at_L1:(Object, int32) memory.
                      (exists a_4:Object pointer.
                        (exists l_3:int.
                          (exists h_3:int.
                            ((Permut(a_4, l_3, h_3, intM_intP_at_L2,
                              intM_intP_at_L1) and Permut(a_4, l_3, h_3,
                              intM_intP_at_L3, intM_intP_at_L2)) and
                             ((aux_1 = a_4) and
                              ((aux_2 = l_3) and
                               ((aux_3 = h_3) and
                                ((aux_4 = intM_intP_at_L3) and
                                 (aux_5 = intM_intP_at_L1)))))))))))) or
                (exists intM_intP_at_L2:(Object, int32) memory.
                  (exists intM_intP_at_L1:(Object, int32) memory.
                    (exists a_5:Object pointer.
                      (exists l_4:int.
                        (exists h_4:int.
                          (exists i_1:int.
                            (exists j_1:int.
                              (((l_4 <= i_1) and
                                ((i_1 <= h_4) and
                                 ((l_4 <= j_1) and
                                  ((j_1 <= h_4) and Swap(a_5, i_1, j_1,
                                   intM_intP_at_L2, intM_intP_at_L1))))) and
                               ((aux_1 = a_5) and
                                ((aux_2 = l_4) and
                                 ((aux_3 = h_4) and
                                  ((aux_4 = intM_intP_at_L2) and
                                   (aux_5 = intM_intP_at_L1))))))))))))))))))))))

axiom Permut_refl:
  (forall intM_intP_at_L:(Object, int32) memory.
    (forall a_2:Object pointer.
      (forall l_1:int.
        (forall h_1:int. Permut(a_2, l_1, h_1, intM_intP_at_L,
          intM_intP_at_L)))))

axiom Permut_sym:
  (forall intM_intP_at_L2:(Object, int32) memory.
    (forall intM_intP_at_L1:(Object, int32) memory.
      (forall a_3:Object pointer.
        (forall l_2:int.
          (forall h_2:int.
            (Permut(a_3, l_2, h_2, intM_intP_at_L2, intM_intP_at_L1) ->
             Permut(a_3, l_2, h_2, intM_intP_at_L1, intM_intP_at_L2)))))))

axiom Permut_trans:
  (forall intM_intP_at_L3:(Object, int32) memory.
    (forall intM_intP_at_L2:(Object, int32) memory.
      (forall intM_intP_at_L1:(Object, int32) memory.
        (forall a_4:Object pointer.
          (forall l_3:int.
            (forall h_3:int.
              ((Permut(a_4, l_3, h_3, intM_intP_at_L2, intM_intP_at_L1) and
                Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L2)) ->
               Permut(a_4, l_3, h_3, intM_intP_at_L3, intM_intP_at_L1))))))))

axiom Permut_swap:
  (forall intM_intP_at_L2:(Object, int32) memory.
    (forall intM_intP_at_L1:(Object, int32) memory.
      (forall a_5:Object pointer.
        (forall l_4:int.
          (forall h_4:int.
            (forall i_1:int.
              (forall j_1:int.
                (((l_4 <= i_1) and
                  ((i_1 <= h_4) and
                   ((l_4 <= j_1) and
                    ((j_1 <= h_4) and Swap(a_5, i_1, j_1, intM_intP_at_L2,
                     intM_intP_at_L1))))) ->
                 Permut(a_5, l_4, h_4, intM_intP_at_L2, intM_intP_at_L1)))))))))

logic SelectionSort_tag : Object tag_id

axiom SelectionSort_parenttag_Object: parenttag(SelectionSort_tag,
  Object_tag)

predicate Sorted(a: Object pointer, l: int, h: int, intM_intP_at_L: (Object,
  int32) memory) =
  (forall i:int.
    (forall j:int.
      (((l <= i) and ((i <= j) and (j < h))) ->
       (integer_of_int32(select(intM_intP_at_L, shift(a,
       i))) <= integer_of_int32(select(intM_intP_at_L, shift(a, j)))))))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_extensionality:
  (forall x:byte.
    (forall y:byte. ((integer_of_byte(x) = integer_of_byte(y)) -> (x = y))))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_extensionality:
  (forall x:char.
    (forall y:char. ((integer_of_char(x) = integer_of_char(y)) -> (x = y))))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag : Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_SelectionSort(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_extensionality:
  (forall x:long.
    (forall y:long. ((integer_of_long(x) = integer_of_long(y)) -> (x = y))))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_SelectionSort(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_extensionality:
  (forall x:short.
    (forall y:short.
      ((integer_of_short(x) = integer_of_short(y)) -> (x = y))))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_SelectionSort(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) =
  strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_SelectionSort(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal SelectionSort_sort_ensures_default_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_103": (0 <= integer_of_int32(i_3)))

goal SelectionSort_sort_ensures_default_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3))))

goal SelectionSort_sort_ensures_default_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi))))

goal SelectionSort_sort_ensures_default_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi) < (offset_max(Object_alloc_table,
  t_0) + 1))))

goal SelectionSort_sort_ensures_default_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_1))))

goal SelectionSort_sort_ensures_default_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi1))))

goal SelectionSort_sort_ensures_default_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi1) < (offset_max(Object_alloc_table,
  t_0) + 1))))

goal SelectionSort_sort_ensures_default_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111": ("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_1))))

goal SelectionSort_sort_ensures_default_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111": ("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))))

goal SelectionSort_sort_ensures_default_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  ("JC_111":
  ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

goal SelectionSort_sort_ensures_default_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_103": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_111":
  (("JC_108": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_109": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_110": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_103": (0 <= integer_of_int32(i_3_1)))

goal SelectionSort_sort_ensures_permutation_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP, intM_intP))

goal SelectionSort_sort_ensures_permutation_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  ("JC_140": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_150": true) ->
  ("JC_148":
  (("JC_145": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_146": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_147": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  ("JC_154": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP0))

goal SelectionSort_sort_ensures_permutation_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP0, intM_intP)) ->
  ("JC_140": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_150": true) ->
  ("JC_148":
  (("JC_145": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_146": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_147": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  ("JC_154": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_139": Permut(t_0, 0, ((offset_max(Object_alloc_table, t_0) + 1) - 1),
  intM_intP1, intM_intP))

goal SelectionSort_sort_ensures_sorted_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  ("JC_120": ("JC_118": Sorted(t_0, 0, integer_of_int32(i_3), intM_intP)))

goal SelectionSort_sort_ensures_sorted_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < integer_of_int32(i_3)) and
    ((integer_of_int32(i_3) <= k2) and (k2 < (offset_max(Object_alloc_table,
     t_0) + 1))))) ->
  ("JC_120":
  ("JC_119": (integer_of_int32(select(intM_intP, shift(t_0,
  k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))

goal SelectionSort_sort_ensures_sorted_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  ("JC_128":
  ("JC_126": (integer_of_int32(mv) = integer_of_int32(select(intM_intP0,
  shift(t_0, integer_of_int32(mi)))))))

goal SelectionSort_sort_ensures_sorted_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv))))

goal SelectionSort_sort_ensures_sorted_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  ("JC_128":
  ("JC_126": (integer_of_int32(mv1) = integer_of_int32(select(intM_intP0,
  shift(t_0, integer_of_int32(mi1)))))))

goal SelectionSort_sort_ensures_sorted_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  forall result6:int32.
  (result6 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_1))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv1))))

goal SelectionSort_sort_ensures_sorted_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  forall result5:int32.
  (result5 = select(intM_intP0, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  forall k_0:int.
  ((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_1))) ->
  ("JC_128":
  ("JC_127": (integer_of_int32(select(intM_intP0, shift(t_0,
  k_0))) >= integer_of_int32(mv0))))

goal SelectionSort_sort_ensures_sorted_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  ("JC_120": ("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_1), intM_intP1)))

goal SelectionSort_sort_ensures_sorted_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  forall result2:int32.
  (result2 = select(intM_intP0, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_128":
  (("JC_126": (integer_of_int32(mv0) = integer_of_int32(select(intM_intP0,
   shift(t_0, integer_of_int32(mi0)))))) and
   ("JC_127":
   (forall k_0:int.
     (((integer_of_int32(i_3_0) <= k_0) and (k_0 < integer_of_int32(j_3_0))) ->
      (integer_of_int32(select(intM_intP0, shift(t_0,
      k_0))) >= integer_of_int32(mv0))))))) ->
  ("JC_132":
  (("JC_129": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_130": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_131": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  forall intM_intP1:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP1, intM_intP0)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP0, intM_intP1,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  forall k1:int.
  forall k2:int.
  ((0 <= k1) and
   ((k1 < integer_of_int32(i_3_1)) and
    ((integer_of_int32(i_3_1) <= k2) and
     (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ("JC_120":
  ("JC_119": (integer_of_int32(select(intM_intP1, shift(t_0,
  k1))) <= integer_of_int32(select(intM_intP1, shift(t_0, k2))))))

goal SelectionSort_sort_ensures_sorted_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_120":
  (("JC_118": Sorted(t_0, 0, integer_of_int32(i_3_0), intM_intP0)) and
   ("JC_119":
   (forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 < integer_of_int32(i_3_0)) and
          ((integer_of_int32(i_3_0) <= k2) and
           (k2 < (offset_max(Object_alloc_table, t_0) + 1))))) ->
        (integer_of_int32(select(intM_intP0, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP0, shift(t_0, k2)))))))))) ->
  ("JC_121": (0 <= integer_of_int32(i_3_0))) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) >= integer_of_int32(result1)) ->
  ("JC_73": Sorted(t_0, 0, (offset_max(Object_alloc_table, t_0) + 1),
  intM_intP0))

goal SelectionSort_sort_safety_po_1:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1))

goal SelectionSort_sort_safety_po_2:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ((-2147483648) <= (result0 - 1))

goal SelectionSort_sort_safety_po_3:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  ((result0 - 1) <= 2147483647)

goal SelectionSort_sort_safety_po_4:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0))

goal SelectionSort_sort_safety_po_5:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))

goal SelectionSort_sort_safety_po_6:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  ((-2147483648) <= (integer_of_int32(i_3_0) + 1))

goal SelectionSort_sort_safety_po_7:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  ((integer_of_int32(i_3_0) + 1) <= 2147483647)

goal SelectionSort_sort_safety_po_8:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0))

goal SelectionSort_sort_safety_po_9:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))

goal SelectionSort_sort_safety_po_10:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  ((-2147483648) <= (integer_of_int32(j_3_0) + 1))

goal SelectionSort_sort_safety_po_11:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  ((integer_of_int32(j_3_0) + 1) <= 2147483647)

goal SelectionSort_sort_safety_po_12:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  (0 <= ("JC_98": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(j_3_0))))

goal SelectionSort_sort_safety_po_13:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) < integer_of_int32(mv0)) ->
  forall mi1:int32.
  (mi1 = j_3_0) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  forall mv1:int32.
  (mv1 = result6) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result7) ->
  (("JC_98": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(j_3_1))) < ("JC_98":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(j_3_0))))

goal SelectionSort_sort_safety_po_14:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  ((-2147483648) <= (integer_of_int32(j_3_0) + 1))

goal SelectionSort_sort_safety_po_15:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  ((integer_of_int32(j_3_0) + 1) <= 2147483647)

goal SelectionSort_sort_safety_po_16:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  (0 <= ("JC_98": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(j_3_0))))

goal SelectionSort_sort_safety_po_17:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  forall mv0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) < result4) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(j_3_0)) and
   (integer_of_int32(j_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(j_3_0)))) ->
  (integer_of_int32(result5) >= integer_of_int32(mv0)) ->
  (((-2147483648) <= (integer_of_int32(j_3_0) + 1)) and
   ((integer_of_int32(j_3_0) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(j_3_0) + 1)) ->
  forall j_3_1:int32.
  (j_3_1 = result6) ->
  (("JC_98": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(j_3_1))) < ("JC_98":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(j_3_0))))

goal SelectionSort_sort_safety_po_18:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44": ("JC_39": Non_null_intM(t_0, Object_alloc_table)))

goal SelectionSort_sort_safety_po_19:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  ("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

goal SelectionSort_sort_safety_po_20:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44": ("JC_42": (0 <= integer_of_int32(mi0))))

goal SelectionSort_sort_safety_po_21:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
  t_0) + 1))))

goal SelectionSort_sort_safety_po_22:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  (("JC_39": Non_null_intM(t_0, Object_alloc_table)) and
   (("JC_40": (0 <= integer_of_int32(i_3_0))) and
    (("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
     t_0) + 1))) and
     (("JC_42": (0 <= integer_of_int32(mi0))) and
      ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
      t_0) + 1)))))))) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  (0 <= ("JC_102": ((offset_max(Object_alloc_table,
        t_0) + 1) - integer_of_int32(i_3_0))))

goal SelectionSort_sort_safety_po_23:
  forall this_0:Object pointer.
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_0, 0, 0, Object_alloc_table) and
    ("JC_67": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_3:int32.
  (i_3 = result) ->
  forall i_3_0:int32.
  forall intM_intP:(Object,
  int32) memory.
  ("JC_79": true) ->
  ("JC_77": (0 <= integer_of_int32(i_3_0))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_25":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and (result0 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  (integer_of_int32(i_3_0) < integer_of_int32(result1)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(i_3_0)) and
   (integer_of_int32(i_3_0) <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int32.
  (result2 = select(intM_intP, shift(t_0, integer_of_int32(i_3_0)))) ->
  forall mv:int32.
  (mv = result2) ->
  forall mi:int32.
  (mi = i_3_0) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_3_0) + 1)) ->
  forall j_3:int32.
  (j_3 = result3) ->
  forall j_3_0:int32.
  forall mi0:int32.
  ("JC_91": true) ->
  ("JC_89":
  (("JC_86": (integer_of_int32(i_3_0) < integer_of_int32(j_3_0))) and
   (("JC_87": (integer_of_int32(i_3_0) <= integer_of_int32(mi0))) and
    ("JC_88": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
    t_0) + 1)))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result4:int.
  ("JC_25":
  ((result4 <= 2147483647) and
   ((result4 >= 0) and (result4 = (offset_max(Object_alloc_table, t_0) + 1))))) ->
  (integer_of_int32(j_3_0) >= result4) ->
  ("JC_44":
  (("JC_39": Non_null_intM(t_0, Object_alloc_table)) and
   (("JC_40": (0 <= integer_of_int32(i_3_0))) and
    (("JC_41": (integer_of_int32(i_3_0) < (offset_max(Object_alloc_table,
     t_0) + 1))) and
     (("JC_42": (0 <= integer_of_int32(mi0))) and
      ("JC_43": (integer_of_int32(mi0) < (offset_max(Object_alloc_table,
      t_0) + 1)))))))) ->
  forall intM_intP0:(Object,
  int32) memory.
  ("JC_58":
  (("JC_56": Swap(t_0, integer_of_int32(i_3_0), integer_of_int32(mi0),
   intM_intP0, intM_intP)) and
   ("JC_57": not_assigns(Object_alloc_table, intM_intP, intM_intP0,
   pset_union(pset_range(pset_singleton(t_0), integer_of_int32(mi0),
   integer_of_int32(mi0)), pset_range(pset_singleton(t_0),
   integer_of_int32(i_3_0), integer_of_int32(i_3_0))))))) ->
  (((-2147483648) <= (integer_of_int32(i_3_0) + 1)) and
   ((integer_of_int32(i_3_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_3_0) + 1)) ->
  forall i_3_1:int32.
  (i_3_1 = result5) ->
  (("JC_102": ((offset_max(Object_alloc_table,
   t_0) + 1) - integer_of_int32(i_3_1))) < ("JC_102":
                                           ((offset_max(Object_alloc_table,
                                           t_0) + 1) - integer_of_int32(i_3_0))))

goal SelectionSort_swap_ensures_default_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  forall result0:int32.
  (result0 = select(intM_intP, shift(t, integer_of_int32(j_2)))) ->
  forall intM_intP0:(Object,
  int32) memory.
  (intM_intP0 = store(intM_intP, shift(t, integer_of_int32(i_2)),
  result0)) ->
  forall intM_intP1:(Object,
  int32) memory.
  (intM_intP1 = store(intM_intP0, shift(t, integer_of_int32(j_2)),
  result)) ->
  ("JC_55":
  ("JC_53": Swap(t, integer_of_int32(i_2), integer_of_int32(j_2), intM_intP1,
  intM_intP)))

goal SelectionSort_swap_ensures_default_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  forall result0:int32.
  (result0 = select(intM_intP, shift(t, integer_of_int32(j_2)))) ->
  forall intM_intP0:(Object,
  int32) memory.
  (intM_intP0 = store(intM_intP, shift(t, integer_of_int32(i_2)),
  result0)) ->
  forall intM_intP1:(Object,
  int32) memory.
  (intM_intP1 = store(intM_intP0, shift(t, integer_of_int32(j_2)),
  result)) ->
  ("JC_55":
  ("JC_54": not_assigns(Object_alloc_table, intM_intP, intM_intP1,
  pset_union(pset_range(pset_singleton(t), integer_of_int32(j_2),
  integer_of_int32(j_2)), pset_range(pset_singleton(t),
  integer_of_int32(i_2), integer_of_int32(i_2))))))

goal SelectionSort_swap_safety_po_1:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  (offset_min(Object_alloc_table, t) <= integer_of_int32(i_2))

goal SelectionSort_swap_safety_po_2:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))

goal SelectionSort_swap_safety_po_3:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  ((offset_min(Object_alloc_table, t) <= integer_of_int32(i_2)) and
   (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  (offset_min(Object_alloc_table, t) <= integer_of_int32(j_2))

goal SelectionSort_swap_safety_po_4:
  forall this_2:Object pointer.
  forall t:Object pointer.
  forall i_2:int32.
  forall j_2:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t, 0, Object_alloc_table) and
   (valid_struct_SelectionSort(this_2, 0, 0, Object_alloc_table) and
    ("JC_51":
    (("JC_46": Non_null_intM(t, Object_alloc_table)) and
     (("JC_47": (0 <= integer_of_int32(i_2))) and
      (("JC_48": (integer_of_int32(i_2) < (offset_max(Object_alloc_table,
       t) + 1))) and
       (("JC_49": (0 <= integer_of_int32(j_2))) and
        ("JC_50": (integer_of_int32(j_2) < (offset_max(Object_alloc_table,
        t) + 1)))))))))) ->
  ((offset_min(Object_alloc_table, t) <= integer_of_int32(i_2)) and
   (integer_of_int32(i_2) <= offset_max(Object_alloc_table, t))) ->
  forall result:int32.
  (result = select(intM_intP, shift(t, integer_of_int32(i_2)))) ->
  (integer_of_int32(j_2) <= offset_max(Object_alloc_table, t))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/SelectionSort_why.why     : ................................................#.... (52/0/0/1/0)
total   :  53
valid   :  52 ( 98%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   1 (  2%)
failure :   0 (  0%)
