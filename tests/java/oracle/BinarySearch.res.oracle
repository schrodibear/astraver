========== file tests/java/BinarySearch.java ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*  Copyright (C) 2002-2008                                               */
/*    Romain BARDOU                                                       */
/*    Jean-François COUCHOT                                               */
/*    Mehdi DOGGUY                                                        */
/*    Jean-Christophe FILLIÂTRE                                           */
/*    Thierry HUBERT                                                      */
/*    Claude MARCHÉ                                                       */
/*    Yannick MOY                                                         */
/*    Christine PAULIN                                                    */
/*    Yann RÉGIS-GIANAS                                                   */
/*    Nicolas ROUSSET                                                     */
/*    Xavier URBAIN                                                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU General Public                   */
/*  License version 2, as published by the Free Software Foundation.      */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/*  See the GNU General Public License version 2 for more details         */
/*  (enclosed in the file GPL).                                           */
/*                                                                        */
/**************************************************************************/

//@+ CheckArithOverflow = yes

/*@ lemma mean_property : 
  @   \forall integer x y; x <= y ==> x <= x+(y-x)/2 <= y; 
  @*/

/*@ predicate is_sorted{L}(int[] t) =
  @   t != null && 
  @   \forall integer i j; 
  @     0 <= i && i <= j && j < t.length ==> t[i] <= t[j] ;
  @*/


class BinarySearch {

    /* binary_search(t,v) search for element v in array t 
       between index 0 and t.length-1
       array t is assumed to be sorted in increasing order
       returns an index i between 0 and t.length-1 where t[i] equals v, 
       or -1 if no element in t is equal to v  
    */
    
    /*@ requires t != null;
      @ ensures -1 <= \result < t.length; 
      @ behavior success:
      @   ensures \result >= 0 ==> t[\result] == v;
      @ behavior failure:
      @  assumes 
      @    \forall integer k1 k2; 
      @       0 <= k1 <= k2 <= t.length-1 ==> t[k1] <= t[k2];
      @  ensures \result == -1 ==>
      @     \forall integer k; 0 <= k < t.length ==> t[k] != v;
      @*/
    static int binary_search(int t[], int v) {
	int l = 0, u = t.length - 1;
	/*@ loop_invariant 
	  @   0 <= l && u <= t.length - 1;
	  @ for failure: 
	  @  loop_invariant 
	  @    \forall integer k; 0 <= k < t.length ==> t[k] == v ==> l <= k <= u;
	  @ loop_variant 
	  @   u-l ;
	  @*/
	while (l <= u ) {
	    int m = l + (u - l) / 2;
	    if (t[m] < v) l = m + 1;
	    else if (t[m] > v) u = m - 1;
	    else return m; 
	}
	return -1;
    }

}
    
========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function BinarySearch_binary_search for method BinarySearch.binary_search
Generating JC function cons_BinarySearch for constructor BinarySearch
Done.
========== file tests/java/BinarySearch.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

logic is_sorted{L}(intM[0..] t) =
(Non_null_intM(t) &&
  (\forall integer i;
    (\forall integer j;
      ((((0 <= i) && (i <= j)) && (j < (\offset_max(t) + 1))) ==>
        ((t + i).intP <= (t + j).intP)))))

lemma mean_property :
(\forall integer x;
  (\forall integer y;
    ((x <= y) ==> ((x <= (x + ((y - x) / 2))) && ((x + ((y - x) / 2)) <= y)))))

logic Non_null_intM{Here}(intM[0..] x) =
(\offset_max(x) >= -1)

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag BinarySearch = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  int32 intP;
}

boolean non_null_intM(intM[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(intM[0..] x)
behavior non_null:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && ((\result == (\offset_max(x) + 1)) && true)));
;

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

int32 BinarySearch_binary_search(intM[0..] t_0, int32 v)
  requires (K_21 : Non_null_intM(t_0));
behavior default:
  ensures (K_1 : (((- 1) <= \result) && (\result < (\offset_max(t_0) + 1))));
behavior success:
  ensures (K_2 : ((\result >= 0) ==> ((t_0 + \result).intP == v)));
behavior failure:
  assumes (\forall integer k1;
            (\forall integer k2;
              ((((0 <= k1) && (k1 <= k2)) &&
                 (k2 <= ((\offset_max(t_0) + 1) - 1))) ==>
                ((t_0 + k1).intP <= (t_0 + k2).intP))));
  ensures (K_3 : ((\result == (- 1)) ==>
                   (\forall integer k;
                     (((0 <= k) && (k < (\offset_max(t_0) + 1))) ==>
                       ((t_0 + k).intP != v)))));
{  
   {  
      (var int32 l = (K_20 : 0));
      
      {  
         (var int32 u = (K_19 : (((K_18 : java_array_length_intM(t_0)) - 1) :> int32)));
         
         {  
            
            invariant (K_4 : ((0 <= l) &&
                               (u <= ((\offset_max(t_0) + 1) - 1))));
            invariant for failure: (K_5 : (\forall integer k_0;
                                            (((0 <= k_0) &&
                                               (k_0 < (\offset_max(t_0) + 1))) ==>
                                              (((t_0 + k_0).intP == v) ==>
                                                ((l <= k_0) && (k_0 <= u))))));
            variant (K_6 : (u - l));
            while ((K_16 : (l <= u)))
            {  
               {  
                  (var int32 m = (K_15 : ((l +
                                            (K_14 : (((K_13 : ((u - l) :> int32)) /
                                                       2) :> int32))) :> int32)));
                  (if (K_12 : ((K_11 : (t_0 + m).intP) < v)) then (l = 
                  (K_10 : ((m + 1) :> int32))) else (if (K_9 : ((K_8 : 
                                                                (t_0 +
                                                                  m).intP) >
                                                                 v)) then (u = 
                                                    (K_7 : ((m - 1) :> int32))) else 
                                                    (return m)))
               }
            };
            
            (return (K_17 : ((- 1) :> int32)))
         }
      }
   }
}

unit cons_BinarySearch(BinarySearch[0] this_0)
;

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/BinarySearch.jloc tests/java/BinarySearch.jc && make -f tests/java/BinarySearch.makefile gui"
End:
*/
========== file tests/java/BinarySearch.jloc ==========
[K_10]
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 23
end = 28

[K_11]
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 9
end = 13

[K_12]
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 9
end = 17

[K_13]
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 18
end = 23

[K_14]
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 17
end = 28

[K_15]
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 13
end = 28

[K_16]
file = "HOME/tests/java/BinarySearch.java"
line = 73
begin = 8
end = 14

[K_17]
file = "HOME/tests/java/BinarySearch.java"
line = 79
begin = 8
end = 10

[K_18]
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[K_19]
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 28

[K_20]
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 9
end = 10

[K_21]
file = "HOME/tests/java/BinarySearch.java"
line = 52
begin = 17
end = 26

[K_1]
file = "HOME/tests/java/BinarySearch.java"
line = 53
begin = 16
end = 40

[K_2]
file = "HOME/tests/java/BinarySearch.java"
line = 55
begin = 18
end = 50

[K_3]
file = "HOME/tests/java/BinarySearch.java"
line = 60
begin = 17
end = 97

[K_4]
file = "HOME/tests/java/BinarySearch.java"
line = 66
begin = 7
end = 34

[K_5]
file = "HOME/tests/java/BinarySearch.java"
line = 69
begin = 8
end = 74

[K_6]
file = "HOME/tests/java/BinarySearch.java"
line = 71
begin = 7
end = 10

[K_7]
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 28
end = 33

[K_8]
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 14
end = 18

[K_9]
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 14
end = 22

[cons_BinarySearch]
name = "Constructor of class BinarySearch"
file = "HOME/"
line = 0
begin = -1
end = -1

[BinarySearch_binary_search]
name = "Method binary_search"
file = "HOME/tests/java/BinarySearch.java"
line = 63
begin = 15
end = 28

========== jessie execution ==========
Generating Why function BinarySearch_binary_search
========== file tests/java/BinarySearch.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) --no-arrays  -split-user-conj -explain -locs BinarySearch.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs BinarySearch.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/BinarySearch_why.sx

project: why/BinarySearch.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILES) why/$*.why

goals: why/BinarySearch_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILES) why/$*.why

coq: coq/BinarySearch_why.vo

coq/BinarySearch_why.v: why/BinarySearch.why
	@echo 'why -coq-v8 [...] why/BinarySearch.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILES) why/BinarySearch.why

coq-goals: goals coq/BinarySearch_ctx_why.vo
	for f in why/BinarySearch_po*.why; do make -f BinarySearch.makefile coq/`basename $$f .why`_why.v ; done

coq/BinarySearch_ctx_why.v: why/BinarySearch_ctx.why
	@echo 'why -coq-v8 [...] why/BinarySearch_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/BinarySearch_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export BinarySearch_ctx_why." -coq-tactic "intuition" why/BinarySearch_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/BinarySearch_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@jessie" $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@why" $(JESSIELIBFILES)

isabelle: isabelle/BinarySearch_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/BinarySearch_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -dir simplify $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/BinarySearch_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) -alt-ergo -dir why $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/BinarySearch_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILES) why/$*.why

harvey: harvey/BinarySearch_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILES) why/$*.why

zenon: zenon/BinarySearch_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/BinarySearch_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILES) why/$*.why

z3: smtlib/BinarySearch_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/BinarySearch_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/BinarySearch_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

gui stat: BinarySearch.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

-include BinarySearch.depend

depend: coq/BinarySearch_why.v
	-$(COQDEP) -I coq coq/BinarySearch*_why.v > BinarySearch.depend

clean:
	rm -f coq/*.vo

========== file tests/java/BinarySearch.loc ==========
[JC_90]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_91]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_92]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_40]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_41]
file = "HOME/tests/java/BinarySearch.java"
line = 55
begin = 18
end = 50

[JC_42]
file = "HOME/tests/java/BinarySearch.java"
line = 55
begin = 18
end = 50

[JC_43]
file = "HOME/tests/java/BinarySearch.java"
line = 60
begin = 17
end = 97

[JC_44]
file = "HOME/tests/java/BinarySearch.java"
line = 60
begin = 17
end = 97

[JC_45]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_46]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 28

[JC_1]
file = "HOME/tests/java/BinarySearch.jc"
line = 57
begin = 8
end = 21

[JC_47]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 28

[JC_3]
file = "HOME/tests/java/BinarySearch.jc"
line = 57
begin = 8
end = 21

[JC_49]
file = "HOME/tests/java/BinarySearch.java"
line = 66
begin = 7
end = 34

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/java/BinarySearch.jc"
line = 59
begin = 11
end = 66

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_51]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 18
end = 23

[JC_52]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_53]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 17
end = 28

[JC_54]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 13
end = 28

[JC_55]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 18
end = 23

[JC_56]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_57]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 17
end = 28

[JC_58]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 74
begin = 13
end = 28

[JC_59]
kind = PointerDeref
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 9
end = 13

[JC_60]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 23
end = 28

[JC_61]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 75
begin = 23
end = 28

[JC_62]
kind = PointerDeref
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 14
end = 18

[JC_10]
file = "HOME/tests/java/BinarySearch.jc"
line = 59
begin = 11
end = 66

[JC_63]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 28
end = 33

[JC_11]
file = "HOME/tests/java/BinarySearch.jc"
line = 62
begin = 8
end = 30

[JC_64]
kind = ArithOverflow
file = "HOME/tests/java/BinarySearch.java"
line = 76
begin = 28
end = 33

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_13]
file = "HOME/tests/java/BinarySearch.jc"
line = 62
begin = 8
end = 30

[JC_66]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/java/BinarySearch.java"
line = 66
begin = 7
end = 34

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_69]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/java/BinarySearch.jc"
line = 65
begin = 11
end = 113

[JC_70]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_71]
file = "HOME/tests/java/BinarySearch.java"
line = 71
begin = 7
end = 10

[JC_72]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[BinarySearch_binary_search_ensures_default]
name = "Method binary_search"
behavior = "Default behavior"
file = "HOME/tests/java/BinarySearch.java"
line = 63
begin = 15
end = 28

[JC_20]
file = "HOME/tests/java/BinarySearch.jc"
line = 64
begin = 10
end = 18

[JC_73]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_21]
file = "HOME/tests/java/BinarySearch.jc"
line = 65
begin = 11
end = 113

[JC_74]
file = "HOME/tests/java/BinarySearch.java"
line = 66
begin = 7
end = 34

[JC_22]
file = "HOME/tests/java/BinarySearch.jc"
line = 64
begin = 10
end = 18

[JC_75]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/java/BinarySearch.jc"
line = 69
begin = 8
end = 23

[BinarySearch_binary_search_ensures_failure]
name = "Method binary_search"
behavior = "Normal behavior `failure'"
file = "HOME/tests/java/BinarySearch.java"
line = 63
begin = 15
end = 28

[JC_76]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_25]
file = "HOME/tests/java/BinarySearch.jc"
line = 69
begin = 8
end = 23

[JC_78]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_79]
kind = UserCall
file = "HOME/tests/java/BinarySearch.java"
line = 64
begin = 16
end = 24

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[mean_property]
name = "mean_property"
behavior = "lemma"
file = "HOME/tests/java/BinarySearch.jc"
line = 23
begin = 0
end = 143

[JC_80]
file = "HOME/tests/java/BinarySearch.java"
line = 69
begin = 8
end = 74

[JC_81]
file = "HOME/tests/java/BinarySearch.java"
line = 66
begin = 7
end = 34

[JC_82]
file = "HOME/tests/java/BinarySearch.java"
line = 69
begin = 8
end = 74

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
file = "HOME/tests/java/BinarySearch.jc"
line = 71
begin = 11
end = 65

[JC_84]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_32]
file = "HOME/tests/java/BinarySearch.jc"
line = 71
begin = 11
end = 65

[JC_85]
kind = DivByZero
file = "HOME/tests/java/BinarySearch.jc"
line = 113
begin = 54
end = 140

[JC_33]
file = "HOME/tests/java/BinarySearch.java"
line = 52
begin = 17
end = 26

[JC_86]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_87]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/tests/java/BinarySearch.java"
line = 52
begin = 17
end = 26

[JC_88]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_89]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_37]
file = "HOME/tests/java/BinarySearch.java"
line = 53
begin = 16
end = 40

[JC_38]
file = "HOME/tests/java/BinarySearch.java"
line = 53
begin = 16
end = 40

[BinarySearch_binary_search_ensures_success]
name = "Method binary_search"
behavior = "Normal behavior `success'"
file = "HOME/tests/java/BinarySearch.java"
line = 63
begin = 15
end = 28

[JC_39]
file = "HOME/"
line = 0
begin = -1
end = -1

[BinarySearch_binary_search_safety]
name = "Method binary_search"
behavior = "Safety"
file = "HOME/tests/java/BinarySearch.java"
line = 63
begin = 15
end = 28

========== file tests/java/why/BinarySearch.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

logic BinarySearch_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom BinarySearch_parenttag_Object : parenttag(BinarySearch_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x_0:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x_0), (0))

predicate Non_null_intM(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x), neg_int((1)))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_bitvector: bitvector -> Object pointer

logic bitvector_of_Object: Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object :
 (forall x:Object pointer. (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

exception Return_label_exc of unit

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector :
 (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_byte: byte -> bitvector

logic byte_of_bitvector: bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector :
 (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char: char -> bitvector

logic char_of_bitvector: bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector :
 (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_interface: interface pointer -> bitvector

logic interface_of_bitvector: bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic bitvector_of_long: long -> bitvector

logic long_of_bitvector: bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector :
 (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short: short -> bitvector

logic short_of_bitvector: bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector :
 (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

predicate eq_byte(x:byte,
 y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte :
 (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

predicate eq_char(x:char,
 y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char :
 (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long,
 y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short,
 y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_of_bitvector_of_bitvector_of_interface :
 (forall x:interface pointer.
  (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate is_sorted(t:Object pointer,
 Object_alloc_table_at_L:Object alloc_table,
 intM_intP_at_L:(Object, int32) memory) =
 (Non_null_intM(t, Object_alloc_table_at_L)
 and (forall i:int.
      (forall j:int.
       ((le_int((0), i)
        and (le_int(i, j)
            and lt_int(j,
                add_int(offset_max(Object_alloc_table_at_L, t), (1))))) ->
        le_int(integer_of_int32(select(intM_intP_at_L, shift(t, i))),
        integer_of_int32(select(intM_intP_at_L, shift(t, j))))))))

predicate left_valid_struct_Object(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_BinarySearch(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_intM(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer,
 a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_of_bitvector_of_bitvector_of_long :
 (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

goal mean_property :
 (forall x_4:int.
  (forall y:int.
   (le_int(x_4, y) ->
    (le_int(x_4, add_int(x_4, div_int(sub_int(y, x_4), (2))))
    and le_int(add_int(x_4, div_int(sub_int(y, x_4), (2))), y)))))

axiom mean_property_as_axiom :
 (forall x_4:int.
  (forall y:int.
   (le_int(x_4, y) ->
    (le_int(x_4, add_int(x_4, div_int(sub_int(y, x_4), (2))))
    and le_int(add_int(x_4, div_int(sub_int(y, x_4), (2))), y)))))

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_BinarySearch(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_intM(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer,
 b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_of_bitvector_of_bitvector_of_short :
 (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

predicate strict_valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_BinarySearch(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_BinarySearch(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_BinarySearch(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

parameter Object_alloc_table : Object alloc_table ref

parameter intM_intP : (Object, int32) memory ref

parameter BinarySearch_binary_search :
 t_0:Object pointer ->
  v:int32 ->
   { } int32 reads Object_alloc_table,intM_intP
   { (((forall k1:int.
        (forall k2:int.
         ((le_int((0), k1@)
          and (le_int(k1@, k2@)
              and le_int(k2@,
                  sub_int(add_int(offset_max(Object_alloc_table@, t_0@), (1)),
                  (1))))) ->
          le_int(integer_of_int32(select(intM_intP@, shift(t_0@, k1@))),
          integer_of_int32(select(intM_intP@, shift(t_0@, k2@))))))) ->
       (JC_44:
       (eq_int(integer_of_int32(result), neg_int((1))) ->
        (forall k:int.
         ((le_int((0), k)
          and lt_int(k, add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
          neq_int(integer_of_int32(select(intM_intP, shift(t_0, k))),
          integer_of_int32(v)))))))
     and ((JC_42:
          (ge_int(integer_of_int32(result), (0)) ->
           eq_int(integer_of_int32(select(intM_intP,
                                   shift(t_0, integer_of_int32(result)))),
           integer_of_int32(v))))
         and (JC_38:
             (le_int(neg_int((1)), integer_of_int32(result))
             and lt_int(integer_of_int32(result),
                 add_int(offset_max(Object_alloc_table, t_0), (1))))))) }

parameter BinarySearch_binary_search_requires :
 t_0:Object pointer ->
  v:int32 ->
   { (JC_33: Non_null_intM(t_0, Object_alloc_table))} int32
   reads Object_alloc_table,intM_intP
   { (((forall k1:int.
        (forall k2:int.
         ((le_int((0), k1@)
          and (le_int(k1@, k2@)
              and le_int(k2@,
                  sub_int(add_int(offset_max(Object_alloc_table@, t_0@), (1)),
                  (1))))) ->
          le_int(integer_of_int32(select(intM_intP@, shift(t_0@, k1@))),
          integer_of_int32(select(intM_intP@, shift(t_0@, k2@))))))) ->
       (JC_44:
       (eq_int(integer_of_int32(result), neg_int((1))) ->
        (forall k:int.
         ((le_int((0), k)
          and lt_int(k, add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
          neq_int(integer_of_int32(select(intM_intP, shift(t_0, k))),
          integer_of_int32(v)))))))
     and ((JC_42:
          (ge_int(integer_of_int32(result), (0)) ->
           eq_int(integer_of_int32(select(intM_intP,
                                   shift(t_0, integer_of_int32(result)))),
           integer_of_int32(v))))
         and (JC_38:
             (le_int(neg_int((1)), integer_of_int32(result))
             and lt_int(integer_of_int32(result),
                 add_int(offset_max(Object_alloc_table, t_0), (1))))))) }

parameter Object_tag_table : Object tag_table ref

parameter alloc_bitvector_struct_BinarySearch :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_BinarySearch(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_BinarySearch_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_BinarySearch(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_intM_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_intM(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_BinarySearch :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_BinarySearch(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, BinarySearch_tag)))) }

parameter alloc_struct_BinarySearch_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_BinarySearch(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, BinarySearch_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter alloc_struct_intM_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_intM(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_BinarySearch :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_BinarySearch_requires :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter java_array_length_intM :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_21:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter java_array_length_intM_requires :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_21:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_32:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_Object_requires :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_32:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_intM :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter non_null_intM_requires :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

let BinarySearch_binary_search_ensures_default =
 fun (t_0 : Object pointer) (v : int32) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_35: Non_null_intM(t_0, Object_alloc_table))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (safe_int32_of_integer_ (K_20: (0))) in
     (let u = ref (K_19:
                  (safe_int32_of_integer_ ((sub_int (K_18:
                                                    (JC_66:
                                                    (java_array_length_intM_requires t_0)))) (1)))) in
     begin
       try
        while true do
        { invariant
            (JC_67:
            (le_int((0), integer_of_int32(l))
            and le_int(integer_of_int32(u),
                sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                (1)))))
          variant (JC_71 : sub_int(integer_of_int32(u), integer_of_int32(l))) }
         begin
           [ { } unit { true } ];
          try
           (let jessie_14 = begin
                              (if (K_16:
                                  ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u)))
                              then
                               (let m = (K_15:
                                        (safe_int32_of_integer_ ((add_int 
                                                                  (integer_of_int32 !l)) 
                                                                 (integer_of_int32 
                                                                  (K_14:
                                                                  (safe_int32_of_integer_ 
                                                                   (JC_70:
                                                                   ((div_int 
                                                                    (integer_of_int32 
                                                                    (K_13:
                                                                    (safe_int32_of_integer_ 
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l)))))) (2))))))))) in
                               (if (K_12:
                                   ((lt_int_ (integer_of_int32 (K_11:
                                                               ((safe_acc_ !intM_intP) 
                                                                ((shift t_0) 
                                                                 (integer_of_int32 m)))))) 
                                    (integer_of_int32 v)))
                               then
                                (let jessie_11 = (l := (K_10:
                                                       (safe_int32_of_integer_ 
                                                        ((add_int (integer_of_int32 m)) (1))))) in
                                void)
                               else
                                (if (K_9:
                                    ((gt_int_ (integer_of_int32 (K_8:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 m)))))) 
                                     (integer_of_int32 v)))
                                then
                                 (let jessie_12 = (u := (K_7:
                                                        (safe_int32_of_integer_ 
                                                         ((sub_int (integer_of_int32 m)) (1))))) in
                                 void)
                                else
                                 begin   (return := m); (raise Return) end)))
                              else
                               (let jessie_13 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := (K_17: (safe_int32_of_integer_ (neg_int (1)))));
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_37:
    (le_int(neg_int((1)), integer_of_int32(result))
    and lt_int(integer_of_int32(result),
        add_int(offset_max(Object_alloc_table, t_0), (1))))) }

let BinarySearch_binary_search_ensures_failure =
 fun (t_0 : Object pointer) (v : int32) ->
  { ((forall k1:int.
      (forall k2:int.
       ((le_int((0), k1)
        and (le_int(k1, k2)
            and le_int(k2,
                sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                (1))))) ->
        le_int(integer_of_int32(select(intM_intP, shift(t_0, k1))),
        integer_of_int32(select(intM_intP, shift(t_0, k2)))))))
    and (left_valid_struct_intM(t_0, (0), Object_alloc_table)
        and (JC_35: Non_null_intM(t_0, Object_alloc_table)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (safe_int32_of_integer_ (K_20: (0))) in
     (let u = ref (K_19:
                  (safe_int32_of_integer_ ((sub_int (K_18:
                                                    (JC_79:
                                                    (java_array_length_intM t_0)))) (1)))) in
     begin
       try
        while true do
        { invariant
            (JC_80:
            (forall k_0:int.
             ((le_int((0), k_0)
              and lt_int(k_0,
                  add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
              (eq_int(integer_of_int32(select(intM_intP, shift(t_0, k_0))),
               integer_of_int32(v)) ->
               (le_int(integer_of_int32(l), k_0)
               and le_int(k_0, integer_of_int32(u)))))))
           }
         begin
           [ { } unit reads Object_alloc_table,intM_intP,l,u
             { ((JC_81:
                (le_int((0), integer_of_int32(l))
                and le_int(integer_of_int32(u),
                    sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                    (1)))))
               and (JC_82:
                   (forall k_0:int.
                    ((le_int((0), k_0)
                     and lt_int(k_0,
                         add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
                     (eq_int(integer_of_int32(select(intM_intP,
                                              shift(t_0, k_0))),
                      integer_of_int32(v)) ->
                      (le_int(integer_of_int32(l), k_0)
                      and le_int(k_0, integer_of_int32(u)))))))) } ];
          try
           (let jessie_26 = begin
                              (if (K_16:
                                  ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u)))
                              then
                               (let m = (K_15:
                                        (safe_int32_of_integer_ ((add_int 
                                                                  (integer_of_int32 !l)) 
                                                                 (integer_of_int32 
                                                                  (K_14:
                                                                  (safe_int32_of_integer_ 
                                                                   (JC_85:
                                                                   ((div_int 
                                                                    (integer_of_int32 
                                                                    (K_13:
                                                                    (safe_int32_of_integer_ 
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l)))))) (2))))))))) in
                               (if (K_12:
                                   ((lt_int_ (integer_of_int32 (K_11:
                                                               ((safe_acc_ !intM_intP) 
                                                                ((shift t_0) 
                                                                 (integer_of_int32 m)))))) 
                                    (integer_of_int32 v)))
                               then
                                (let jessie_23 = (l := (K_10:
                                                       (safe_int32_of_integer_ 
                                                        ((add_int (integer_of_int32 m)) (1))))) in
                                void)
                               else
                                (if (K_9:
                                    ((gt_int_ (integer_of_int32 (K_8:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 m)))))) 
                                     (integer_of_int32 v)))
                                then
                                 (let jessie_24 = (u := (K_7:
                                                        (safe_int32_of_integer_ 
                                                         ((sub_int (integer_of_int32 m)) (1))))) in
                                 void)
                                else
                                 begin   (return := m); (raise Return) end)))
                              else
                               (let jessie_25 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := (K_17: (safe_int32_of_integer_ (neg_int (1)))));
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_43:
    (eq_int(integer_of_int32(result), neg_int((1))) ->
     (forall k:int.
      ((le_int((0), k)
       and lt_int(k, add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
       neq_int(integer_of_int32(select(intM_intP, shift(t_0, k))),
       integer_of_int32(v)))))) }

let BinarySearch_binary_search_ensures_success =
 fun (t_0 : Object pointer) (v : int32) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_35: Non_null_intM(t_0, Object_alloc_table))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (safe_int32_of_integer_ (K_20: (0))) in
     (let u = ref (K_19:
                  (safe_int32_of_integer_ ((sub_int (K_18:
                                                    (JC_73:
                                                    (java_array_length_intM t_0)))) (1)))) in
     begin
       try
        while true do
        { invariant (JC_75: true)  }
         begin
           [ { } unit reads Object_alloc_table,l,u
             { (JC_74:
               (le_int((0), integer_of_int32(l))
               and le_int(integer_of_int32(u),
                   sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                   (1))))) } ];
          try
           (let jessie_20 = begin
                              (if (K_16:
                                  ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u)))
                              then
                               (let m = (K_15:
                                        (safe_int32_of_integer_ ((add_int 
                                                                  (integer_of_int32 !l)) 
                                                                 (integer_of_int32 
                                                                  (K_14:
                                                                  (safe_int32_of_integer_ 
                                                                   (JC_77:
                                                                   ((div_int 
                                                                    (integer_of_int32 
                                                                    (K_13:
                                                                    (safe_int32_of_integer_ 
                                                                    ((sub_int 
                                                                    (integer_of_int32 !u)) 
                                                                    (integer_of_int32 !l)))))) (2))))))))) in
                               (if (K_12:
                                   ((lt_int_ (integer_of_int32 (K_11:
                                                               ((safe_acc_ !intM_intP) 
                                                                ((shift t_0) 
                                                                 (integer_of_int32 m)))))) 
                                    (integer_of_int32 v)))
                               then
                                (let jessie_17 = (l := (K_10:
                                                       (safe_int32_of_integer_ 
                                                        ((add_int (integer_of_int32 m)) (1))))) in
                                void)
                               else
                                (if (K_9:
                                    ((gt_int_ (integer_of_int32 (K_8:
                                                                ((safe_acc_ !intM_intP) 
                                                                 ((shift t_0) 
                                                                  (integer_of_int32 m)))))) 
                                     (integer_of_int32 v)))
                                then
                                 (let jessie_18 = (u := (K_7:
                                                        (safe_int32_of_integer_ 
                                                         ((sub_int (integer_of_int32 m)) (1))))) in
                                 void)
                                else
                                 begin   (return := m); (raise Return) end)))
                              else
                               (let jessie_19 = (raise (Loop_exit_exc void)) in
                               void));
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := (K_17: (safe_int32_of_integer_ (neg_int (1)))));
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_41:
    (ge_int(integer_of_int32(result), (0)) ->
     eq_int(integer_of_int32(select(intM_intP,
                             shift(t_0, integer_of_int32(result)))),
     integer_of_int32(v)))) }

let BinarySearch_binary_search_safety =
 fun (t_0 : Object pointer) (v : int32) ->
  { (left_valid_struct_intM(t_0, (0), Object_alloc_table)
    and (JC_35: Non_null_intM(t_0, Object_alloc_table))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (safe_int32_of_integer_ (K_20: (0))) in
     (let u = ref (K_19:
                  (JC_48:
                  (int32_of_integer_ ((sub_int (K_18:
                                               (JC_47:
                                               (java_array_length_intM t_0)))) (1))))) in
     begin
       try
        while true do
        { invariant (JC_50: true)  }
         begin
           [ { } unit reads Object_alloc_table,l,u
             { (JC_49:
               (le_int((0), integer_of_int32(l))
               and le_int(integer_of_int32(u),
                   sub_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
                   (1))))) } ];
          try
           (let jessie_8 = begin
                             (if (K_16:
                                 ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u)))
                             then
                              (let m = (K_15:
                                       (JC_58:
                                       (int32_of_integer_ ((add_int (integer_of_int32 !l)) 
                                                           (integer_of_int32 
                                                            (K_14:
                                                            (JC_57:
                                                            (int32_of_integer_ 
                                                             (JC_56:
                                                             ((div_int_ 
                                                               (integer_of_int32 
                                                                (K_13:
                                                                (JC_55:
                                                                (int32_of_integer_ 
                                                                 ((sub_int 
                                                                   (integer_of_int32 !u)) 
                                                                  (integer_of_int32 !l))))))) (2))))))))))) in
                              (if (K_12:
                                  ((lt_int_ (integer_of_int32 (K_11:
                                                              (JC_59:
                                                              ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) 
                                                               (integer_of_int32 m)))))) 
                                   (integer_of_int32 v)))
                              then
                               (let jessie_5 = (l := (K_10:
                                                     (JC_61:
                                                     (int32_of_integer_ 
                                                      ((add_int (integer_of_int32 m)) (1)))))) in
                               void)
                              else
                               (if (K_9:
                                   ((gt_int_ (integer_of_int32 (K_8:
                                                               (JC_62:
                                                               ((((offset_acc_ !Object_alloc_table) !intM_intP) t_0) 
                                                                (integer_of_int32 m)))))) 
                                    (integer_of_int32 v)))
                               then
                                (let jessie_6 = (u := (K_7:
                                                      (JC_64:
                                                      (int32_of_integer_ 
                                                       ((sub_int (integer_of_int32 m)) (1)))))) in
                                void)
                               else begin   (return := m); (raise Return) end)))
                             else
                              (let jessie_7 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
           void)
           with
           Loop_continue_exc jessie_2 ->
           void end
         end
        done
        with
        Loop_exit_exc jessie_1 ->
        void end;
      (return := (K_17: (safe_int32_of_integer_ (neg_int (1)))));
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


========== make project execution ==========
why --project [...] why/BinarySearch.why
========== file tests/java/why/BinarySearch.wpr ==========
<project name="BinarySearch" context="why/BinarySearch_ctx.why">
  <lemma name="mean_property">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <goal why_file="why/BinarySearch_po1.why">
      <location file = "HOME/tests/java/BinarySearch.jc" line = "23" begin = "0" end = "143"/>
      <explain kind = "Lemma"/>
    </goal>
  </lemma>
  <function name="mean_property">
    <location file = "HOME/tests/java/BinarySearch.jc" line = "23" begin = "0" end = "143"/>
  </function>
  <function name="Method binary_search">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/BinarySearch_po24.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "64" begin = "16" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po25.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "64" begin = "16" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po26.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "18" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po27.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "18" end = "23"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po28.why">
      <location file = "HOME/tests/java/BinarySearch.jc" line = "113" begin = "54" end = "140"/>
      <explain kind = "Pre"
text = "DivByZero"/>
    </goal>
    <goal why_file="why/BinarySearch_po29.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "17" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po30.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "17" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po31.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "13" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po32.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "74" begin = "13" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po33.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "75" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/BinarySearch_po34.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "75" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = "PointerDeref"/>
    </goal>
    <goal why_file="why/BinarySearch_po35.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "75" begin = "23" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po36.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "75" begin = "23" end = "28"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po37.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "76" begin = "28" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    <goal why_file="why/BinarySearch_po38.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "76" begin = "28" end = "33"/>
      <explain kind = "Pre"
text = "ArithOverflow"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `success'">
    <goal why_file="why/BinarySearch_po22.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "55" begin = "18" end = "50"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/BinarySearch_po23.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "55" begin = "18" end = "50"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `failure'">
    <goal why_file="why/BinarySearch_po14.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/BinarySearch_po15.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/BinarySearch_po16.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po17.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po18.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po19.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "69" begin = "8" end = "74"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po20.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "60" begin = "17" end = "97"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/BinarySearch_po21.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "60" begin = "17" end = "97"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
    <behavior name="Default behavior">
    <goal why_file="why/BinarySearch_po2.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "66" begin = "7" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/BinarySearch_po3.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "66" begin = "7" end = "34"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/BinarySearch_po4.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "66" begin = "7" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po5.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "71" begin = "7" end = "10"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/BinarySearch_po6.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "71" begin = "7" end = "10"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/BinarySearch_po7.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "66" begin = "7" end = "34"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/BinarySearch_po8.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "71" begin = "7" end = "10"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/BinarySearch_po9.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "71" begin = "7" end = "10"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/BinarySearch_po10.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "53" begin = "16" end = "40"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/BinarySearch_po11.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "53" begin = "16" end = "40"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/BinarySearch_po12.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "53" begin = "16" end = "40"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/BinarySearch_po13.why">
      <location file = "HOME/tests/java/BinarySearch.java" line = "53" begin = "16" end = "40"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/BinarySearch_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic BinarySearch_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom BinarySearch_parenttag_Object: parenttag(BinarySearch_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_byte : byte -> bitvector

logic byte_of_bitvector : bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector:
  (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char : char -> bitvector

logic char_of_bitvector : bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector:
  (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic bitvector_of_long : long -> bitvector

logic long_of_bitvector : bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector:
  (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short : short -> bitvector

logic short_of_bitvector : bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector:
  (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte:
  (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char:
  (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_sorted(t: Object pointer,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int32) memory) =
  (Non_null_intM(t, Object_alloc_table_at_L) and
   (forall i:int.
     (forall j:int.
       (((0 <= i) and
         ((i <= j) and (j < (offset_max(Object_alloc_table_at_L, t) + 1)))) ->
        (integer_of_int32(select(intM_intP_at_L, shift(t,
        i))) <= integer_of_int32(select(intM_intP_at_L, shift(t, j))))))))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_BinarySearch(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_of_bitvector_of_bitvector_of_long:
  (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom mean_property_as_axiom:
  (forall x_4:int.
    (forall y:int.
      ((x_4 <= y) ->
       ((x_4 <= (x_4 + ((y - x_4) / 2))) and ((x_4 + ((y - x_4) / 2)) <= y)))))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_BinarySearch(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_of_bitvector_of_bitvector_of_short:
  (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_BinarySearch(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_BinarySearch(p: unit pointer, a: int,
  b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_BinarySearch(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/BinarySearch_po1.why ==========
goal mean_property:
  (forall x_4:int.
    (forall y:int.
      ((x_4 <= y) ->
       ((x_4 <= (x_4 + ((y - x_4) / 2))) and ((x_4 + ((y - x_4) / 2)) <= y)))))

========== file tests/java/why/BinarySearch_po10.why ==========
goal BinarySearch_binary_search_ensures_default_po_9:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  ("JC_37": ((-1) <= integer_of_int32(return)))

========== file tests/java/why/BinarySearch_po11.why ==========
goal BinarySearch_binary_search_ensures_default_po_10:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  ("JC_37": (integer_of_int32(return) < (offset_max(Object_alloc_table,
  t_0) + 1)))

========== file tests/java/why/BinarySearch_po12.why ==========
goal BinarySearch_binary_search_ensures_default_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_37": ((-1) <= integer_of_int32(return)))

========== file tests/java/why/BinarySearch_po13.why ==========
goal BinarySearch_binary_search_ensures_default_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_37": (integer_of_int32(return) < (offset_max(Object_alloc_table,
  t_0) + 1)))

========== file tests/java/why/BinarySearch_po14.why ==========
goal BinarySearch_binary_search_ensures_failure_po_1:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(result) <= k_0))

========== file tests/java/why/BinarySearch_po15.why ==========
goal BinarySearch_binary_search_ensures_failure_po_2:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(result1)))

========== file tests/java/why/BinarySearch_po16.why ==========
goal BinarySearch_binary_search_ensures_failure_po_3:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(l0) <= k_0))

========== file tests/java/why/BinarySearch_po17.why ==========
goal BinarySearch_binary_search_ensures_failure_po_4:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(u)))

========== file tests/java/why/BinarySearch_po18.why ==========
goal BinarySearch_binary_search_ensures_failure_po_5:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(l) <= k_0))

========== file tests/java/why/BinarySearch_po19.why ==========
goal BinarySearch_binary_search_ensures_failure_po_6:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(u0)))

========== file tests/java/why/BinarySearch_po2.why ==========
goal BinarySearch_binary_search_ensures_default_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  ("JC_67": (0 <= integer_of_int32(result)))

========== file tests/java/why/BinarySearch_po20.why ==========
goal BinarySearch_binary_search_ensures_failure_po_7:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  (integer_of_int32(return) = (-1)) ->
  forall k:int.
  ((0 <= k) and (k < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_43": (integer_of_int32(select(intM_intP, shift(t_0,
  k))) <> integer_of_int32(v)))

========== file tests/java/why/BinarySearch_po21.why ==========
goal BinarySearch_binary_search_ensures_failure_po_8:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  (integer_of_int32(return) = (-1)) ->
  forall k:int.
  ((0 <= k) and (k < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_43": (integer_of_int32(select(intM_intP, shift(t_0,
  k))) <> integer_of_int32(v)))

========== file tests/java/why/BinarySearch_po22.why ==========
goal BinarySearch_binary_search_ensures_success_po_1:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_75": true) ->
  ("JC_74":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_41": (integer_of_int32(select(intM_intP, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

========== file tests/java/why/BinarySearch_po23.why ==========
goal BinarySearch_binary_search_ensures_success_po_2:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_75": true) ->
  ("JC_74":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_41": (integer_of_int32(select(intM_intP, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

========== file tests/java/why/BinarySearch_po24.why ==========
goal BinarySearch_binary_search_safety_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  ((-2147483648) <= (result0 - 1))

========== file tests/java/why/BinarySearch_po25.why ==========
goal BinarySearch_binary_search_safety_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  ((result0 - 1) <= 2147483647)

========== file tests/java/why/BinarySearch_po26.why ==========
goal BinarySearch_binary_search_safety_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  ((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l)))

========== file tests/java/why/BinarySearch_po27.why ==========
goal BinarySearch_binary_search_safety_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)

========== file tests/java/why/BinarySearch_po28.why ==========
goal BinarySearch_binary_search_safety_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0)

========== file tests/java/why/BinarySearch_po29.why ==========
goal BinarySearch_binary_search_safety_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  ((-2147483648) <= result3)

========== file tests/java/why/BinarySearch_po3.why ==========
goal BinarySearch_binary_search_ensures_default_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  ("JC_67": (integer_of_int32(result1) <= ((offset_max(Object_alloc_table,
  t_0) + 1) - 1)))

========== file tests/java/why/BinarySearch_po30.why ==========
goal BinarySearch_binary_search_safety_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (result3 <= 2147483647)

========== file tests/java/why/BinarySearch_po31.why ==========
goal BinarySearch_binary_search_safety_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  ((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4)))

========== file tests/java/why/BinarySearch_po32.why ==========
goal BinarySearch_binary_search_safety_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)

========== file tests/java/why/BinarySearch_po33.why ==========
goal BinarySearch_binary_search_safety_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5))

========== file tests/java/why/BinarySearch_po34.why ==========
goal BinarySearch_binary_search_safety_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/BinarySearch_po35.why ==========
goal BinarySearch_binary_search_safety_po_12:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) < integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(result5) + 1))

========== file tests/java/why/BinarySearch_po36.why ==========
goal BinarySearch_binary_search_safety_po_13:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) < integer_of_int32(v)) ->
  ((integer_of_int32(result5) + 1) <= 2147483647)

========== file tests/java/why/BinarySearch_po37.why ==========
goal BinarySearch_binary_search_safety_po_14:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) >= integer_of_int32(v)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result7:int32.
  (result7 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result7) > integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(result5) - 1))

========== file tests/java/why/BinarySearch_po38.why ==========
goal BinarySearch_binary_search_safety_po_15:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) >= integer_of_int32(v)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result7:int32.
  (result7 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result7) > integer_of_int32(v)) ->
  ((integer_of_int32(result5) - 1) <= 2147483647)

========== file tests/java/why/BinarySearch_po4.why ==========
goal BinarySearch_binary_search_ensures_default_po_3:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  ("JC_67": (0 <= integer_of_int32(l0)))

========== file tests/java/why/BinarySearch_po5.why ==========
goal BinarySearch_binary_search_ensures_default_po_4:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  (0 <= ("JC_71": (integer_of_int32(u) - integer_of_int32(l))))

========== file tests/java/why/BinarySearch_po6.why ==========
goal BinarySearch_binary_search_ensures_default_po_5:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  (("JC_71": (integer_of_int32(u) - integer_of_int32(l0))) < ("JC_71":
                                                             (integer_of_int32(u) - integer_of_int32(l))))

========== file tests/java/why/BinarySearch_po7.why ==========
goal BinarySearch_binary_search_ensures_default_po_6:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  ("JC_67": (integer_of_int32(u0) <= ((offset_max(Object_alloc_table,
  t_0) + 1) - 1)))

========== file tests/java/why/BinarySearch_po8.why ==========
goal BinarySearch_binary_search_ensures_default_po_7:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  (0 <= ("JC_71": (integer_of_int32(u) - integer_of_int32(l))))

========== file tests/java/why/BinarySearch_po9.why ==========
goal BinarySearch_binary_search_ensures_default_po_8:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  (("JC_71": (integer_of_int32(u0) - integer_of_int32(l))) < ("JC_71":
                                                             (integer_of_int32(u) - integer_of_int32(l))))

========== generation of Simplify VC output ==========
why -simplify [...] why/BinarySearch.why
========== file tests/java/simplify/BinarySearch_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_positive
 (FORALL (p) (<= 0 (address p))))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom BinarySearch_parenttag_Object
 (EQ (parenttag BinarySearch_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x_0 Object_alloc_table)
  (EQ (offset_max Object_alloc_table x_0) 0))

(DEFPRED (Non_null_intM x Object_alloc_table)
  (>= (offset_max Object_alloc_table x) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_bitvector_of_bitvector_of_Object
 (FORALL (x) (EQ (Object_of_bitvector (bitvector_of_Object x)) x)))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom bitvector_of_Object_of_Object_of_bitvector
 (FORALL (x) (EQ (bitvector_of_Object (Object_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_byte_of_byte_of_bitvector
 (FORALL (x) (EQ (bitvector_of_byte (byte_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_char_of_char_of_bitvector
 (FORALL (x) (EQ (bitvector_of_char (char_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_int32_of_int32_of_bitvector
 (FORALL (x) (EQ (bitvector_of_int32 (int32_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_interface_of_interface_of_bitvector
 (FORALL (x) (EQ (bitvector_of_interface (interface_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_long_of_long_of_bitvector
 (FORALL (x) (EQ (bitvector_of_long (long_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_short_of_short_of_bitvector
 (FORALL (x) (EQ (bitvector_of_short (short_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom byte_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 128) x) (<= x 127))
 (EQ (integer_of_byte (byte_of_integer x)) x))))

(DEFPRED (eq_byte x y) (EQ (integer_of_byte x) (integer_of_byte y)))

(BG_PUSH
 ;; Why axiom byte_of_bitvector_of_bitvector_of_byte
 (FORALL (x) (eq_byte (byte_of_bitvector (bitvector_of_byte x)) x)))

(BG_PUSH
 ;; Why axiom byte_range
 (FORALL (x)
 (AND (<= (- 0 128) (integer_of_byte x)) (<= (integer_of_byte x) 127))))

(BG_PUSH
 ;; Why axiom char_coerce
 (FORALL (x)
 (IMPLIES (AND (<= 0 x) (<= x 65535))
 (EQ (integer_of_char (char_of_integer x)) x))))

(DEFPRED (eq_char x y) (EQ (integer_of_char x) (integer_of_char y)))

(BG_PUSH
 ;; Why axiom char_of_bitvector_of_bitvector_of_char
 (FORALL (x) (eq_char (char_of_bitvector (bitvector_of_char x)) x)))

(BG_PUSH
 ;; Why axiom char_range
 (FORALL (x) (AND (<= 0 (integer_of_char x)) (<= (integer_of_char x) 65535))))

(DEFPRED (eq_int32 x y) (EQ (integer_of_int32 x) (integer_of_int32 y)))

(DEFPRED (eq_long x y) (EQ (integer_of_long x) (integer_of_long y)))

(DEFPRED (eq_short x y) (EQ (integer_of_short x) (integer_of_short y)))

(BG_PUSH
 ;; Why axiom int32_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_2147483648) x)
 (<= x constant_too_large_2147483647))
 (EQ (integer_of_int32 (int32_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int32_of_bitvector_of_bitvector_of_int32
 (FORALL (x) (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)))

(BG_PUSH
 ;; Why axiom int32_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_2147483648) (integer_of_int32 x))
 (<= (integer_of_int32 x) constant_too_large_2147483647))))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_bitvector_of_bitvector_of_interface
 (FORALL (x) (EQ (interface_of_bitvector (bitvector_of_interface x)) x)))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (is_sorted t Object_alloc_table_at_L intM_intP_at_L)
  (AND (Non_null_intM t Object_alloc_table_at_L)
  (FORALL (i j)
  (IMPLIES
  (AND (<= 0 i)
  (AND (<= i j) (< j (+ (offset_max Object_alloc_table_at_L t) 1))))
  (<= (integer_of_int32 (select intM_intP_at_L (shift t i))) (integer_of_int32
                                                             (select
                                                             intM_intP_at_L 
                                                             (shift t j))))))))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_BinarySearch p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_intM p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

(BG_PUSH
 ;; Why axiom long_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_9223372036854775808) x)
 (<= x constant_too_large_9223372036854775807))
 (EQ (integer_of_long (long_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom long_of_bitvector_of_bitvector_of_long
 (FORALL (x) (eq_long (long_of_bitvector (bitvector_of_long x)) x)))

(BG_PUSH
 ;; Why axiom long_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_9223372036854775808) (integer_of_long x))
 (<= (integer_of_long x) constant_too_large_9223372036854775807))))

;; mean_property, File "HOME/tests/java/BinarySearch.jc", line 23, characters 0-143
(FORALL (x_4 y)
(IMPLIES (<= x_4 y)
(AND (<= x_4 (+ x_4 (int_div (- y x_4) 2)))
(<= (+ x_4 (int_div (- y x_4) 2)) y))))

(BG_PUSH
 ;; Why axiom mean_property_as_axiom
 (FORALL (x_4 y)
 (IMPLIES (<= x_4 y)
 (AND (<= x_4 (+ x_4 (int_div (- y x_4) 2)))
 (<= (+ x_4 (int_div (- y x_4) 2)) y)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_BinarySearch p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_intM p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(BG_PUSH
 ;; Why axiom short_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 32768) x) (<= x 32767))
 (EQ (integer_of_short (short_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom short_of_bitvector_of_bitvector_of_short
 (FORALL (x) (eq_short (short_of_bitvector (bitvector_of_short x)) x)))

(BG_PUSH
 ;; Why axiom short_range
 (FORALL (x)
 (AND (<= (- 0 32768) (integer_of_short x)) (<= (integer_of_short x) 32767))))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_BinarySearch p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_intM p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_BinarySearch p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_intM p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_BinarySearch p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; BinarySearch_binary_search_ensures_default_po_1, File "HOME/tests/java/BinarySearch.java", line 66, characters 7-34
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(<= 0 (integer_of_int32 result)))))))))))

;; BinarySearch_binary_search_ensures_default_po_2, File "HOME/tests/java/BinarySearch.java", line 66, characters 7-34
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(<= (integer_of_int32 result1) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))))))))))

;; BinarySearch_binary_search_ensures_default_po_3, File "HOME/tests/java/BinarySearch.java", line 66, characters 7-34
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 result4) 1))
(FORALL (l0) (IMPLIES (EQ l0 result6) (<= 0 (integer_of_int32 l0))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_4, File "HOME/tests/java/BinarySearch.java", line 71, characters 7-10
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 result4) 1))
(FORALL (l0)
(IMPLIES (EQ l0 result6)
(<= 0 (- (integer_of_int32 u) (integer_of_int32 l)))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_5, File "HOME/tests/java/BinarySearch.java", line 71, characters 7-10
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 result4) 1))
(FORALL (l0)
(IMPLIES (EQ l0 result6)
(< (- (integer_of_int32 u) (integer_of_int32 l0)) (- (integer_of_int32 u) 
                                                  (integer_of_int32 l)))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_6, File "HOME/tests/java/BinarySearch.java", line 66, characters 7-34
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (> (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (- (integer_of_int32 result4) 1))
(FORALL (u0)
(IMPLIES (EQ u0 result7)
(<= (integer_of_int32 u0) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_7, File "HOME/tests/java/BinarySearch.java", line 71, characters 7-10
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (> (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (- (integer_of_int32 result4) 1))
(FORALL (u0)
(IMPLIES (EQ u0 result7)
(<= 0 (- (integer_of_int32 u) (integer_of_int32 l))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_8, File "HOME/tests/java/BinarySearch.java", line 71, characters 7-10
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (> (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (- (integer_of_int32 result4) 1))
(FORALL (u0)
(IMPLIES (EQ u0 result7)
(< (- (integer_of_int32 u0) (integer_of_int32 l)) (- (integer_of_int32 u) 
                                                  (integer_of_int32 l))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_9, File "HOME/tests/java/BinarySearch.java", line 53, characters 16-40
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (<= (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (return)
(IMPLIES (EQ return result4) (<= (- 0 1) (integer_of_int32 return)))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_10, File "HOME/tests/java/BinarySearch.java", line 53, characters 16-40
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (<= (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (return)
(IMPLIES (EQ return result4)
(< (integer_of_int32 return) (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_11, File "HOME/tests/java/BinarySearch.java", line 53, characters 16-40
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (> (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (- 0 1))
(FORALL (return)
(IMPLIES (EQ return result2) (<= (- 0 1) (integer_of_int32 return)))))))))))))))))))

;; BinarySearch_binary_search_ensures_default_po_12, File "HOME/tests/java/BinarySearch.java", line 53, characters 16-40
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (> (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (- 0 1))
(FORALL (return)
(IMPLIES (EQ return result2)
(< (integer_of_int32 return) (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_1, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= (integer_of_int32 result) k_0)))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_2, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= k_0 (integer_of_int32 result1))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_3, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 result4) 1))
(FORALL (l0)
(IMPLIES (EQ l0 result6)
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= (integer_of_int32 l0) k_0)))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_4, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (< (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (+ (integer_of_int32 result4) 1))
(FORALL (l0)
(IMPLIES (EQ l0 result6)
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= k_0 (integer_of_int32 u))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_5, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (> (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (- (integer_of_int32 result4) 1))
(FORALL (u0)
(IMPLIES (EQ u0 result7)
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= (integer_of_int32 l) k_0))))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_6, File "HOME/tests/java/BinarySearch.java", line 69, characters 8-74
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (> (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (result7)
(IMPLIES (EQ (integer_of_int32 result7) (- (integer_of_int32 result4) 1))
(FORALL (u0)
(IMPLIES (EQ u0 result7)
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
(IMPLIES (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
(<= k_0 (integer_of_int32 u0)))))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_7, File "HOME/tests/java/BinarySearch.java", line 60, characters 17-97
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (<= (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (return)
(IMPLIES (EQ return result4)
(IMPLIES (EQ (integer_of_int32 return) (- 0 1))
(FORALL (k)
(IMPLIES (AND (<= 0 k) (< k (+ (offset_max Object_alloc_table t_0) 1)))
(NEQ (integer_of_int32 (select intM_intP (shift t_0 k)))
(integer_of_int32 v)))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_failure_po_8, File "HOME/tests/java/BinarySearch.java", line 60, characters 17-97
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND
         (FORALL (k1 k2)
         (IMPLIES
         (AND (<= 0 k1)
         (AND (<= k1 k2)
         (<= k2 (- (+ (offset_max Object_alloc_table t_0) 1) 1))))
         (<= (integer_of_int32 (select intM_intP (shift t_0 k1))) (integer_of_int32
                                                                  (select
                                                                  intM_intP 
                                                                  (shift
                                                                  t_0 k2))))))
         (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table)))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u))))))
(IMPLIES (AND
         (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
         (FORALL (k_0)
         (IMPLIES
         (AND (<= 0 k_0) (< k_0 (+ (offset_max Object_alloc_table t_0) 1)))
         (IMPLIES
         (EQ (integer_of_int32 (select intM_intP (shift t_0 k_0)))
         (integer_of_int32 v))
         (AND (<= (integer_of_int32 l) k_0) (<= k_0 (integer_of_int32 u)))))))
(IMPLIES (> (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (- 0 1))
(FORALL (return)
(IMPLIES (EQ return result2)
(IMPLIES (EQ (integer_of_int32 return) (- 0 1))
(FORALL (k)
(IMPLIES (AND (<= 0 k) (< k (+ (offset_max Object_alloc_table t_0) 1)))
(NEQ (integer_of_int32 (select intM_intP (shift t_0 k)))
(integer_of_int32 v)))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_success_po_1, File "HOME/tests/java/BinarySearch.java", line 55, characters 18-50
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3)
         (int_div (integer_of_int32 result2) 2))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4)
         (+ (integer_of_int32 l) (integer_of_int32 result3)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (>= (integer_of_int32 result5) (integer_of_int32 v))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result4))))
(IMPLIES (<= (integer_of_int32 result6) (integer_of_int32 v))
(FORALL (return)
(IMPLIES (EQ return result4)
(IMPLIES (>= (integer_of_int32 return) 0)
(EQ (integer_of_int32
    (select intM_intP (shift t_0 (integer_of_int32 return))))
(integer_of_int32 v)))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_ensures_success_po_2, File "HOME/tests/java/BinarySearch.java", line 55, characters 18-50
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (> (integer_of_int32 l) (integer_of_int32 u))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (- 0 1))
(FORALL (return)
(IMPLIES (EQ return result2)
(IMPLIES (>= (integer_of_int32 return) 0)
(EQ (integer_of_int32
    (select intM_intP (shift t_0 (integer_of_int32 return))))
(integer_of_int32 v)))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_1, File "HOME/tests/java/BinarySearch.java", line 64, characters 16-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(<= (- 0 constant_too_large_2147483648) (- result0 1)))))))))

;; BinarySearch_binary_search_safety_po_2, File "HOME/tests/java/BinarySearch.java", line 64, characters 16-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(<= (- result0 1) constant_too_large_2147483647))))))))

;; BinarySearch_binary_search_safety_po_3, File "HOME/tests/java/BinarySearch.java", line 74, characters 18-23
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) (integer_of_int32
                                                                l))))))))))))))))))

;; BinarySearch_binary_search_safety_po_4, File "HOME/tests/java/BinarySearch.java", line 74, characters 18-23
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))))))))))))))))

;; BinarySearch_binary_search_safety_po_5, File "HOME/tests/java/BinarySearch.jc", line 113, characters 54-140
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(NEQ 2 0)))))))))))))))))))

;; BinarySearch_binary_search_safety_po_6, File "HOME/tests/java/BinarySearch.java", line 74, characters 17-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(<= (- 0 constant_too_large_2147483648) result3))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_7, File "HOME/tests/java/BinarySearch.java", line 74, characters 17-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(<= result3 constant_too_large_2147483647))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_8, File "HOME/tests/java/BinarySearch.java", line 74, characters 13-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) (integer_of_int32
                                                                result4)))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_9, File "HOME/tests/java/BinarySearch.java", line 74, characters 13-28
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647)))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_10, File "HOME/tests/java/BinarySearch.java", line 75, characters 9-13
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5)))))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_11, File "HOME/tests/java/BinarySearch.java", line 75, characters 9-13
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_12, File "HOME/tests/java/BinarySearch.java", line 75, characters 23-28
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (< (integer_of_int32 result6) (integer_of_int32 v))
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 result5) 1)))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_13, File "HOME/tests/java/BinarySearch.java", line 75, characters 23-28
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (< (integer_of_int32 result6) (integer_of_int32 v))
(<= (+ (integer_of_int32 result5) 1) constant_too_large_2147483647))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_14, File "HOME/tests/java/BinarySearch.java", line 76, characters 28-33
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (>= (integer_of_int32 result6) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result7)
(IMPLIES (EQ result7
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (> (integer_of_int32 result7) (integer_of_int32 v))
(<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 result5) 1)))))))))))))))))))))))))))))))))))))))

;; BinarySearch_binary_search_safety_po_15, File "HOME/tests/java/BinarySearch.java", line 76, characters 28-33
(FORALL (t_0)
(FORALL (v)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (left_valid_struct_intM t_0 0 Object_alloc_table)
         (Non_null_intM t_0 Object_alloc_table))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) (- result0 1))
         (<= (- result0 1) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- result0 1))
(FORALL (l)
(FORALL (u)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l))
         (<= (integer_of_int32 u) (- (+ (offset_max Object_alloc_table t_0) 1) 1)))
(IMPLIES (<= (integer_of_int32 l) (integer_of_int32 u))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 u) 
                                                 (integer_of_int32 l)))
         (<= (- (integer_of_int32 u) (integer_of_int32 l)) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (- (integer_of_int32 u) (integer_of_int32 l)))
(IMPLIES (NEQ 2 0)
(FORALL (result3)
(IMPLIES (EQ result3 (int_div (integer_of_int32 result2) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result3)
         (<= result3 constant_too_large_2147483647))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) result3)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l) 
                                                 (integer_of_int32 result4)))
         (<= (+ (integer_of_int32 l) (integer_of_int32 result4)) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5)
         (+ (integer_of_int32 l) (integer_of_int32 result4)))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result6)
(IMPLIES (EQ result6
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (>= (integer_of_int32 result6) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min Object_alloc_table t_0) (integer_of_int32 result5))
         (<= (integer_of_int32 result5) (offset_max Object_alloc_table t_0)))
(FORALL (result7)
(IMPLIES (EQ result7
         (select intM_intP (shift t_0 (integer_of_int32 result5))))
(IMPLIES (> (integer_of_int32 result7) (integer_of_int32 v))
(<= (- (integer_of_int32 result5) 1) constant_too_large_2147483647))))))))))))))))))))))))))))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/BinarySearch_why.sx  : ?......................?............#. (35/0/2/1/0)
total   :  38
valid   :  35 ( 92%)
invalid :   0 (  0%)
unknown :   2 (  5%)
timeout :   1 (  3%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/BinarySearch.why
========== file tests/java/why/BinarySearch_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic BinarySearch_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom BinarySearch_parenttag_Object: parenttag(BinarySearch_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_byte : byte -> bitvector

logic byte_of_bitvector : bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector:
  (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char : char -> bitvector

logic char_of_bitvector : bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector:
  (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic bitvector_of_long : long -> bitvector

logic long_of_bitvector : bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector:
  (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short : short -> bitvector

logic short_of_bitvector : bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector:
  (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte:
  (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char:
  (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_sorted(t: Object pointer,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int32) memory) =
  (Non_null_intM(t, Object_alloc_table_at_L) and
   (forall i:int.
     (forall j:int.
       (((0 <= i) and
         ((i <= j) and (j < (offset_max(Object_alloc_table_at_L, t) + 1)))) ->
        (integer_of_int32(select(intM_intP_at_L, shift(t,
        i))) <= integer_of_int32(select(intM_intP_at_L, shift(t, j))))))))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_BinarySearch(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_intM(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_of_bitvector_of_bitvector_of_long:
  (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

goal mean_property:
  (forall x_4:int.
    (forall y:int.
      ((x_4 <= y) ->
       ((x_4 <= (x_4 + ((y - x_4) / 2))) and ((x_4 + ((y - x_4) / 2)) <= y)))))

axiom mean_property_as_axiom:
  (forall x_4:int.
    (forall y:int.
      ((x_4 <= y) ->
       ((x_4 <= (x_4 + ((y - x_4) / 2))) and ((x_4 + ((y - x_4) / 2)) <= y)))))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_BinarySearch(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_intM(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_of_bitvector_of_bitvector_of_short:
  (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_BinarySearch(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_BinarySearch(p: unit pointer, a: int,
  b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_intM(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_BinarySearch(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal BinarySearch_binary_search_ensures_default_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  ("JC_67": (0 <= integer_of_int32(result)))

goal BinarySearch_binary_search_ensures_default_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  ("JC_67": (integer_of_int32(result1) <= ((offset_max(Object_alloc_table,
  t_0) + 1) - 1)))

goal BinarySearch_binary_search_ensures_default_po_3:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  ("JC_67": (0 <= integer_of_int32(l0)))

goal BinarySearch_binary_search_ensures_default_po_4:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  (0 <= ("JC_71": (integer_of_int32(u) - integer_of_int32(l))))

goal BinarySearch_binary_search_ensures_default_po_5:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  (("JC_71": (integer_of_int32(u) - integer_of_int32(l0))) < ("JC_71":
                                                             (integer_of_int32(u) - integer_of_int32(l))))

goal BinarySearch_binary_search_ensures_default_po_6:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  ("JC_67": (integer_of_int32(u0) <= ((offset_max(Object_alloc_table,
  t_0) + 1) - 1)))

goal BinarySearch_binary_search_ensures_default_po_7:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  (0 <= ("JC_71": (integer_of_int32(u) - integer_of_int32(l))))

goal BinarySearch_binary_search_ensures_default_po_8:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  (("JC_71": (integer_of_int32(u0) - integer_of_int32(l))) < ("JC_71":
                                                             (integer_of_int32(u) - integer_of_int32(l))))

goal BinarySearch_binary_search_ensures_default_po_9:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  ("JC_37": ((-1) <= integer_of_int32(return)))

goal BinarySearch_binary_search_ensures_default_po_10:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  ("JC_37": (integer_of_int32(return) < (offset_max(Object_alloc_table,
  t_0) + 1)))

goal BinarySearch_binary_search_ensures_default_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_37": ((-1) <= integer_of_int32(return)))

goal BinarySearch_binary_search_ensures_default_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_67":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_37": (integer_of_int32(return) < (offset_max(Object_alloc_table,
  t_0) + 1)))

goal BinarySearch_binary_search_ensures_failure_po_1:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(result) <= k_0))

goal BinarySearch_binary_search_ensures_failure_po_2:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(result1)))

goal BinarySearch_binary_search_ensures_failure_po_3:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(l0) <= k_0))

goal BinarySearch_binary_search_ensures_failure_po_4:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) < integer_of_int32(v)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result4) + 1)) ->
  forall l0:int32.
  (l0 = result6) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(u)))

goal BinarySearch_binary_search_ensures_failure_po_5:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (integer_of_int32(l) <= k_0))

goal BinarySearch_binary_search_ensures_failure_po_6:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) > integer_of_int32(v)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(result4) - 1)) ->
  forall u0:int32.
  (u0 = result7) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  (integer_of_int32(select(intM_intP, shift(t_0,
  k_0))) = integer_of_int32(v)) ->
  ("JC_80": (k_0 <= integer_of_int32(u0)))

goal BinarySearch_binary_search_ensures_failure_po_7:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  (integer_of_int32(return) = (-1)) ->
  forall k:int.
  ((0 <= k) and (k < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_43": (integer_of_int32(select(intM_intP, shift(t_0,
  k))) <> integer_of_int32(v)))

goal BinarySearch_binary_search_ensures_failure_po_8:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ((forall k1:int.
     (forall k2:int.
       (((0 <= k1) and
         ((k1 <= k2) and (k2 <= ((offset_max(Object_alloc_table,
          t_0) + 1) - 1)))) ->
        (integer_of_int32(select(intM_intP, shift(t_0,
        k1))) <= integer_of_int32(select(intM_intP, shift(t_0, k2))))))) and
   (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
    ("JC_35": Non_null_intM(t_0, Object_alloc_table)))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_80":
  (forall k_0:int.
    (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
     ((integer_of_int32(select(intM_intP, shift(t_0,
      k_0))) = integer_of_int32(v)) ->
      ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u))))))) ->
  (("JC_81":
   ((0 <= integer_of_int32(l)) and
    (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) and
   ("JC_82":
   (forall k_0:int.
     (((0 <= k_0) and (k_0 < (offset_max(Object_alloc_table, t_0) + 1))) ->
      ((integer_of_int32(select(intM_intP, shift(t_0,
       k_0))) = integer_of_int32(v)) ->
       ((integer_of_int32(l) <= k_0) and (k_0 <= integer_of_int32(u)))))))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  (integer_of_int32(return) = (-1)) ->
  forall k:int.
  ((0 <= k) and (k < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_43": (integer_of_int32(select(intM_intP, shift(t_0,
  k))) <> integer_of_int32(v)))

goal BinarySearch_binary_search_ensures_success_po_1:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_75": true) ->
  ("JC_74":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(result2) / 2)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(l) + integer_of_int32(result3))) ->
  forall result5:int32.
  (result5 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result5) >= integer_of_int32(v)) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result4)))) ->
  (integer_of_int32(result6) <= integer_of_int32(v)) ->
  forall return:int32.
  (return = result4) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_41": (integer_of_int32(select(intM_intP, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

goal BinarySearch_binary_search_ensures_success_po_2:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_75": true) ->
  ("JC_74":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) > integer_of_int32(u)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (-1)) ->
  forall return:int32.
  (return = result2) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_41": (integer_of_int32(select(intM_intP, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

goal BinarySearch_binary_search_safety_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  ((-2147483648) <= (result0 - 1))

goal BinarySearch_binary_search_safety_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  ((result0 - 1) <= 2147483647)

goal BinarySearch_binary_search_safety_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  ((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l)))

goal BinarySearch_binary_search_safety_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)

goal BinarySearch_binary_search_safety_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0)

goal BinarySearch_binary_search_safety_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  ((-2147483648) <= result3)

goal BinarySearch_binary_search_safety_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (result3 <= 2147483647)

goal BinarySearch_binary_search_safety_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  ((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4)))

goal BinarySearch_binary_search_safety_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)

goal BinarySearch_binary_search_safety_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  (offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5))

goal BinarySearch_binary_search_safety_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))

goal BinarySearch_binary_search_safety_po_12:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) < integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(result5) + 1))

goal BinarySearch_binary_search_safety_po_13:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) < integer_of_int32(v)) ->
  ((integer_of_int32(result5) + 1) <= 2147483647)

goal BinarySearch_binary_search_safety_po_14:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) >= integer_of_int32(v)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result7:int32.
  (result7 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result7) > integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(result5) - 1))

goal BinarySearch_binary_search_safety_po_15:
  forall t_0:Object pointer.
  forall v:int32.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  (left_valid_struct_intM(t_0, 0, Object_alloc_table) and
   ("JC_35": Non_null_intM(t_0, Object_alloc_table))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int.
  ("JC_21":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (((-2147483648) <= (result0 - 1)) and ((result0 - 1) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (result0 - 1)) ->
  forall l:int32.
  forall u:int32.
  ("JC_50": true) ->
  ("JC_49":
  ((0 <= integer_of_int32(l)) and
   (integer_of_int32(u) <= ((offset_max(Object_alloc_table, t_0) + 1) - 1)))) ->
  (integer_of_int32(l) <= integer_of_int32(u)) ->
  (((-2147483648) <= (integer_of_int32(u) - integer_of_int32(l))) and
   ((integer_of_int32(u) - integer_of_int32(l)) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(u) - integer_of_int32(l))) ->
  (2 <> 0) ->
  forall result3:int.
  (result3 = (integer_of_int32(result2) / 2)) ->
  (((-2147483648) <= result3) and (result3 <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = result3) ->
  (((-2147483648) <= (integer_of_int32(l) + integer_of_int32(result4))) and
   ((integer_of_int32(l) + integer_of_int32(result4)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(l) + integer_of_int32(result4))) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result6) >= integer_of_int32(v)) ->
  ((offset_min(Object_alloc_table, t_0) <= integer_of_int32(result5)) and
   (integer_of_int32(result5) <= offset_max(Object_alloc_table, t_0))) ->
  forall result7:int32.
  (result7 = select(intM_intP, shift(t_0, integer_of_int32(result5)))) ->
  (integer_of_int32(result7) > integer_of_int32(v)) ->
  ((integer_of_int32(result5) - 1) <= 2147483647)

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/BinarySearch_why.why      : ?...........................??........ (35/0/3/0/0)
total   :  38
valid   :  35 ( 92%)
invalid :   0 (  0%)
unknown :   3 (  8%)
timeout :   0 (  0%)
failure :   0 (  0%)
