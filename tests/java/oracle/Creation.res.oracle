========== file tests/java/Creation.java ==========

//@+ CheckArithOverflow = no

class Creation {

    int simple_val;

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing 
      @   ensures this.simple_val == 0;
      @*/
    Creation() {
	this(0);
    }

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing
      @   ensures this.simple_val == n;
      @*/
    Creation(int n) {
	simple_val = n;
    }

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing
      @   ensures this.simple_val == n + m;
      @*/
    Creation(int n,int m) {
	this(n+m); 
    }

    /*@ behavior normal:
      @   ensures \result == 17;
      @*/
    public static int test1() {
	Creation t = new Creation(17);
	return t.simple_val;
    }

    /*@ behavior normal:
      @   ensures \result == 0;
      @*/
    public static int test2() {
	Creation t = new Creation();
	return t.simple_val;
    }

    /*@ behavior normal:
      @   assigns \nothing;             // BUG !!!!!!!!!!!!
      @   ensures \result == 17;
      @*/
    public static int test3() {
	Creation t = new Creation(10,7);
	return t.simple_val;
    }

}


class TestSuperConstructor extends Creation {

    /*@ behavior normal:
      @   assigns simple_val;
      @   ensures simple_val == 12;
      @*/
    TestSuperConstructor() {
	super(12);
    }

}


========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function cons_Creation_int for constructor Creation
Generating JC function cons_Creation for constructor Creation
Generating JC function cons_Creation_int_int for constructor Creation
Generating JC function Creation_test1 for method Creation.test1
Generating JC function Creation_test2 for method Creation.test2
Generating JC function Creation_test3 for method Creation.test3
Generating JC function cons_TestSuperConstructor for constructor TestSuperConstructor
Done.
========== file tests/java/Creation.jc ==========
# InvariantPolicy = Arguments
# TerminationPolicy = always
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

predicate Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Exception = Object with {
}

tag Creation = Object with {
  integer simple_val;
}

tag TestSuperConstructor = Creation with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

boolean non_null_Object(! Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

exception Exception of Exception[0..]

unit cons_Creation_int(! Creation[0] this_1, integer n)
behavior normal:
  assigns this_1.simple_val;
  ensures (K_1 : (this_1.simple_val == n));
{  (this_1.simple_val = 0);
   (K_2 : (this_1.simple_val = n))
}

unit cons_Creation(! Creation[0] this_2)
behavior normal:
  assigns this_2.simple_val;
  ensures (K_3 : (this_2.simple_val == 0));
{  (this_2.simple_val = 0);
   (K_4 : cons_Creation_int(this_2, 0))
}

unit cons_Creation_int_int(! Creation[0] this_0, integer n_0, integer m)
behavior normal:
  assigns this_0.simple_val;
  ensures (K_5 : (this_0.simple_val == (n_0 + m)));
{  (this_0.simple_val = 0);
   (K_7 : cons_Creation_int(this_0, (K_6 : (n_0 + m))))
}

integer Creation_test1()
behavior normal:
  ensures (K_8 : (\result == 17));
{  
   {  
      (var Creation[0..] t_1 = (K_10 : 
                               {  
                                  (var Creation[0] this = (new Creation[1]));
                                  
                                  {  
                                     (var unit tt = cons_Creation_int(
                                     this, 17));
                                     this
                                  }
                               }));
      
      (return (K_9 : t_1.simple_val))
   }
}

integer Creation_test2()
behavior normal:
  ensures (K_11 : (\result == 0));
{  
   {  
      (var Creation[0..] t_0 = (K_13 : 
                               {  
                                  (var Creation[0] this = (new Creation[1]));
                                  
                                  {  
                                     (var unit tt = cons_Creation(this));
                                     this
                                  }
                               }));
      
      (return (K_12 : t_0.simple_val))
   }
}

integer Creation_test3()
behavior normal:
  assigns \nothing;
  ensures (K_14 : (\result == 17));
{  
   {  
      (var Creation[0..] t = (K_16 : 
                             {  
                                (var Creation[0] this = (new Creation[1]));
                                
                                {  
                                   (var unit tt = cons_Creation_int_int(
                                   this, 10, 7));
                                   this
                                }
                             }));
      
      (return (K_15 : t.simple_val))
   }
}

unit cons_TestSuperConstructor(! TestSuperConstructor[0] this_4)
behavior normal:
  assigns this_4.simple_val;
  ensures (K_17 : (this_4.simple_val == 12));
{  (K_18 : cons_Creation_int(this_4, 12))
}

/*
Local Variables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Creation.jloc tests/java/Creation.jc && make -f tests/java/Creation.makefile gui"
End:
*/
========== file tests/java/Creation.jloc ==========
[K_10]
file = "HOME/tests/java/Creation.java"
line = 36
begin = 14
end = 30

[K_11]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 18
end = 30

[K_12]
file = "HOME/tests/java/Creation.java"
line = 45
begin = 8
end = 20

[K_13]
file = "HOME/tests/java/Creation.java"
line = 44
begin = 14
end = 28

[K_14]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 18
end = 31

[K_15]
file = "HOME/tests/java/Creation.java"
line = 54
begin = 8
end = 20

[K_16]
file = "HOME/tests/java/Creation.java"
line = 53
begin = 14
end = 32

[K_17]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 18
end = 34

[K_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_1]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 18
end = 38

[K_2]
file = "HOME/tests/java/Creation.java"
line = 21
begin = 1
end = 15

[K_3]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 18
end = 38

[K_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_5]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 18
end = 42

[K_6]
file = "HOME/tests/java/Creation.java"
line = 29
begin = 6
end = 9

[K_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_8]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 18
end = 31

[K_9]
file = "HOME/tests/java/Creation.java"
line = 37
begin = 8
end = 20

[cons_TestSuperConstructor]
name = "Constructor of class TestSuperConstructor"
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[cons_Creation_int]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[cons_Creation]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[Creation_test1]
name = "Method test1"
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[Creation_test2]
name = "Method test2"
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[Creation_test3]
name = "Method test3"
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[cons_Creation_int_int]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

========== jessie execution ==========
Generating Why function cons_Creation_int
Generating Why function cons_Creation
Generating Why function cons_Creation_int_int
Generating Why function Creation_test1
Generating Why function Creation_test2
Generating Why function Creation_test3
Generating Why function cons_TestSuperConstructor
========== file tests/java/Creation.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs Creation.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs Creation.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why

COQDEP = coqdep

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Creation_why.sx

project: why/Creation.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/Creation_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/Creation_why.vo

coq/Creation_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/Creation_why.v: why/Creation.why
	@echo 'why -coq [...] why/Creation.why' && $(WHY) $(JESSIELIBFILES) why/Creation.why

coq-goals: goals coq/Creation_ctx_why.vo
	for f in why/*_po*.why; do make -f Creation.makefile coq/`basename $$f .why`_why.v ; done

coq/Creation_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/Creation_ctx_why.v: why/Creation_ctx.why
	@echo 'why -coq [...] why/Creation_ctx.why' && $(WHY) why/Creation_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export Creation_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/Creation_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Creation_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/Creation_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/Creation_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/Creation_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/Creation_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/Creation_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/Creation_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/Creation_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/Creation_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/Creation_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/Creation_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

gui stat: Creation.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

-include Creation.depend

depend: coq/Creation_why.v
	-$(COQDEP) -I coq coq/Creation*_why.v > Creation.depend

clean:
	rm -f coq/*.vo

========== file tests/java/Creation.loc ==========
[JC_90]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 45
begin = 8
end = 20

[JC_91]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 96
begin = 59
end = 74

[JC_92]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 99
begin = 52
end = 71

[JC_40]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 58
begin = 10
end = 38

[JC_93]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 96
begin = 59
end = 74

[JC_41]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 58
begin = 10
end = 38

[JC_94]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 99
begin = 52
end = 71

[JC_42]
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[JC_95]
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[Creation_test3_ensures_normal]
name = "Method test3"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_96]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_44]
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[JC_97]
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_45]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_98]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_46]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/java/Creation.jc"
line = 36
begin = 8
end = 23

[JC_100]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_99]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_47]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_101]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/Creation.jc"
line = 36
begin = 8
end = 23

[JC_102]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_103]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 18
end = 31

[cons_Creation_int_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_104]
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_105]
file = "HOME/tests/java/Creation.jc"
line = 109
begin = 9
end = 15

[Creation_test1_safety]
name = "Method test1"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_106]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 18
end = 31

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_107]
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_9]
file = "HOME/tests/java/Creation.jc"
line = 38
begin = 11
end = 65

[JC_108]
file = "HOME/tests/java/Creation.jc"
line = 109
begin = 9
end = 15

[JC_109]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 116
begin = 57
end = 72

[cons_Creation_ensures_default]
name = "Constructor of class Creation"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_50]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 18
end = 42

[JC_51]
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[Creation_test2_ensures_default]
name = "Method test2"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[JC_52]
file = "HOME/tests/java/Creation.jc"
line = 62
begin = 9
end = 15

[JC_53]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 18
end = 42

[JC_54]
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[JC_55]
file = "HOME/tests/java/Creation.jc"
line = 62
begin = 9
end = 15

[JC_56]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 66
begin = 10
end = 54

[JC_110]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 116
begin = 33
end = 73

[JC_57]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 66
begin = 10
end = 54

[JC_111]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 119
begin = 50
end = 120

[JC_58]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 66
begin = 10
end = 54

[JC_112]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 54
begin = 8
end = 20

[JC_59]
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[JC_113]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 116
begin = 57
end = 72

[JC_114]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 119
begin = 50
end = 120

[JC_115]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 116
begin = 57
end = 72

[Creation_test2_ensures_normal]
name = "Method test2"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[cons_Creation_int_ensures_default]
name = "Constructor of class Creation"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_116]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 119
begin = 50
end = 120

[JC_117]
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[JC_118]
file = "HOME/"
line = 0
begin = -1
end = -1

[Creation_test2_safety]
name = "Method test2"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[JC_119]
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[JC_60]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_61]
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[cons_Creation_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_62]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Creation_int_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_10]
file = "HOME/tests/java/Creation.jc"
line = 38
begin = 11
end = 65

[JC_63]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_64]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_66]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_120]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 18
end = 31

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_121]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 18
end = 31

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_122]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_69]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 76
begin = 59
end = 74

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_123]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_124]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 18
end = 38

[JC_125]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 18
end = 34

[JC_126]
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[JC_127]
file = "HOME/tests/java/Creation.jc"
line = 130
begin = 9
end = 15

[JC_128]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 18
end = 34

[cons_Creation_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[cons_TestSuperConstructor_ensures_normal]
name = "Constructor of class TestSuperConstructor"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[JC_129]
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[Creation_test3_safety]
name = "Method test3"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

[JC_70]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 76
begin = 35
end = 75

[Creation_test1_ensures_normal]
name = "Method test1"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[JC_71]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 79
begin = 52
end = 117

[JC_72]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 37
begin = 8
end = 20

[JC_20]
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_73]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 76
begin = 59
end = 74

[JC_21]
file = "HOME/tests/java/Creation.jc"
line = 46
begin = 9
end = 15

[JC_74]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 79
begin = 52
end = 117

[JC_22]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 18
end = 38

[JC_75]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 76
begin = 59
end = 74

[JC_23]
file = "HOME/tests/java/Creation.java"
line = 20
begin = 4
end = 12

[JC_76]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 79
begin = 52
end = 117

[JC_24]
file = "HOME/tests/java/Creation.jc"
line = 46
begin = 9
end = 15

[JC_130]
file = "HOME/tests/java/Creation.jc"
line = 130
begin = 9
end = 15

[JC_77]
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[JC_25]
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_131]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 133
begin = 11
end = 40

[JC_78]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_132]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 133
begin = 11
end = 40

[JC_79]
file = "HOME/tests/java/Creation.java"
line = 43
begin = 22
end = 27

[cons_Creation_int_int_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[JC_27]
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_133]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 133
begin = 11
end = 40

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Creation_int_int_ensures_default]
name = "Constructor of class Creation"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[cons_TestSuperConstructor_safety]
name = "Constructor of class TestSuperConstructor"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[cons_TestSuperConstructor_ensures_default]
name = "Constructor of class TestSuperConstructor"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 66
begin = 4
end = 24

[JC_80]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_81]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_82]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_84]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_32]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_85]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 18
end = 30

[JC_33]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 18
end = 38

[JC_86]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 18
end = 30

[Creation_test1_ensures_default]
name = "Method test1"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 35
begin = 22
end = 27

[cons_Creation_int_int_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 28
begin = 4
end = 12

[JC_34]
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_87]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 96
begin = 59
end = 74

[JC_35]
file = "HOME/tests/java/Creation.jc"
line = 54
begin = 9
end = 15

[JC_88]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 96
begin = 35
end = 75

[JC_36]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 18
end = 38

[JC_89]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 99
begin = 52
end = 71

[JC_37]
file = "HOME/tests/java/Creation.java"
line = 12
begin = 4
end = 12

[JC_38]
file = "HOME/tests/java/Creation.jc"
line = 54
begin = 9
end = 15

[JC_39]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 58
begin = 10
end = 38

[Creation_test3_ensures_default]
name = "Method test3"
behavior = "Default behavior"
file = "HOME/tests/java/Creation.java"
line = 52
begin = 22
end = 27

========== file tests/java/why/Creation.why ==========
type Object

type interface

logic Creation_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Creation_parenttag_Object : parenttag(Creation_tag, Object_tag)

exception Exception_exc of Object pointer

logic Exception_tag:  -> Object tag_id

axiom Exception_parenttag_Object : parenttag(Exception_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x), (0))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_bitvector: bitvector -> Object pointer

logic bitvector_of_Object: Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object :
 (forall x:Object pointer. (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

exception Return_label_exc of unit

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag:  -> Object tag_id

axiom TestSuperConstructor_parenttag_Creation :
 parenttag(TestSuperConstructor_tag, Creation_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector :
 (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface: interface pointer -> bitvector

logic interface_of_bitvector: bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector :
 (forall x:bitvector.
  (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_of_bitvector_of_bitvector_of_interface :
 (forall x:interface pointer.
  (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 (offset_min(Object_alloc_table, p) <= a)

predicate left_valid_struct_Creation(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_Exception(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_String(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_TestSuperConstructor(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Creation(p, a, Object_alloc_table)

predicate left_valid_struct_Throwable(p:Object pointer,
 a:int,
 Object_alloc_table:Object alloc_table) =
 left_valid_struct_Object(p, a, Object_alloc_table)

predicate left_valid_struct_interface(p:interface pointer,
 a:int,
 interface_alloc_table:interface alloc_table) =
 (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 (offset_max(Object_alloc_table, p) >= b)

predicate right_valid_struct_Creation(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_Exception(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_String(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_TestSuperConstructor(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Creation(p, b, Object_alloc_table)

predicate right_valid_struct_Throwable(p:Object pointer,
 b:int,
 Object_alloc_table:Object alloc_table) =
 right_valid_struct_Object(p, b, Object_alloc_table)

predicate right_valid_struct_interface(p:interface pointer,
 b:int,
 interface_alloc_table:interface alloc_table) =
 (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Creation(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Exception(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_TestSuperConstructor(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Creation(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 strict_valid_struct_Object(p, a, b, Object_alloc_table)

predicate strict_valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Exception(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) <= a)
 and (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Creation(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Exception(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Creation(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) <= a)
 and (offset_max(interface_alloc_table, p) >= b))

parameter Creation_simple_val : (Object, int) memory ref

parameter Object_alloc_table : Object alloc_table ref

parameter Object_tag_table : Object tag_table ref

parameter Creation_test1 :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_68: eq_int(result, (17))) }

parameter Creation_test1_requires :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_68: eq_int(result, (17))) }

parameter Creation_test2 :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_86: eq_int(result, (0))) }

parameter Creation_test2_requires :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_86: eq_int(result, (0))) }

parameter Creation_test3 :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_108:
    ((JC_106: eq_int(result, (17)))
    and (JC_107:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

parameter Creation_test3_requires :
 tt:unit ->
  { } int reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_108:
    ((JC_106: eq_int(result, (17)))
    and (JC_107:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

parameter alloc_bitvector_struct_Creation :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Creation(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Creation_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Creation(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Exception :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Exception(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Exception_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Exception(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_TestSuperConstructor :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_TestSuperConstructor(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_TestSuperConstructor_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_TestSuperConstructor(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Creation :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Creation(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Creation_tag)))) }

parameter alloc_struct_Creation_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Creation(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Creation_tag)))) }

parameter alloc_struct_Exception :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_Exception_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Exception(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Exception_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Object(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_String(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_TestSuperConstructor :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_TestSuperConstructor(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result,
                  TestSuperConstructor_tag)))) }

parameter alloc_struct_TestSuperConstructor_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_TestSuperConstructor(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result,
                  TestSuperConstructor_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (strict_valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (strict_valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter cons_Creation :
 this_2:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_38:
    ((JC_36: eq_int(select(Creation_simple_val, this_2), (0)))
    and (JC_37:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2@))))) }

parameter cons_Creation_int :
 this_1:Object pointer ->
  n:int ->
   { } unit reads Creation_simple_val,Object_alloc_table
   writes Creation_simple_val
   { (JC_24:
     ((JC_22: eq_int(select(Creation_simple_val, this_1), n))
     and (JC_23:
         not_assigns(Object_alloc_table@, Creation_simple_val@,
         Creation_simple_val, pset_singleton(this_1@))))) }

parameter cons_Creation_int_int :
 this_0:Object pointer ->
  n_0:int ->
   m:int ->
    { } unit reads Creation_simple_val,Object_alloc_table
    writes Creation_simple_val
    { (JC_55:
      ((JC_53: eq_int(select(Creation_simple_val, this_0), add_int(n_0, m)))
      and (JC_54:
          not_assigns(Object_alloc_table@, Creation_simple_val@,
          Creation_simple_val, pset_singleton(this_0@))))) }

parameter cons_Creation_int_int_requires :
 this_0:Object pointer ->
  n_0:int ->
   m:int ->
    { } unit reads Creation_simple_val,Object_alloc_table
    writes Creation_simple_val
    { (JC_55:
      ((JC_53: eq_int(select(Creation_simple_val, this_0), add_int(n_0, m)))
      and (JC_54:
          not_assigns(Object_alloc_table@, Creation_simple_val@,
          Creation_simple_val, pset_singleton(this_0@))))) }

parameter cons_Creation_int_requires :
 this_1:Object pointer ->
  n:int ->
   { } unit reads Creation_simple_val,Object_alloc_table
   writes Creation_simple_val
   { (JC_24:
     ((JC_22: eq_int(select(Creation_simple_val, this_1), n))
     and (JC_23:
         not_assigns(Object_alloc_table@, Creation_simple_val@,
         Creation_simple_val, pset_singleton(this_1@))))) }

parameter cons_Creation_requires :
 this_2:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_38:
    ((JC_36: eq_int(select(Creation_simple_val, this_2), (0)))
    and (JC_37:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2@))))) }

parameter cons_TestSuperConstructor :
 this_4:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_130:
    ((JC_128: eq_int(select(Creation_simple_val, this_4), (12)))
    and (JC_129:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4@))))) }

parameter cons_TestSuperConstructor_requires :
 this_4:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_130:
    ((JC_128: eq_int(select(Creation_simple_val, this_4), (12)))
    and (JC_129:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4@))))) }

parameter non_null_Object :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter non_null_Object_requires :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_10:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

let Creation_test1_ensures_default =
 fun (tt : unit) ->
  { (JC_62: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_1 = (K_10:
                (let this = (JC_73:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt = (let jessie_95 = this in
                          (let jessie_94 = (17) in
                          (JC_74: ((cons_Creation_int jessie_95) jessie_94)))) in
                this))) in
     begin
       (return := (K_9: ((safe_acc_ !Creation_simple_val) t_1)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_63: true) }

let Creation_test1_ensures_normal =
 fun (tt : unit) ->
  { (JC_62: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_1 = (K_10:
                (let this = (JC_75:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt = (let jessie_101 = this in
                          (let jessie_100 = (17) in
                          (JC_76:
                          ((cons_Creation_int jessie_101) jessie_100)))) in
                this))) in
     begin
       (return := (K_9: ((safe_acc_ !Creation_simple_val) t_1)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_67: eq_int(result, (17))) }

let Creation_test1_safety =
 fun (tt : unit) ->
  { (JC_62: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_1 = (K_10:
                (let this = (let jessie_86 = (JC_69:
                                             (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                            (JC_70:
                            (assert
                            { ge_int(offset_max(Object_alloc_table,
                                     jessie_86),
                              (0)) };
                            jessie_86))) in
                (let tt = (let jessie_89 = this in
                          (let jessie_88 = (17) in
                          (JC_71:
                          ((cons_Creation_int_requires jessie_89) jessie_88)))) in
                this))) in
     begin
       (return := (K_9:
                  (JC_72:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t_1) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let Creation_test2_ensures_default =
 fun (tt : unit) ->
  { (JC_80: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_0 = (K_13:
                (let this_3 = (JC_91:
                              (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt_0 = (let jessie_111 = this_3 in
                            (JC_92: (cons_Creation jessie_111))) in
                this_3))) in
     begin
       (return := (K_12: ((safe_acc_ !Creation_simple_val) t_0)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_81: true) }

let Creation_test2_ensures_normal =
 fun (tt : unit) ->
  { (JC_80: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_0 = (K_13:
                (let this_3 = (JC_93:
                              (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt_0 = (let jessie_116 = this_3 in
                            (JC_94: (cons_Creation jessie_116))) in
                this_3))) in
     begin
       (return := (K_12: ((safe_acc_ !Creation_simple_val) t_0)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_85: eq_int(result, (0))) }

let Creation_test2_safety =
 fun (tt : unit) ->
  { (JC_80: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t_0 = (K_13:
                (let this_3 = (let jessie_104 = (JC_87:
                                                (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                              (JC_88:
                              (assert
                              { ge_int(offset_max(Object_alloc_table,
                                       jessie_104),
                                (0)) };
                              jessie_104))) in
                (let tt_0 = (let jessie_106 = this_3 in
                            (JC_89: (cons_Creation_requires jessie_106))) in
                this_3))) in
     begin
       (return := (K_12:
                  (JC_90:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t_0) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let Creation_test3_ensures_default =
 fun (tt : unit) ->
  { (JC_98: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t = (K_16:
              (let this_5 = (JC_113:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
              (let tt_1 = (let jessie_130 = this_5 in
                          (let jessie_129 = (10) in
                          (let jessie_128 = (7) in
                          (JC_114:
                          (((cons_Creation_int_int jessie_130) jessie_129) jessie_128))))) in
              this_5))) in
     begin
       (return := (K_15: ((safe_acc_ !Creation_simple_val) t)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_99: true) }

let Creation_test3_ensures_normal =
 fun (tt : unit) ->
  { (JC_98: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t = (K_16:
              (let this_5 = (JC_115:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
              (let tt_1 = (let jessie_137 = this_5 in
                          (let jessie_136 = (10) in
                          (let jessie_135 = (7) in
                          (JC_116:
                          (((cons_Creation_int_int jessie_137) jessie_136) jessie_135))))) in
              this_5))) in
     begin
       (return := (K_15: ((safe_acc_ !Creation_simple_val) t)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_105:
    ((JC_103: eq_int(result, (17)))
    and (JC_104:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

let Creation_test3_safety =
 fun (tt : unit) ->
  { (JC_98: true) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let t = (K_16:
              (let this_5 = (let jessie_119 = (JC_109:
                                              (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                            (JC_110:
                            (assert
                            { ge_int(offset_max(Object_alloc_table,
                                     jessie_119),
                              (0)) };
                            jessie_119))) in
              (let tt_1 = (let jessie_123 = this_5 in
                          (let jessie_122 = (10) in
                          (let jessie_121 = (7) in
                          (JC_111:
                          (((cons_Creation_int_int_requires jessie_123) jessie_122) jessie_121))))) in
              this_5))) in
     begin
       (return := (K_15:
                  (JC_112:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let cons_Creation_ensures_default =
 fun (this_2 : Object pointer) ->
  { valid_struct_Creation(this_2, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_50 = (let jessie_46 = (0) in
                      (let jessie_49 = this_2 in
                      (((safe_upd_ Creation_simple_val) jessie_49) jessie_46))) in
     void);
    (K_4:
    (let jessie_52 = this_2 in
    (let jessie_51 = (0) in
    (JC_40: ((cons_Creation_int jessie_52) jessie_51)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_29: true) }

let cons_Creation_ensures_normal =
 fun (this_2 : Object pointer) ->
  { valid_struct_Creation(this_2, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_58 = (let jessie_54 = (0) in
                      (let jessie_57 = this_2 in
                      (((safe_upd_ Creation_simple_val) jessie_57) jessie_54))) in
     void);
    (K_4:
    (let jessie_60 = this_2 in
    (let jessie_59 = (0) in
    (JC_41: ((cons_Creation_int jessie_60) jessie_59)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_35:
    ((JC_33: eq_int(select(Creation_simple_val, this_2), (0)))
    and (JC_34:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2@))))) }

let cons_Creation_int_ensures_default =
 fun (this_1 : Object pointer) (n : int) ->
  { valid_struct_Creation(this_1, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_24 = begin
                        (let jessie_18 = (let jessie_14 = (0) in
                                         (let jessie_17 = this_1 in
                                         (((safe_upd_ Creation_simple_val) jessie_17) jessie_14))) in
                        void);
                       (K_2:
                       (let jessie_20 = n in
                       (let jessie_23 = this_1 in
                       begin
                         (((safe_upd_ Creation_simple_val) jessie_23) jessie_20);
                        jessie_20
                       end)))
                      end in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_15: true) }

let cons_Creation_int_ensures_normal =
 fun (this_1 : Object pointer) (n : int) ->
  { valid_struct_Creation(this_1, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_36 = begin
                        (let jessie_30 = (let jessie_26 = (0) in
                                         (let jessie_29 = this_1 in
                                         (((safe_upd_ Creation_simple_val) jessie_29) jessie_26))) in
                        void);
                       (K_2:
                       (let jessie_32 = n in
                       (let jessie_35 = this_1 in
                       begin
                         (((safe_upd_ Creation_simple_val) jessie_35) jessie_32);
                        jessie_32
                       end)))
                      end in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_21:
    ((JC_19: eq_int(select(Creation_simple_val, this_1), n))
    and (JC_20:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_1@))))) }

let cons_Creation_int_int_ensures_default =
 fun (this_0 : Object pointer) (n_0 : int) (m : int) ->
  { valid_struct_Creation(this_0, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_74 = (let jessie_70 = (0) in
                      (let jessie_73 = this_0 in
                      (((safe_upd_ Creation_simple_val) jessie_73) jessie_70))) in
     void);
    (K_7:
    (let jessie_76 = this_0 in
    (let jessie_75 = (K_6: ((add_int n_0) m)) in
    (JC_57: ((cons_Creation_int jessie_76) jessie_75)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_46: true) }

let cons_Creation_int_int_ensures_normal =
 fun (this_0 : Object pointer) (n_0 : int) (m : int) ->
  { valid_struct_Creation(this_0, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_82 = (let jessie_78 = (0) in
                      (let jessie_81 = this_0 in
                      (((safe_upd_ Creation_simple_val) jessie_81) jessie_78))) in
     void);
    (K_7:
    (let jessie_84 = this_0 in
    (let jessie_83 = (K_6: ((add_int n_0) m)) in
    (JC_58: ((cons_Creation_int jessie_84) jessie_83)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_52:
    ((JC_50: eq_int(select(Creation_simple_val, this_0), add_int(n_0, m)))
    and (JC_51:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_0@))))) }

let cons_Creation_int_int_safety =
 fun (this_0 : Object pointer) (n_0 : int) (m : int) ->
  { valid_struct_Creation(this_0, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_66 = (let jessie_62 = (0) in
                      (let jessie_65 = this_0 in
                      (((safe_upd_ Creation_simple_val) jessie_65) jessie_62))) in
     void);
    (K_7:
    (let jessie_68 = this_0 in
    (let jessie_67 = (K_6: ((add_int n_0) m)) in
    (JC_56: ((cons_Creation_int_requires jessie_68) jessie_67)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_Creation_int_safety =
 fun (this_1 : Object pointer) (n : int) ->
  { valid_struct_Creation(this_1, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_12 = begin
                        (let jessie_6 = (let jessie_2 = (0) in
                                        (let jessie_5 = this_1 in
                                        (((safe_upd_ Creation_simple_val) jessie_5) jessie_2))) in
                        void);
                       (K_2:
                       (let jessie_8 = n in
                       (let jessie_11 = this_1 in
                       begin
                         (((safe_upd_ Creation_simple_val) jessie_11) jessie_8);
                        jessie_8
                       end)))
                      end in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_Creation_safety =
 fun (this_2 : Object pointer) ->
  { valid_struct_Creation(this_2, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_42 = (let jessie_38 = (0) in
                      (let jessie_41 = this_2 in
                      (((safe_upd_ Creation_simple_val) jessie_41) jessie_38))) in
     void);
    (K_4:
    (let jessie_44 = this_2 in
    (let jessie_43 = (0) in
    (JC_39: ((cons_Creation_int_requires jessie_44) jessie_43)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_TestSuperConstructor_ensures_default =
 fun (this_4 : Object pointer) ->
  { valid_struct_TestSuperConstructor(this_4, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_18:
     (let jessie_142 = this_4 in
     (let jessie_141 = (12) in
     (JC_132: ((cons_Creation_int jessie_142) jessie_141)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_121: true) }

let cons_TestSuperConstructor_ensures_normal =
 fun (this_4 : Object pointer) ->
  { valid_struct_TestSuperConstructor(this_4, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_18:
     (let jessie_144 = this_4 in
     (let jessie_143 = (12) in
     (JC_133: ((cons_Creation_int jessie_144) jessie_143)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_127:
    ((JC_125: eq_int(select(Creation_simple_val, this_4), (12)))
    and (JC_126:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4@))))) }

let cons_TestSuperConstructor_safety =
 fun (this_4 : Object pointer) ->
  { valid_struct_TestSuperConstructor(this_4, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_18:
     (let jessie_140 = this_4 in
     (let jessie_139 = (12) in
     (JC_131: ((cons_Creation_int_requires jessie_140) jessie_139)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


========== make project execution ==========
why --project [...] why/Creation.why
========== file tests/java/why/Creation.wpr ==========
<project name="Creation" context="why/Creation_ctx.why">
  <function name="Method test3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po11.why">
      <location file = "HOME/tests/java/Creation.jc" line = "116" begin = "57" end = "72"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/Creation_po12.why">
      <location file = "why/Creation.why" line = "1013" begin = "30" end = "152"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po13.why">
      <location file = "HOME/tests/java/Creation.java" line = "54" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = "IndexBounds"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po9.why">
      <location file = "HOME/tests/java/Creation.java" line = "50" begin = "18" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po10.why">
      <location file = "HOME/tests/java/Creation.java" line = "52" begin = "22" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method test2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po6.why">
      <location file = "HOME/tests/java/Creation.jc" line = "96" begin = "59" end = "74"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/Creation_po7.why">
      <location file = "why/Creation.why" line = "923" begin = "32" end = "158"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po8.why">
      <location file = "HOME/tests/java/Creation.java" line = "45" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = "IndexBounds"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po5.why">
      <location file = "HOME/tests/java/Creation.java" line = "41" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method test1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po2.why">
      <location file = "HOME/tests/java/Creation.jc" line = "76" begin = "59" end = "74"/>
      <explain kind = "Pre"
text = "AllocSize"/>
    </goal>
    <goal why_file="why/Creation_po3.why">
      <location file = "why/Creation.why" line = "841" begin = "30" end = "151"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po4.why">
      <location file = "HOME/tests/java/Creation.java" line = "37" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = "IndexBounds"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po1.why">
      <location file = "HOME/tests/java/Creation.java" line = "33" begin = "18" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Constructor of class TestSuperConstructor">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Constructor of class Creation">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po14.why">
      <location file = "HOME/tests/java/Creation.java" line = "12" begin = "4" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po15.why">
      <location file = "HOME/tests/java/Creation.java" line = "18" begin = "18" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po16.why">
      <location file = "HOME/tests/java/Creation.java" line = "20" begin = "4" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po17.why">
      <location file = "HOME/tests/java/Creation.java" line = "28" begin = "4" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Creation_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

logic integer_of_bitvector : bitvector -> int

logic bitvector_of_integer : int -> bitvector

logic real_of_bitvector : bitvector -> real

type Object

type interface

logic Creation_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Creation_parenttag_Object: parenttag(Creation_tag, Object_tag)

logic Exception_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag : Object tag_id

axiom TestSuperConstructor_parenttag_Creation:
  parenttag(TestSuperConstructor_tag, Creation_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Creation(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Creation(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Creation(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_TestSuperConstructor(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Creation(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) =
  strict_valid_struct_Creation(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Exception(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p: unit pointer,
  a: int, b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) = valid_struct_Creation(p,
  a, b, Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

========== file tests/java/why/Creation_po10.why ==========
goal Creation_test3_ensures_normal_po_2:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_105":
  ("JC_104":
  ("JC_104": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_empty))))

========== file tests/java/why/Creation_po11.why ==========
goal Creation_test3_safety_po_1:
  ("JC_98": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po12.why ==========
goal Creation_test3_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po13.why ==========
goal Creation_test3_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po14.why ==========
goal cons_Creation_ensures_normal_po_1:
  forall this_2:Object pointer.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_2, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_2, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val1, this_2) = 0)) and
   ("JC_23": not_assigns(Object_alloc_table, Creation_simple_val0,
   Creation_simple_val1, pset_singleton(this_2))))) ->
  ("JC_35":
  ("JC_34":
  ("JC_34": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_2)))))

========== file tests/java/why/Creation_po15.why ==========
goal cons_Creation_int_ensures_normal_po_1:
  forall this_1:Object pointer.
  forall n:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  (Creation_simple_val1 = store(Creation_simple_val0, this_1, n)) ->
  ("JC_21": ("JC_19": ("JC_19": (select(Creation_simple_val1, this_1) = n))))

========== file tests/java/why/Creation_po16.why ==========
goal cons_Creation_int_ensures_normal_po_2:
  forall this_1:Object pointer.
  forall n:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  (Creation_simple_val1 = store(Creation_simple_val0, this_1, n)) ->
  ("JC_21":
  ("JC_20":
  ("JC_20": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_1)))))

========== file tests/java/why/Creation_po17.why ==========
goal cons_Creation_int_int_ensures_normal_po_1:
  forall this_0:Object pointer.
  forall n_0:int.
  forall m:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_0, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val1, this_0) = (n_0 + m))) and
   ("JC_23": not_assigns(Object_alloc_table, Creation_simple_val0,
   Creation_simple_val1, pset_singleton(this_0))))) ->
  ("JC_52":
  ("JC_51":
  ("JC_51": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_0)))))

========== file tests/java/why/Creation_po1.why ==========
goal Creation_test1_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val0, result) = 17)) and
   ("JC_23": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_67": (return = 17))

========== file tests/java/why/Creation_po2.why ==========
goal Creation_test1_safety_po_1:
  ("JC_62": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po3.why ==========
goal Creation_test1_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po4.why ==========
goal Creation_test1_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val0, result) = 17)) and
   ("JC_23": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po5.why ==========
goal Creation_test2_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_38":
  (("JC_36": (select(Creation_simple_val0, result) = 0)) and
   ("JC_37": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_85": (return = 0))

========== file tests/java/why/Creation_po6.why ==========
goal Creation_test2_safety_po_1:
  ("JC_80": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po7.why ==========
goal Creation_test2_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po8.why ==========
goal Creation_test2_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_38":
  (("JC_36": (select(Creation_simple_val0, result) = 0)) and
   ("JC_37": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po9.why ==========
goal Creation_test3_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_105": ("JC_103": ("JC_103": (return = 17))))

========== generation of Simplify VC output ==========
why -simplify [...] why/Creation.why
========== file tests/java/simplify/Creation_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom Creation_parenttag_Object
 (EQ (parenttag Creation_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Exception_parenttag_Object
 (EQ (parenttag Exception_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x Object_alloc_table)
  (EQ (offset_max Object_alloc_table x) 0))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_bitvector_of_bitvector_of_Object
 (FORALL (x) (EQ (Object_of_bitvector (bitvector_of_Object x)) x)))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom TestSuperConstructor_parenttag_Creation
 (EQ (parenttag TestSuperConstructor_tag Creation_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom bitvector_of_Object_of_Object_of_bitvector
 (FORALL (x) (EQ (bitvector_of_Object (Object_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_interface_of_interface_of_bitvector
 (FORALL (x) (EQ (bitvector_of_interface (interface_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_bitvector_of_bitvector_of_interface
 (FORALL (x) (EQ (interface_of_bitvector (bitvector_of_interface x)) x)))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (left_valid_struct_Object p a Object_alloc_table)
  (<= (offset_min Object_alloc_table p) a))

(DEFPRED (left_valid_struct_Creation p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_Exception p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_String p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_TestSuperConstructor p a Object_alloc_table)
  (left_valid_struct_Creation p a Object_alloc_table))

(DEFPRED (left_valid_struct_Throwable p a Object_alloc_table)
  (left_valid_struct_Object p a Object_alloc_table))

(DEFPRED (left_valid_struct_interface p a interface_alloc_table)
  (<= (offset_min interface_alloc_table p) a))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(DEFPRED (right_valid_struct_Object p b Object_alloc_table)
  (>= (offset_max Object_alloc_table p) b))

(DEFPRED (right_valid_struct_Creation p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_Exception p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_String p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_TestSuperConstructor p b Object_alloc_table)
  (right_valid_struct_Creation p b Object_alloc_table))

(DEFPRED (right_valid_struct_Throwable p b Object_alloc_table)
  (right_valid_struct_Object p b Object_alloc_table))

(DEFPRED (right_valid_struct_interface p b interface_alloc_table)
  (>= (offset_max interface_alloc_table p) b))

(DEFPRED (strict_valid_root_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_root_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (strict_valid_struct_Creation p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Exception p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_String p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_TestSuperConstructor p a b Object_alloc_table)
  (strict_valid_struct_Creation p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_Throwable p a b Object_alloc_table)
  (strict_valid_struct_Object p a b Object_alloc_table))

(DEFPRED (strict_valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Creation p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Exception p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_TestSuperConstructor p a b bitvector_alloc_table)
  (valid_bitvector_struct_Creation p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_root_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_root_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (<= (offset_min Object_alloc_table p) a)
  (>= (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Creation p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Exception p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_TestSuperConstructor p a b Object_alloc_table)
  (valid_struct_Creation p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (<= (offset_min interface_alloc_table p) a)
  (>= (offset_max interface_alloc_table p) b)))

;; Creation_test1_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 33, characters 18-31
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) 17)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result0)
(IMPLIES (EQ result0 (select Creation_simple_val0 result))
(FORALL (return) (IMPLIES (EQ return result0) (EQ return 17))))))))))))))

;; Creation_test1_safety_po_1, File "HOME/tests/java/Creation.jc", line 76, characters 59-74
(IMPLIES TRUE (>= 1 0))

;; Creation_test1_safety_po_2, File "why/Creation.why", line 841, characters 30-151
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test1_safety_po_3, File "HOME/tests/java/Creation.java", line 37, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) 17)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))

;; Creation_test2_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 41, characters 18-30
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) 0)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result0)
(IMPLIES (EQ result0 (select Creation_simple_val0 result))
(FORALL (return) (IMPLIES (EQ return result0) (EQ return 0))))))))))))))

;; Creation_test2_safety_po_1, File "HOME/tests/java/Creation.jc", line 96, characters 59-74
(IMPLIES TRUE (>= 1 0))

;; Creation_test2_safety_po_2, File "why/Creation.why", line 923, characters 32-158
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test2_safety_po_3, File "HOME/tests/java/Creation.java", line 45, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) 0)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))

;; Creation_test3_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 50, characters 18-31
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) (+ 10 7))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result0)
(IMPLIES (EQ result0 (select Creation_simple_val0 result))
(FORALL (return) (IMPLIES (EQ return result0) (EQ return 17))))))))))))))

;; Creation_test3_ensures_normal_po_2, File "HOME/tests/java/Creation.java", line 52, characters 22-27
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) (+ 10 7))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result0)
(IMPLIES (EQ result0 (select Creation_simple_val0 result))
(FORALL (return)
(IMPLIES (EQ return result0)
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val0 pset_empty))))))))))))))

;; Creation_test3_safety_po_1, File "HOME/tests/java/Creation.jc", line 116, characters 57-72
(IMPLIES TRUE (>= 1 0))

;; Creation_test3_safety_po_2, File "why/Creation.why", line 1013, characters 30-152
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test3_safety_po_3, File "HOME/tests/java/Creation.java", line 54, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND
         (strict_valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (select Creation_simple_val0 result) (+ 10 7))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))

;; cons_Creation_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 12, characters 4-12
(FORALL (this_2)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_2 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_2 0))
(FORALL (Creation_simple_val1)
(IMPLIES (AND (EQ (select Creation_simple_val1 this_2) 0)
         (not_assigns
         Object_alloc_table Creation_simple_val0 Creation_simple_val1 
         (pset_singleton this_2)))
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val1 (pset_singleton
                                                            this_2))))))))))

;; cons_Creation_int_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 18, characters 18-38
(FORALL (this_1)
(FORALL (n)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_1 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_1 0))
(FORALL (Creation_simple_val1)
(IMPLIES (EQ Creation_simple_val1
         (|why__store| Creation_simple_val0 this_1 n))
(EQ (select Creation_simple_val1 this_1) n))))))))))

;; cons_Creation_int_ensures_normal_po_2, File "HOME/tests/java/Creation.java", line 20, characters 4-12
(FORALL (this_1)
(FORALL (n)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_1 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_1 0))
(FORALL (Creation_simple_val1)
(IMPLIES (EQ Creation_simple_val1
         (|why__store| Creation_simple_val0 this_1 n))
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val1 (pset_singleton
                                                            this_1)))))))))))

;; cons_Creation_int_int_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 28, characters 4-12
(FORALL (this_0)
(FORALL (n_0)
(FORALL (m)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_0 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_0 0))
(FORALL (Creation_simple_val1)
(IMPLIES (AND (EQ (select Creation_simple_val1 this_0) (+ n_0 m))
         (not_assigns
         Object_alloc_table Creation_simple_val0 Creation_simple_val1 
         (pset_singleton this_0)))
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val1 (pset_singleton
                                                            this_0))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Creation_why.sx      : .........?....... (16/0/1/0/0)
total   :  17
valid   :  16 ( 94%)
invalid :   0 (  0%)
unknown :   1 (  6%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/Creation.why
========== file tests/java/why/Creation_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

logic integer_of_bitvector : bitvector -> int

logic bitvector_of_integer : int -> bitvector

logic real_of_bitvector : bitvector -> real

type Object

type interface

logic Creation_tag : Object tag_id

logic Object_tag : Object tag_id

axiom Creation_parenttag_Object: parenttag(Creation_tag, Object_tag)

logic Exception_tag : Object tag_id

axiom Exception_parenttag_Object: parenttag(Exception_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_bitvector : bitvector -> Object pointer

logic bitvector_of_Object : Object pointer -> bitvector

axiom Object_of_bitvector_of_bitvector_of_Object:
  (forall x:Object pointer.
    (Object_of_bitvector(bitvector_of_Object(x)) = x))

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag : Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag : Object tag_id

axiom TestSuperConstructor_parenttag_Creation:
  parenttag(TestSuperConstructor_tag, Creation_tag)

logic Throwable_tag : Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

axiom bitvector_of_Object_of_Object_of_bitvector:
  (forall x:bitvector. (bitvector_of_Object(Object_of_bitvector(x)) = x))

logic bitvector_of_interface : interface pointer -> bitvector

logic interface_of_bitvector : bitvector -> interface pointer

axiom bitvector_of_interface_of_interface_of_bitvector:
  (forall x:bitvector.
    (bitvector_of_interface(interface_of_bitvector(x)) = x))

logic interface_tag : interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_of_bitvector_of_bitvector_of_interface:
  (forall x:interface pointer.
    (interface_of_bitvector(bitvector_of_interface(x)) = x))

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate left_valid_struct_Object(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = (offset_min(Object_alloc_table,
  p) <= a)

predicate left_valid_struct_Creation(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_Exception(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_String(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Creation(p, a,
  Object_alloc_table)

predicate left_valid_struct_Throwable(p: Object pointer, a: int,
  Object_alloc_table: Object alloc_table) = left_valid_struct_Object(p, a,
  Object_alloc_table)

predicate left_valid_struct_interface(p: interface pointer, a: int,
  interface_alloc_table: interface alloc_table) =
  (offset_min(interface_alloc_table, p) <= a)

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

predicate right_valid_struct_Object(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  p) >= b)

predicate right_valid_struct_Creation(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_Exception(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_String(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_TestSuperConstructor(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Creation(p, b,
  Object_alloc_table)

predicate right_valid_struct_Throwable(p: Object pointer, b: int,
  Object_alloc_table: Object alloc_table) = right_valid_struct_Object(p, b,
  Object_alloc_table)

predicate right_valid_struct_interface(p: interface pointer, b: int,
  interface_alloc_table: interface alloc_table) =
  (offset_max(interface_alloc_table, p) >= b)

predicate strict_valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate strict_valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate strict_valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) =
  strict_valid_struct_Creation(p, a, b, Object_alloc_table)

predicate strict_valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = strict_valid_struct_Object(p, a,
  b, Object_alloc_table)

predicate strict_valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Exception(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p: unit pointer,
  a: int, b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_root_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_root_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) <= a) and
   (offset_max(Object_alloc_table, p) >= b))

predicate valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Exception(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) = valid_struct_Creation(p,
  a, b, Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) <= a) and
   (offset_max(interface_alloc_table, p) >= b))

goal Creation_test1_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val0, result) = 17)) and
   ("JC_23": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_67": (return = 17))

goal Creation_test1_safety_po_1:
  ("JC_62": true) ->
  (1 >= 0)

goal Creation_test1_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test1_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_62": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val0, result) = 17)) and
   ("JC_23": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal Creation_test2_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_38":
  (("JC_36": (select(Creation_simple_val0, result) = 0)) and
   ("JC_37": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_85": (return = 0))

goal Creation_test2_safety_po_1:
  ("JC_80": true) ->
  (1 >= 0)

goal Creation_test2_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test2_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_80": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_38":
  (("JC_36": (select(Creation_simple_val0, result) = 0)) and
   ("JC_37": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal Creation_test3_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_105": ("JC_103": ("JC_103": (return = 17))))

goal Creation_test3_ensures_normal_po_2:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int.
  (return = result0) ->
  ("JC_105":
  ("JC_104":
  ("JC_104": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_empty))))

goal Creation_test3_safety_po_1:
  ("JC_98": true) ->
  (1 >= 0)

goal Creation_test3_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test3_safety_po_3:
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_98": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (strict_valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  ("JC_55":
  (("JC_53": (select(Creation_simple_val0, result) = (10 + 7))) and
   ("JC_54": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal cons_Creation_ensures_normal_po_1:
  forall this_2:Object pointer.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_2, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_2, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val1, this_2) = 0)) and
   ("JC_23": not_assigns(Object_alloc_table, Creation_simple_val0,
   Creation_simple_val1, pset_singleton(this_2))))) ->
  ("JC_35":
  ("JC_34":
  ("JC_34": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_2)))))

goal cons_Creation_int_ensures_normal_po_1:
  forall this_1:Object pointer.
  forall n:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  (Creation_simple_val1 = store(Creation_simple_val0, this_1, n)) ->
  ("JC_21": ("JC_19": ("JC_19": (select(Creation_simple_val1, this_1) = n))))

goal cons_Creation_int_ensures_normal_po_2:
  forall this_1:Object pointer.
  forall n:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  (Creation_simple_val1 = store(Creation_simple_val0, this_1, n)) ->
  ("JC_21":
  ("JC_20":
  ("JC_20": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_1)))))

goal cons_Creation_int_int_ensures_normal_po_1:
  forall this_0:Object pointer.
  forall n_0:int.
  forall m:int.
  forall Creation_simple_val:(Object,
  int) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_0, 0)) ->
  forall Creation_simple_val1:(Object,
  int) memory.
  ("JC_24":
  (("JC_22": (select(Creation_simple_val1, this_0) = (n_0 + m))) and
   ("JC_23": not_assigns(Object_alloc_table, Creation_simple_val0,
   Creation_simple_val1, pset_singleton(this_0))))) ->
  ("JC_52":
  ("JC_51":
  ("JC_51": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val1, pset_singleton(this_0)))))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Creation_why.why          : .........#....... (16/0/0/1/0)
total   :  17
valid   :  16 ( 94%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   1 (  6%)
failure :   0 (  0%)
