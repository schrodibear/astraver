========== file tests/java/Creation.java ==========

class Creation {

    int simple_val;

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing 
      @   ensures this.simple_val == 0;
      @*/
    Creation() {
	this(0);
    }

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing
      @   ensures this.simple_val == n;
      @*/
    Creation(int n) {
	simple_val = n;
    }

    /*@ behavior normal:
      @   assigns this.simple_val; // not \nothing
      @   ensures this.simple_val == n + m;
      @*/
    Creation(int n,int m) {
	this(n+m); 
    }

    /*@ behavior normal:
      @   ensures \result == 17;
      @*/
    public static int test1() {
	Creation t = new Creation(17);
	return t.simple_val;
    }

    /*@ behavior normal:
      @   ensures \result == 0;
      @*/
    public static int test2() {
	Creation t = new Creation();
	return t.simple_val;
    }

    /*@ behavior normal:
      @   assigns \nothing;             // BUG !!!!!!!!!!!!
      @   ensures \result == 17;
      @*/
    public static int test3() {
	Creation t = new Creation(10,7);
	return t.simple_val;
    }

}


class TestSuperConstructor extends Creation {

    /*@ behavior normal:
      @   assigns simple_val;
      @   ensures simple_val == 12;
      @*/
    TestSuperConstructor() {
	super(12);
    }

}


========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function cons_Creation_int for constructor Creation
Generating JC function cons_Creation for constructor Creation
Generating JC function cons_Creation_int_int for constructor Creation
Generating JC function Creation_test1 for method Creation.test1
Generating JC function Creation_test2 for method Creation.test2
Generating JC function Creation_test3 for method Creation.test3
Generating JC function cons_TestSuperConstructor for constructor TestSuperConstructor
Done.
========== file tests/java/Creation.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Creation = Object with {
  int32 simple_val;
}

tag TestSuperConstructor = Creation with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

unit cons_Creation_int(Creation[0] this_1, int32 n)
behavior normal:
  assigns this_1.simple_val;
  ensures (K_2 : (this_1.simple_val == n));
{  (K_1 : (this_1.simple_val = n))
}

unit cons_Creation(Creation[0] this_2)
behavior normal:
  assigns this_2.simple_val;
  ensures (K_4 : (this_2.simple_val == 0));
{  (K_3 : cons_Creation_int(this_2, 0))
}

unit cons_Creation_int_int(Creation[0] this_0, int32 n_0, int32 m)
behavior normal:
  assigns this_0.simple_val;
  ensures (K_7 : (this_0.simple_val == (n_0 + m)));
{  (K_6 : cons_Creation_int(this_0, (K_5 : ((n_0 + m) :> int32))))
}

int32 Creation_test1()
behavior normal:
  ensures (K_8 : (\result == 17));
{  
   {  
      (var Creation[0..] t_1 = (K_10 : 
                               {  
                                  (var Creation[0] this = (new Creation[1]));
                                  
                                  {  
                                     (var unit tt = cons_Creation_int(
                                     this, 17));
                                     this
                                  }
                               }));
      
      (return (K_9 : t_1.simple_val))
   }
}

int32 Creation_test2()
behavior normal:
  ensures (K_11 : (\result == 0));
{  
   {  
      (var Creation[0..] t_0 = (K_13 : 
                               {  
                                  (var Creation[0] this = (new Creation[1]));
                                  
                                  {  
                                     (var unit tt = cons_Creation(this));
                                     this
                                  }
                               }));
      
      (return (K_12 : t_0.simple_val))
   }
}

int32 Creation_test3()
behavior normal:
  assigns \nothing;
  ensures (K_14 : (\result == 17));
{  
   {  
      (var Creation[0..] t = (K_16 : 
                             {  
                                (var Creation[0] this = (new Creation[1]));
                                
                                {  
                                   (var unit tt = cons_Creation_int_int(
                                   this, 10, 7));
                                   this
                                }
                             }));
      
      (return (K_15 : t.simple_val))
   }
}

unit cons_TestSuperConstructor(TestSuperConstructor[0] this_4)
behavior normal:
  assigns this_4.simple_val;
  ensures (K_18 : (this_4.simple_val == 12));
{  (K_17 : cons_Creation_int(this_4, 12))
}

/*
LocalVariables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Creation.jloc tests/java/Creation.jc && make -f tests/java/Creation.makefile gui"
End:
*/
========== file tests/java/Creation.jloc ==========
[K_10]
file = "HOME/tests/java/Creation.java"
line = 34
begin = 14
end = 30

[K_11]
file = "HOME/tests/java/Creation.java"
line = 39
begin = 18
end = 30

[K_12]
file = "HOME/tests/java/Creation.java"
line = 43
begin = 8
end = 20

[K_13]
file = "HOME/tests/java/Creation.java"
line = 42
begin = 14
end = 28

[K_14]
file = "HOME/tests/java/Creation.java"
line = 48
begin = 18
end = 31

[K_15]
file = "HOME/tests/java/Creation.java"
line = 52
begin = 8
end = 20

[K_16]
file = "HOME/tests/java/Creation.java"
line = 51
begin = 14
end = 32

[K_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_18]
file = "HOME/tests/java/Creation.java"
line = 62
begin = 18
end = 34

[K_1]
file = "HOME/tests/java/Creation.java"
line = 19
begin = 1
end = 15

[K_2]
file = "HOME/tests/java/Creation.java"
line = 16
begin = 18
end = 38

[K_3]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_4]
file = "HOME/tests/java/Creation.java"
line = 8
begin = 18
end = 38

[K_5]
file = "HOME/tests/java/Creation.java"
line = 27
begin = 6
end = 9

[K_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_7]
file = "HOME/tests/java/Creation.java"
line = 24
begin = 18
end = 42

[K_8]
file = "HOME/tests/java/Creation.java"
line = 31
begin = 18
end = 31

[K_9]
file = "HOME/tests/java/Creation.java"
line = 35
begin = 8
end = 20

[cons_TestSuperConstructor]
name = "Constructor of class TestSuperConstructor"
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[cons_Creation_int]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[cons_Creation]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[Creation_test1]
name = "Method test1"
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[Creation_test2]
name = "Method test2"
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[Creation_test3]
name = "Method test3"
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[cons_Creation_int_int]
name = "Constructor of class Creation"
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

========== jessie execution ==========
Generating Why function cons_Creation_int
Generating Why function cons_Creation
Generating Why function cons_Creation_int_int
Generating Why function Creation_test1
Generating Why function Creation_test2
Generating Why function Creation_test3
Generating Why function cons_TestSuperConstructor
========== file tests/java/Creation.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
export WHYLIB=WHYLIB

WHY=$(WHYEXEC) --no-arrays  -split-user-conj -explain -locs Creation.loc

GWHY=$(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs Creation.loc

JESSIELIBFILE ?= HOME/lib/why/jessie.why

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Creation_why.sx

project: why/Creation.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILE) why/$*.why

goals: why/Creation_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILE) why/$*.why

coq: coq/Creation_why.vo

coq/Creation_why.v: why/Creation.why
	@echo 'why -coq-v8 [...] why/Creation.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILE) why/Creation.why

coq-goals: goals coq/Creation_ctx_why.vo
	for f in why/Creation_po*.why; do make -f Creation.makefile coq/`basename $$f .why`_why.v ; done

coq/Creation_ctx_why.v: why/Creation_ctx.why
	@echo 'why -coq-v8 [...] why/Creation_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/Creation_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export Creation_ctx_why." -coq-tactic "intuition" why/Creation_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Creation_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@jessie" $(JESSIELIBFILE) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@why" $(JESSIELIBFILE)

isabelle: isabelle/Creation_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILE) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/Creation_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -dir simplify $(JESSIELIBFILE) why/$*.why

ergo: why/Creation_why.why
	@echo 'Running Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why --why [...] why/$*.why' && $(WHY) --why -dir why $(JESSIELIBFILE) why/$*.why

cvcl: cvcl/Creation_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILE) why/$*.why

harvey: harvey/Creation_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILE) why/$*.why

zenon: zenon/Creation_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILE) why/$*.why

smtlib: smtlib/Creation_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILE) why/$*.why

gui stat: Creation.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILE) why/$*.why

-include Creation.depend

depend: coq/Creation_why.v
	-$(COQDEP) -I coq coq/Creation*_why.v > Creation.depend

clean:
	rm -f coq/*.vo

========== file tests/java/Creation.loc ==========
[JC_90]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_91]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_92]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 43
begin = 8
end = 20

[JC_40]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_93]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 43
begin = 8
end = 20

[JC_41]
file = "HOME/tests/java/Creation.java"
line = 24
begin = 18
end = 42

[JC_94]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_42]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_95]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_43]
file = "HOME/tests/java/Creation.jc"
line = 64
begin = 9
end = 15

[Creation_test3_ensures_normal]
name = "Method test3"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_96]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_44]
file = "HOME/tests/java/Creation.java"
line = 24
begin = 18
end = 42

[JC_97]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_45]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_98]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_46]
file = "HOME/tests/java/Creation.jc"
line = 64
begin = 9
end = 15

[JC_1]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_100]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_99]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_47]
kind = ArithOverflow
file = "HOME/tests/java/Creation.java"
line = 27
begin = 6
end = 9

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_101]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_48]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_102]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_49]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_103]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Creation_int_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_5]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_104]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_6]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_105]
file = "HOME/"
line = 0
begin = -1
end = -1

[Creation_test1_safety]
name = "Method test1"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_7]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_106]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_8]
file = "HOME/tests/java/Creation.jc"
line = 42
begin = 8
end = 23

[JC_107]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_9]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_108]
file = "HOME/tests/java/Creation.java"
line = 48
begin = 18
end = 31

[JC_109]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_50]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_51]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_52]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_53]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_54]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_55]
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_56]
file = "HOME/tests/java/Creation.java"
line = 31
begin = 18
end = 31

[JC_110]
file = "HOME/tests/java/Creation.jc"
line = 110
begin = 9
end = 15

[JC_57]
file = "HOME/tests/java/Creation.java"
line = 31
begin = 18
end = 31

[JC_111]
file = "HOME/tests/java/Creation.java"
line = 48
begin = 18
end = 31

[JC_58]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[JC_112]
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_59]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 35
end = 75

[JC_113]
file = "HOME/tests/java/Creation.jc"
line = 110
begin = 9
end = 15

[JC_114]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[JC_115]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 33
end = 73

[Creation_test2_ensures_normal]
name = "Method test2"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_116]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_117]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_118]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[Creation_test2_safety]
name = "Method test2"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_119]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 33
end = 73

[JC_60]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_61]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[cons_Creation_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_62]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[cons_Creation_int_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 35
end = 75

[JC_11]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_64]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_13]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_66]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 35
begin = 8
end = 20

[JC_14]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_120]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_67]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 35
begin = 8
end = 20

[JC_15]
file = "HOME/tests/java/Creation.java"
line = 16
begin = 18
end = 38

[JC_121]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_68]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[JC_16]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_122]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 52
begin = 8
end = 20

[JC_69]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[JC_17]
file = "HOME/tests/java/Creation.jc"
line = 50
begin = 9
end = 15

[JC_123]
kind = IndexBounds
file = "HOME/tests/java/Creation.java"
line = 52
begin = 8
end = 20

[JC_18]
file = "HOME/tests/java/Creation.java"
line = 16
begin = 18
end = 38

[JC_124]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[JC_19]
file = "HOME/tests/java/Creation.java"
line = 18
begin = 4
end = 12

[JC_125]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[JC_126]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_127]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_128]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[cons_Creation_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[cons_TestSuperConstructor_ensures_normal]
name = "Constructor of class TestSuperConstructor"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_129]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 117
begin = 57
end = 72

[Creation_test3_safety]
name = "Method test3"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 50
begin = 22
end = 27

[JC_70]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[Creation_test1_ensures_normal]
name = "Method test1"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 33
begin = 22
end = 27

[JC_71]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_72]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[JC_20]
file = "HOME/tests/java/Creation.jc"
line = 50
begin = 9
end = 15

[JC_73]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 77
begin = 59
end = 74

[JC_21]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_74]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 80
begin = 52
end = 117

[JC_23]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_76]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_130]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_77]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_131]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 120
begin = 50
end = 120

[JC_78]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_26]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_132]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_79]
file = "HOME/"
line = 0
begin = -1
end = -1

[cons_Creation_int_int_ensures_normal]
name = "Constructor of class Creation"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_27]
file = "HOME/tests/java/Creation.java"
line = 8
begin = 18
end = 38

[JC_133]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_134]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_29]
file = "HOME/tests/java/Creation.jc"
line = 57
begin = 9
end = 15

[JC_135]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_136]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_137]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[cons_TestSuperConstructor_safety]
name = "Constructor of class TestSuperConstructor"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_138]
file = "HOME/tests/java/Creation.java"
line = 62
begin = 18
end = 34

[JC_139]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_80]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_81]
file = "HOME/tests/java/Creation.java"
line = 41
begin = 22
end = 27

[JC_82]
file = "HOME/tests/java/Creation.java"
line = 39
begin = 18
end = 30

[JC_30]
file = "HOME/tests/java/Creation.java"
line = 8
begin = 18
end = 38

[JC_83]
file = "HOME/tests/java/Creation.java"
line = 39
begin = 18
end = 30

[JC_31]
file = "HOME/tests/java/Creation.java"
line = 10
begin = 4
end = 12

[JC_84]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_32]
file = "HOME/tests/java/Creation.jc"
line = 57
begin = 9
end = 15

[JC_85]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 35
end = 75

[JC_33]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_86]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[cons_Creation_int_int_safety]
name = "Constructor of class Creation"
behavior = "Safety"
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_34]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_140]
file = "HOME/tests/java/Creation.jc"
line = 131
begin = 9
end = 15

[JC_87]
kind = UserCall
file = "HOME/tests/java/Creation.jc"
line = 100
begin = 52
end = 71

[JC_35]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_141]
file = "HOME/tests/java/Creation.java"
line = 62
begin = 18
end = 34

[JC_88]
kind = AllocSize
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 59
end = 74

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_142]
file = "HOME/tests/java/Creation.java"
line = 64
begin = 4
end = 24

[JC_89]
kind = IndexBounds
file = "HOME/tests/java/Creation.jc"
line = 97
begin = 35
end = 75

[JC_37]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_143]
file = "HOME/tests/java/Creation.jc"
line = 131
begin = 9
end = 15

[JC_38]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_144]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_39]
file = "HOME/tests/java/Creation.java"
line = 26
begin = 4
end = 12

[JC_145]
kind = UserCall
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/java/why/Creation.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

logic Creation_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Creation_parenttag_Object : parenttag(Creation_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x), (0))

axiom Object_int : (int_of_tag(Object_tag) = (1))

logic Object_of_pointer_address: unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr :
 (forall p:Object pointer.
  (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag:  -> Object tag_id

axiom TestSuperConstructor_parenttag_Creation :
 parenttag(TestSuperConstructor_tag, Creation_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic bitvector_of_byte: byte -> bitvector

logic byte_of_bitvector: bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector :
 (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char: char -> bitvector

logic char_of_bitvector: bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector :
 (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32: int32 -> bitvector

logic int32_of_bitvector: bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector :
 (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_long: long -> bitvector

logic long_of_bitvector: bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector :
 (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short: short -> bitvector

logic short_of_bitvector: bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector :
 (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

predicate eq_byte(x:byte,
 y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte :
 (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

predicate eq_char(x:char,
 y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char :
 (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long,
 y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short,
 y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_of_bitvector_of_bitvector_of_int32 :
 (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

logic interface_of_pointer_address: unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr :
 (forall p:interface pointer.
  (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_of_bitvector_of_bitvector_of_long :
 (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

axiom pointer_addr_of_Object_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(interface_of_pointer_address(p))))

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_of_bitvector_of_bitvector_of_short :
 (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

predicate valid_bitvector_struct_Object(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 valid_bitvector_struct_Object(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p:unit pointer,
 a:int,
 b:int,
 bitvector_alloc_table:unit alloc_table) =
 ((offset_min(bitvector_alloc_table, p) = a)
 and (offset_max(bitvector_alloc_table, p) = b))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Creation(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Creation(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

parameter Creation_simple_val : (Object, int32) memory ref

parameter Object_alloc_table : Object alloc_table ref

parameter Object_tag_table : Object tag_table ref

parameter Creation_test1 :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_57: eq_int(integer_of_int32(result), (17))) }

parameter Creation_test1_requires :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_57: eq_int(integer_of_int32(result), (17))) }

parameter Creation_test2 :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_83: eq_int(integer_of_int32(result), (0))) }

parameter Creation_test2_requires :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_83: eq_int(integer_of_int32(result), (0))) }

parameter Creation_test3 :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_113:
    ((JC_111: eq_int(integer_of_int32(result), (17)))
    and (JC_112:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

parameter Creation_test3_requires :
 tt:unit ->
  { } int32 reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val,Object_alloc_table,Object_tag_table
  { (JC_113:
    ((JC_111: eq_int(integer_of_int32(result), (17)))
    and (JC_112:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

parameter alloc_bitvector_struct_Creation :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Creation(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Creation_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Creation(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Object_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Object(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_String_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_String(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_TestSuperConstructor :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_TestSuperConstructor(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_TestSuperConstructor_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_TestSuperConstructor(result, (0),
      sub_int(n, (1)), bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_Throwable_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_Throwable(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { } unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_bitvector_struct_interface_requires :
 n:int ->
  bitvector_alloc_table:unit alloc_table ref ->
   { ge_int(n, (0))} unit pointer writes bitvector_alloc_table
   { (valid_bitvector_struct_interface(result, (0), sub_int(n, (1)),
      bitvector_alloc_table)
     and (alloc_extends(bitvector_alloc_table@, bitvector_alloc_table)
         and alloc_fresh(bitvector_alloc_table@, result, n))) }

parameter alloc_struct_Creation :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Creation(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Creation_tag)))) }

parameter alloc_struct_Creation_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Creation(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Creation_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_TestSuperConstructor :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_TestSuperConstructor(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result,
                  TestSuperConstructor_tag)))) }

parameter alloc_struct_TestSuperConstructor_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_TestSuperConstructor(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result,
                  TestSuperConstructor_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_Creation :
 this_2:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_32:
    ((JC_30:
     eq_int(integer_of_int32(select(Creation_simple_val, this_2)), (0)))
    and (JC_31:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2))))) }

parameter cons_Creation_int :
 this_1:Object pointer ->
  n_1:int32 ->
   { } unit reads Creation_simple_val,Object_alloc_table
   writes Creation_simple_val
   { (JC_20:
     ((JC_18:
      eq_int(integer_of_int32(select(Creation_simple_val, this_1)),
      integer_of_int32(n_1)))
     and (JC_19:
         not_assigns(Object_alloc_table@, Creation_simple_val@,
         Creation_simple_val, pset_singleton(this_1))))) }

parameter cons_Creation_int_int :
 this_0:Object pointer ->
  n_0_0:int32 ->
   m:int32 ->
    { } unit reads Creation_simple_val,Object_alloc_table
    writes Creation_simple_val
    { (JC_46:
      ((JC_44:
       eq_int(integer_of_int32(select(Creation_simple_val, this_0)),
       add_int(integer_of_int32(n_0_0), integer_of_int32(m))))
      and (JC_45:
          not_assigns(Object_alloc_table@, Creation_simple_val@,
          Creation_simple_val, pset_singleton(this_0))))) }

parameter cons_Creation_int_int_requires :
 this_0:Object pointer ->
  n_0_0:int32 ->
   m:int32 ->
    { } unit reads Creation_simple_val,Object_alloc_table
    writes Creation_simple_val
    { (JC_46:
      ((JC_44:
       eq_int(integer_of_int32(select(Creation_simple_val, this_0)),
       add_int(integer_of_int32(n_0_0), integer_of_int32(m))))
      and (JC_45:
          not_assigns(Object_alloc_table@, Creation_simple_val@,
          Creation_simple_val, pset_singleton(this_0))))) }

parameter cons_Creation_int_requires :
 this_1:Object pointer ->
  n_1:int32 ->
   { } unit reads Creation_simple_val,Object_alloc_table
   writes Creation_simple_val
   { (JC_20:
     ((JC_18:
      eq_int(integer_of_int32(select(Creation_simple_val, this_1)),
      integer_of_int32(n_1)))
     and (JC_19:
         not_assigns(Object_alloc_table@, Creation_simple_val@,
         Creation_simple_val, pset_singleton(this_1))))) }

parameter cons_Creation_requires :
 this_2:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_32:
    ((JC_30:
     eq_int(integer_of_int32(select(Creation_simple_val, this_2)), (0)))
    and (JC_31:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2))))) }

parameter cons_TestSuperConstructor :
 this_4:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_143:
    ((JC_141:
     eq_int(integer_of_int32(select(Creation_simple_val, this_4)), (12)))
    and (JC_142:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4))))) }

parameter cons_TestSuperConstructor_requires :
 this_4:Object pointer ->
  { } unit reads Creation_simple_val,Object_alloc_table
  writes Creation_simple_val
  { (JC_143:
    ((JC_141:
     eq_int(integer_of_int32(select(Creation_simple_val, this_4)), (12)))
    and (JC_142:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_8:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter non_null_Object_requires :
 x_0:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_8:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

parameter struct_Creation_alloc_of_bitvector :
 Object_alloc_table:Object alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes Object_alloc_table { true }

parameter struct_Creation_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  Object_alloc_table:Object alloc_table ->
   { } unit writes bitvector_alloc_table { true }

parameter struct_Creation_mem_of_bitvector :
 Creation_simple_val:(Object, int32) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes Creation_simple_val { true }

parameter struct_Creation_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  Creation_simple_val:(Object, int32) memory ->
   { } unit writes bitvector { true }

parameter struct_Object_alloc_of_bitvector :
 Object_alloc_table:Object alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes Object_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_Object_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  Object_alloc_table:Object alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_Object_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_Object_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter struct_String_alloc_of_bitvector :
 Object_alloc_table:Object alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes Object_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_String_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  Object_alloc_table:Object alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_String_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_String_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter struct_TestSuperConstructor_alloc_of_bitvector :
 Object_alloc_table:Object alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes Object_alloc_table { true }

parameter struct_TestSuperConstructor_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  Object_alloc_table:Object alloc_table ->
   { } unit writes bitvector_alloc_table { true }

parameter struct_TestSuperConstructor_mem_of_bitvector :
 Creation_simple_val:(Object, int32) memory ref ->
  bitvector:(unit, bitvector) memory ->
   { } unit writes Creation_simple_val { true }

parameter struct_TestSuperConstructor_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref ->
  Creation_simple_val:(Object, int32) memory ->
   { } unit writes bitvector { true }

parameter struct_Throwable_alloc_of_bitvector :
 Object_alloc_table:Object alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes Object_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_Throwable_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  Object_alloc_table:Object alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:Object pointer.
      (eq_int(offset_min(Object_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(Object_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_Throwable_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_Throwable_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

parameter struct_interface_alloc_of_bitvector :
 interface_alloc_table:interface alloc_table ref ->
  bitvector_alloc_table:unit alloc_table ->
   { } unit writes interface_alloc_table
   { (forall p:interface pointer.
      (eq_int(offset_min(interface_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(interface_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_interface_alloc_to_bitvector :
 bitvector_alloc_table:unit alloc_table ref ->
  interface_alloc_table:interface alloc_table ->
   { } unit writes bitvector_alloc_table
   { (forall p:interface pointer.
      (eq_int(offset_min(interface_alloc_table, p),
       offset_min_bytes(bitvector_alloc_table, pointer_address(p), (0)))
      and eq_int(offset_max(interface_alloc_table, p),
          offset_max_bytes(bitvector_alloc_table, pointer_address(p), (0))))) }

parameter struct_interface_mem_of_bitvector :
 bitvector:(unit, bitvector) memory -> { } unit { true }

parameter struct_interface_mem_to_bitvector :
 bitvector:(unit, bitvector) memory ref -> { } unit writes bitvector { true }

let Creation_test1_ensures_normal =
 fun (tt : unit) ->
  { (JC_53: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t_1 = (K_10:
                (let this = (JC_73:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt = (JC_75:
                          ((cons_Creation_int this) (safe_int32_of_integer_ (17)))) in
                this))) in
     begin
       (return := (K_9: ((safe_acc_ !Creation_simple_val) t_1)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_56: eq_int(integer_of_int32(result), (17))) }

let Creation_test1_safety =
 fun (tt : unit) ->
  { (JC_53: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t_1 = (K_10:
                (let this = (let jessie_19 = (JC_62:
                                             (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                            (JC_63:
                            (assert
                            { ge_int(offset_max(Object_alloc_table,
                                     jessie_19),
                              (0)) };
                            jessie_19))) in
                (let tt = (JC_65:
                          ((cons_Creation_int_requires this) (safe_int32_of_integer_ (17)))) in
                this))) in
     begin
       (return := (K_9:
                  (JC_67:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t_1) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let Creation_test2_ensures_normal =
 fun (tt : unit) ->
  { (JC_79: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t_0 = (K_13:
                (let this_3 = (JC_99:
                              (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
                (let tt_0 = (JC_101: (cons_Creation this_3)) in this_3))) in
     begin
       (return := (K_12: ((safe_acc_ !Creation_simple_val) t_0)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_82: eq_int(integer_of_int32(result), (0))) }

let Creation_test2_safety =
 fun (tt : unit) ->
  { (JC_79: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t_0 = (K_13:
                (let this_3 = (let jessie_33 = (JC_88:
                                               (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                              (JC_89:
                              (assert
                              { ge_int(offset_max(Object_alloc_table,
                                       jessie_33),
                                (0)) };
                              jessie_33))) in
                (let tt_0 = (JC_91: (cons_Creation_requires this_3)) in
                this_3))) in
     begin
       (return := (K_12:
                  (JC_93:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t_0) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let Creation_test3_ensures_normal =
 fun (tt : unit) ->
  { (JC_105: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t = (K_16:
              (let this_5 = (JC_129:
                            (((alloc_struct_Creation (1)) Object_alloc_table) Object_tag_table)) in
              (let tt_1 = (JC_131:
                          (((cons_Creation_int_int this_5) (safe_int32_of_integer_ (10))) 
                           (safe_int32_of_integer_ (7)))) in
              this_5))) in
     begin
       (return := (K_15: ((safe_acc_ !Creation_simple_val) t)));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_110:
    ((JC_108: eq_int(integer_of_int32(result), (17)))
    and (JC_109:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_empty)))) }

let Creation_test3_safety =
 fun (tt : unit) ->
  { (JC_105: true) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let t = (K_16:
              (let this_5 = (let jessie_47 = (JC_118:
                                             (((alloc_struct_Creation_requires (1)) Object_alloc_table) Object_tag_table)) in
                            (JC_119:
                            (assert
                            { ge_int(offset_max(Object_alloc_table,
                                     jessie_47),
                              (0)) };
                            jessie_47))) in
              (let tt_1 = (JC_121:
                          (((cons_Creation_int_int_requires this_5) (safe_int32_of_integer_ (10))) 
                           (safe_int32_of_integer_ (7)))) in
              this_5))) in
     begin
       (return := (K_15:
                  (JC_123:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !Creation_simple_val) t) (0)))));
      (raise Return)
     end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let cons_Creation_ensures_normal =
 fun (this_2 : Object pointer) ->
  { valid_struct_Creation(this_2, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_3:
     (JC_34: ((cons_Creation_int this_2) (safe_int32_of_integer_ (0)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_29:
    ((JC_27:
     eq_int(integer_of_int32(select(Creation_simple_val, this_2)), (0)))
    and (JC_28:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_2))))) }

let cons_Creation_int_ensures_normal =
 fun (this_1 : Object pointer) (n_1 : int32) ->
  { valid_struct_Creation(this_1, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_10 = (K_1:
                      (let jessie_6 = n_1 in
                      (let jessie_9 = this_1 in
                      begin
                        (((safe_upd_ Creation_simple_val) jessie_9) jessie_6);
                       jessie_6
                      end))) in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_17:
    ((JC_15:
     eq_int(integer_of_int32(select(Creation_simple_val, this_1)),
     integer_of_int32(n_1)))
    and (JC_16:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_1))))) }

let cons_Creation_int_int_ensures_normal =
 fun (this_0 : Object pointer) (n_0_0 : int32) (m : int32) ->
  { valid_struct_Creation(this_0, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_6:
     (JC_49:
     ((cons_Creation_int this_0) (K_5:
                                 (safe_int32_of_integer_ ((add_int (integer_of_int32 n_0_0)) 
                                                          (integer_of_int32 m)))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_43:
    ((JC_41:
     eq_int(integer_of_int32(select(Creation_simple_val, this_0)),
     add_int(integer_of_int32(n_0_0), integer_of_int32(m))))
    and (JC_42:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_0))))) }

let cons_Creation_int_int_safety =
 fun (this_0 : Object pointer) (n_0_0 : int32) (m : int32) ->
  { valid_struct_Creation(this_0, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_6:
     (JC_48:
     ((cons_Creation_int_requires this_0) (K_5:
                                          (JC_47:
                                          (int32_of_integer_ ((add_int 
                                                               (integer_of_int32 n_0_0)) 
                                                              (integer_of_int32 m))))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_Creation_int_safety =
 fun (this_1 : Object pointer) (n_1 : int32) ->
  { valid_struct_Creation(this_1, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (let jessie_5 = (K_1:
                     (let jessie_1 = n_1 in
                     (let jessie_4 = this_1 in
                     begin
                       (((safe_upd_ Creation_simple_val) jessie_4) jessie_1);
                      jessie_1
                     end))) in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_Creation_safety =
 fun (this_2 : Object pointer) ->
  { valid_struct_Creation(this_2, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_3:
     (JC_33:
     ((cons_Creation_int_requires this_2) (safe_int32_of_integer_ (0)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let cons_TestSuperConstructor_ensures_normal =
 fun (this_4 : Object pointer) ->
  { valid_struct_TestSuperConstructor(this_4, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_17:
     (JC_145: ((cons_Creation_int this_4) (safe_int32_of_integer_ (12)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_140:
    ((JC_138:
     eq_int(integer_of_int32(select(Creation_simple_val, this_4)), (12)))
    and (JC_139:
        not_assigns(Object_alloc_table@, Creation_simple_val@,
        Creation_simple_val, pset_singleton(this_4))))) }

let cons_TestSuperConstructor_safety =
 fun (this_4 : Object pointer) ->
  { valid_struct_TestSuperConstructor(this_4, (0), (0), Object_alloc_table) }
  (init:
  try
   begin
     (K_17:
     (JC_144:
     ((cons_Creation_int_requires this_4) (safe_int32_of_integer_ (12)))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


========== make project execution ==========
why --project [...] why/Creation.why
========== file tests/java/why/Creation.wpr ==========
<project name="Creation" context="why/Creation_ctx.why">
  <function name="Method test3">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po11.why">
      <location file = "HOME/tests/java/Creation.jc" line = "117" begin = "57" end = "72"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Creation_po12.why">
      <location file = "why/Creation.why" line = "1067" begin = "30" end = "151"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po13.why">
      <location file = "HOME/tests/java/Creation.java" line = "52" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po9.why">
      <location file = "HOME/tests/java/Creation.java" line = "48" begin = "18" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po10.why">
      <location file = "HOME/tests/java/Creation.java" line = "50" begin = "22" end = "27"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method test2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po6.why">
      <location file = "HOME/tests/java/Creation.jc" line = "97" begin = "59" end = "74"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Creation_po7.why">
      <location file = "why/Creation.why" line = "1007" begin = "32" end = "157"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po8.why">
      <location file = "HOME/tests/java/Creation.java" line = "43" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po5.why">
      <location file = "HOME/tests/java/Creation.java" line = "39" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method test1">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po2.why">
      <location file = "HOME/tests/java/Creation.jc" line = "77" begin = "59" end = "74"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Creation_po3.why">
      <location file = "why/Creation.why" line = "953" begin = "30" end = "151"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Creation_po4.why">
      <location file = "HOME/tests/java/Creation.java" line = "35" begin = "8" end = "20"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po1.why">
      <location file = "HOME/tests/java/Creation.java" line = "31" begin = "18" end = "31"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Constructor of class TestSuperConstructor">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po20.why">
      <location file = "HOME/tests/java/Creation.java" line = "62" begin = "18" end = "34"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Constructor of class Creation">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Creation_po18.why">
      <location file = "HOME/tests/java/Creation.java" line = "27" begin = "6" end = "9"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Creation_po19.why">
      <location file = "HOME/tests/java/Creation.java" line = "27" begin = "6" end = "9"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/Creation_po14.why">
      <location file = "HOME/tests/java/Creation.java" line = "8" begin = "18" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po15.why">
      <location file = "HOME/tests/java/Creation.java" line = "16" begin = "18" end = "38"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po16.why">
      <location file = "HOME/tests/java/Creation.java" line = "18" begin = "4" end = "12"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Creation_po17.why">
      <location file = "HOME/tests/java/Creation.java" line = "24" begin = "18" end = "42"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Creation_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic Creation_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Creation_parenttag_Object: parenttag(Creation_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag :  -> Object tag_id

axiom TestSuperConstructor_parenttag_Creation:
  parenttag(TestSuperConstructor_tag, Creation_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic bitvector_of_byte : byte -> bitvector

logic byte_of_bitvector : bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector:
  (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char : char -> bitvector

logic char_of_bitvector : bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector:
  (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_long : long -> bitvector

logic long_of_bitvector : bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector:
  (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short : short -> bitvector

logic short_of_bitvector : bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector:
  (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte:
  (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char:
  (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_of_bitvector_of_bitvector_of_long:
  (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_of_bitvector_of_bitvector_of_short:
  (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p: unit pointer,
  a: int, b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) = valid_struct_Creation(p,
  a, b, Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

========== file tests/java/why/Creation_po1.why ==========
goal Creation_test1_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 17) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   result)) = integer_of_int32(result0))) and
   ("JC_19": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result1:int32.
  (result1 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result1) ->
  ("JC_56": (integer_of_int32(return) = 17))

========== file tests/java/why/Creation_po10.why ==========
goal Creation_test3_ensures_normal_po_2:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result2:int32.
  (result2 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_110":
  ("JC_109":
  ("JC_109": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_empty))))

========== file tests/java/why/Creation_po11.why ==========
goal Creation_test3_safety_po_1:
  ("JC_105": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po12.why ==========
goal Creation_test3_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po13.why ==========
goal Creation_test3_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po14.why ==========
goal cons_Creation_ensures_normal_po_1:
  forall this_2:Object pointer.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_2, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_2)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_2))))) ->
  ("JC_29":
  ("JC_27":
  ("JC_27": (integer_of_int32(select(Creation_simple_val0, this_2)) = 0))))

========== file tests/java/why/Creation_po15.why ==========
goal cons_Creation_int_ensures_normal_po_1:
  forall this_1:Object pointer.
  forall n_1:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, n_1)) ->
  ("JC_17":
  ("JC_15":
  ("JC_15": (integer_of_int32(select(Creation_simple_val0,
  this_1)) = integer_of_int32(n_1)))))

========== file tests/java/why/Creation_po16.why ==========
goal cons_Creation_int_ensures_normal_po_2:
  forall this_1:Object pointer.
  forall n_1:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, n_1)) ->
  ("JC_17":
  ("JC_16":
  ("JC_16": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_singleton(this_1)))))

========== file tests/java/why/Creation_po17.why ==========
goal cons_Creation_int_int_ensures_normal_po_1:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = (integer_of_int32(n_0_0) + integer_of_int32(m))) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_0)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_0))))) ->
  ("JC_43":
  ("JC_41":
  ("JC_41": (integer_of_int32(select(Creation_simple_val0,
  this_0)) = (integer_of_int32(n_0_0) + integer_of_int32(m))))))

========== file tests/java/why/Creation_po18.why ==========
goal cons_Creation_int_int_safety_po_1:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  ((-2147483648) <= (integer_of_int32(n_0_0) + integer_of_int32(m)))

========== file tests/java/why/Creation_po19.why ==========
goal cons_Creation_int_int_safety_po_2:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  ((integer_of_int32(n_0_0) + integer_of_int32(m)) <= 2147483647)

========== file tests/java/why/Creation_po2.why ==========
goal Creation_test1_safety_po_1:
  ("JC_53": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po20.why ==========
goal cons_TestSuperConstructor_ensures_normal_po_1:
  forall this_4:Object pointer.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_TestSuperConstructor(this_4, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = 12) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_4)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_4))))) ->
  ("JC_140":
  ("JC_138":
  ("JC_138": (integer_of_int32(select(Creation_simple_val0, this_4)) = 12))))

========== file tests/java/why/Creation_po3.why ==========
goal Creation_test1_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po4.why ==========
goal Creation_test1_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 17) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   result)) = integer_of_int32(result0))) and
   ("JC_19": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po5.why ==========
goal Creation_test2_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_32":
  (("JC_30": (integer_of_int32(select(Creation_simple_val0, result)) = 0)) and
   ("JC_31": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int32.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result0) ->
  ("JC_82": (integer_of_int32(return) = 0))

========== file tests/java/why/Creation_po6.why ==========
goal Creation_test2_safety_po_1:
  ("JC_79": true) ->
  (1 >= 0)

========== file tests/java/why/Creation_po7.why ==========
goal Creation_test2_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

========== file tests/java/why/Creation_po8.why ==========
goal Creation_test2_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_32":
  (("JC_30": (integer_of_int32(select(Creation_simple_val0, result)) = 0)) and
   ("JC_31": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

========== file tests/java/why/Creation_po9.why ==========
goal Creation_test3_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result2:int32.
  (result2 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_110": ("JC_108": ("JC_108": (integer_of_int32(return) = 17))))

========== generation of Simplify VC output ==========
why -simplify [...] why/Creation.why
========== file tests/java/simplify/Creation_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom div_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) a)))))

(BG_PUSH
 ;; Why axiom div_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= a (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (<= (- 0 a) (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) (- 0 a))))))

(BG_PUSH
 ;; Why axiom mod_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_positive
 (FORALL (p) (<= 0 (address p))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i)
 (IMPLIES (same_block p q)
 (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (same_block p q)
 (FORALL (i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i)
 (IMPLIES (same_block p q)
 (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (same_block p q)
 (FORALL (i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (offset_min a p) (* s (offset_min_bytes a p s)))
 (< (- (* s (offset_min_bytes a p s)) s) (offset_min a p)))))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (IMPLIES (< 0 s)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))

 (FORALL (s)
 (IMPLIES (< 0 s)
 (FORALL (a p)
 (AND (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))
 (< (offset_max a p) (- (+ (+ (* s (offset_max_bytes a p s)) s) s) 1)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom Creation_parenttag_Object
 (EQ (parenttag Creation_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x Object_alloc_table)
  (EQ (offset_max Object_alloc_table x) 0))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (Object_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom TestSuperConstructor_parenttag_Creation
 (EQ (parenttag TestSuperConstructor_tag Creation_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom bitvector_of_byte_of_byte_of_bitvector
 (FORALL (x) (EQ (bitvector_of_byte (byte_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_char_of_char_of_bitvector
 (FORALL (x) (EQ (bitvector_of_char (char_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_int32_of_int32_of_bitvector
 (FORALL (x) (EQ (bitvector_of_int32 (int32_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_long_of_long_of_bitvector
 (FORALL (x) (EQ (bitvector_of_long (long_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom bitvector_of_short_of_short_of_bitvector
 (FORALL (x) (EQ (bitvector_of_short (short_of_bitvector x)) x)))

(BG_PUSH
 ;; Why axiom byte_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 128) x) (<= x 127))
 (EQ (integer_of_byte (byte_of_integer x)) x))))

(DEFPRED (eq_byte x y) (EQ (integer_of_byte x) (integer_of_byte y)))

(BG_PUSH
 ;; Why axiom byte_of_bitvector_of_bitvector_of_byte
 (FORALL (x) (eq_byte (byte_of_bitvector (bitvector_of_byte x)) x)))

(BG_PUSH
 ;; Why axiom byte_range
 (FORALL (x)
 (AND (<= (- 0 128) (integer_of_byte x)) (<= (integer_of_byte x) 127))))

(BG_PUSH
 ;; Why axiom char_coerce
 (FORALL (x)
 (IMPLIES (AND (<= 0 x) (<= x 65535))
 (EQ (integer_of_char (char_of_integer x)) x))))

(DEFPRED (eq_char x y) (EQ (integer_of_char x) (integer_of_char y)))

(BG_PUSH
 ;; Why axiom char_of_bitvector_of_bitvector_of_char
 (FORALL (x) (eq_char (char_of_bitvector (bitvector_of_char x)) x)))

(BG_PUSH
 ;; Why axiom char_range
 (FORALL (x) (AND (<= 0 (integer_of_char x)) (<= (integer_of_char x) 65535))))

(DEFPRED (eq_int32 x y) (EQ (integer_of_int32 x) (integer_of_int32 y)))

(DEFPRED (eq_long x y) (EQ (integer_of_long x) (integer_of_long y)))

(DEFPRED (eq_short x y) (EQ (integer_of_short x) (integer_of_short y)))

(BG_PUSH
 ;; Why axiom int32_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_2147483648) x)
 (<= x constant_too_large_2147483647))
 (EQ (integer_of_int32 (int32_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int32_of_bitvector_of_bitvector_of_int32
 (FORALL (x) (eq_int32 (int32_of_bitvector (bitvector_of_int32 x)) x)))

(BG_PUSH
 ;; Why axiom int32_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_2147483648) (integer_of_int32 x))
 (<= (integer_of_int32 x) constant_too_large_2147483647))))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (interface_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(BG_PUSH
 ;; Why axiom long_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_9223372036854775808) x)
 (<= x constant_too_large_9223372036854775807))
 (EQ (integer_of_long (long_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom long_of_bitvector_of_bitvector_of_long
 (FORALL (x) (eq_long (long_of_bitvector (bitvector_of_long x)) x)))

(BG_PUSH
 ;; Why axiom long_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_9223372036854775808) (integer_of_long x))
 (<= (integer_of_long x) constant_too_large_9223372036854775807))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_Object_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (Object_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_interface_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (interface_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom short_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 32768) x) (<= x 32767))
 (EQ (integer_of_short (short_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom short_of_bitvector_of_bitvector_of_short
 (FORALL (x) (eq_short (short_of_bitvector (bitvector_of_short x)) x)))

(BG_PUSH
 ;; Why axiom short_range
 (FORALL (x)
 (AND (<= (- 0 32768) (integer_of_short x)) (<= (integer_of_short x) 32767))))

(DEFPRED (valid_bitvector_struct_Object p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_bitvector_struct_Creation p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_String p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_TestSuperConstructor p a b bitvector_alloc_table)
  (valid_bitvector_struct_Creation p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_Throwable p a b bitvector_alloc_table)
  (valid_bitvector_struct_Object p a b bitvector_alloc_table))

(DEFPRED (valid_bitvector_struct_interface p a b bitvector_alloc_table)
  (AND (EQ (offset_min bitvector_alloc_table p) a)
  (EQ (offset_max bitvector_alloc_table p) b)))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Creation p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_TestSuperConstructor p a b Object_alloc_table)
  (valid_struct_Creation p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_variant_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_variant_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

;; Creation_test1_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 31, characters 18-31
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) 17)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 result))
         (integer_of_int32 result0))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result1)
(IMPLIES (EQ result1 (select Creation_simple_val0 result))
(FORALL (return)
(IMPLIES (EQ return result1) (EQ (integer_of_int32 return) 17))))))))))))))))

;; Creation_test1_safety_po_1, File "HOME/tests/java/Creation.jc", line 77, characters 59-74
(IMPLIES TRUE (>= 1 0))

;; Creation_test1_safety_po_2, File "why/Creation.why", line 953, characters 30-151
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test1_safety_po_3, File "HOME/tests/java/Creation.java", line 35, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) 17)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 result))
         (integer_of_int32 result0))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))))

;; Creation_test2_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 39, characters 18-30
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (integer_of_int32 (select Creation_simple_val0 result)) 0)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result0)
(IMPLIES (EQ result0 (select Creation_simple_val0 result))
(FORALL (return)
(IMPLIES (EQ return result0) (EQ (integer_of_int32 return) 0))))))))))))))

;; Creation_test2_safety_po_1, File "HOME/tests/java/Creation.jc", line 97, characters 59-74
(IMPLIES TRUE (>= 1 0))

;; Creation_test2_safety_po_2, File "why/Creation.why", line 1007, characters 32-157
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test2_safety_po_3, File "HOME/tests/java/Creation.java", line 43, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (Creation_simple_val0)
(IMPLIES (AND (EQ (integer_of_int32 (select Creation_simple_val0 result)) 0)
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))

;; Creation_test3_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 48, characters 18-31
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) 10)
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) 7)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 result))
         (+ (integer_of_int32 result0) (integer_of_int32 result1)))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result2)
(IMPLIES (EQ result2 (select Creation_simple_val0 result))
(FORALL (return)
(IMPLIES (EQ return result2) (EQ (integer_of_int32 return) 17))))))))))))))))))

;; Creation_test3_ensures_normal_po_2, File "HOME/tests/java/Creation.java", line 50, characters 22-27
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) 10)
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) 7)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 result))
         (+ (integer_of_int32 result0) (integer_of_int32 result1)))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(FORALL (result2)
(IMPLIES (EQ result2 (select Creation_simple_val0 result))
(FORALL (return)
(IMPLIES (EQ return result2)
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val0 pset_empty))))))))))))))))))

;; Creation_test3_safety_po_1, File "HOME/tests/java/Creation.jc", line 117, characters 57-72
(IMPLIES TRUE (>= 1 0))

;; Creation_test3_safety_po_2, File "why/Creation.why", line 1067, characters 30-151
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(>= (offset_max Object_alloc_table0 result) 0))))))))

;; Creation_test3_safety_po_3, File "HOME/tests/java/Creation.java", line 52, characters 8-20
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES TRUE
(IMPLIES (>= 1 0)
(FORALL (result)
(FORALL (Object_alloc_table0)
(FORALL (Object_tag_table)
(IMPLIES (AND (valid_struct_Creation result 0 (- 1 1) Object_alloc_table0)
         (AND
         (EQ (alloc_extends Object_alloc_table Object_alloc_table0) |@true|)
         (AND (alloc_fresh Object_alloc_table result 1)
         (instanceof Object_tag_table result Creation_tag))))
(IMPLIES (>= (offset_max Object_alloc_table0 result) 0)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) 10)
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) 7)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 result))
         (+ (integer_of_int32 result0) (integer_of_int32 result1)))
         (not_assigns
         Object_alloc_table0 Creation_simple_val Creation_simple_val0 
         (pset_singleton result)))
(<= 0 (offset_max Object_alloc_table0 result)))))))))))))))))

;; cons_Creation_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 8, characters 18-38
(FORALL (this_2)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_2 0 0 Object_alloc_table)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 this_2))
         (integer_of_int32 result))
         (not_assigns
         Object_alloc_table Creation_simple_val Creation_simple_val0 
         (pset_singleton this_2)))
(EQ (integer_of_int32 (select Creation_simple_val0 this_2)) 0)))))))))

;; cons_Creation_int_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 16, characters 18-38
(FORALL (this_1)
(FORALL (n_1)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_1 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_1 n_1))
(EQ (integer_of_int32 (select Creation_simple_val0 this_1))
(integer_of_int32 n_1)))))))))

;; cons_Creation_int_ensures_normal_po_2, File "HOME/tests/java/Creation.java", line 18, characters 4-12
(FORALL (this_1)
(FORALL (n_1)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_1 0 0 Object_alloc_table)
(FORALL (Creation_simple_val0)
(IMPLIES (EQ Creation_simple_val0
         (|why__store| Creation_simple_val this_1 n_1))
(not_assigns
Object_alloc_table Creation_simple_val Creation_simple_val0 (pset_singleton
                                                            this_1)))))))))

;; cons_Creation_int_int_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 24, characters 18-42
(FORALL (this_0)
(FORALL (n_0_0)
(FORALL (m)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_0 0 0 Object_alloc_table)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result)
         (+ (integer_of_int32 n_0_0) (integer_of_int32 m)))
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 this_0))
         (integer_of_int32 result))
         (not_assigns
         Object_alloc_table Creation_simple_val Creation_simple_val0 
         (pset_singleton this_0)))
(EQ (integer_of_int32 (select Creation_simple_val0 this_0))
(+ (integer_of_int32 n_0_0) (integer_of_int32 m)))))))))))))

;; cons_Creation_int_int_safety_po_1, File "HOME/tests/java/Creation.java", line 27, characters 6-9
(FORALL (this_0)
(FORALL (n_0_0)
(FORALL (m)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_0 0 0 Object_alloc_table)
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 n_0_0) (integer_of_int32
                                                                    m))))))))

;; cons_Creation_int_int_safety_po_2, File "HOME/tests/java/Creation.java", line 27, characters 6-9
(FORALL (this_0)
(FORALL (n_0_0)
(FORALL (m)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_Creation this_0 0 0 Object_alloc_table)
(<= (+ (integer_of_int32 n_0_0) (integer_of_int32 m)) constant_too_large_2147483647))))))

;; cons_TestSuperConstructor_ensures_normal_po_1, File "HOME/tests/java/Creation.java", line 62, characters 18-34
(FORALL (this_4)
(FORALL (Creation_simple_val)
(FORALL (Object_alloc_table)
(IMPLIES (valid_struct_TestSuperConstructor this_4 0 0 Object_alloc_table)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 12)
(FORALL (Creation_simple_val0)
(IMPLIES (AND
         (EQ (integer_of_int32 (select Creation_simple_val0 this_4))
         (integer_of_int32 result))
         (not_assigns
         Object_alloc_table Creation_simple_val Creation_simple_val0 
         (pset_singleton this_4)))
(EQ (integer_of_int32 (select Creation_simple_val0 this_4)) 12)))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Creation_why.sx      : .........?.......??. (17/0/3/0/0)
total   :  20
valid   :  17 ( 85%)
invalid :   0 (  0%)
unknown :   3 ( 15%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why --why [...] why/Creation.why
========== file tests/java/why/Creation_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic pointer_address : 'a1 pointer -> unit pointer

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)].
        ((0 < s) ->
         ((offset_min(a, p) <= (s * offset_min_bytes(a, p, s))) and
          (((s * offset_min_bytes(a, p, s)) - s) < offset_min(a, p)))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)].
        ((0 < s) ->
         (((((s * offset_max_bytes(a, p, s)) + s) - 1) <= offset_max(a,
          p)) and (offset_max(a, p) < ((((s * offset_max_bytes(a, p,
          s)) + s) + s) - 1)))))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic Creation_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Creation_parenttag_Object: parenttag(Creation_tag, Object_tag)

predicate Non_null_Object(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

logic Object_of_pointer_address : unit pointer -> Object pointer

axiom Object_of_pointer_address_of_pointer_addr:
  (forall p:Object pointer.
    (p = Object_of_pointer_address(pointer_address(p))))

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic TestSuperConstructor_tag :  -> Object tag_id

axiom TestSuperConstructor_parenttag_Creation:
  parenttag(TestSuperConstructor_tag, Creation_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic bitvector_of_byte : byte -> bitvector

logic byte_of_bitvector : bitvector -> byte

axiom bitvector_of_byte_of_byte_of_bitvector:
  (forall x:bitvector. (bitvector_of_byte(byte_of_bitvector(x)) = x))

logic bitvector_of_char : char -> bitvector

logic char_of_bitvector : bitvector -> char

axiom bitvector_of_char_of_char_of_bitvector:
  (forall x:bitvector. (bitvector_of_char(char_of_bitvector(x)) = x))

logic bitvector_of_int32 : int32 -> bitvector

logic int32_of_bitvector : bitvector -> int32

axiom bitvector_of_int32_of_int32_of_bitvector:
  (forall x:bitvector. (bitvector_of_int32(int32_of_bitvector(x)) = x))

logic bitvector_of_long : long -> bitvector

logic long_of_bitvector : bitvector -> long

axiom bitvector_of_long_of_long_of_bitvector:
  (forall x:bitvector. (bitvector_of_long(long_of_bitvector(x)) = x))

logic bitvector_of_short : short -> bitvector

logic short_of_bitvector : bitvector -> short

axiom bitvector_of_short_of_short_of_bitvector:
  (forall x:bitvector. (bitvector_of_short(short_of_bitvector(x)) = x))

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

axiom byte_of_bitvector_of_bitvector_of_byte:
  (forall x:byte. eq_byte(byte_of_bitvector(bitvector_of_byte(x)), x))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

axiom char_of_bitvector_of_bitvector_of_char:
  (forall x:char. eq_char(char_of_bitvector(bitvector_of_char(x)), x))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_of_bitvector_of_bitvector_of_int32:
  (forall x:int32. eq_int32(int32_of_bitvector(bitvector_of_int32(x)), x))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

logic interface_of_pointer_address : unit pointer -> interface pointer

axiom interface_of_pointer_address_of_pointer_addr:
  (forall p:interface pointer.
    (p = interface_of_pointer_address(pointer_address(p))))

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_of_bitvector_of_bitvector_of_long:
  (forall x:long. eq_long(long_of_bitvector(bitvector_of_long(x)), x))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

axiom pointer_addr_of_Object_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(Object_of_pointer_address(p))))

axiom pointer_addr_of_interface_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(interface_of_pointer_address(p))))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_of_bitvector_of_bitvector_of_short:
  (forall x:short. eq_short(short_of_bitvector(bitvector_of_short(x)), x))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate valid_bitvector_struct_Object(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_bitvector_struct_Creation(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_String(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_TestSuperConstructor(p: unit pointer,
  a: int, b: int, bitvector_alloc_table: unit alloc_table) =
  valid_bitvector_struct_Creation(p, a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_Throwable(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) = valid_bitvector_struct_Object(p,
  a, b, bitvector_alloc_table)

predicate valid_bitvector_struct_interface(p: unit pointer, a: int, b: int,
  bitvector_alloc_table: unit alloc_table) =
  ((offset_min(bitvector_alloc_table, p) = a) and
   (offset_max(bitvector_alloc_table, p) = b))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Creation(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_TestSuperConstructor(p: Object pointer, a: int,
  b: int, Object_alloc_table: Object alloc_table) = valid_struct_Creation(p,
  a, b, Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

goal Creation_test1_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 17) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   result)) = integer_of_int32(result0))) and
   ("JC_19": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result1:int32.
  (result1 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result1) ->
  ("JC_56": (integer_of_int32(return) = 17))

goal Creation_test1_safety_po_1:
  ("JC_53": true) ->
  (1 >= 0)

goal Creation_test1_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test1_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_53": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 17) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   result)) = integer_of_int32(result0))) and
   ("JC_19": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal Creation_test2_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_32":
  (("JC_30": (integer_of_int32(select(Creation_simple_val0, result)) = 0)) and
   ("JC_31": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result0:int32.
  (result0 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result0) ->
  ("JC_82": (integer_of_int32(return) = 0))

goal Creation_test2_safety_po_1:
  ("JC_79": true) ->
  (1 >= 0)

goal Creation_test2_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test2_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_79": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_32":
  (("JC_30": (integer_of_int32(select(Creation_simple_val0, result)) = 0)) and
   ("JC_31": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal Creation_test3_ensures_normal_po_1:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result2:int32.
  (result2 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_110": ("JC_108": ("JC_108": (integer_of_int32(return) = 17))))

goal Creation_test3_ensures_normal_po_2:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  forall result2:int32.
  (result2 = select(Creation_simple_val0, result)) ->
  forall return:int32.
  (return = result2) ->
  ("JC_110":
  ("JC_109":
  ("JC_109": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_empty))))

goal Creation_test3_safety_po_1:
  ("JC_105": true) ->
  (1 >= 0)

goal Creation_test3_safety_po_2:
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0)

goal Creation_test3_safety_po_3:
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  ("JC_105": true) ->
  (1 >= 0) ->
  forall result:Object pointer.
  forall Object_alloc_table0:Object alloc_table.
  forall Object_tag_table:Object tag_table.
  (valid_struct_Creation(result, 0, (1 - 1), Object_alloc_table0) and
   (alloc_extends(Object_alloc_table, Object_alloc_table0) and
    (alloc_fresh(Object_alloc_table, result, 1) and
     instanceof(Object_tag_table, result, Creation_tag)))) ->
  (offset_max(Object_alloc_table0, result) >= 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 10) ->
  forall result1:int32.
  (integer_of_int32(result1) = 7) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_46":
  (("JC_44": (integer_of_int32(select(Creation_simple_val0,
   result)) = (integer_of_int32(result0) + integer_of_int32(result1)))) and
   ("JC_45": not_assigns(Object_alloc_table0, Creation_simple_val,
   Creation_simple_val0, pset_singleton(result))))) ->
  (0 <= offset_max(Object_alloc_table0, result))

goal cons_Creation_ensures_normal_po_1:
  forall this_2:Object pointer.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_2, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_2)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_2))))) ->
  ("JC_29":
  ("JC_27":
  ("JC_27": (integer_of_int32(select(Creation_simple_val0, this_2)) = 0))))

goal cons_Creation_int_ensures_normal_po_1:
  forall this_1:Object pointer.
  forall n_1:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, n_1)) ->
  ("JC_17":
  ("JC_15":
  ("JC_15": (integer_of_int32(select(Creation_simple_val0,
  this_1)) = integer_of_int32(n_1)))))

goal cons_Creation_int_ensures_normal_po_2:
  forall this_1:Object pointer.
  forall n_1:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_1, 0, 0, Object_alloc_table) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  (Creation_simple_val0 = store(Creation_simple_val, this_1, n_1)) ->
  ("JC_17":
  ("JC_16":
  ("JC_16": not_assigns(Object_alloc_table, Creation_simple_val,
  Creation_simple_val0, pset_singleton(this_1)))))

goal cons_Creation_int_int_ensures_normal_po_1:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = (integer_of_int32(n_0_0) + integer_of_int32(m))) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_0)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_0))))) ->
  ("JC_43":
  ("JC_41":
  ("JC_41": (integer_of_int32(select(Creation_simple_val0,
  this_0)) = (integer_of_int32(n_0_0) + integer_of_int32(m))))))

goal cons_Creation_int_int_safety_po_1:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  ((-2147483648) <= (integer_of_int32(n_0_0) + integer_of_int32(m)))

goal cons_Creation_int_int_safety_po_2:
  forall this_0:Object pointer.
  forall n_0_0:int32.
  forall m:int32.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_Creation(this_0, 0, 0, Object_alloc_table) ->
  ((integer_of_int32(n_0_0) + integer_of_int32(m)) <= 2147483647)

goal cons_TestSuperConstructor_ensures_normal_po_1:
  forall this_4:Object pointer.
  forall Creation_simple_val:(Object,
  int32) memory.
  forall Object_alloc_table:Object alloc_table.
  valid_struct_TestSuperConstructor(this_4, 0, 0, Object_alloc_table) ->
  forall result:int32.
  (integer_of_int32(result) = 12) ->
  forall Creation_simple_val0:(Object,
  int32) memory.
  ("JC_20":
  (("JC_18": (integer_of_int32(select(Creation_simple_val0,
   this_4)) = integer_of_int32(result))) and
   ("JC_19": not_assigns(Object_alloc_table, Creation_simple_val,
   Creation_simple_val0, pset_singleton(this_4))))) ->
  ("JC_140":
  ("JC_138":
  ("JC_138": (integer_of_int32(select(Creation_simple_val0, this_4)) = 12))))

========== running alt-ergo ==========
Running Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Creation_why.why          : .........#.......??. (17/0/2/1/0)
total   :  20
valid   :  17 ( 85%)
invalid :   0 (  0%)
unknown :   2 ( 10%)
timeout :   1 (  5%)
failure :   0 (  0%)
