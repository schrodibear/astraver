========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function NameConflicts_setI for method NameConflicts.setI
Generating JC function NameConflicts_m for method NameConflicts.m
Generating JC function NameConflicts_field for method NameConflicts.field
Generating JC function cons_NameConflicts for constructor NameConflicts
Done.
========== file tests/java/NameConflicts.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag NameConflicts = Object with {
  int32 i; 
  int32 field;
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

unit NameConflicts_setI(NameConflicts[0] this_2, int32 i)
  requires true;
{  (K_1 : (this_2.i = i))
}

int32 NameConflicts_m(NameConflicts[0] this_1)
  requires true;
behavior normal:
  ensures (K_2 : (\result == 0));
{  
   {  
      (var int32 result = (K_3 : 0));
      
      (return 0)
   }
}

int32 NameConflicts_field(NameConflicts[0] this_0)
  requires true;
{  
   (return (K_4 : this_0.field))
}

unit cons_NameConflicts(NameConflicts[0] this_3)
  requires true;
;

/*
LocalVariables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/NameConflicts.jloc tests/java/NameConflicts.jc && make -f tests/java/NameConflicts.makefile gui"
End:
*/
========== file tests/java/NameConflicts.jloc ==========
[NameConflicts_field]
name = "Method field"
file = "HOME/tests/java/NameConflicts.java"
line = 20
begin = 8
end = 13

[K_1]
file = "HOME/tests/java/NameConflicts.java"
line = 7
begin = 1
end = 11

[K_2]
file = "HOME/tests/java/NameConflicts.java"
line = 11
begin = 18
end = 30

[K_3]
file = "HOME/tests/java/NameConflicts.java"
line = 14
begin = 14
end = 15

[K_4]
file = "HOME/tests/java/NameConflicts.java"
line = 20
begin = 25
end = 30

[NameConflicts_setI]
name = "Method setI"
file = "HOME/tests/java/NameConflicts.java"
line = 6
begin = 9
end = 13

[NameConflicts_m]
name = "Method m"
file = "HOME/tests/java/NameConflicts.java"
line = 13
begin = 8
end = 9

[cons_NameConflicts]
name = "Constructor of class NameConflicts"
file = "HOME/"
line = 0
begin = -1
end = -1

========== jessie execution ==========
Generating Why function NameConflicts_setI
Generating Why function NameConflicts_m
Generating Why function NameConflicts_field_0
========== file tests/java/NameConflicts.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP=dp $(DPOPT) -timeout $(TIMEOUT)

WHY=why --no-arrays  -split-user-conj -explain -locs NameConflicts.loc

GWHY=gwhy-bin --no-arrays  -split-user-conj -explain -locs NameConflicts.loc

JESSIELIBFILE=/usr/local/share/frama-c/jessie/why/jessie.why

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/NameConflicts_why.sx

project: why/NameConflicts.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILE) why/$*.why

goals: why/NameConflicts_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILE) why/$*.why

coq: coq/NameConflicts_why.vo

coq/NameConflicts_why.v: why/NameConflicts.why
	@echo 'why -coq-v8 [...] why/NameConflicts.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILE) why/NameConflicts.why

coq-goals: goals coq/NameConflicts_ctx_why.vo
	for f in why/NameConflicts_po*.why; do make -f NameConflicts.makefile coq/`basename $$f .why`_why.v ; done

coq/NameConflicts_ctx_why.v: why/NameConflicts_ctx.why
	@echo 'why -coq-v8 [...] why/NameConflicts_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/NameConflicts_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export NameConflicts_ctx_why." -coq-tactic "intuition" why/NameConflicts_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/NameConflicts_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "importing why@jessie_why" $(JESSIELIBFILE) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "importing why@why" $(JESSIELIBFILE)

isabelle: isabelle/NameConflicts_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILE) why/$*.why
	cp -f /usr/local/share/frama-c/jessie/isabelle/jessie_why.thy isabelle/

simplify: simplify/NameConflicts_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -no-simplify-prelude -dir simplify $(JESSIELIBFILE) why/$*.why

ergo: why/NameConflicts_why.why
	@echo 'Running Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why --why [...] why/$*.why' && $(WHY) --why -dir why $(JESSIELIBFILE) why/$*.why

cvcl: cvcl/NameConflicts_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILE) why/$*.why

harvey: harvey/NameConflicts_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILE) why/$*.why

zenon: zenon/NameConflicts_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILE) why/$*.why

smtlib: smtlib/NameConflicts_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILE) why/$*.why

gui stat: NameConflicts.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILE) why/$*.why

-include NameConflicts.depend

depend: coq/NameConflicts_why.v
	-$(COQDEP) -I coq coq/NameConflicts*_why.v > NameConflicts.depend

clean:
	rm -f coq/*.vo

========== file tests/java/NameConflicts.loc ==========
[JC_1]
file = "HOME/tests/java/NameConflicts.jc"
line = 40
begin = 8
end = 23

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/NameConflicts.jc"
line = 40
begin = 8
end = 23

[JC_4]
file = "HOME/tests/java/NameConflicts.jc"
line = 40
begin = 8
end = 23

[JC_5]
file = "HOME/tests/java/NameConflicts.java"
line = 6
begin = 9
end = 13

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/tests/java/NameConflicts.java"
line = 6
begin = 9
end = 13

[JC_8]
file = "HOME/tests/java/NameConflicts.java"
line = 13
begin = 8
end = 9

[NameConflicts_setI_safety]
name = "Method setI"
behavior = "Safety"
file = "HOME/tests/java/NameConflicts.java"
line = 6
begin = 9
end = 13

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[K_2]
file = "HOME/tests/java/NameConflicts.java"
line = 11
begin = 18
end = 30

[JC_10]
file = "HOME/tests/java/NameConflicts.java"
line = 13
begin = 8
end = 9

[JC_11]
file = "HOME/tests/java/NameConflicts.java"
line = 20
begin = 8
end = 13

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/java/NameConflicts.java"
line = 20
begin = 8
end = 13

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[NameConflicts_field_safety]
name = "Method field"
behavior = "Safety"
file = "HOME/tests/java/NameConflicts.java"
line = 20
begin = 8
end = 13

[NameConflicts_m_safety]
name = "Method m"
behavior = "Safety"
file = "HOME/tests/java/NameConflicts.java"
line = 13
begin = 8
end = 9

[NameConflicts_m_ensures_normal]
name = "Method m"
behavior = "Normal behavior `normal'"
file = "HOME/tests/java/NameConflicts.java"
line = 13
begin = 8
end = 9

========== file tests/java/why/NameConflicts.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic NameConflicts_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom NameConflicts_parenttag_Object :
 parenttag(NameConflicts_tag, Object_tag)

predicate Non_null_Object(Object_alloc_table:Object alloc_table,
 x:Object pointer) =
 eq_int(offset_max(Object_alloc_table, x), (0))

axiom Object_int : (int_of_tag(Object_tag) = (1))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

predicate eq_byte(x:byte,
 y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

predicate eq_char(x:char,
 y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long,
 y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short,
 y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_NameConflicts(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

parameter NameConflicts_field : (Object, int32) memory ref

parameter Object_tag_table : Object tag_table ref

parameter Object_alloc_table : Object alloc_table ref

parameter NameConflicts_field_0 :
 this_0:Object pointer ->
  { (JC_11: (true = true))} int32
  reads NameConflicts_field,Object_alloc_table,Object_tag_table { true }

parameter NameConflicts_i : (Object, int32) memory ref

parameter NameConflicts_m :
 this_1:Object pointer ->
  { (JC_8: (true = true))} int32 reads Object_alloc_table,Object_tag_table
  { (K_2: eq_int(integer_of_int32(result), (0))) }

parameter NameConflicts_setI :
 this_2:Object pointer ->
  i:int32 ->
   { (JC_5: (true = true))} unit reads Object_alloc_table,Object_tag_table
   writes NameConflicts_i { true }

parameter alloc_NameConflicts :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_NameConflicts(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (instanceof(Object_tag_table, result, NameConflicts_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Object_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (instanceof(Object_tag_table, result, String_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { ge_int(n, (0))} Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (instanceof(Object_tag_table, result, Throwable_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_alloc_table:interface alloc_table ref ->
    { ge_int(n, (0))} interface pointer reads interface_alloc_table
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (instanceof(interface_tag_table, result, interface_tag)
          and (alloc_extends(interface_alloc_table@, interface_alloc_table)
              and alloc_extern(interface_alloc_table@, result)))) }

parameter alloc_one_NameConflicts :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_NameConflicts(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, NameConflicts_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_Object :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Object_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_String :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, String_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_Throwable :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   Object_alloc_table:Object alloc_table ref ->
    { } Object pointer reads Object_alloc_table
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), (0), Object_alloc_table)
      and (instanceof(Object_tag_table, result, Throwable_tag)
          and (alloc_extends(Object_alloc_table@, Object_alloc_table)
              and alloc_extern(Object_alloc_table@, result)))) }

parameter alloc_one_interface :
 tt:unit ->
  interface_alloc_table:interface alloc_table ref ->
   interface_alloc_table:interface alloc_table ref ->
    { } interface pointer reads interface_alloc_table
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), (0), interface_alloc_table)
      and (instanceof(interface_tag_table, result, interface_tag)
          and (alloc_extends(interface_alloc_table@, interface_alloc_table)
              and alloc_extern(interface_alloc_table@, result)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_NameConflicts :
 this_3:Object pointer ->
  { (JC_14: (true = true))} unit reads Object_alloc_table,Object_tag_table
  { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_0:Object pointer ->
  { (JC_1: true)} bool reads Object_alloc_table,Object_tag_table
  { (JC_4:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_0), (0))
     else (x_0 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

let NameConflicts_field_safety =
 fun (this_0 : Object pointer) ->
  { (valid_struct_NameConflicts(this_0, (0), (0), Object_alloc_table)
    and (JC_11: (true = true))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (return := ((safe_acc_ !NameConflicts_field) this_0));
    (raise Return);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let NameConflicts_m_ensures_normal =
 fun (this_1 : Object pointer) ->
  { (valid_struct_NameConflicts(this_1, (0), (0), Object_alloc_table)
    and (JC_8: (true = true))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let result_0 = (safe_int32_of_integer_ (K_3: (0))) in
     begin   (return := (safe_int32_of_integer_ (0))); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !return end))
  { (K_2: eq_int(integer_of_int32(result), (0))) }

let NameConflicts_m_safety =
 fun (this_1 : Object pointer) ->
  { (valid_struct_NameConflicts(this_1, (0), (0), Object_alloc_table)
    and (JC_8: (true = true))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let result_0 = (safe_int32_of_integer_ (K_3: (0))) in
     begin   (return := (safe_int32_of_integer_ (0))); (raise Return) end);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let NameConflicts_setI_safety =
 fun (this_2 : Object pointer) (i : int32) ->
  { (valid_struct_NameConflicts(this_2, (0), (0), Object_alloc_table)
    and (JC_5: (true = true))) }
  (init:
  try
   begin
     (let jessie_5 = (let jessie_3 = this_2 in
                     (let jessie_4 = i in
                     begin
                       (((safe_upd_ NameConflicts_i) jessie_3) jessie_4);
                      ((safe_acc_ !NameConflicts_i) jessie_3)
                     end)) in
     void);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


========== make project execution ==========
why --project [...] why/NameConflicts.why
========== file tests/java/why/NameConflicts.wpr ==========
<project name="NameConflicts" context="why/NameConflicts_ctx.why">
  <function name="Method setI">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
  <function name="Method m">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Normal behavior `normal'">
    <goal why_file="why/NameConflicts_po1.why">
      <location file = "HOME/tests/java/NameConflicts.java" line = "11" begin = "18" end = "30"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method field">
    <location file = "" line = "0" begin = "0" end = "0"/>
  </function>
</project>
========== file tests/java/why/NameConflicts_ctx.why ==========
logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

axiom bool_and_false:
  ((bool_and(true, false) = false) and (bool_and(false, false) = false))

axiom false_bool_and:
  ((bool_and(false, true) = false) and (bool_and(false, false) = false))

axiom bool_and_true:
  ((bool_and(true, true) = true) and (bool_and(false, true) = false))

axiom true_bool_and:
  ((bool_and(true, true) = true) and (bool_and(true, false) = false))

axiom bool_and_1:
  ((((bool_and(true, true) = true) -> ((true = true) and (true = true))) and
    ((bool_and(true, false) = true) -> ((true = true) and (false = true)))) and
   (((bool_and(false, true) = true) -> ((false = true) and (true = true))) and
    ((bool_and(false, false) = true) -> ((false = true) and (false = true)))))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

logic null :  -> 'a1 pointer

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) <= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, p)]. (p = shift(q, sub_pointer(p,
      q)))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      ((sub_pointer(p, q) = 0) -> (p = q))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

logic alloc_extern : 'a1 alloc_table, 'a1 pointer -> prop

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer. (offset_min(a1, p) = offset_min(a2, p))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer. (offset_max(a1, p) = offset_max(a2, p))))))

axiom alloc_extern_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer [alloc_extern(a, p)].
      (alloc_extern(a, p) ->
       (forall q:'a1 pointer.
         ((offset_min(a, q) <= offset_max(a, q)) -> full_separated(p, q))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic NameConflicts_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom NameConflicts_parenttag_Object: parenttag(NameConflicts_tag,
  Object_tag)

predicate Non_null_Object(Object_alloc_table: Object alloc_table,
  x: Object pointer) = (offset_max(Object_alloc_table, x) = 0)

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_NameConflicts(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

========== file tests/java/why/NameConflicts_po1.why ==========
goal NameConflicts_m_ensures_normal_po_1:
  forall this_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  (valid_struct_NameConflicts(this_1, 0, 0, Object_alloc_table) and
   ("JC_8": (true = true))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall return:int32.
  (return = result0) ->
  ("K_2": (integer_of_int32(return) = 0))

========== simplify execution ==========
why -simplify [...] why/NameConflicts.why
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/NameConflicts_why.sx : . (1/0/0/0/0)
total   :   1
valid   :   1 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== ergo execution ==========
why --why [...] why/NameConflicts.why
Running Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/NameConflicts_why.why     : . (1/0/0/0/0)
total   :   1
valid   :   1 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
