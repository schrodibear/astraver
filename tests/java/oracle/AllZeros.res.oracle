========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function AllZeros_all_zeros for method AllZeros.all_zeros
Generating JC function cons_AllZeros for constructor AllZeros
Done.
========== file tests/java/AllZeros.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Non_null_intM{Here}(intM[0..-1] x) =
(\offset_max(x) >= -1)

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag AllZeros = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  int32 intP;
}

type byte = -128..127

type short = -32768..32767

type int32 = -2147483648..2147483647

type long = -9223372036854775808..9223372036854775807

type char = 0..65535

boolean non_null_intM(intM[0..-1] x)
behavior normal:
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(intM[0..-1] x)
behavior non_null:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && ((\result == (\offset_max(x) + 1)) && true)));
;

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

exception Throwable of Throwable[0..]

boolean AllZeros_all_zeros(intM[0..] t)
  requires (K_10 : Non_null_intM(t));
behavior default:
  ensures (K_1 : (\result <==>
                   (\forall integer i;
                     (((0 <= i) && (i < (\offset_max(t) + 1))) ==>
                       ((t + i).intP == 0)))));
{  
   {  
      {  
         (var int32 k = (K_2 : 0));
         
         invariant (K_3 : (((0 <= k) && (k <= (\offset_max(t) + 1))) &&
                            (\forall integer i_0;
                              (((0 <= i_0) && (i_0 < k)) ==>
                                ((t + i_0).intP == 0)))));
         variant (K_4 : ((\offset_max(t) + 1) - k));
         for ( ; (K_9 : (k < (K_8 : java_array_length_intM(t)))) ; (K_7 : 
                                                                   (k ++)))
         {  (if (K_6 : ((K_5 : (t + k).intP) != 0)) then 
            (return false) else ())
         }
      }
   };
   
   (return true)
}

unit cons_AllZeros(AllZeros[0] this_0)
  requires true;
;

/*
LocalVariables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/AllZeros.jloc tests/java/AllZeros.jc && make -f tests/java/AllZeros.makefile gui"
End:
*/
========== file tests/java/AllZeros.jloc ==========
[K_10]
file = "HOME/tests/java/AllZeros.java"
line = 32
begin = 17
end = 26

[K_1]
file = "HOME/tests/java/AllZeros.java"
line = 33
begin = 16
end = 79

[K_2]
file = "HOME/tests/java/AllZeros.java"
line = 41
begin = 14
end = 15

[K_3]
file = "HOME/tests/java/AllZeros.java"
line = 37
begin = 6
end = 78

[K_4]
file = "HOME/tests/java/AllZeros.java"
line = 39
begin = 15
end = 27

[K_5]
file = "HOME/tests/java/AllZeros.java"
line = 42
begin = 9
end = 13

[K_6]
file = "HOME/tests/java/AllZeros.java"
line = 42
begin = 9
end = 18

[K_7]
file = "HOME/tests/java/AllZeros.java"
line = 41
begin = 31
end = 34

[K_8]
file = "HOME/tests/java/AllZeros.java"
line = 41
begin = 21
end = 29

[K_9]
file = "HOME/tests/java/AllZeros.java"
line = 41
begin = 17
end = 29

[AllZeros_all_zeros]
name = "Method all_zeros"
file = "HOME/tests/java/AllZeros.java"
line = 35
begin = 19
end = 28

[cons_AllZeros]
name = "Constructor of class AllZeros"
file = "HOME/"
line = 0
begin = -1
end = -1

========== jessie execution ==========
Generating Why function AllZeros_all_zeros
========== file tests/java/AllZeros.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
export WHYLIB=/usr/local/lib/why

WHY=$(WHYEXEC) --no-arrays  -split-user-conj -explain -locs AllZeros.loc

GWHY=$(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs AllZeros.loc

JESSIELIBFILE ?= HOME/lib/why/jessie.why

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/AllZeros_why.sx

project: why/AllZeros.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILE) why/$*.why

goals: why/AllZeros_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILE) why/$*.why

coq: coq/AllZeros_why.vo

coq/AllZeros_why.v: why/AllZeros.why
	@echo 'why -coq-v8 [...] why/AllZeros.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILE) why/AllZeros.why

coq-goals: goals coq/AllZeros_ctx_why.vo
	for f in why/AllZeros_po*.why; do make -f AllZeros.makefile coq/`basename $$f .why`_why.v ; done

coq/AllZeros_ctx_why.v: why/AllZeros_ctx.why
	@echo 'why -coq-v8 [...] why/AllZeros_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/AllZeros_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export AllZeros_ctx_why." -coq-tactic "intuition" why/AllZeros_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/AllZeros_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "importing why@jessie_why" $(JESSIELIBFILE) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "importing why@why" $(JESSIELIBFILE)

isabelle: isabelle/AllZeros_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILE) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/AllZeros_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -no-simplify-prelude -dir simplify $(JESSIELIBFILE) why/$*.why

ergo: why/AllZeros_why.why
	@echo 'Running Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why --why [...] why/$*.why' && $(WHY) --why -dir why $(JESSIELIBFILE) why/$*.why

cvcl: cvcl/AllZeros_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILE) why/$*.why

harvey: harvey/AllZeros_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILE) why/$*.why

zenon: zenon/AllZeros_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILE) why/$*.why

smtlib: smtlib/AllZeros_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILE) why/$*.why

gui stat: AllZeros.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILE) why/$*.why

-include AllZeros.depend

depend: coq/AllZeros_why.v
	-$(COQDEP) -I coq coq/AllZeros*_why.v > AllZeros.depend

clean:
	rm -f coq/*.vo

========== file tests/java/AllZeros.loc ==========
[K_10]
file = "HOME/tests/java/AllZeros.java"
line = 32
begin = 17
end = 26

[JC_1]
file = "HOME/tests/java/AllZeros.jc"
line = 45
begin = 8
end = 21

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/AllZeros.jc"
line = 45
begin = 8
end = 21

[JC_4]
file = "HOME/tests/java/AllZeros.jc"
line = 45
begin = 8
end = 21

[JC_5]
file = "HOME/tests/java/AllZeros.jc"
line = 50
begin = 8
end = 30

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/tests/java/AllZeros.jc"
line = 50
begin = 8
end = 30

[JC_8]
file = "HOME/tests/java/AllZeros.jc"
line = 52
begin = 10
end = 18

[JC_9]
file = "HOME/tests/java/AllZeros.jc"
line = 50
begin = 8
end = 30

[K_1]
file = "HOME/tests/java/AllZeros.java"
line = 33
begin = 16
end = 79

[K_3]
file = "HOME/tests/java/AllZeros.java"
line = 37
begin = 6
end = 78

[K_4]
file = "HOME/tests/java/AllZeros.java"
line = 39
begin = 15
end = 27

[K_5]
kind = IndexBounds
file = "HOME/tests/java/AllZeros.java"
line = 42
begin = 9
end = 13

[K_8]
kind = UserCall
file = "HOME/tests/java/AllZeros.java"
line = 41
begin = 21
end = 29

[AllZeros_all_zeros_ensures_default]
name = "Method all_zeros"
behavior = "Behavior"
file = "HOME/tests/java/AllZeros.java"
line = 35
begin = 19
end = 28

[JC_10]
file = "HOME/tests/java/AllZeros.jc"
line = 57
begin = 8
end = 23

[JC_11]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_12]
file = "HOME/tests/java/AllZeros.jc"
line = 57
begin = 8
end = 23

[JC_13]
file = "HOME/tests/java/AllZeros.jc"
line = 57
begin = 8
end = 23

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/tests/java/AllZeros.java"
line = 35
begin = 19
end = 28

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_17]
kind = ArithOverflow
file = "HOME/tests/java/AllZeros.jc"
line = 82
begin = 68
end = 72

[JC_18]
kind = ArithOverflow
file = "HOME/tests/java/AllZeros.jc"
line = 82
begin = 68
end = 72

[JC_19]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[AllZeros_all_zeros_safety]
name = "Method all_zeros"
behavior = "Safety"
file = "HOME/tests/java/AllZeros.java"
line = 35
begin = 19
end = 28

========== file tests/java/why/AllZeros.why ==========
type Object

type byte

type char

type int32

type interface

type long

type short

logic AllZeros_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom AllZeros_parenttag_Object : parenttag(AllZeros_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(Object_alloc_table:Object alloc_table,
 x_0:Object pointer) =
 eq_int(offset_max(Object_alloc_table, x_0), (0))

predicate Non_null_intM(Object_alloc_table:Object alloc_table,
 x:Object pointer) =
 ge_int(offset_max(Object_alloc_table, x), neg_int((1)))

axiom Object_int : (int_of_tag(Object_tag) = (1))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic integer_of_byte: byte -> int

logic byte_of_integer: int -> byte

axiom byte_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_byte(byte_of_integer(x)), x)))

axiom byte_range :
 (forall x:byte.
  (le_int((-128), integer_of_byte(x)) and le_int(integer_of_byte(x), (127))))

logic integer_of_char: char -> int

logic char_of_integer: int -> char

axiom char_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_char(char_of_integer(x)), x)))

axiom char_range :
 (forall x:char.
  (le_int((0), integer_of_char(x)) and le_int(integer_of_char(x), (65535))))

predicate eq_byte(x:byte,
 y:byte) =
 eq_int(integer_of_byte(x), integer_of_byte(y))

predicate eq_char(x:char,
 y:char) =
 eq_int(integer_of_char(x), integer_of_char(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_long: long -> int

predicate eq_long(x:long,
 y:long) =
 eq_int(integer_of_long(x), integer_of_long(y))

logic integer_of_short: short -> int

predicate eq_short(x:short,
 y:short) =
 eq_int(integer_of_short(x), integer_of_short(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer: int -> long

axiom long_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_long(long_of_integer(x)), x)))

axiom long_range :
 (forall x:long.
  (le_int((-9223372036854775808), integer_of_long(x))
  and le_int(integer_of_long(x), (9223372036854775807))))

logic short_of_integer: int -> short

axiom short_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_short(short_of_integer(x)), x)))

axiom short_range :
 (forall x:short.
  (le_int((-32768), integer_of_short(x))
  and le_int(integer_of_short(x), (32767))))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_AllZeros(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

parameter Object_alloc_table : Object alloc_table ref

parameter Object_tag_table : Object tag_table ref

parameter intM_intP : (Object, int32) memory ref

parameter AllZeros_all_zeros :
 t:Object pointer ->
  { (K_10: Non_null_intM(Object_alloc_table, t))} bool
  reads Object_alloc_table,Object_tag_table,intM_intP
  { (K_1:
    ((result = true)
    <-> (forall i:int.
         ((le_int((0), i)
          and lt_int(i, add_int(offset_max(Object_alloc_table, t), (1)))) ->
          eq_int(integer_of_int32(select(intM_intP, shift(t, i))), (0)))))) }

parameter alloc_AllZeros :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   { ge_int(n, (0))} Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_AllZeros(result, (0), sub_int(n, (1)), Object_alloc_table)
     and (instanceof(Object_tag_table, result, AllZeros_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   { ge_int(n, (0))} Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
     and (instanceof(Object_tag_table, result, Object_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   { ge_int(n, (0))} Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
     and (instanceof(Object_tag_table, result, String_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   { ge_int(n, (0))} Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
      Object_alloc_table)
     and (instanceof(Object_tag_table, result, Throwable_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   { ge_int(n, (0))} Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_intM(result, (0), sub_int(n, (1)), Object_alloc_table)
     and (instanceof(Object_tag_table, result, intM_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   { ge_int(n, (0))} interface pointer reads interface_alloc_table
   writes interface_alloc_table,interface_tag_table
   { (valid_struct_interface(result, (0), sub_int(n, (1)),
      interface_alloc_table)
     and (instanceof(interface_tag_table, result, interface_tag)
         and (alloc_extends(interface_alloc_table@, interface_alloc_table)
             and alloc_fresh(interface_alloc_table@, result)))) }

parameter alloc_one_AllZeros :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   { } Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_AllZeros(result, (0), (0), Object_alloc_table)
     and (instanceof(Object_tag_table, result, AllZeros_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_one_Object :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   { } Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_Object(result, (0), (0), Object_alloc_table)
     and (instanceof(Object_tag_table, result, Object_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_one_String :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   { } Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_String(result, (0), (0), Object_alloc_table)
     and (instanceof(Object_tag_table, result, String_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_one_Throwable :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   { } Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_Throwable(result, (0), (0), Object_alloc_table)
     and (instanceof(Object_tag_table, result, Throwable_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_one_intM :
 tt:unit ->
  Object_alloc_table:Object alloc_table ref ->
   { } Object pointer reads Object_alloc_table
   writes Object_alloc_table,Object_tag_table
   { (valid_struct_intM(result, (0), (0), Object_alloc_table)
     and (instanceof(Object_tag_table, result, intM_tag)
         and (alloc_extends(Object_alloc_table@, Object_alloc_table)
             and alloc_fresh(Object_alloc_table@, result)))) }

parameter alloc_one_interface :
 tt:unit ->
  interface_alloc_table:interface alloc_table ref ->
   { } interface pointer reads interface_alloc_table
   writes interface_alloc_table,interface_tag_table
   { (valid_struct_interface(result, (0), (0), interface_alloc_table)
     and (instanceof(interface_tag_table, result, interface_tag)
         and (alloc_extends(interface_alloc_table@, interface_alloc_table)
             and alloc_fresh(interface_alloc_table@, result)))) }

parameter any_byte : unit -> { } byte { true }

parameter any_char : unit -> { } char { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_long : unit -> { } long { true }

parameter any_short : unit -> { } short { true }

parameter byte_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} byte
  { eq_int(integer_of_byte(result), x) }

parameter char_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} char
  { eq_int(integer_of_char(result), x) }

parameter cons_AllZeros :
 this_0:Object pointer ->
  { (JC_20: (true = true))} unit reads Object_alloc_table,Object_tag_table
  { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter java_array_length_intM :
 x_2:Object pointer ->
  { (JC_5: true)} int reads Object_alloc_table,Object_tag_table
  { (JC_9:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter long_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  long { eq_int(integer_of_long(result), x) }

parameter non_null_Object :
 x_3:Object pointer ->
  { (JC_10: true)} bool reads Object_alloc_table,Object_tag_table
  { (JC_13:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_intM :
 x_1:Object pointer ->
  { (JC_1: true)} bool reads Object_alloc_table,Object_tag_table
  { (JC_4:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter safe_byte_of_integer_ :
 x:int -> { } byte { eq_int(integer_of_byte(result), x) }

parameter safe_char_of_integer_ :
 x:int -> { } char { eq_int(integer_of_char(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_long_of_integer_ :
 x:int -> { } long { eq_int(integer_of_long(result), x) }

parameter safe_short_of_integer_ :
 x:int -> { } short { eq_int(integer_of_short(result), x) }

parameter short_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} short
  { eq_int(integer_of_short(result), x) }

let AllZeros_all_zeros_ensures_default =
 fun (t : Object pointer) ->
  { (K_10: Non_null_intM(Object_alloc_table, t)) }
  (init:
  (let return = ref (any_bool void) in
  try
   begin
     (let k = ref (safe_int32_of_integer_ (K_2: (0))) in
     try
      while true do
      { invariant
          (K_3:
          (le_int((0), integer_of_int32(k))
          and (le_int(integer_of_int32(k),
               add_int(offset_max(Object_alloc_table, t), (1)))
              and (forall i_0:int.
                   ((le_int((0), i_0) and lt_int(i_0, integer_of_int32(k))) ->
                    eq_int(integer_of_int32(select(intM_intP, shift(t, i_0))),
                    (0)))))))
         }
       try
        (let jessie_11 = begin
                           (if (K_9:
                               ((lt_int_ (integer_of_int32 !k)) (let jessie_9 = t in
                                                                (K_8:
                                                                (java_array_length_intM jessie_9)))))
                           then
                            (if (K_6:
                                ((neq_int_ (integer_of_int32 ((safe_acc_ !intM_intP) 
                                                              ((shift t) 
                                                               (integer_of_int32 !k))))) (0)))
                            then
                             begin   (return := false); (raise Return) end
                            else void)
                           else
                            (let jessie_10 = (raise (Loop_exit_exc void)) in
                            void));
                          (raise (Loop_continue_exc void))
                         end in
        void)
        with
        Loop_continue_exc jessie_3 ->
        (let jessie_13 = (let jessie_1 = !k in
                         begin
                           (let jessie_12 = (k := (safe_int32_of_integer_ 
                                                   ((add_int (integer_of_int32 jessie_1)) (1)))) in
                           void);
                          jessie_1
                         end) in
        void) end
      done
      with
      Loop_exit_exc jessie_2 ->
      void end);
    (return := true);
    (raise Return);
    absurd 
   end
   with
   Return ->
   !return end))
  { (K_1:
    ((result = true)
    <-> (forall i:int.
         ((le_int((0), i)
          and lt_int(i, add_int(offset_max(Object_alloc_table, t), (1)))) ->
          eq_int(integer_of_int32(select(intM_intP, shift(t, i))), (0)))))) }

let AllZeros_all_zeros_safety =
 fun (t : Object pointer) ->
  { (K_10: Non_null_intM(Object_alloc_table, t)) }
  (init:
  (let return = ref (any_bool void) in
  try
   begin
     (let k = ref (safe_int32_of_integer_ (K_2: (0))) in
     try
      while true do
      { invariant
          (K_3:
          (le_int((0), integer_of_int32(k))
          and (le_int(integer_of_int32(k),
               add_int(offset_max(Object_alloc_table, t), (1)))
              and (forall i_0:int.
                   ((le_int((0), i_0) and lt_int(i_0, integer_of_int32(k))) ->
                    eq_int(integer_of_int32(select(intM_intP, shift(t, i_0))),
                    (0)))))))
        variant (K_4 : sub_int(add_int(offset_max(Object_alloc_table, t),
                               (1)),
                       integer_of_int32(k))) }
       try
        (let jessie_6 = begin
                          (if (K_9:
                              ((lt_int_ (integer_of_int32 !k)) (let jessie_4 = t in
                                                               (assert
                                                               { ge_int(
                                                                 offset_max(Object_alloc_table,
                                                                 jessie_4),
                                                                 (-1)) };
                                                               (K_8:
                                                               (java_array_length_intM jessie_4))))))
                          then
                           (if (K_6:
                               ((neq_int_ (integer_of_int32 (K_5:
                                                            (((((lbound_acc_ !Object_alloc_table) !intM_intP) t) 
                                                              (integer_of_int32 !k)) (0))))) (0)))
                           then begin   (return := false); (raise Return) end
                           else void)
                          else
                           (let jessie_5 = (raise (Loop_exit_exc void)) in
                           void));
                         (raise (Loop_continue_exc void))
                        end in
        void)
        with
        Loop_continue_exc jessie_3 ->
        (let jessie_8 = (let jessie_1 = !k in
                        begin
                          (let jessie_7 = (k := (JC_18:
                                                (int32_of_integer_ ((add_int 
                                                                    (integer_of_int32 jessie_1)) (1))))) in
                          void);
                         jessie_1
                        end) in
        void) end
      done
      with
      Loop_exit_exc jessie_2 ->
      void end);
    (return := true);
    (raise Return);
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


========== make project execution ==========
why --project [...] why/AllZeros.why
========== file tests/java/why/AllZeros.wpr ==========
<project name="AllZeros" context="why/AllZeros_ctx.why">
  <function name="Method all_zeros">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/AllZeros_po11.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po12.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po13.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po14.why">
      <location file = "why/AllZeros.why" line = "526" begin = "65" end = "315"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/AllZeros_po15.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "42" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/AllZeros_po16.why">
      <location file = "HOME/tests/java/AllZeros.jc" line = "82" begin = "68" end = "72"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/AllZeros_po17.why">
      <location file = "HOME/tests/java/AllZeros.jc" line = "82" begin = "68" end = "72"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/AllZeros_po18.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po19.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po20.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po21.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "39" begin = "15" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/AllZeros_po22.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "39" begin = "15" end = "27"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Behavior">
    <goal why_file="why/AllZeros_po1.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po2.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po3.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/AllZeros_po4.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "33" begin = "16" end = "79"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/AllZeros_po5.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "33" begin = "16" end = "79"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/AllZeros_po6.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po7.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po8.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "37" begin = "6" end = "78"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/AllZeros_po9.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "33" begin = "16" end = "79"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/AllZeros_po10.why">
      <location file = "HOME/tests/java/AllZeros.java" line = "33" begin = "16" end = "79"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/AllZeros_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic and_bool : bool, bool -> bool

logic or_bool : bool, bool -> bool

logic xor_bool : bool, bool -> bool

logic not_bool : bool -> bool

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic max_int : int, int -> int

logic min_int : int, int -> int

logic max_real : real, real -> real

logic min_real : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

logic shift : 'a1 pointer, int -> 'a1 pointer

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

logic null :  -> 'a1 pointer

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

logic same_block : 'a1 pointer, 'a1 pointer -> prop

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, p)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer) = (not valid(a, p))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic AllZeros_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom AllZeros_parenttag_Object: parenttag(AllZeros_tag, Object_tag)

predicate Non_null_Object(Object_alloc_table: Object alloc_table,
  x_0: Object pointer) = (offset_max(Object_alloc_table, x_0) = 0)

predicate Non_null_intM(Object_alloc_table: Object alloc_table,
  x: Object pointer) = (offset_max(Object_alloc_table, x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_AllZeros(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

========== file tests/java/why/AllZeros_po1.why ==========
goal AllZeros_all_zeros_ensures_default_po_1:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (0 <= integer_of_int32(result)))

========== file tests/java/why/AllZeros_po10.why ==========
goal AllZeros_all_zeros_ensures_default_po_10:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) >= result0) ->
  forall return:bool.
  (return = true) ->
  (forall i:int.
    (((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
     (integer_of_int32(select(intM_intP, shift(t, i))) = 0))) ->
  ("K_1": (return = true))

========== file tests/java/why/AllZeros_po11.why ==========
goal AllZeros_all_zeros_safety_po_1:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (0 <= integer_of_int32(result)))

========== file tests/java/why/AllZeros_po12.why ==========
goal AllZeros_all_zeros_safety_po_2:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (integer_of_int32(result) <= (offset_max(Object_alloc_table,
  t) + 1)))

========== file tests/java/why/AllZeros_po13.why ==========
goal AllZeros_all_zeros_safety_po_3:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(result))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

========== file tests/java/why/AllZeros_po14.why ==========
goal AllZeros_all_zeros_safety_po_4:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1))

========== file tests/java/why/AllZeros_po15.why ==========
goal AllZeros_all_zeros_safety_po_5:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  (integer_of_int32(k) <= offset_max(Object_alloc_table, t))

========== file tests/java/why/AllZeros_po16.why ==========
goal AllZeros_all_zeros_safety_po_6:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  ((-2147483648) <= (integer_of_int32(k) + 1))

========== file tests/java/why/AllZeros_po17.why ==========
goal AllZeros_all_zeros_safety_po_7:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  ((integer_of_int32(k) + 1) <= 2147483647)

========== file tests/java/why/AllZeros_po18.why ==========
goal AllZeros_all_zeros_safety_po_8:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (0 <= integer_of_int32(k0)))

========== file tests/java/why/AllZeros_po19.why ==========
goal AllZeros_all_zeros_safety_po_9:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (integer_of_int32(k0) <= (offset_max(Object_alloc_table, t) + 1)))

========== file tests/java/why/AllZeros_po2.why ==========
goal AllZeros_all_zeros_ensures_default_po_2:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (integer_of_int32(result) <= (offset_max(Object_alloc_table,
  t) + 1)))

========== file tests/java/why/AllZeros_po20.why ==========
goal AllZeros_all_zeros_safety_po_10:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(k0))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

========== file tests/java/why/AllZeros_po21.why ==========
goal AllZeros_all_zeros_safety_po_11:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  (0 <= ("K_4": ((offset_max(Object_alloc_table,
        t) + 1) - integer_of_int32(k))))

========== file tests/java/why/AllZeros_po22.why ==========
goal AllZeros_all_zeros_safety_po_12:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  (("K_4": ((offset_max(Object_alloc_table, t) + 1) - integer_of_int32(k0))) < 
  ("K_4": ((offset_max(Object_alloc_table, t) + 1) - integer_of_int32(k))))

========== file tests/java/why/AllZeros_po3.why ==========
goal AllZeros_all_zeros_ensures_default_po_3:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(result))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

========== file tests/java/why/AllZeros_po4.why ==========
goal AllZeros_all_zeros_ensures_default_po_4:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall return:bool.
  (return = false) ->
  (return = true) ->
  forall i:int.
  ((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
  ("K_1": (integer_of_int32(select(intM_intP, shift(t, i))) = 0))

========== file tests/java/why/AllZeros_po5.why ==========
goal AllZeros_all_zeros_ensures_default_po_5:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall return:bool.
  (return = false) ->
  (forall i:int.
    (((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
     (integer_of_int32(select(intM_intP, shift(t, i))) = 0))) ->
  ("K_1": (return = true))

========== file tests/java/why/AllZeros_po6.why ==========
goal AllZeros_all_zeros_ensures_default_po_6:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (0 <= integer_of_int32(k0)))

========== file tests/java/why/AllZeros_po7.why ==========
goal AllZeros_all_zeros_ensures_default_po_7:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (integer_of_int32(k0) <= (offset_max(Object_alloc_table, t) + 1)))

========== file tests/java/why/AllZeros_po8.why ==========
goal AllZeros_all_zeros_ensures_default_po_8:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(k0))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

========== file tests/java/why/AllZeros_po9.why ==========
goal AllZeros_all_zeros_ensures_default_po_9:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) >= result0) ->
  forall return:bool.
  (return = true) ->
  (return = true) ->
  forall i:int.
  ((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
  ("K_1": (integer_of_int32(select(intM_intP, shift(t, i))) = 0))

========== generation of Simplify VC output ==========
why -simplify [...] why/AllZeros.why
========== file tests/java/simplify/AllZeros_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom div_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) a)))))

(BG_PUSH
 ;; Why axiom div_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= a (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (<= (- 0 a) (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) (- 0 a))))))

(BG_PUSH
 ;; Why axiom mod_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q)
 (IMPLIES (EQ (same_block p q) |@true|) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (EQ (same_block p q) |@true|)
 (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i)
 (IMPLIES (EQ (same_block p q) |@true|)
 (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (EQ (same_block p q) |@true|)
 (FORALL (i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i)
 (IMPLIES (EQ (same_block p q) |@true|)
 (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (EQ (same_block p q) |@true|)
 (FORALL (i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p) (NOT (valid a p)))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom AllZeros_parenttag_Object
 (EQ (parenttag AllZeros_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object Object_alloc_table x_0)
  (EQ (offset_max Object_alloc_table x_0) 0))

(DEFPRED (Non_null_intM Object_alloc_table x)
  (>= (offset_max Object_alloc_table x) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom byte_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 128) x) (<= x 127))
 (EQ (integer_of_byte (byte_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom byte_range
 (FORALL (x)
 (AND (<= (- 0 128) (integer_of_byte x)) (<= (integer_of_byte x) 127))))

(BG_PUSH
 ;; Why axiom char_coerce
 (FORALL (x)
 (IMPLIES (AND (<= 0 x) (<= x 65535))
 (EQ (integer_of_char (char_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom char_range
 (FORALL (x) (AND (<= 0 (integer_of_char x)) (<= (integer_of_char x) 65535))))

(DEFPRED (eq_byte x y) (EQ (integer_of_byte x) (integer_of_byte y)))

(DEFPRED (eq_char x y) (EQ (integer_of_char x) (integer_of_char y)))

(DEFPRED (eq_int32 x y) (EQ (integer_of_int32 x) (integer_of_int32 y)))

(DEFPRED (eq_long x y) (EQ (integer_of_long x) (integer_of_long y)))

(DEFPRED (eq_short x y) (EQ (integer_of_short x) (integer_of_short y)))

(BG_PUSH
 ;; Why axiom int32_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_2147483648) x)
 (<= x constant_too_large_2147483647))
 (EQ (integer_of_int32 (int32_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int32_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_2147483648) (integer_of_int32 x))
 (<= (integer_of_int32 x) constant_too_large_2147483647))))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(BG_PUSH
 ;; Why axiom long_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_9223372036854775808) x)
 (<= x constant_too_large_9223372036854775807))
 (EQ (integer_of_long (long_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom long_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_9223372036854775808) (integer_of_long x))
 (<= (integer_of_long x) constant_too_large_9223372036854775807))))

(BG_PUSH
 ;; Why axiom short_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 32768) x) (<= x 32767))
 (EQ (integer_of_short (short_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom short_range
 (FORALL (x)
 (AND (<= (- 0 32768) (integer_of_short x)) (<= (integer_of_short x) 32767))))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_AllZeros p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_variant_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_variant_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

;; AllZeros_all_zeros_ensures_default_po_1, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0) (<= 0 (integer_of_int32 result)))))))

;; AllZeros_all_zeros_ensures_default_po_2, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(<= (integer_of_int32 result) (+ (offset_max Object_alloc_table t) 1)))))))

;; AllZeros_all_zeros_ensures_default_po_3, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_0)
(IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 result)))
(EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))))))

;; AllZeros_all_zeros_ensures_default_po_4, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 33, characters 16-79
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (NEQ (integer_of_int32 result1) 0)
(FORALL (return)
(IMPLIES (EQ return |@false|)
(IMPLIES (EQ return |@true|)
(FORALL (i)
(IMPLIES (AND (<= 0 i) (< i (+ (offset_max Object_alloc_table t) 1)))
(EQ (integer_of_int32 (select intM_intP (shift t i))) 0)))))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_5, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 33, characters 16-79
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (NEQ (integer_of_int32 result1) 0)
(FORALL (return)
(IMPLIES (EQ return |@false|)
(IMPLIES (FORALL (i)
         (IMPLIES
         (AND (<= 0 i) (< i (+ (offset_max Object_alloc_table t) 1)))
         (EQ (integer_of_int32 (select intM_intP (shift t i))) 0)))
(EQ return |@true|)))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_6, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0) (IMPLIES (EQ k0 result2) (<= 0 (integer_of_int32 k0)))))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_7, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(<= (integer_of_int32 k0) (+ (offset_max Object_alloc_table t) 1)))))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_8, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(FORALL (i_0)
(IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k0)))
(EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0))))))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_9, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 33, characters 16-79
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= (integer_of_int32 k) result0)
(FORALL (return)
(IMPLIES (EQ return |@true|)
(IMPLIES (EQ return |@true|)
(FORALL (i)
(IMPLIES (AND (<= 0 i) (< i (+ (offset_max Object_alloc_table t) 1)))
(EQ (integer_of_int32 (select intM_intP (shift t i))) 0))))))))))))))))))

;; AllZeros_all_zeros_ensures_default_po_10, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 33, characters 16-79
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= (integer_of_int32 k) result0)
(FORALL (return)
(IMPLIES (EQ return |@true|)
(IMPLIES (FORALL (i)
         (IMPLIES
         (AND (<= 0 i) (< i (+ (offset_max Object_alloc_table t) 1)))
         (EQ (integer_of_int32 (select intM_intP (shift t i))) 0)))
(EQ return |@true|))))))))))))))))

;; AllZeros_all_zeros_safety_po_1, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0) (<= 0 (integer_of_int32 result)))))))

;; AllZeros_all_zeros_safety_po_2, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(<= (integer_of_int32 result) (+ (offset_max Object_alloc_table t) 1)))))))

;; AllZeros_all_zeros_safety_po_3, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (i_0)
(IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 result)))
(EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))))))

;; AllZeros_all_zeros_safety_po_4, File "why/AllZeros.why", line 526, characters 65-315
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(>= (offset_max Object_alloc_table t) (- 0 1))))))))))

;; AllZeros_all_zeros_safety_po_5, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 42, characters 9-13
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(<= (integer_of_int32 k) (offset_max Object_alloc_table t)))))))))))))))

;; AllZeros_all_zeros_safety_po_6, File "/home/cmarche/recherche/why/tests/java/AllZeros.jc", line 82, characters 68-72
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1)))))))))))))))))))

;; AllZeros_all_zeros_safety_po_7, File "/home/cmarche/recherche/why/tests/java/AllZeros.jc", line 82, characters 68-72
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))))))))))))))))))

;; AllZeros_all_zeros_safety_po_8, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1))
         (<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0) (IMPLIES (EQ k0 result2) (<= 0 (integer_of_int32 k0))))))))))))))))))))))))

;; AllZeros_all_zeros_safety_po_9, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1))
         (<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(<= (integer_of_int32 k0) (+ (offset_max Object_alloc_table t) 1))))))))))))))))))))))))

;; AllZeros_all_zeros_safety_po_10, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 37, characters 6-78
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1))
         (<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(FORALL (i_0)
(IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k0)))
(EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))))))))))))))))))))))

;; AllZeros_all_zeros_safety_po_11, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 39, characters 15-27
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1))
         (<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(<= 0 (- (+ (offset_max Object_alloc_table t) 1) (integer_of_int32 k)))))))))))))))))))))))))

;; AllZeros_all_zeros_safety_po_12, File "/home/cmarche/recherche/why/tests/java/AllZeros.java", line 39, characters 15-27
(FORALL (t)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM Object_alloc_table t)
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (k)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (AND
         (<= (integer_of_int32 k) (+ (offset_max Object_alloc_table t) 1))
         (FORALL (i_0)
         (IMPLIES (AND (<= 0 i_0) (< i_0 (integer_of_int32 k)))
         (EQ (integer_of_int32 (select intM_intP (shift t i_0))) 0)))))
(IMPLIES (>= (offset_max Object_alloc_table t) (- 0 1))
(IMPLIES TRUE
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< (integer_of_int32 k) result0)
(IMPLIES (AND (<= 0 (integer_of_int32 k))
         (<= (integer_of_int32 k) (offset_max Object_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t (integer_of_int32 k))))
(IMPLIES (EQ (integer_of_int32 result1) 0)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 k) 1))
         (<= (+ (integer_of_int32 k) 1) constant_too_large_2147483647))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2) (+ (integer_of_int32 k) 1))
(FORALL (k0)
(IMPLIES (EQ k0 result2)
(< (- (+ (offset_max Object_alloc_table t) 1) (integer_of_int32 k0)) 
(- (+ (offset_max Object_alloc_table t) 1) (integer_of_int32 k)))))))))))))))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/AllZeros_why.sx      : ...................... (22/0/0/0/0)
total   :  22
valid   :  22 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why --why [...] why/AllZeros.why
========== file tests/java/why/AllZeros_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic and_bool : bool, bool -> bool

logic or_bool : bool, bool -> bool

logic xor_bool : bool, bool -> bool

logic not_bool : bool -> bool

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic max_int : int, int -> int

logic min_int : int, int -> int

logic max_real : real, real -> real

logic min_real : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

logic shift : 'a1 pointer, int -> 'a1 pointer

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

logic null :  -> 'a1 pointer

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

logic same_block : 'a1 pointer, 'a1 pointer -> prop

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, p)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer) = (not valid(a, p))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

type Object

type byte

type char

type int32

type interface

type long

type short

logic AllZeros_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom AllZeros_parenttag_Object: parenttag(AllZeros_tag, Object_tag)

predicate Non_null_Object(Object_alloc_table: Object alloc_table,
  x_0: Object pointer) = (offset_max(Object_alloc_table, x_0) = 0)

predicate Non_null_intM(Object_alloc_table: Object alloc_table,
  x: Object pointer) = (offset_max(Object_alloc_table, x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic integer_of_byte : byte -> int

logic byte_of_integer : int -> byte

axiom byte_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_byte(byte_of_integer(x)) = x)))

axiom byte_range:
  (forall x:byte.
    (((-128) <= integer_of_byte(x)) and (integer_of_byte(x) <= 127)))

logic integer_of_char : char -> int

logic char_of_integer : int -> char

axiom char_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 65535)) -> (integer_of_char(char_of_integer(x)) = x)))

axiom char_range:
  (forall x:char.
    ((0 <= integer_of_char(x)) and (integer_of_char(x) <= 65535)))

predicate eq_byte(x: byte, y: byte) =
  (integer_of_byte(x) = integer_of_byte(y))

predicate eq_char(x: char, y: char) =
  (integer_of_char(x) = integer_of_char(y))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_long : long -> int

predicate eq_long(x: long, y: long) =
  (integer_of_long(x) = integer_of_long(y))

logic integer_of_short : short -> int

predicate eq_short(x: short, y: short) =
  (integer_of_short(x) = integer_of_short(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

logic long_of_integer : int -> long

axiom long_coerce:
  (forall x:int.
    ((((-9223372036854775808) <= x) and (x <= 9223372036854775807)) ->
     (integer_of_long(long_of_integer(x)) = x)))

axiom long_range:
  (forall x:long.
    (((-9223372036854775808) <= integer_of_long(x)) and
     (integer_of_long(x) <= 9223372036854775807)))

logic short_of_integer : int -> short

axiom short_coerce:
  (forall x:int.
    ((((-32768) <= x) and (x <= 32767)) ->
     (integer_of_short(short_of_integer(x)) = x)))

axiom short_range:
  (forall x:short.
    (((-32768) <= integer_of_short(x)) and (integer_of_short(x) <= 32767)))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_AllZeros(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

goal AllZeros_all_zeros_ensures_default_po_1:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (0 <= integer_of_int32(result)))

goal AllZeros_all_zeros_ensures_default_po_2:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (integer_of_int32(result) <= (offset_max(Object_alloc_table,
  t) + 1)))

goal AllZeros_all_zeros_ensures_default_po_3:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(result))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

goal AllZeros_all_zeros_ensures_default_po_4:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall return:bool.
  (return = false) ->
  (return = true) ->
  forall i:int.
  ((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
  ("K_1": (integer_of_int32(select(intM_intP, shift(t, i))) = 0))

goal AllZeros_all_zeros_ensures_default_po_5:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall return:bool.
  (return = false) ->
  (forall i:int.
    (((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
     (integer_of_int32(select(intM_intP, shift(t, i))) = 0))) ->
  ("K_1": (return = true))

goal AllZeros_all_zeros_ensures_default_po_6:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (0 <= integer_of_int32(k0)))

goal AllZeros_all_zeros_ensures_default_po_7:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (integer_of_int32(k0) <= (offset_max(Object_alloc_table, t) + 1)))

goal AllZeros_all_zeros_ensures_default_po_8:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(k0))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

goal AllZeros_all_zeros_ensures_default_po_9:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) >= result0) ->
  forall return:bool.
  (return = true) ->
  (return = true) ->
  forall i:int.
  ((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
  ("K_1": (integer_of_int32(select(intM_intP, shift(t, i))) = 0))

goal AllZeros_all_zeros_ensures_default_po_10:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) >= result0) ->
  forall return:bool.
  (return = true) ->
  (forall i:int.
    (((0 <= i) and (i < (offset_max(Object_alloc_table, t) + 1))) ->
     (integer_of_int32(select(intM_intP, shift(t, i))) = 0))) ->
  ("K_1": (return = true))

goal AllZeros_all_zeros_safety_po_1:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (0 <= integer_of_int32(result)))

goal AllZeros_all_zeros_safety_po_2:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  ("K_3": (integer_of_int32(result) <= (offset_max(Object_alloc_table,
  t) + 1)))

goal AllZeros_all_zeros_safety_po_3:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(result))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

goal AllZeros_all_zeros_safety_po_4:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1))

goal AllZeros_all_zeros_safety_po_5:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  (integer_of_int32(k) <= offset_max(Object_alloc_table, t))

goal AllZeros_all_zeros_safety_po_6:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  ((-2147483648) <= (integer_of_int32(k) + 1))

goal AllZeros_all_zeros_safety_po_7:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  ((integer_of_int32(k) + 1) <= 2147483647)

goal AllZeros_all_zeros_safety_po_8:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (0 <= integer_of_int32(k0)))

goal AllZeros_all_zeros_safety_po_9:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  ("K_3": (integer_of_int32(k0) <= (offset_max(Object_alloc_table, t) + 1)))

goal AllZeros_all_zeros_safety_po_10:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  forall i_0:int.
  ((0 <= i_0) and (i_0 < integer_of_int32(k0))) ->
  ("K_3": (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0))

goal AllZeros_all_zeros_safety_po_11:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  (0 <= ("K_4": ((offset_max(Object_alloc_table,
        t) + 1) - integer_of_int32(k))))

goal AllZeros_all_zeros_safety_po_12:
  forall t:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int32) memory.
  ("K_10": Non_null_intM(Object_alloc_table, t)) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall k:int32.
  ("K_3":
  ((0 <= integer_of_int32(k)) and
   ((integer_of_int32(k) <= (offset_max(Object_alloc_table, t) + 1)) and
    (forall i_0:int.
      (((0 <= i_0) and (i_0 < integer_of_int32(k))) ->
       (integer_of_int32(select(intM_intP, shift(t, i_0))) = 0)))))) ->
  (offset_max(Object_alloc_table, t) >= (-1)) ->
  ("JC_5": true) ->
  forall result0:int.
  ("JC_9":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t) + 1)) and (true = true))))) ->
  (integer_of_int32(k) < result0) ->
  ((0 <= integer_of_int32(k)) and
   (integer_of_int32(k) <= offset_max(Object_alloc_table, t))) ->
  forall result1:int32.
  (result1 = select(intM_intP, shift(t, integer_of_int32(k)))) ->
  (integer_of_int32(result1) = 0) ->
  (((-2147483648) <= (integer_of_int32(k) + 1)) and
   ((integer_of_int32(k) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(k) + 1)) ->
  forall k0:int32.
  (k0 = result2) ->
  (("K_4": ((offset_max(Object_alloc_table, t) + 1) - integer_of_int32(k0))) < 
  ("K_4": ((offset_max(Object_alloc_table, t) + 1) - integer_of_int32(k))))

========== running alt-ergo ==========
Running Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/AllZeros_why.why          : ...................... (22/0/0/0/0)
total   :  22
valid   :  22 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
