========== file tests/java/Arrays.java ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*  Copyright (C) 2002-2008                                               */
/*    Romain BARDOU                                                       */
/*    Jean-François COUCHOT                                               */
/*    Mehdi DOGGUY                                                        */
/*    Jean-Christophe FILLIÂTRE                                           */
/*    Thierry HUBERT                                                      */
/*    Claude MARCHÉ                                                       */
/*    Yannick MOY                                                         */
/*    Christine PAULIN                                                    */
/*    Yann RÉGIS-GIANAS                                                   */
/*    Nicolas ROUSSET                                                     */
/*    Xavier URBAIN                                                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU General Public                   */
/*  License version 2, as published by the Free Software Foundation.      */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/*  See the GNU General Public License version 2 for more details         */
/*  (enclosed in the file GPL).                                           */
/*                                                                        */
/**************************************************************************/


//@+ CheckArithOverflow = no

/* is_max(t,i,l) is true whenever t[i] is the maximum of t[0]..t[l-1]
 * l is an integer and not an int, because used as t.length which 
 * (in the logic) returns an integer and not an int 
 */
/*@ predicate is_max{L}(int[] t,int i,integer l) {
  @   t != null && 0 <= i < l <= t.length &&
  @   (\forall integer j; 0 <= j < l ==> t[j] <= t[i])
  @ }
  @*/

public class Arrays {

    /*@ requires t != null && 1 <= t.length <= 32767;
      @ behavior max_found:
      @   ensures 
      @      0 <= \result < t.length && 
      @      (\forall integer i; 
      @           0 <= i < t.length ==> t[i] <= t[\result]);
      @*/
    public static short findMax(int[] t) {
	int m = t[0];
	short r = 0;
        /*@ loop_invariant 
          @   1 <= i <= t.length && 0 <= r < t.length &&
          @   m == t[r] && (\forall integer j; 0 <= j < i ==> t[j] <= m);
          @ loop_variant t.length-i;
          @*/
	for (short i=1; i < t.length; i++) {
	    if (t[i] > m) {
		r = i; 
		m = t[i];
	    }
	}
	return r;
    }

    /*@ requires t != null && t.length >= 1;
      @ behavior max_found:
      @  ensures 
      @      0 <= \result < t.length && 
      @      is_max(t,\result,t.length) ;
      @*/
    public static int findMax2(int[] t) {
	int m = t[0];
	int r = 0; 
	/*@ loop_invariant 
	  @   1 <= i <= t.length && 0 <= r < t.length &&
          @   m == t[r] && is_max(t,r,i) ;
	  @ loop_variant t.length-i;
	  @*/
	for (int i=1; i < t.length; i++) {
	    if (t[i] > m) {
		r = i; 
		m = t[i];
	    }
	}
	return r;
    }


    /*@ requires t != null ;
      @ ensures 
      @   \forall integer i; 0 < i < t.length ==> t[i] == \old(t[i-1]);
      @*/
    public static void arrayShift(int[] t) {
	/*@ loop_invariant 
	  @   j < t.length &&
	  @   (t.length > 0 ==>
	  @     (0 <= j && 
          @     (\forall integer i; 0 <= i <= j ==> t[i] == \at(t[i],Pre)) &&
          @     (\forall integer i; j < i < t.length ==> t[i] == \at(t[i-1],Pre))));
	  @ loop_variant j;
	  @*/
      for (int j = t.length-1 ; j > 0 ; j--) {
	  t[j] = t[j-1];
	}
    }


}


/*
Local Variables: 
compile-command: "make Arrays"
End: 
*/

========== krakatoa execution ==========
Parsing OK.
Typing OK.
Generating JC function Arrays_findMax for method Arrays.findMax
Generating JC function Arrays_findMax2 for method Arrays.findMax2
Generating JC function Arrays_arrayShift for method Arrays.arrayShift
Generating JC function cons_Arrays for constructor Arrays
Done.
========== file tests/java/Arrays.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = None

logic Non_null_intM{Here}(intM[0..-1] x) =
(\offset_max(x) >= -1)

logic Non_null_Object{Here}(Object[0..] x) =
(\offset_max(x) == 0)

tag Object = {
}

tag String = Object with {
}

tag Throwable = Object with {
}

tag Arrays = Object with {
}

type Object = [Object]

type interface = [interface]

tag interface = {
}

tag intM = Object with {
  integer intP;
}

boolean non_null_intM(intM[0..-1] x)
behavior normal:
  ensures (if \result then (\offset_max(x) >= -1) else (x == null));
;

integer java_array_length_intM(intM[0..-1] x)
behavior non_null:
  assigns \nothing;
  ensures ((\result <= 2147483647) &&
            ((\result >= 0) && ((\result == (\offset_max(x) + 1)) && true)));
;

boolean non_null_Object(Object[0..] x)
behavior normal:
  ensures (if \result then (\offset_max(x) == 0) else (x == null));
;

logic is_max{L}(intM[0..] t, integer i, integer l) =
((Non_null_intM(t) && (((0 <= i) && (i < l)) && (l <= (\offset_max(t) + 1)))) &&
  (\forall integer j;
    (((0 <= j) && (j < l)) ==> ((t + j).intP <= (t + i).intP))))

exception Throwable of Throwable[0..]

integer Arrays_findMax(intM[0..] t_0)
  requires (K_13 : (Non_null_intM(t_0) &&
                     ((1 <= (\offset_max(t_0) + 1)) &&
                       ((\offset_max(t_0) + 1) <= 32767))));
behavior max_found:
  ensures (K_1 : (((0 <= \result) && (\result < (\offset_max(t_0) + 1))) &&
                   (\forall integer i_4;
                     (((0 <= i_4) && (i_4 < (\offset_max(t_0) + 1))) ==>
                       ((t_0 + i_4).intP <= (t_0 + \result).intP)))));
{  
   {  
      (var integer m_0 = (K_12 : (t_0 + 0).intP));
      
      {  
         (var integer r_0 = (K_11 : 0));
         
         {  
            {  
               {  
                  (var integer i_5 = (K_2 : 1));
                  
                  invariant (K_3 : (((((1 <= i_5) &&
                                        (i_5 <= (\offset_max(t_0) + 1))) &&
                                       ((0 <= r_0) &&
                                         (r_0 < (\offset_max(t_0) + 1)))) &&
                                      (m_0 == (t_0 + r_0).intP)) &&
                                     (\forall integer j_1;
                                       (((0 <= j_1) && (j_1 < i_5)) ==>
                                         ((t_0 + j_1).intP <= m_0)))));
                  variant (K_4 : ((\offset_max(t_0) + 1) - i_5));
                  for ( ; (K_10 : (i_5 < (K_9 : java_array_length_intM(t_0)))) ; 
                  (K_8 : (i_5 ++)))
                  {  (if (K_7 : ((K_6 : (t_0 + i_5).intP) > m_0)) then 
                     {  (r_0 = i_5);
                        (m_0 = (K_5 : (t_0 + i_5).intP))
                     } else ())
                  }
               }
            };
            
            (return r_0)
         }
      }
   }
}

integer Arrays_findMax2(intM[0..] t_1)
  requires (K_26 : (Non_null_intM(t_1) && ((\offset_max(t_1) + 1) >= 1)));
behavior max_found:
  ensures (K_14 : (((0 <= \result) && (\result < (\offset_max(t_1) + 1))) &&
                    is_max(t_1, \result, (\offset_max(t_1) + 1))));
{  
   {  
      (var integer m = (K_25 : (t_1 + 0).intP));
      
      {  
         (var integer r = (K_24 : 0));
         
         {  
            {  
               {  
                  (var integer i_3 = (K_15 : 1));
                  
                  invariant (K_16 : (((((1 <= i_3) &&
                                         (i_3 <= (\offset_max(t_1) + 1))) &&
                                        ((0 <= r) &&
                                          (r < (\offset_max(t_1) + 1)))) &&
                                       (m == (t_1 + r).intP)) &&
                                      is_max(t_1, r, i_3)));
                  variant (K_17 : ((\offset_max(t_1) + 1) - i_3));
                  for ( ; (K_23 : (i_3 <
                                    (K_22 : java_array_length_intM(t_1)))) ; 
                  (K_21 : (i_3 ++)))
                  {  (if (K_20 : ((K_19 : (t_1 + i_3).intP) > m)) then 
                     {  (r = i_3);
                        (m = (K_18 : (t_1 + i_3).intP))
                     } else ())
                  }
               }
            };
            
            (return r)
         }
      }
   }
}

unit Arrays_arrayShift(intM[0..] t_2)
  requires (K_37 : Non_null_intM(t_2));
behavior default:
  ensures (K_27 : (\forall integer i_0;
                    (((0 < i_0) && (i_0 < (\offset_max(t_2) + 1))) ==>
                      ((t_2 + i_0).intP == \at((t_2 + (i_0 - 1)).intP,Old)))));
{  
   {  
      {  
         (var integer j_0 = (K_29 : ((K_28 : java_array_length_intM(t_2)) -
                                      1)));
         
         invariant (K_30 : ((j_0 < (\offset_max(t_2) + 1)) &&
                             (((\offset_max(t_2) + 1) > 0) ==>
                               (((0 <= j_0) &&
                                  (\forall integer i_1;
                                    (((0 <= i_1) && (i_1 <= j_0)) ==>
                                      ((t_2 + i_1).intP ==
                                        \at((t_2 + i_1).intP,Pre))))) &&
                                 (\forall integer i_2;
                                   (((j_0 < i_2) &&
                                      (i_2 < (\offset_max(t_2) + 1))) ==>
                                     ((t_2 + i_2).intP ==
                                       \at((t_2 + (i_2 - 1)).intP,Pre))))))));
         variant (K_31 : j_0);
         for ( ; (K_36 : (j_0 > 0)) ; (K_35 : (j_0 --)))
         {  (K_34 : ((t_2 + j_0).intP = (K_33 : (t_2 + (K_32 : (j_0 - 1))).intP)))
         }
      }
   }
}

unit cons_Arrays(Arrays[0] this_0)
;

/*
LocalVariables:
mode: java
compile-command: "jessie -why-opt -split-user-conj -locs tests/java/Arrays.jloc tests/java/Arrays.jc && make -f tests/java/Arrays.makefile gui"
End:
*/
========== file tests/java/Arrays.jloc ==========
[K_10]
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 17
end = 29

[K_11]
file = "HOME/tests/java/Arrays.java"
line = 54
begin = 11
end = 12

[K_12]
file = "HOME/tests/java/Arrays.java"
line = 53
begin = 9
end = 13

[K_13]
file = "HOME/tests/java/Arrays.java"
line = 45
begin = 17
end = 52

[K_14]
file = "HOME/tests/java/Arrays.java"
line = 72
begin = 13
end = 80

[K_15]
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 12
end = 13

[Arrays_arrayShift]
name = "Method arrayShift"
file = "HOME/tests/java/Arrays.java"
line = 97
begin = 23
end = 33

[K_16]
file = "HOME/tests/java/Arrays.java"
line = 79
begin = 7
end = 90

[K_17]
file = "HOME/tests/java/Arrays.java"
line = 81
begin = 18
end = 28

[K_18]
file = "HOME/tests/java/Arrays.java"
line = 86
begin = 6
end = 10

[K_19]
file = "HOME/tests/java/Arrays.java"
line = 84
begin = 9
end = 13

[K_20]
file = "HOME/tests/java/Arrays.java"
line = 84
begin = 9
end = 17

[K_21]
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 29
end = 32

[K_22]
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 19
end = 27

[K_23]
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 15
end = 27

[K_24]
file = "HOME/tests/java/Arrays.java"
line = 77
begin = 9
end = 10

[K_1]
file = "HOME/tests/java/Arrays.java"
line = 48
begin = 13
end = 134

[K_25]
file = "HOME/tests/java/Arrays.java"
line = 76
begin = 9
end = 13

[K_2]
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 14
end = 15

[K_26]
file = "HOME/tests/java/Arrays.java"
line = 69
begin = 17
end = 43

[K_3]
file = "HOME/tests/java/Arrays.java"
line = 56
begin = 14
end = 129

[K_27]
file = "HOME/tests/java/Arrays.java"
line = 95
begin = 10
end = 70

[K_4]
file = "HOME/tests/java/Arrays.java"
line = 58
begin = 25
end = 35

[K_28]
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[K_5]
file = "HOME/tests/java/Arrays.java"
line = 63
begin = 6
end = 10

[K_29]
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 29

[K_6]
file = "HOME/tests/java/Arrays.java"
line = 61
begin = 9
end = 13

[K_7]
file = "HOME/tests/java/Arrays.java"
line = 61
begin = 9
end = 17

[K_8]
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 31
end = 34

[K_9]
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 21
end = 29

[K_30]
file = "HOME/tests/java/Arrays.java"
line = 99
begin = 7
end = 230

[K_31]
file = "HOME/tests/java/Arrays.java"
line = 104
begin = 18
end = 19

[K_32]
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 12
end = 15

[K_33]
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 10
end = 16

[K_34]
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 3
end = 16

[K_35]
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 40
end = 43

[K_36]
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 32
end = 37

[K_37]
file = "HOME/tests/java/Arrays.java"
line = 93
begin = 17
end = 26

[Arrays_findMax2]
name = "Method findMax2"
file = "HOME/tests/java/Arrays.java"
line = 75
begin = 22
end = 30

[cons_Arrays]
name = "Constructor of class Arrays"
file = "HOME/"
line = 0
begin = -1
end = -1

[Arrays_findMax]
name = "Method findMax"
file = "HOME/tests/java/Arrays.java"
line = 52
begin = 24
end = 31

========== jessie execution ==========
Generating Why function Arrays_findMax
Generating Why function Arrays_findMax2
Generating Why function Arrays_arrayShift
========== file tests/java/Arrays.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
export WHYLIB=WHYLIB

WHY=$(WHYEXEC) --no-arrays  -split-user-conj -explain -locs Arrays.loc

GWHY=$(GWHYEXEC) --no-arrays  -split-user-conj -explain -locs Arrays.loc

JESSIELIBFILE ?= HOME/lib/why/jessie.why

.PHONY: all coq pvs simplify cvcl harvey smtlib zenon

all: simplify/Arrays_why.sx

project: why/Arrays.wpr

why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) --project -dir why $(JESSIELIBFILE) why/$*.why

goals: why/Arrays_ctx.why

why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) --multi-why -dir why $(JESSIELIBFILE) why/$*.why

coq: coq/Arrays_why.vo

coq/Arrays_why.v: why/Arrays.why
	@echo 'why -coq-v8 [...] why/Arrays.why' &&$(WHY) -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" $(JESSIELIBFILE) why/Arrays.why

coq-goals: goals coq/Arrays_ctx_why.vo
	for f in why/Arrays_po*.why; do make -f Arrays.makefile coq/`basename $$f .why`_why.v ; done

coq/Arrays_ctx_why.v: why/Arrays_ctx.why
	@echo 'why -coq-v8 [...] why/Arrays_ctx.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition" why/Arrays_ctx.why

coq/%_why.v: why/%.why
	@echo 'why -coq-v8 [...] why/$*.why' &&$(WHY) -no-prelude -coq-v8 -dir coq -coq-preamble "Require Export Arrays_ctx_why." -coq-tactic "intuition" why/Arrays_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<

pvs: pvs/Arrays_why.pvs

pvs/%_why.pvs: why/%.why
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@jessie" $(JESSIELIBFILE) why/$*.why

pvs/jessie_why.pvs:
	$(WHY) -pvs -dir pvs -pvs-preamble "IMPORTING why@why" $(JESSIELIBFILE)

isabelle: isabelle/Arrays_why.thy

isabelle/%_why.thy: why/%.why
	$(WHY) -isabelle -dir isabelle -isabelle-base-theory jessie_why $(JESSIELIBFILE) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/Arrays_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) -simplify -no-simplify-prelude -dir simplify $(JESSIELIBFILE) why/$*.why

ergo: why/Arrays_why.why
	@echo 'Running Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: why/%.why
	@echo 'why --why [...] why/$*.why' && $(WHY) --why -dir why $(JESSIELIBFILE) why/$*.why

cvcl: cvcl/Arrays_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) -cvcl -dir cvcl $(JESSIELIBFILE) why/$*.why

harvey: harvey/Arrays_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) -harvey -dir harvey $(JESSIELIBFILE) why/$*.why

zenon: zenon/Arrays_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) -zenon -dir zenon $(JESSIELIBFILE) why/$*.why

smtlib: smtlib/Arrays_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) $^)

smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) -smtlib --encoding sstrat --exp goal -dir smtlib $(JESSIELIBFILE) why/$*.why

gui stat: Arrays.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILE) why/$*.why

-include Arrays.depend

depend: coq/Arrays_why.v
	-$(COQDEP) -I coq coq/Arrays*_why.v > Arrays.depend

clean:
	rm -f coq/*.vo

========== file tests/java/Arrays.loc ==========
[JC_40]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_41]
file = "HOME/tests/java/Arrays.java"
line = 69
begin = 17
end = 43

[JC_42]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_43]
file = "HOME/tests/java/Arrays.java"
line = 75
begin = 22
end = 30

[JC_44]
file = "HOME/tests/java/Arrays.java"
line = 72
begin = 13
end = 80

[JC_45]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 76
begin = 9
end = 13

[JC_46]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 76
begin = 9
end = 13

[JC_1]
file = "HOME/tests/java/Arrays.jc"
line = 35
begin = 8
end = 21

[JC_47]
file = "HOME/tests/java/Arrays.java"
line = 79
begin = 7
end = 90

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/java/Arrays.jc"
line = 35
begin = 8
end = 21

[JC_49]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 19
end = 27

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/java/Arrays.jc"
line = 35
begin = 8
end = 21

[JC_6]
file = "HOME/tests/java/Arrays.jc"
line = 35
begin = 8
end = 21

[JC_7]
file = "HOME/tests/java/Arrays.jc"
line = 40
begin = 8
end = 30

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/java/Arrays.jc"
line = 40
begin = 8
end = 30

[Arrays_arrayShift_safety]
name = "Method arrayShift"
behavior = "Safety"
file = "HOME/tests/java/Arrays.java"
line = 97
begin = 23
end = 33

[Arrays_arrayShift_ensures_default]
name = "Method arrayShift"
behavior = "Behavior"
file = "HOME/tests/java/Arrays.java"
line = 97
begin = 23
end = 33

[JC_50]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 19
end = 27

[JC_51]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 84
begin = 9
end = 13

[JC_52]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 86
begin = 6
end = 10

[JC_53]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 86
begin = 6
end = 10

[JC_54]
file = "HOME/tests/java/Arrays.java"
line = 81
begin = 18
end = 28

[JC_55]
file = "HOME/tests/java/Arrays.java"
line = 79
begin = 7
end = 90

[JC_56]
file = "HOME/"
line = 0
begin = -1
end = -1

[Arrays_findMax2_safety]
name = "Method findMax2"
behavior = "Safety"
file = "HOME/tests/java/Arrays.java"
line = 75
begin = 22
end = 30

[JC_57]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 83
begin = 19
end = 27

[JC_58]
file = "HOME/tests/java/Arrays.java"
line = 93
begin = 17
end = 26

[JC_59]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_60]
file = "HOME/tests/java/Arrays.java"
line = 93
begin = 17
end = 26

[JC_61]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_62]
file = "HOME/tests/java/Arrays.java"
line = 97
begin = 23
end = 33

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
file = "HOME/tests/java/Arrays.java"
line = 95
begin = 10
end = 70

[JC_11]
file = "HOME/tests/java/Arrays.jc"
line = 40
begin = 8
end = 30

[JC_64]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[JC_12]
file = "HOME/tests/java/Arrays.jc"
line = 40
begin = 8
end = 30

[JC_65]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[JC_13]
file = "HOME/tests/java/Arrays.jc"
line = 42
begin = 10
end = 18

[JC_66]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[JC_14]
file = "HOME/tests/java/Arrays.jc"
line = 47
begin = 8
end = 23

[JC_67]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/tests/java/Arrays.java"
line = 99
begin = 7
end = 230

[JC_16]
file = "HOME/tests/java/Arrays.jc"
line = 47
begin = 8
end = 23

[JC_69]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/tests/java/Arrays.jc"
line = 47
begin = 8
end = 23

[Arrays_findMax_ensures_max_found]
name = "Method findMax"
behavior = "Normal behavior `max_found'"
file = "HOME/tests/java/Arrays.java"
line = 52
begin = 24
end = 31

[JC_19]
file = "HOME/tests/java/Arrays.jc"
line = 47
begin = 8
end = 23

[JC_70]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 10
end = 16

[JC_71]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 10
end = 16

[JC_72]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 107
begin = 3
end = 16

[JC_20]
file = "HOME/tests/java/Arrays.java"
line = 45
begin = 17
end = 52

[JC_73]
file = "HOME/tests/java/Arrays.java"
line = 104
begin = 18
end = 19

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_74]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[Arrays_findMax_safety]
name = "Method findMax"
behavior = "Safety"
file = "HOME/tests/java/Arrays.java"
line = 52
begin = 24
end = 31

[JC_22]
file = "HOME/tests/java/Arrays.java"
line = 45
begin = 17
end = 52

[JC_75]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 106
begin = 19
end = 27

[JC_23]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_76]
file = "HOME/tests/java/Arrays.java"
line = 99
begin = 7
end = 230

[JC_24]
file = "HOME/tests/java/Arrays.java"
line = 52
begin = 24
end = 31

[JC_77]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_25]
file = "HOME/tests/java/Arrays.java"
line = 48
begin = 13
end = 134

[JC_78]
file = "HOME/"
line = 0
begin = -1
end = -1

[Arrays_findMax2_ensures_max_found]
name = "Method findMax2"
behavior = "Normal behavior `max_found'"
file = "HOME/tests/java/Arrays.java"
line = 75
begin = 22
end = 30

[JC_26]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 53
begin = 9
end = 13

[JC_79]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 53
begin = 9
end = 13

[JC_28]
file = "HOME/tests/java/Arrays.java"
line = 56
begin = 14
end = 129

[JC_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_80]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_81]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_82]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_30]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 21
end = 29

[JC_31]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 21
end = 29

[JC_32]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 61
begin = 9
end = 13

[JC_33]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 63
begin = 6
end = 10

[JC_34]
kind = IndexBounds
file = "HOME/tests/java/Arrays.java"
line = 63
begin = 6
end = 10

[JC_35]
file = "HOME/tests/java/Arrays.java"
line = 58
begin = 25
end = 35

[JC_36]
file = "HOME/tests/java/Arrays.java"
line = 56
begin = 14
end = 129

[JC_37]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
kind = UserCall
file = "HOME/tests/java/Arrays.java"
line = 60
begin = 21
end = 29

[JC_39]
file = "HOME/tests/java/Arrays.java"
line = 69
begin = 17
end = 43

========== file tests/java/why/Arrays.why ==========
type Object

type interface

logic Arrays_tag:  -> Object tag_id

logic Object_tag:  -> Object tag_id

axiom Arrays_parenttag_Object : parenttag(Arrays_tag, Object_tag)

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

predicate Non_null_Object(x_0:Object pointer,
 Object_alloc_table:Object alloc_table) =
 eq_int(offset_max(Object_alloc_table, x_0), (0))

predicate Non_null_intM(x:Object pointer,
 Object_alloc_table:Object alloc_table) =
 ge_int(offset_max(Object_alloc_table, x), neg_int((1)))

axiom Object_int : (int_of_tag(Object_tag) = (1))

axiom Object_parenttag_bottom : parenttag(Object_tag, bottom_tag)

axiom Object_tags :
 (forall x:Object pointer.
  (forall Object_tag_table:Object tag_table.
   instanceof(Object_tag_table, x, Object_tag)))

logic String_tag:  -> Object tag_id

axiom String_parenttag_Object : parenttag(String_tag, Object_tag)

exception Throwable_exc of Object pointer

logic Throwable_tag:  -> Object tag_id

axiom Throwable_parenttag_Object : parenttag(Throwable_tag, Object_tag)

logic intM_tag:  -> Object tag_id

axiom intM_parenttag_Object : parenttag(intM_tag, Object_tag)

logic interface_tag:  -> interface tag_id

axiom interface_int : (int_of_tag(interface_tag) = (1))

axiom interface_parenttag_bottom : parenttag(interface_tag, bottom_tag)

axiom interface_tags :
 (forall x:interface pointer.
  (forall interface_tag_table:interface tag_table.
   instanceof(interface_tag_table, x, interface_tag)))

predicate is_max(t:Object pointer,
 i:int,
 l:int,
 Object_alloc_table_at_L:Object alloc_table,
 intM_intP_at_L:(Object, int) memory) =
 (Non_null_intM(t, Object_alloc_table_at_L)
 and (le_int((0), i)
     and (lt_int(i, l)
         and (le_int(l, add_int(offset_max(Object_alloc_table_at_L, t), (1)))
             and (forall j:int.
                  ((le_int((0), j) and lt_int(j, l)) ->
                   le_int(select(intM_intP_at_L, shift(t, j)),
                   select(intM_intP_at_L, shift(t, i)))))))))

predicate valid_struct_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Arrays(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_String(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_Throwable(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_intM(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 valid_struct_Object(p, a, b, Object_alloc_table)

predicate valid_struct_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p:Object pointer,
 a:int,
 b:int,
 Object_alloc_table:Object alloc_table) =
 ((offset_min(Object_alloc_table, p) = a)
 and (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p:interface pointer,
 a:int,
 b:int,
 interface_alloc_table:interface alloc_table) =
 ((offset_min(interface_alloc_table, p) = a)
 and (offset_max(interface_alloc_table, p) = b))

parameter Object_alloc_table : Object alloc_table ref

parameter intM_intP : (Object, int) memory ref

parameter Arrays_arrayShift :
 t_2:Object pointer ->
  { } unit reads Object_alloc_table,intM_intP writes intM_intP
  { (JC_63:
    (forall i_0:int.
     ((lt_int((0), i_0)
      and lt_int(i_0, add_int(offset_max(Object_alloc_table, t_2), (1)))) ->
      eq_int(select(intM_intP, shift(t_2, i_0)),
      select(intM_intP@, shift(t_2@, sub_int(i_0@, (1)))))))) }

parameter Arrays_arrayShift_requires :
 t_2:Object pointer ->
  { (JC_58: Non_null_intM(t_2, Object_alloc_table))} unit
  reads Object_alloc_table,intM_intP writes intM_intP
  { (JC_63:
    (forall i_0:int.
     ((lt_int((0), i_0)
      and lt_int(i_0, add_int(offset_max(Object_alloc_table, t_2), (1)))) ->
      eq_int(select(intM_intP, shift(t_2, i_0)),
      select(intM_intP@, shift(t_2@, sub_int(i_0@, (1)))))))) }

parameter Arrays_findMax :
 t_0:Object pointer ->
  { } int reads Object_alloc_table,intM_intP
  { (JC_25:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_0), (1)))
        and (forall i_4:int.
             ((le_int((0), i_4)
              and lt_int(i_4,
                  add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
              le_int(select(intM_intP, shift(t_0, i_4)),
              select(intM_intP, shift(t_0, result)))))))) }

parameter Arrays_findMax2 :
 t_1:Object pointer ->
  { } int reads Object_alloc_table,intM_intP
  { (JC_44:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_1), (1)))
        and is_max(t_1, result,
            add_int(offset_max(Object_alloc_table, t_1), (1)),
            Object_alloc_table, intM_intP)))) }

parameter Arrays_findMax2_requires :
 t_1:Object pointer ->
  { (JC_39:
    (Non_null_intM(t_1, Object_alloc_table)
    and ge_int(add_int(offset_max(Object_alloc_table, t_1), (1)), (1))))}
  int reads Object_alloc_table,intM_intP
  { (JC_44:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_1), (1)))
        and is_max(t_1, result,
            add_int(offset_max(Object_alloc_table, t_1), (1)),
            Object_alloc_table, intM_intP)))) }

parameter Arrays_findMax_requires :
 t_0:Object pointer ->
  { (JC_20:
    (Non_null_intM(t_0, Object_alloc_table)
    and (le_int((1), add_int(offset_max(Object_alloc_table, t_0), (1)))
        and le_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
            (32767)))))}
  int reads Object_alloc_table,intM_intP
  { (JC_25:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_0), (1)))
        and (forall i_4:int.
             ((le_int((0), i_4)
              and lt_int(i_4,
                  add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
              le_int(select(intM_intP, shift(t_0, i_4)),
              select(intM_intP, shift(t_0, result)))))))) }

parameter Object_tag_table : Object tag_table ref

parameter alloc_struct_Arrays :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Arrays(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Arrays_tag)))) }

parameter alloc_struct_Arrays_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Arrays(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Arrays_tag)))) }

parameter alloc_struct_Object :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_Object_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Object(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Object_tag)))) }

parameter alloc_struct_String :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_String_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_String(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, String_tag)))) }

parameter alloc_struct_Throwable :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_Throwable_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_Throwable(result, (0), sub_int(n, (1)),
       Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, Throwable_tag)))) }

parameter alloc_struct_intM :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { } Object pointer writes Object_alloc_table,Object_tag_table
    { (valid_struct_intM(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter alloc_struct_intM_requires :
 n:int ->
  Object_alloc_table:Object alloc_table ref ->
   Object_tag_table:Object tag_table ref ->
    { ge_int(n, (0))} Object pointer
    writes Object_alloc_table,Object_tag_table
    { (valid_struct_intM(result, (0), sub_int(n, (1)), Object_alloc_table)
      and (alloc_extends(Object_alloc_table@, Object_alloc_table)
          and (alloc_fresh(Object_alloc_table@, result, n)
              and instanceof(Object_tag_table, result, intM_tag)))) }

parameter interface_alloc_table : interface alloc_table ref

parameter interface_tag_table : interface tag_table ref

parameter alloc_struct_interface :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { } interface pointer writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter alloc_struct_interface_requires :
 n:int ->
  interface_alloc_table:interface alloc_table ref ->
   interface_tag_table:interface tag_table ref ->
    { ge_int(n, (0))} interface pointer
    writes interface_alloc_table,interface_tag_table
    { (valid_struct_interface(result, (0), sub_int(n, (1)),
       interface_alloc_table)
      and (alloc_extends(interface_alloc_table@, interface_alloc_table)
          and (alloc_fresh(interface_alloc_table@, result, n)
              and instanceof(interface_tag_table, result, interface_tag)))) }

parameter cons_Arrays :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter cons_Arrays_requires :
 this_0:Object pointer -> { } unit reads Object_alloc_table { true }

parameter java_array_length_intM :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_12:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter java_array_length_intM_requires :
 x_2:Object pointer ->
  { } int reads Object_alloc_table
  { (JC_12:
    (le_int(result, (2147483647))
    and (ge_int(result, (0))
        and (eq_int(result,
             add_int(offset_max(Object_alloc_table, x_2), (1)))
            and (true = true))))) }

parameter non_null_Object :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_19:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_Object_requires :
 x_3:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_19:
    (if result
     then eq_int(offset_max(Object_alloc_table, x_3), (0))
     else (x_3 = null))) }

parameter non_null_intM :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_6:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

parameter non_null_intM_requires :
 x_1:Object pointer ->
  { } bool reads Object_alloc_table
  { (JC_6:
    (if result
     then ge_int(offset_max(Object_alloc_table, x_1), neg_int((1)))
     else (x_1 = null))) }

let Arrays_arrayShift_ensures_default =
 fun (t_2 : Object pointer) ->
  { (JC_60: Non_null_intM(t_2, Object_alloc_table)) }
  (init:
  try
   begin
     (let j_0 = ref (K_29:
                    ((sub_int (K_28:
                              (let jessie_50 = t_2 in
                              (JC_75: (java_array_length_intM jessie_50))))) (1))) in
     try
      while true do
      { invariant
          (JC_76:
          (lt_int(j_0, add_int(offset_max(Object_alloc_table, t_2), (1)))
          and (gt_int(add_int(offset_max(Object_alloc_table, t_2), (1)), (0)) ->
               (le_int((0), j_0)
               and ((forall i_1:int.
                     ((le_int((0), i_1) and le_int(i_1, j_0)) ->
                      eq_int(select(intM_intP, shift(t_2, i_1)),
                      select(intM_intP@init, shift(t_2@init, i_1@init)))))
                   and (forall i_2:int.
                        ((lt_int(j_0, i_2)
                         and lt_int(i_2,
                             add_int(offset_max(Object_alloc_table, t_2),
                             (1)))) ->
                         eq_int(select(intM_intP, shift(t_2, i_2)),
                         select(intM_intP@init,
                         shift(t_2@init, sub_int(i_2@init, (1))))))))))))
         }
       try
        (let jessie_57 = begin
                           (if (K_36: ((gt_int_ !j_0) (0)))
                           then
                            (let jessie_55 = (K_34:
                                             (let jessie_51 = (K_33:
                                                              ((safe_acc_ !intM_intP) 
                                                               ((shift t_2) 
                                                                (K_32:
                                                                ((sub_int !j_0) (1)))))) in
                                             (let jessie_54 = ((shift t_2) !j_0) in
                                             begin
                                               (((safe_upd_ intM_intP) jessie_54) jessie_51);
                                              jessie_51
                                             end))) in
                            void)
                           else
                            (let jessie_56 = (raise (Loop_exit_exc void)) in
                            void));
                          (raise (Loop_continue_exc void))
                         end in
        void)
        with
        Loop_continue_exc jessie_9 ->
        (let jessie_59 = (K_35:
                         (let jessie_7 = !j_0 in
                         begin
                           (let jessie_58 = (j_0 := ((sub_int jessie_7) (1))) in
                           void);
                          jessie_7
                         end)) in
        void) end
      done
      with
      Loop_exit_exc jessie_8 ->
      void end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_63:
    (forall i_0:int.
     ((lt_int((0), i_0)
      and lt_int(i_0, add_int(offset_max(Object_alloc_table, t_2), (1)))) ->
      eq_int(select(intM_intP, shift(t_2, i_0)),
      select(intM_intP@, shift(t_2@, sub_int(i_0@, (1)))))))) }

let Arrays_arrayShift_safety =
 fun (t_2 : Object pointer) ->
  { (JC_60: Non_null_intM(t_2, Object_alloc_table)) }
  (init:
  try
   begin
     (let j_0 = ref (K_29:
                    ((sub_int (K_28:
                              (let jessie_39 = t_2 in
                              (JC_67:
                              (assert
                              { ge_int(offset_max(Object_alloc_table,
                                       jessie_39),
                                (-1)) };
                              (JC_66:
                              (java_array_length_intM_requires jessie_39))))))) (1))) in
     try
      while true do
      { invariant
          (JC_68:
          (lt_int(j_0, add_int(offset_max(Object_alloc_table, t_2), (1)))
          and (gt_int(add_int(offset_max(Object_alloc_table, t_2), (1)), (0)) ->
               (le_int((0), j_0)
               and ((forall i_1:int.
                     ((le_int((0), i_1) and le_int(i_1, j_0)) ->
                      eq_int(select(intM_intP, shift(t_2, i_1)),
                      select(intM_intP@init, shift(t_2@init, i_1@init)))))
                   and (forall i_2:int.
                        ((lt_int(j_0, i_2)
                         and lt_int(i_2,
                             add_int(offset_max(Object_alloc_table, t_2),
                             (1)))) ->
                         eq_int(select(intM_intP, shift(t_2, i_2)),
                         select(intM_intP@init,
                         shift(t_2@init, sub_int(i_2@init, (1))))))))))))
        variant (JC_73 : j_0) }
       try
        (let jessie_46 = begin
                           (if (K_36: ((gt_int_ !j_0) (0)))
                           then
                            (let jessie_44 = (K_34:
                                             (let jessie_40 = (K_33:
                                                              (JC_71:
                                                              (((((lbound_acc_ !Object_alloc_table) !intM_intP) t_2) 
                                                                (K_32:
                                                                ((sub_int !j_0) (1)))) (0)))) in
                                             (let jessie_41 = t_2 in
                                             (let jessie_42 = !j_0 in
                                             (let jessie_43 = ((shift jessie_41) jessie_42) in
                                             begin
                                               (JC_72:
                                               ((((((lbound_upd_ !Object_alloc_table) intM_intP) jessie_41) jessie_42) (0)) jessie_40));
                                              jessie_40
                                             end))))) in
                            void)
                           else
                            (let jessie_45 = (raise (Loop_exit_exc void)) in
                            void));
                          (raise (Loop_continue_exc void))
                         end in
        void)
        with
        Loop_continue_exc jessie_9 ->
        (let jessie_48 = (K_35:
                         (let jessie_7 = !j_0 in
                         begin
                           (let jessie_47 = (j_0 := ((sub_int jessie_7) (1))) in
                           void);
                          jessie_7
                         end)) in
        void) end
      done
      with
      Loop_exit_exc jessie_8 ->
      void end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let Arrays_findMax2_ensures_max_found =
 fun (t_1 : Object pointer) ->
  { (JC_41:
    (Non_null_intM(t_1, Object_alloc_table)
    and ge_int(add_int(offset_max(Object_alloc_table, t_1), (1)), (1)))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let m = ref (K_25: ((safe_acc_ !intM_intP) ((shift t_1) (0)))) in
     (let r = ref (K_24: (0)) in
     begin
       (let i_3 = ref (K_15: (1)) in
       try
        while true do
        { invariant
            (JC_55:
            (le_int((1), i_3)
            and (le_int(i_3,
                 add_int(offset_max(Object_alloc_table, t_1), (1)))
                and (le_int((0), r)
                    and (lt_int(r,
                         add_int(offset_max(Object_alloc_table, t_1), (1)))
                        and (eq_int(m, select(intM_intP, shift(t_1, r)))
                            and is_max(t_1, r, i_3, Object_alloc_table,
                                intM_intP)))))))
           }
         try
          (let jessie_35 = begin
                             (if (K_23:
                                 ((lt_int_ !i_3) (K_22:
                                                 (let jessie_31 = t_1 in
                                                 (JC_57:
                                                 (java_array_length_intM jessie_31))))))
                             then
                              (if (K_20:
                                  ((gt_int_ (K_19:
                                            ((safe_acc_ !intM_intP) ((shift t_1) !i_3)))) !m))
                              then
                               (let jessie_33 = begin
                                                  (let jessie_32 = (r := !i_3) in
                                                  void);
                                                 (m := (K_18:
                                                       ((safe_acc_ !intM_intP) 
                                                        ((shift t_1) !i_3))));
                                                 !m
                                                end in
                               void)
                              else void)
                             else
                              (let jessie_34 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_37 = (K_21:
                           (let jessie_4 = !i_3 in
                           begin
                             (let jessie_36 = (i_3 := ((add_int jessie_4) (1))) in
                             void);
                            jessie_4
                           end)) in
          void) end
        done
        with
        Loop_exit_exc jessie_5 ->
        void end);
      (return := !r);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_44:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_1), (1)))
        and is_max(t_1, result,
            add_int(offset_max(Object_alloc_table, t_1), (1)),
            Object_alloc_table, intM_intP)))) }

let Arrays_findMax2_safety =
 fun (t_1 : Object pointer) ->
  { (JC_41:
    (Non_null_intM(t_1, Object_alloc_table)
    and ge_int(add_int(offset_max(Object_alloc_table, t_1), (1)), (1)))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let m = ref (K_25:
                  (JC_46:
                  ((((lsafe_lbound_acc_ !Object_alloc_table) !intM_intP) t_1) (0)))) in
     (let r = ref (K_24: (0)) in
     begin
       (let i_3 = ref (K_15: (1)) in
       try
        while true do
        { invariant
            (JC_47:
            (le_int((1), i_3)
            and (le_int(i_3,
                 add_int(offset_max(Object_alloc_table, t_1), (1)))
                and (le_int((0), r)
                    and (lt_int(r,
                         add_int(offset_max(Object_alloc_table, t_1), (1)))
                        and (eq_int(m, select(intM_intP, shift(t_1, r)))
                            and is_max(t_1, r, i_3, Object_alloc_table,
                                intM_intP)))))))
          variant (JC_54 : sub_int(add_int(offset_max(Object_alloc_table,
                                           t_1),
                                   (1)),
                           i_3)) }
         try
          (let jessie_28 = begin
                             (if (K_23:
                                 ((lt_int_ !i_3) (K_22:
                                                 (let jessie_24 = t_1 in
                                                 (JC_50:
                                                 (assert
                                                 { ge_int(offset_max(Object_alloc_table,
                                                          jessie_24),
                                                   (-1)) };
                                                 (JC_49:
                                                 (java_array_length_intM_requires jessie_24))))))))
                             then
                              (if (K_20:
                                  ((gt_int_ (K_19:
                                            (JC_51:
                                            (((((lbound_acc_ !Object_alloc_table) !intM_intP) t_1) !i_3) (0))))) !m))
                              then
                               (let jessie_26 = begin
                                                  (let jessie_25 = (r := !i_3) in
                                                  void);
                                                 (m := (K_18:
                                                       (JC_53:
                                                       (((((lbound_acc_ !Object_alloc_table) !intM_intP) t_1) !i_3) (0)))));
                                                 !m
                                                end in
                               void)
                              else void)
                             else
                              (let jessie_27 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_6 ->
          (let jessie_30 = (K_21:
                           (let jessie_4 = !i_3 in
                           begin
                             (let jessie_29 = (i_3 := ((add_int jessie_4) (1))) in
                             void);
                            jessie_4
                           end)) in
          void) end
        done
        with
        Loop_exit_exc jessie_5 ->
        void end);
      (return := !r);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }

let Arrays_findMax_ensures_max_found =
 fun (t_0 : Object pointer) ->
  { (JC_22:
    (Non_null_intM(t_0, Object_alloc_table)
    and (le_int((1), add_int(offset_max(Object_alloc_table, t_0), (1)))
        and le_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
            (32767))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let m_0 = ref (K_12: ((safe_acc_ !intM_intP) ((shift t_0) (0)))) in
     (let r_0 = ref (K_11: (0)) in
     begin
       (let i_5 = ref (K_2: (1)) in
       try
        while true do
        { invariant
            (JC_36:
            (le_int((1), i_5)
            and (le_int(i_5,
                 add_int(offset_max(Object_alloc_table, t_0), (1)))
                and (le_int((0), r_0)
                    and (lt_int(r_0,
                         add_int(offset_max(Object_alloc_table, t_0), (1)))
                        and (eq_int(m_0, select(intM_intP, shift(t_0, r_0)))
                            and (forall j_1:int.
                                 ((le_int((0), j_1) and lt_int(j_1, i_5)) ->
                                  le_int(select(intM_intP, shift(t_0, j_1)),
                                  m_0)))))))))
           }
         try
          (let jessie_21 = begin
                             (if (K_10:
                                 ((lt_int_ !i_5) (K_9:
                                                 (let jessie_17 = t_0 in
                                                 (JC_38:
                                                 (java_array_length_intM jessie_17))))))
                             then
                              (if (K_7:
                                  ((gt_int_ (K_6:
                                            ((safe_acc_ !intM_intP) ((shift t_0) !i_5)))) !m_0))
                              then
                               (let jessie_19 = begin
                                                  (let jessie_18 = (r_0 := !i_5) in
                                                  void);
                                                 (m_0 := (K_5:
                                                         ((safe_acc_ !intM_intP) 
                                                          ((shift t_0) !i_5))));
                                                 !m_0
                                                end in
                               void)
                              else void)
                             else
                              (let jessie_20 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          (let jessie_23 = (K_8:
                           (let jessie_1 = !i_5 in
                           begin
                             (let jessie_22 = (i_5 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        done
        with
        Loop_exit_exc jessie_2 ->
        void end);
      (return := !r_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { (JC_25:
    (le_int((0), result)
    and (lt_int(result, add_int(offset_max(Object_alloc_table, t_0), (1)))
        and (forall i_4:int.
             ((le_int((0), i_4)
              and lt_int(i_4,
                  add_int(offset_max(Object_alloc_table, t_0), (1)))) ->
              le_int(select(intM_intP, shift(t_0, i_4)),
              select(intM_intP, shift(t_0, result)))))))) }

let Arrays_findMax_safety =
 fun (t_0 : Object pointer) ->
  { (JC_22:
    (Non_null_intM(t_0, Object_alloc_table)
    and (le_int((1), add_int(offset_max(Object_alloc_table, t_0), (1)))
        and le_int(add_int(offset_max(Object_alloc_table, t_0), (1)),
            (32767))))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let m_0 = ref (K_12:
                    (JC_27:
                    ((((lsafe_lbound_acc_ !Object_alloc_table) !intM_intP) t_0) (0)))) in
     (let r_0 = ref (K_11: (0)) in
     begin
       (let i_5 = ref (K_2: (1)) in
       try
        while true do
        { invariant
            (JC_28:
            (le_int((1), i_5)
            and (le_int(i_5,
                 add_int(offset_max(Object_alloc_table, t_0), (1)))
                and (le_int((0), r_0)
                    and (lt_int(r_0,
                         add_int(offset_max(Object_alloc_table, t_0), (1)))
                        and (eq_int(m_0, select(intM_intP, shift(t_0, r_0)))
                            and (forall j_1:int.
                                 ((le_int((0), j_1) and lt_int(j_1, i_5)) ->
                                  le_int(select(intM_intP, shift(t_0, j_1)),
                                  m_0)))))))))
          variant (JC_35 : sub_int(add_int(offset_max(Object_alloc_table,
                                           t_0),
                                   (1)),
                           i_5)) }
         try
          (let jessie_14 = begin
                             (if (K_10:
                                 ((lt_int_ !i_5) (K_9:
                                                 (let jessie_10 = t_0 in
                                                 (JC_31:
                                                 (assert
                                                 { ge_int(offset_max(Object_alloc_table,
                                                          jessie_10),
                                                   (-1)) };
                                                 (JC_30:
                                                 (java_array_length_intM_requires jessie_10))))))))
                             then
                              (if (K_7:
                                  ((gt_int_ (K_6:
                                            (JC_32:
                                            (((((lbound_acc_ !Object_alloc_table) !intM_intP) t_0) !i_5) (0))))) !m_0))
                              then
                               (let jessie_12 = begin
                                                  (let jessie_11 = (r_0 := !i_5) in
                                                  void);
                                                 (m_0 := (K_5:
                                                         (JC_34:
                                                         (((((lbound_acc_ !Object_alloc_table) !intM_intP) t_0) !i_5) (0)))));
                                                 !m_0
                                                end in
                               void)
                              else void)
                             else
                              (let jessie_13 = (raise (Loop_exit_exc void)) in
                              void));
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          (let jessie_16 = (K_8:
                           (let jessie_1 = !i_5 in
                           begin
                             (let jessie_15 = (i_5 := ((add_int jessie_1) (1))) in
                             void);
                            jessie_1
                           end)) in
          void) end
        done
        with
        Loop_exit_exc jessie_2 ->
        void end);
      (return := !r_0);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !return end))
  { true }


========== make project execution ==========
why --project [...] why/Arrays.why
========== file tests/java/why/Arrays.wpr ==========
<project name="Arrays" context="why/Arrays_ctx.why">
  <function name="Method findMax2">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Arrays_po44.why">
      <location file = "HOME/tests/java/Arrays.java" line = "76" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po45.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po46.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po47.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po48.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po49.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po50.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po51.why">
      <location file = "why/Arrays.why" line = "679" begin = "51" end = "215"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Arrays_po52.why">
      <location file = "HOME/tests/java/Arrays.java" line = "84" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po53.why">
      <location file = "HOME/tests/java/Arrays.java" line = "84" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po54.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po55.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po56.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po57.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po58.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po59.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po60.why">
      <location file = "HOME/tests/java/Arrays.java" line = "81" begin = "18" end = "28"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po61.why">
      <location file = "HOME/tests/java/Arrays.java" line = "81" begin = "18" end = "28"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po62.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po63.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po64.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po65.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po66.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po67.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po68.why">
      <location file = "HOME/tests/java/Arrays.java" line = "81" begin = "18" end = "28"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po69.why">
      <location file = "HOME/tests/java/Arrays.java" line = "81" begin = "18" end = "28"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `max_found'">
    <goal why_file="why/Arrays_po23.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po24.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po25.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po26.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po27.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po28.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po29.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po30.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po31.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po32.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po33.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po34.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po35.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po36.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po37.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po38.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po39.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po40.why">
      <location file = "HOME/tests/java/Arrays.java" line = "79" begin = "7" end = "90"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po41.why">
      <location file = "HOME/tests/java/Arrays.java" line = "72" begin = "13" end = "80"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Arrays_po42.why">
      <location file = "HOME/tests/java/Arrays.java" line = "72" begin = "13" end = "80"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Arrays_po43.why">
      <location file = "HOME/tests/java/Arrays.java" line = "72" begin = "13" end = "80"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method findMax">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Arrays_po91.why">
      <location file = "HOME/tests/java/Arrays.java" line = "53" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po92.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po93.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po94.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po95.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po96.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po97.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po98.why">
      <location file = "why/Arrays.why" line = "864" begin = "51" end = "215"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Arrays_po99.why">
      <location file = "HOME/tests/java/Arrays.java" line = "61" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po100.why">
      <location file = "HOME/tests/java/Arrays.java" line = "61" begin = "9" end = "13"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po101.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po102.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po103.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po104.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po105.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po106.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po107.why">
      <location file = "HOME/tests/java/Arrays.java" line = "58" begin = "25" end = "35"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po108.why">
      <location file = "HOME/tests/java/Arrays.java" line = "58" begin = "25" end = "35"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po109.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po110.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po111.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po112.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po113.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po114.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po115.why">
      <location file = "HOME/tests/java/Arrays.java" line = "58" begin = "25" end = "35"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po116.why">
      <location file = "HOME/tests/java/Arrays.java" line = "58" begin = "25" end = "35"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Normal behavior `max_found'">
    <goal why_file="why/Arrays_po70.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po71.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po72.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po73.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po74.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po75.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po76.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po77.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po78.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po79.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po80.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po81.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po82.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po83.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po84.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po85.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po86.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po87.why">
      <location file = "HOME/tests/java/Arrays.java" line = "56" begin = "14" end = "129"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po88.why">
      <location file = "HOME/tests/java/Arrays.java" line = "48" begin = "13" end = "134"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Arrays_po89.why">
      <location file = "HOME/tests/java/Arrays.java" line = "48" begin = "13" end = "134"/>
      <explain kind = "Post"/>
    </goal>
    <goal why_file="why/Arrays_po90.why">
      <location file = "HOME/tests/java/Arrays.java" line = "48" begin = "13" end = "134"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
  <function name="Method arrayShift">
    <location file = "" line = "0" begin = "0" end = "0"/>
    <behavior name="Safety">
    <goal why_file="why/Arrays_po9.why">
      <location file = "why/Arrays.why" line = "485" begin = "32" end = "158"/>
      <explain kind = "Assert"/>
    </goal>
    <goal why_file="why/Arrays_po10.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po11.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po12.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po13.why">
      <location file = "HOME/tests/java/Arrays.java" line = "107" begin = "10" end = "16"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po14.why">
      <location file = "HOME/tests/java/Arrays.java" line = "107" begin = "10" end = "16"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po15.why">
      <location file = "HOME/tests/java/Arrays.java" line = "107" begin = "3" end = "16"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po16.why">
      <location file = "HOME/tests/java/Arrays.java" line = "107" begin = "3" end = "16"/>
      <explain kind = "Pre"
text = ""/>
    </goal>
    <goal why_file="why/Arrays_po17.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po18.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po19.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po20.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po21.why">
      <location file = "HOME/tests/java/Arrays.java" line = "104" begin = "18" end = "19"/>
      <explain kind = "VarDecr"/>
    </goal>
    <goal why_file="why/Arrays_po22.why">
      <location file = "HOME/tests/java/Arrays.java" line = "104" begin = "18" end = "19"/>
      <explain kind = "VarDecr"/>
    </goal>
    </behavior>
    <behavior name="Behavior">
    <goal why_file="why/Arrays_po1.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po2.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po3.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvInit"/>
    </goal>
    <goal why_file="why/Arrays_po4.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po5.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po6.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po7.why">
      <location file = "HOME/tests/java/Arrays.java" line = "99" begin = "7" end = "230"/>
      <explain kind = "LoopInvPreserv"/>
    </goal>
    <goal why_file="why/Arrays_po8.why">
      <location file = "HOME/tests/java/Arrays.java" line = "95" begin = "10" end = "70"/>
      <explain kind = "Post"/>
    </goal>
    </behavior>
  </function>
</project>
========== file tests/java/why/Arrays_ctx.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)]. (offset_min(a,
        p) <= (s * offset_min_bytes(a, p, s))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)]. ((((s * offset_max_bytes(a,
        p, s)) + s) - 1) <= offset_max(a, p)))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

logic Arrays_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Arrays_parenttag_Object: parenttag(Arrays_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_max(t: Object pointer, i: int, l: int,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int) memory) =
  (Non_null_intM(t, Object_alloc_table_at_L) and
   ((0 <= i) and
    ((i < l) and
     ((l <= (offset_max(Object_alloc_table_at_L, t) + 1)) and
      (forall j:int.
        (((0 <= j) and (j < l)) -> (select(intM_intP_at_L, shift(t,
         j)) <= select(intM_intP_at_L, shift(t, i)))))))))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Arrays(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

========== file tests/java/why/Arrays_po1.why ==========
goal Arrays_arrayShift_ensures_default_po_1:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ("JC_76": ((result - 1) < (offset_max(Object_alloc_table, t_2) + 1)))

========== file tests/java/why/Arrays_po10.why ==========
goal Arrays_arrayShift_safety_po_2:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ("JC_68": ((result - 1) < (offset_max(Object_alloc_table, t_2) + 1)))

========== file tests/java/why/Arrays_po100.why ==========
goal Arrays_findMax_safety_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  (i_5 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/Arrays_po101.why ==========
goal Arrays_findMax_safety_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (1 <= i_5_0))

========== file tests/java/why/Arrays_po102.why ==========
goal Arrays_findMax_safety_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po103.why ==========
goal Arrays_findMax_safety_po_13:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (0 <= r_0_0))

========== file tests/java/why/Arrays_po104.why ==========
goal Arrays_findMax_safety_po_14:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (r_0_0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po105.why ==========
goal Arrays_findMax_safety_po_15:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (m_0_0 = select(intM_intP, shift(t_0, r_0_0))))

========== file tests/java/why/Arrays_po106.why ==========
goal Arrays_findMax_safety_po_16:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= m_0_0))

========== file tests/java/why/Arrays_po107.why ==========
goal Arrays_findMax_safety_po_17:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (0 <= ("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5)))

========== file tests/java/why/Arrays_po108.why ==========
goal Arrays_findMax_safety_po_18:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5_0)) < ("JC_35":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_0) + 1) - i_5)))

========== file tests/java/why/Arrays_po109.why ==========
goal Arrays_findMax_safety_po_19:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (1 <= i_5_0))

========== file tests/java/why/Arrays_po11.why ==========
goal Arrays_arrayShift_safety_po_3:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_68": (0 <= (result - 1)))

========== file tests/java/why/Arrays_po110.why ==========
goal Arrays_findMax_safety_po_20:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po111.why ==========
goal Arrays_findMax_safety_po_21:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (0 <= r_0))

========== file tests/java/why/Arrays_po112.why ==========
goal Arrays_findMax_safety_po_22:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (r_0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po113.why ==========
goal Arrays_findMax_safety_po_23:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (m_0 = select(intM_intP, shift(t_0, r_0))))

========== file tests/java/why/Arrays_po114.why ==========
goal Arrays_findMax_safety_po_24:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= m_0))

========== file tests/java/why/Arrays_po115.why ==========
goal Arrays_findMax_safety_po_25:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (0 <= ("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5)))

========== file tests/java/why/Arrays_po116.why ==========
goal Arrays_findMax_safety_po_26:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5_0)) < ("JC_35":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_0) + 1) - i_5)))

========== file tests/java/why/Arrays_po12.why ==========
goal Arrays_arrayShift_safety_po_4:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  (((result - 1) < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_68": (select(intM_intP, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

========== file tests/java/why/Arrays_po13.why ==========
goal Arrays_arrayShift_safety_po_5:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  (0 <= (j_0 - 1))

========== file tests/java/why/Arrays_po14.why ==========
goal Arrays_arrayShift_safety_po_6:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))

========== file tests/java/why/Arrays_po15.why ==========
goal Arrays_arrayShift_safety_po_7:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  (0 <= j_0)

========== file tests/java/why/Arrays_po16.why ==========
goal Arrays_arrayShift_safety_po_8:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  (j_0 <= offset_max(Object_alloc_table, t_2))

========== file tests/java/why/Arrays_po17.why ==========
goal Arrays_arrayShift_safety_po_9:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ("JC_68": (j_0_0 < (offset_max(Object_alloc_table, t_2) + 1)))

========== file tests/java/why/Arrays_po18.why ==========
goal Arrays_arrayShift_safety_po_10:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_68": (0 <= j_0_0))

========== file tests/java/why/Arrays_po19.why ==========
goal Arrays_arrayShift_safety_po_11:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_1:int.
  ((0 <= i_1) and (i_1 <= j_0_0)) ->
  ("JC_68": (select(intM_intP1, shift(t_2, i_1)) = select(intM_intP,
  shift(t_2, i_1))))

========== file tests/java/why/Arrays_po2.why ==========
goal Arrays_arrayShift_ensures_default_po_2:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_76": (0 <= (result - 1)))

========== file tests/java/why/Arrays_po20.why ==========
goal Arrays_arrayShift_safety_po_12:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  ((j_0_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_68": (select(intM_intP1, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

========== file tests/java/why/Arrays_po21.why ==========
goal Arrays_arrayShift_safety_po_13:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  (0 <= ("JC_73": j_0))

========== file tests/java/why/Arrays_po22.why ==========
goal Arrays_arrayShift_safety_po_14:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  (("JC_73": j_0_0) < ("JC_73": j_0))

========== file tests/java/why/Arrays_po23.why ==========
goal Arrays_findMax2_ensures_max_found_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (1 <= 1))

========== file tests/java/why/Arrays_po24.why ==========
goal Arrays_findMax2_ensures_max_found_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (1 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po25.why ==========
goal Arrays_findMax2_ensures_max_found_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (0 <= 0))

========== file tests/java/why/Arrays_po26.why ==========
goal Arrays_findMax2_ensures_max_found_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (0 < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po27.why ==========
goal Arrays_findMax2_ensures_max_found_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (result = select(intM_intP, shift(t_1, 0))))

========== file tests/java/why/Arrays_po28.why ==========
goal Arrays_findMax2_ensures_max_found_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": is_max(t_1, 0, 1, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po29.why ==========
goal Arrays_findMax2_ensures_max_found_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (1 <= i_3_0))

========== file tests/java/why/Arrays_po3.why ==========
goal Arrays_arrayShift_ensures_default_po_3:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  (((result - 1) < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_76": (select(intM_intP, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

========== file tests/java/why/Arrays_po30.why ==========
goal Arrays_findMax2_ensures_max_found_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po31.why ==========
goal Arrays_findMax2_ensures_max_found_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (0 <= r0))

========== file tests/java/why/Arrays_po32.why ==========
goal Arrays_findMax2_ensures_max_found_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (r0 < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po33.why ==========
goal Arrays_findMax2_ensures_max_found_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (m0 = select(intM_intP, shift(t_1, r0))))

========== file tests/java/why/Arrays_po34.why ==========
goal Arrays_findMax2_ensures_max_found_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": is_max(t_1, r0, i_3_0, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po35.why ==========
goal Arrays_findMax2_ensures_max_found_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (1 <= i_3_0))

========== file tests/java/why/Arrays_po36.why ==========
goal Arrays_findMax2_ensures_max_found_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po37.why ==========
goal Arrays_findMax2_ensures_max_found_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (0 <= r))

========== file tests/java/why/Arrays_po38.why ==========
goal Arrays_findMax2_ensures_max_found_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (r < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po39.why ==========
goal Arrays_findMax2_ensures_max_found_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (m = select(intM_intP, shift(t_1, r))))

========== file tests/java/why/Arrays_po4.why ==========
goal Arrays_arrayShift_ensures_default_po_4:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ("JC_76": (j_0_0 < (offset_max(Object_alloc_table, t_2) + 1)))

========== file tests/java/why/Arrays_po40.why ==========
goal Arrays_findMax2_ensures_max_found_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": is_max(t_1, r, i_3_0, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po41.why ==========
goal Arrays_findMax2_ensures_max_found_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": (0 <= return))

========== file tests/java/why/Arrays_po42.why ==========
goal Arrays_findMax2_ensures_max_found_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": (return < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po43.why ==========
goal Arrays_findMax2_ensures_max_found_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": is_max(t_1, return, (offset_max(Object_alloc_table, t_1) + 1),
  Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po44.why ==========
goal Arrays_findMax2_safety_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1))

========== file tests/java/why/Arrays_po45.why ==========
goal Arrays_findMax2_safety_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (1 <= 1))

========== file tests/java/why/Arrays_po46.why ==========
goal Arrays_findMax2_safety_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (1 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po47.why ==========
goal Arrays_findMax2_safety_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (0 <= 0))

========== file tests/java/why/Arrays_po48.why ==========
goal Arrays_findMax2_safety_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (0 < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po49.why ==========
goal Arrays_findMax2_safety_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (result = select(intM_intP, shift(t_1, 0))))

========== file tests/java/why/Arrays_po5.why ==========
goal Arrays_arrayShift_ensures_default_po_5:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_76": (0 <= j_0_0))

========== file tests/java/why/Arrays_po50.why ==========
goal Arrays_findMax2_safety_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": is_max(t_1, 0, 1, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po51.why ==========
goal Arrays_findMax2_safety_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1))

========== file tests/java/why/Arrays_po52.why ==========
goal Arrays_findMax2_safety_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  (0 <= i_3)

========== file tests/java/why/Arrays_po53.why ==========
goal Arrays_findMax2_safety_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  (i_3 <= offset_max(Object_alloc_table, t_1))

========== file tests/java/why/Arrays_po54.why ==========
goal Arrays_findMax2_safety_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (1 <= i_3_0))

========== file tests/java/why/Arrays_po55.why ==========
goal Arrays_findMax2_safety_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po56.why ==========
goal Arrays_findMax2_safety_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (0 <= r0))

========== file tests/java/why/Arrays_po57.why ==========
goal Arrays_findMax2_safety_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (r0 < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po58.why ==========
goal Arrays_findMax2_safety_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (m0 = select(intM_intP, shift(t_1, r0))))

========== file tests/java/why/Arrays_po59.why ==========
goal Arrays_findMax2_safety_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": is_max(t_1, r0, i_3_0, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po6.why ==========
goal Arrays_arrayShift_ensures_default_po_6:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_1:int.
  ((0 <= i_1) and (i_1 <= j_0_0)) ->
  ("JC_76": (select(intM_intP1, shift(t_2, i_1)) = select(intM_intP,
  shift(t_2, i_1))))

========== file tests/java/why/Arrays_po60.why ==========
goal Arrays_findMax2_safety_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3)))

========== file tests/java/why/Arrays_po61.why ==========
goal Arrays_findMax2_safety_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3_0)) < ("JC_54":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_1) + 1) - i_3)))

========== file tests/java/why/Arrays_po62.why ==========
goal Arrays_findMax2_safety_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (1 <= i_3_0))

========== file tests/java/why/Arrays_po63.why ==========
goal Arrays_findMax2_safety_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po64.why ==========
goal Arrays_findMax2_safety_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (0 <= r))

========== file tests/java/why/Arrays_po65.why ==========
goal Arrays_findMax2_safety_po_22:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (r < (offset_max(Object_alloc_table, t_1) + 1)))

========== file tests/java/why/Arrays_po66.why ==========
goal Arrays_findMax2_safety_po_23:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (m = select(intM_intP, shift(t_1, r))))

========== file tests/java/why/Arrays_po67.why ==========
goal Arrays_findMax2_safety_po_24:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": is_max(t_1, r, i_3_0, Object_alloc_table, intM_intP))

========== file tests/java/why/Arrays_po68.why ==========
goal Arrays_findMax2_safety_po_25:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3)))

========== file tests/java/why/Arrays_po69.why ==========
goal Arrays_findMax2_safety_po_26:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3_0)) < ("JC_54":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_1) + 1) - i_3)))

========== file tests/java/why/Arrays_po7.why ==========
goal Arrays_arrayShift_ensures_default_po_7:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  ((j_0_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_76": (select(intM_intP1, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

========== file tests/java/why/Arrays_po70.why ==========
goal Arrays_findMax_ensures_max_found_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (1 <= 1))

========== file tests/java/why/Arrays_po71.why ==========
goal Arrays_findMax_ensures_max_found_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (1 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po72.why ==========
goal Arrays_findMax_ensures_max_found_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (0 <= 0))

========== file tests/java/why/Arrays_po73.why ==========
goal Arrays_findMax_ensures_max_found_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po74.why ==========
goal Arrays_findMax_ensures_max_found_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (result = select(intM_intP, shift(t_0, 0))))

========== file tests/java/why/Arrays_po75.why ==========
goal Arrays_findMax_ensures_max_found_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < 1)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= result))

========== file tests/java/why/Arrays_po76.why ==========
goal Arrays_findMax_ensures_max_found_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (1 <= i_5_0))

========== file tests/java/why/Arrays_po77.why ==========
goal Arrays_findMax_ensures_max_found_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po78.why ==========
goal Arrays_findMax_ensures_max_found_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (0 <= r_0_0))

========== file tests/java/why/Arrays_po79.why ==========
goal Arrays_findMax_ensures_max_found_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (r_0_0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po8.why ==========
goal Arrays_arrayShift_ensures_default_po_8:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 <= 0) ->
  forall i_0:int.
  ((0 < i_0) and (i_0 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_63": (select(intM_intP0, shift(t_2, i_0)) = select(intM_intP,
  shift(t_2, (i_0 - 1)))))

========== file tests/java/why/Arrays_po80.why ==========
goal Arrays_findMax_ensures_max_found_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (m_0_0 = select(intM_intP, shift(t_0, r_0_0))))

========== file tests/java/why/Arrays_po81.why ==========
goal Arrays_findMax_ensures_max_found_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= m_0_0))

========== file tests/java/why/Arrays_po82.why ==========
goal Arrays_findMax_ensures_max_found_po_13:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (1 <= i_5_0))

========== file tests/java/why/Arrays_po83.why ==========
goal Arrays_findMax_ensures_max_found_po_14:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po84.why ==========
goal Arrays_findMax_ensures_max_found_po_15:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (0 <= r_0))

========== file tests/java/why/Arrays_po85.why ==========
goal Arrays_findMax_ensures_max_found_po_16:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (r_0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po86.why ==========
goal Arrays_findMax_ensures_max_found_po_17:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (m_0 = select(intM_intP, shift(t_0, r_0))))

========== file tests/java/why/Arrays_po87.why ==========
goal Arrays_findMax_ensures_max_found_po_18:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= m_0))

========== file tests/java/why/Arrays_po88.why ==========
goal Arrays_findMax_ensures_max_found_po_19:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  ("JC_25": (0 <= return))

========== file tests/java/why/Arrays_po89.why ==========
goal Arrays_findMax_ensures_max_found_po_20:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  ("JC_25": (return < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po9.why ==========
goal Arrays_arrayShift_safety_po_1:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1))

========== file tests/java/why/Arrays_po90.why ==========
goal Arrays_findMax_ensures_max_found_po_21:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  forall i_4:int.
  ((0 <= i_4) and (i_4 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_25": (select(intM_intP, shift(t_0, i_4)) <= select(intM_intP,
  shift(t_0, return))))

========== file tests/java/why/Arrays_po91.why ==========
goal Arrays_findMax_safety_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0))

========== file tests/java/why/Arrays_po92.why ==========
goal Arrays_findMax_safety_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (1 <= 1))

========== file tests/java/why/Arrays_po93.why ==========
goal Arrays_findMax_safety_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (1 <= (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po94.why ==========
goal Arrays_findMax_safety_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (0 <= 0))

========== file tests/java/why/Arrays_po95.why ==========
goal Arrays_findMax_safety_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (0 < (offset_max(Object_alloc_table, t_0) + 1)))

========== file tests/java/why/Arrays_po96.why ==========
goal Arrays_findMax_safety_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (result = select(intM_intP, shift(t_0, 0))))

========== file tests/java/why/Arrays_po97.why ==========
goal Arrays_findMax_safety_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < 1)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= result))

========== file tests/java/why/Arrays_po98.why ==========
goal Arrays_findMax_safety_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1))

========== file tests/java/why/Arrays_po99.why ==========
goal Arrays_findMax_safety_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  (0 <= i_5)

========== generation of Simplify VC output ==========
why -simplify [...] why/Arrays.why
========== file tests/java/simplify/Arrays_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(BG_PUSH
 ;; Why axiom div_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) a)))))

(BG_PUSH
 ;; Why axiom div_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= a (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (<= (- 0 a) (int_div a b)) (<= (int_div a b) 0)))))

(BG_PUSH
 ;; Why axiom div_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (<= 0 (int_div a b)) (<= (int_div a b) (- 0 a))))))

(BG_PUSH
 ;; Why axiom mod_positive_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_positive
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< 0 b))
 (AND (<= 0 (int_mod a b)) (< (int_mod a b) b)))))

(BG_PUSH
 ;; Why axiom mod_positive_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= 0 a) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(BG_PUSH
 ;; Why axiom mod_negative_by_negative
 (FORALL (a b)
 (IMPLIES (AND (<= a 0) (< b 0))
 (AND (< (- 0 b) (int_mod a b)) (<= (int_mod a b) 0)))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_positive
 (FORALL (p) (<= 0 (address p))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i)
 (IMPLIES (same_block p q)
 (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (same_block p q)
 (FORALL (i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i)
 (IMPLIES (same_block p q)
 (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

 (FORALL (p q)
 (IMPLIES (same_block p q)
 (FORALL (i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom offset_min_bytes_def
 (FORALL (a p s) (<= (offset_min a p) (* s (offset_min_bytes a p s)))))

(BG_PUSH
 ;; Why axiom offset_max_bytes_def
 (FORALL (a p s)
 (<= (- (+ (* s (offset_max_bytes a p s)) s) 1) (offset_max a p))))

(BG_PUSH
 ;; Why axiom select_store_eq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))

 (FORALL (o1 s1 o2 s2)
 (IMPLIES (AND (EQ o1 o2) (EQ s1 s2))
 (FORALL (v1 v2) (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2) v2)))))

(BG_PUSH
 ;; Why axiom select_store_neq_union
 (FORALL (o1 s1 o2 s2 v1 v2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))

 (FORALL (o1 o2 s2)
 (IMPLIES (OR (<= (+ o2 s2) o1) (<= (+ o1 s2) o2))
 (FORALL (s1 v1 v2)
 (EQ (extract_bytes (replace_bytes v1 o1 s1 v2) o2 s2)
 (extract_bytes v1 o2 s2))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_up
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o1 (+ s1 s2) (concat_bitvector v2 v3)))))))

(BG_PUSH
 ;; Why axiom concat_replace_bytes_down
 (FORALL (o1 s1 o2 s2 v1 v2 v3)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (s1 v1 v2 v3)
 (EQ (replace_bytes (replace_bytes v1 o1 s1 v2) o2 s2 v3)
 (replace_bytes v1 o2 (+ s1 s2) (concat_bitvector v3 v2)))))))

(BG_PUSH
 ;; Why axiom concat_extract_bytes
 (FORALL (o1 s1 o2 s2 v)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (s2 v)
 (EQ (concat_bitvector (extract_bytes v o1 s1) (extract_bytes v o2 s2))
 (extract_bytes v o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom select_store_eq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES (AND (EQ p1 p2) (AND (EQ o1 o2) (EQ s1 s2)))
 (FORALL (m v) (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2) v)))))

(BG_PUSH
 ;; Why axiom select_store_neq_bytes
 (FORALL (m p1 p2 o1 s1 o2 s2 v)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))

 (FORALL (p1 p2 o1 s1 o2 s2)
 (IMPLIES
 (pset_disjoint
 (pset_range (pset_singleton p1) o1 (+ o1 s1)) (pset_range
                                               (pset_singleton p2) o2 
                                               (+ o2 s2)))
 (FORALL (m v)
 (EQ (select_bytes (store_bytes m p1 o1 s1 v) p2 o2 s2)
 (select_bytes m p2 o2 s2))))))

(BG_PUSH
 ;; Why axiom shift_store_bytes
 (FORALL (m p i o s v)
 (EQ (store_bytes m (shift p i) o s v) (store_bytes m p (+ o i) s v))))

(BG_PUSH
 ;; Why axiom shift_select_bytes
 (FORALL (m p i o s v)
 (EQ (select_bytes m (shift p i) o s) (select_bytes m p (+ o i) s))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_up
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o1 (+ s1 s2) (concat_bitvector v1 v2)))))))

(BG_PUSH
 ;; Why axiom concat_store_bytes_down
 (FORALL (m p o1 s1 o2 s2 v1 v2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))

 (FORALL (o1 o2 s2)
 (IMPLIES (EQ (+ o2 s2) o1)
 (FORALL (m p s1 v1 v2)
 (EQ (store_bytes (store_bytes m p o1 s1 v1) p o2 s2 v2)
 (store_bytes m p o2 (+ s1 s2) (concat_bitvector v2 v1)))))))

(BG_PUSH
 ;; Why axiom concat_select_bytes
 (FORALL (m p o1 s1 o2 s2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))

 (FORALL (o1 s1 o2)
 (IMPLIES (EQ (+ o1 s1) o2)
 (FORALL (m p s2)
 (EQ (concat_bitvector (select_bytes m p o1 s1) (select_bytes m p o2 s2))
 (select_bytes m p o1 (+ s1 s2)))))))

(BG_PUSH
 ;; Why axiom Arrays_parenttag_Object
 (EQ (parenttag Arrays_tag Object_tag) |@true|))

(DEFPRED (Non_null_Object x_0 Object_alloc_table)
  (EQ (offset_max Object_alloc_table x_0) 0))

(DEFPRED (Non_null_intM x Object_alloc_table)
  (>= (offset_max Object_alloc_table x) (- 0 1)))

(BG_PUSH
 ;; Why axiom Object_int
 (EQ (int_of_tag Object_tag) 1))

(BG_PUSH
 ;; Why axiom Object_parenttag_bottom
 (EQ (parenttag Object_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom Object_tags
 (FORALL (x Object_tag_table) (instanceof Object_tag_table x Object_tag)))

(BG_PUSH
 ;; Why axiom String_parenttag_Object
 (EQ (parenttag String_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom Throwable_parenttag_Object
 (EQ (parenttag Throwable_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom intM_parenttag_Object
 (EQ (parenttag intM_tag Object_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_int
 (EQ (int_of_tag interface_tag) 1))

(BG_PUSH
 ;; Why axiom interface_parenttag_bottom
 (EQ (parenttag interface_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom interface_tags
 (FORALL (x interface_tag_table)
 (instanceof interface_tag_table x interface_tag)))

(DEFPRED (is_max t i l Object_alloc_table_at_L intM_intP_at_L)
  (AND (Non_null_intM t Object_alloc_table_at_L)
  (AND (<= 0 i)
  (AND (< i l)
  (AND (<= l (+ (offset_max Object_alloc_table_at_L t) 1))
  (FORALL (j)
  (IMPLIES (AND (<= 0 j) (< j l))
  (<= (select intM_intP_at_L (shift t j)) (select intM_intP_at_L (shift t i))))))))))

(DEFPRED (valid_struct_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_struct_Arrays p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_String p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_Throwable p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_intM p a b Object_alloc_table)
  (valid_struct_Object p a b Object_alloc_table))

(DEFPRED (valid_struct_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

(DEFPRED (valid_variant_Object p a b Object_alloc_table)
  (AND (EQ (offset_min Object_alloc_table p) a)
  (EQ (offset_max Object_alloc_table p) b)))

(DEFPRED (valid_variant_interface p a b interface_alloc_table)
  (AND (EQ (offset_min interface_alloc_table p) a)
  (EQ (offset_max interface_alloc_table p) b)))

;; Arrays_arrayShift_ensures_default_po_1, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(< (- result 1) (+ (offset_max Object_alloc_table t_2) 1)))))))

;; Arrays_arrayShift_ensures_default_po_2, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0) (<= 0 (- result 1))))))))

;; Arrays_arrayShift_ensures_default_po_3, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_2)
(IMPLIES (AND (< (- result 1) i_2)
         (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
(EQ (select intM_intP (shift t_2 i_2))
(select intM_intP (shift t_2 (- i_2 1)))))))))))))

;; Arrays_arrayShift_ensures_default_po_4, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(< j_0_0 (+ (offset_max Object_alloc_table t_2) 1))))))))))))))))))

;; Arrays_arrayShift_ensures_default_po_5, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0) (<= 0 j_0_0))))))))))))))))))

;; Arrays_arrayShift_ensures_default_po_6, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_1)
(IMPLIES (AND (<= 0 i_1) (<= i_1 j_0_0))
(EQ (select intM_intP1 (shift t_2 i_1)) (select intM_intP (shift t_2 i_1))))))))))))))))))))))

;; Arrays_arrayShift_ensures_default_po_7, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_2)
(IMPLIES (AND (< j_0_0 i_2)
         (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
(EQ (select intM_intP1 (shift t_2 i_2))
(select intM_intP (shift t_2 (- i_2 1)))))))))))))))))))))))

;; Arrays_arrayShift_ensures_default_po_8, File "HOME/tests/java/Arrays.java", line 95, characters 10-70
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (<= j_0 0)
(FORALL (i_0)
(IMPLIES (AND (< 0 i_0) (< i_0 (+ (offset_max Object_alloc_table t_2) 1)))
(EQ (select intM_intP0 (shift t_2 i_0))
(select intM_intP (shift t_2 (- i_0 1))))))))))))))))

;; Arrays_arrayShift_safety_po_1, File "why/Arrays.why", line 485, characters 32-158
(FORALL (t_2)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(>= (offset_max Object_alloc_table t_2) (- 0 1)))))

;; Arrays_arrayShift_safety_po_2, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(< (- result 1) (+ (offset_max Object_alloc_table t_2) 1))))))))

;; Arrays_arrayShift_safety_po_3, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0) (<= 0 (- result 1)))))))))

;; Arrays_arrayShift_safety_po_4, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_2)
(IMPLIES (AND (< (- result 1) i_2)
         (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
(EQ (select intM_intP (shift t_2 i_2))
(select intM_intP (shift t_2 (- i_2 1))))))))))))))

;; Arrays_arrayShift_safety_po_5, File "HOME/tests/java/Arrays.java", line 107, characters 10-16
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0) (<= 0 (- j_0 1)))))))))))))

;; Arrays_arrayShift_safety_po_6, File "HOME/tests/java/Arrays.java", line 107, characters 10-16
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0) (<= (- j_0 1) (offset_max Object_alloc_table t_2)))))))))))))

;; Arrays_arrayShift_safety_po_7, File "HOME/tests/java/Arrays.java", line 107, characters 3-16
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1)))) (<= 0 j_0)))))))))))))))

;; Arrays_arrayShift_safety_po_8, File "HOME/tests/java/Arrays.java", line 107, characters 3-16
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(<= j_0 (offset_max Object_alloc_table t_2))))))))))))))))

;; Arrays_arrayShift_safety_po_9, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(< j_0_0 (+ (offset_max Object_alloc_table t_2) 1)))))))))))))))))))))

;; Arrays_arrayShift_safety_po_10, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0) (<= 0 j_0_0)))))))))))))))))))))

;; Arrays_arrayShift_safety_po_11, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_1)
(IMPLIES (AND (<= 0 i_1) (<= i_1 j_0_0))
(EQ (select intM_intP1 (shift t_2 i_1)) (select intM_intP (shift t_2 i_1)))))))))))))))))))))))))

;; Arrays_arrayShift_safety_po_12, File "HOME/tests/java/Arrays.java", line 99, characters 7-230
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0)
(IMPLIES (EQ j_0_0 (- j_0 1))
(IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
(FORALL (i_2)
(IMPLIES (AND (< j_0_0 i_2)
         (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
(EQ (select intM_intP1 (shift t_2 i_2))
(select intM_intP (shift t_2 (- i_2 1))))))))))))))))))))))))))

;; Arrays_arrayShift_safety_po_13, File "HOME/tests/java/Arrays.java", line 104, characters 18-19
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0) (IMPLIES (EQ j_0_0 (- j_0 1)) (<= 0 j_0))))))))))))))))))))

;; Arrays_arrayShift_safety_po_14, File "HOME/tests/java/Arrays.java", line 104, characters 18-19
(FORALL (t_2)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (Non_null_intM t_2 Object_alloc_table)
(IMPLIES (>= (offset_max Object_alloc_table t_2) (- 0 1))
(FORALL (result)
(IMPLIES (AND (<= result constant_too_large_2147483647)
         (AND (>= result 0)
         (AND (EQ result (+ (offset_max Object_alloc_table t_2) 1))
         (EQ |@true| |@true|))))
(FORALL (intM_intP0)
(FORALL (j_0)
(IMPLIES (AND (< j_0 (+ (offset_max Object_alloc_table t_2) 1))
         (IMPLIES (> (+ (offset_max Object_alloc_table t_2) 1) 0)
         (AND (<= 0 j_0)
         (AND
         (FORALL (i_1)
         (IMPLIES (AND (<= 0 i_1) (<= i_1 j_0))
         (EQ (select intM_intP0 (shift t_2 i_1))
         (select intM_intP (shift t_2 i_1)))))
         (FORALL (i_2)
         (IMPLIES
         (AND (< j_0 i_2) (< i_2 (+ (offset_max Object_alloc_table t_2) 1)))
         (EQ (select intM_intP0 (shift t_2 i_2))
         (select intM_intP (shift t_2 (- i_2 1))))))))))
(IMPLIES (> j_0 0)
(IMPLIES (AND (<= 0 (- j_0 1))
         (<= (- j_0 1) (offset_max Object_alloc_table t_2)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intM_intP0 (shift t_2 (- j_0 1))))
(IMPLIES (AND (<= 0 j_0) (<= j_0 (offset_max Object_alloc_table t_2)))
(FORALL (intM_intP1)
(IMPLIES (EQ intM_intP1 (|why__store| intM_intP0 (shift t_2 j_0) result0))
(FORALL (j_0_0) (IMPLIES (EQ j_0_0 (- j_0 1)) (< j_0_0 j_0))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_1, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0))) (<= 1 1)))))))

;; Arrays_findMax2_ensures_max_found_po_2, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(<= 1 (+ (offset_max Object_alloc_table t_1) 1))))))))

;; Arrays_findMax2_ensures_max_found_po_3, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0))) (<= 0 0)))))))

;; Arrays_findMax2_ensures_max_found_po_4, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(< 0 (+ (offset_max Object_alloc_table t_1) 1))))))))

;; Arrays_findMax2_ensures_max_found_po_5, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(EQ result (select intM_intP (shift t_1 0)))))))))

;; Arrays_findMax2_ensures_max_found_po_6, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(is_max t_1 0 1 Object_alloc_table intM_intP)))))))

;; Arrays_findMax2_ensures_max_found_po_7, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 1 i_3_0)))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_8, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= i_3_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_9, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 r0)))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_10, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< r0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_11, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1)) (EQ m0 (select intM_intP (shift t_1 r0)))))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_12, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_max t_1 r0 i_3_0 Object_alloc_table intM_intP)))))))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_13, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 1 i_3_0)))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_14, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= i_3_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_15, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 r)))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_16, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< r (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_17, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1)) (EQ m (select intM_intP (shift t_1 r)))))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_18, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_max t_1 r i_3_0 Object_alloc_table intM_intP)))))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_19, File "HOME/tests/java/Arrays.java", line 72, characters 13-80
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_3 result0)
(FORALL (return) (IMPLIES (EQ return r) (<= 0 return))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_20, File "HOME/tests/java/Arrays.java", line 72, characters 13-80
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_3 result0)
(FORALL (return)
(IMPLIES (EQ return r) (< return (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))

;; Arrays_findMax2_ensures_max_found_po_21, File "HOME/tests/java/Arrays.java", line 72, characters 13-80
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_3 result0)
(FORALL (return)
(IMPLIES (EQ return r)
(is_max
t_1 return (+ (offset_max Object_alloc_table t_1) 1) Object_alloc_table intM_intP))))))))))))))))

;; Arrays_findMax2_safety_po_1, File "HOME/tests/java/Arrays.java", line 76, characters 9-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(<= 0 (offset_max Object_alloc_table t_1)))))

;; Arrays_findMax2_safety_po_2, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0))) (<= 1 1))))))))

;; Arrays_findMax2_safety_po_3, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(<= 1 (+ (offset_max Object_alloc_table t_1) 1)))))))))

;; Arrays_findMax2_safety_po_4, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0))) (<= 0 0))))))))

;; Arrays_findMax2_safety_po_5, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(< 0 (+ (offset_max Object_alloc_table t_1) 1)))))))))

;; Arrays_findMax2_safety_po_6, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(EQ result (select intM_intP (shift t_1 0))))))))))

;; Arrays_findMax2_safety_po_7, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(is_max t_1 0 1 Object_alloc_table intM_intP))))))))

;; Arrays_findMax2_safety_po_8, File "why/Arrays.why", line 679, characters 51-215
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(>= (offset_max Object_alloc_table t_1) (- 0 1)))))))))))))

;; Arrays_findMax2_safety_po_9, File "HOME/tests/java/Arrays.java", line 84, characters 9-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0) (<= 0 i_3))))))))))))))))

;; Arrays_findMax2_safety_po_10, File "HOME/tests/java/Arrays.java", line 84, characters 9-13
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0) (<= i_3 (offset_max Object_alloc_table t_1)))))))))))))))))

;; Arrays_findMax2_safety_po_11, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 1 i_3_0)))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_12, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= i_3_0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_13, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 r0)))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_14, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< r0 (+ (offset_max Object_alloc_table t_1) 1))))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_15, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1)) (EQ m0 (select intM_intP (shift t_1 r0)))))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_16, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_max t_1 r0 i_3_0 Object_alloc_table intM_intP)))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_17, File "HOME/tests/java/Arrays.java", line 81, characters 18-28
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= 0 (- (+ (offset_max Object_alloc_table t_1) 1) i_3))))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_18, File "HOME/tests/java/Arrays.java", line 81, characters 18-28
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (> result1 m)
(FORALL (r0)
(IMPLIES (EQ r0 i_3)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_1 i_3)))
(FORALL (m0)
(IMPLIES (EQ m0 result2)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< (- (+ (offset_max Object_alloc_table t_1) 1) i_3_0) (- (+ (offset_max
                                                             Object_alloc_table t_1) 1) i_3))))))))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_19, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 1 i_3_0))))))))))))))))))))))

;; Arrays_findMax2_safety_po_20, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= i_3_0 (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))))))))

;; Arrays_findMax2_safety_po_21, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0) (IMPLIES (EQ i_3_0 (+ i_3 1)) (<= 0 r))))))))))))))))))))))

;; Arrays_findMax2_safety_po_22, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< r (+ (offset_max Object_alloc_table t_1) 1)))))))))))))))))))))))

;; Arrays_findMax2_safety_po_23, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1)) (EQ m (select intM_intP (shift t_1 r))))))))))))))))))))))))

;; Arrays_findMax2_safety_po_24, File "HOME/tests/java/Arrays.java", line 79, characters 7-90
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(is_max t_1 r i_3_0 Object_alloc_table intM_intP))))))))))))))))))))))

;; Arrays_findMax2_safety_po_25, File "HOME/tests/java/Arrays.java", line 81, characters 18-28
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(<= 0 (- (+ (offset_max Object_alloc_table t_1) 1) i_3)))))))))))))))))))))))

;; Arrays_findMax2_safety_po_26, File "HOME/tests/java/Arrays.java", line 81, characters 18-28
(FORALL (t_1)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_1 Object_alloc_table)
         (>= (+ (offset_max Object_alloc_table t_1) 1) 1))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_1))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_1 0)))
(FORALL (i_3)
(FORALL (m)
(FORALL (r)
(IMPLIES (AND (<= 1 i_3)
         (AND (<= i_3 (+ (offset_max Object_alloc_table t_1) 1))
         (AND (<= 0 r)
         (AND (< r (+ (offset_max Object_alloc_table t_1) 1))
         (AND (EQ m (select intM_intP (shift t_1 r)))
         (is_max t_1 r i_3 Object_alloc_table intM_intP))))))
(IMPLIES (>= (offset_max Object_alloc_table t_1) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_1) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_3 result0)
(IMPLIES (AND (<= 0 i_3) (<= i_3 (offset_max Object_alloc_table t_1)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_1 i_3)))
(IMPLIES (<= result1 m)
(FORALL (i_3_0)
(IMPLIES (EQ i_3_0 (+ i_3 1))
(< (- (+ (offset_max Object_alloc_table t_1) 1) i_3_0) (- (+ (offset_max
                                                             Object_alloc_table t_1) 1) i_3)))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_1, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0))) (<= 1 1)))))))

;; Arrays_findMax_ensures_max_found_po_2, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(<= 1 (+ (offset_max Object_alloc_table t_0) 1))))))))

;; Arrays_findMax_ensures_max_found_po_3, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0))) (<= 0 0)))))))

;; Arrays_findMax_ensures_max_found_po_4, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(< 0 (+ (offset_max Object_alloc_table t_0) 1))))))))

;; Arrays_findMax_ensures_max_found_po_5, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(EQ result (select intM_intP (shift t_0 0)))))))))

;; Arrays_findMax_ensures_max_found_po_6, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 1))
(<= (select intM_intP (shift t_0 j_1)) result)))))))))

;; Arrays_findMax_ensures_max_found_po_7, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 1 i_5_0)))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_8, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= i_5_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_9, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 0 r_0_0)))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_10, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< r_0_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_11, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(EQ m_0_0 (select intM_intP (shift t_0 r_0_0)))))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_12, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 i_5_0))
(<= (select intM_intP (shift t_0 j_1)) m_0_0)))))))))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_13, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 1 i_5_0)))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_14, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= i_5_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_15, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 0 r_0)))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_16, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< r_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_17, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1)) (EQ m_0 (select intM_intP (shift t_0 r_0)))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_18, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 i_5_0))
(<= (select intM_intP (shift t_0 j_1)) m_0)))))))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_19, File "HOME/tests/java/Arrays.java", line 48, characters 13-134
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_5 result0)
(FORALL (return) (IMPLIES (EQ return r_0) (<= 0 return))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_20, File "HOME/tests/java/Arrays.java", line 48, characters 13-134
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_5 result0)
(FORALL (return)
(IMPLIES (EQ return r_0)
(< return (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))

;; Arrays_findMax_ensures_max_found_po_21, File "HOME/tests/java/Arrays.java", line 48, characters 13-134
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (>= i_5 result0)
(FORALL (return)
(IMPLIES (EQ return r_0)
(FORALL (i_4)
(IMPLIES (AND (<= 0 i_4) (< i_4 (+ (offset_max Object_alloc_table t_0) 1)))
(<= (select intM_intP (shift t_0 i_4)) (select intM_intP (shift t_0 return))))))))))))))))))))

;; Arrays_findMax_safety_po_1, File "HOME/tests/java/Arrays.java", line 53, characters 9-13
(FORALL (t_0)
(FORALL (Object_alloc_table)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(<= 0 (offset_max Object_alloc_table t_0)))))

;; Arrays_findMax_safety_po_2, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0))) (<= 1 1))))))))

;; Arrays_findMax_safety_po_3, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(<= 1 (+ (offset_max Object_alloc_table t_0) 1)))))))))

;; Arrays_findMax_safety_po_4, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0))) (<= 0 0))))))))

;; Arrays_findMax_safety_po_5, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(< 0 (+ (offset_max Object_alloc_table t_0) 1)))))))))

;; Arrays_findMax_safety_po_6, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(EQ result (select intM_intP (shift t_0 0))))))))))

;; Arrays_findMax_safety_po_7, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 1))
(<= (select intM_intP (shift t_0 j_1)) result))))))))))

;; Arrays_findMax_safety_po_8, File "why/Arrays.why", line 864, characters 51-215
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(>= (offset_max Object_alloc_table t_0) (- 0 1)))))))))))))

;; Arrays_findMax_safety_po_9, File "HOME/tests/java/Arrays.java", line 61, characters 9-13
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0) (<= 0 i_5))))))))))))))))

;; Arrays_findMax_safety_po_10, File "HOME/tests/java/Arrays.java", line 61, characters 9-13
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0) (<= i_5 (offset_max Object_alloc_table t_0)))))))))))))))))

;; Arrays_findMax_safety_po_11, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 1 i_5_0)))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_12, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= i_5_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_13, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 0 r_0_0)))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_14, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< r_0_0 (+ (offset_max Object_alloc_table t_0) 1))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_15, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(EQ m_0_0 (select intM_intP (shift t_0 r_0_0)))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_16, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 i_5_0))
(<= (select intM_intP (shift t_0 j_1)) m_0_0)))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_17, File "HOME/tests/java/Arrays.java", line 58, characters 25-35
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= 0 (- (+ (offset_max Object_alloc_table t_0) 1) i_5))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_18, File "HOME/tests/java/Arrays.java", line 58, characters 25-35
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (> result1 m_0)
(FORALL (r_0_0)
(IMPLIES (EQ r_0_0 i_5)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result2)
(IMPLIES (EQ result2 (select intM_intP (shift t_0 i_5)))
(FORALL (m_0_0)
(IMPLIES (EQ m_0_0 result2)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< (- (+ (offset_max Object_alloc_table t_0) 1) i_5_0) (- (+ (offset_max
                                                             Object_alloc_table t_0) 1) i_5))))))))))))))))))))))))))))))

;; Arrays_findMax_safety_po_19, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 1 i_5_0))))))))))))))))))))))

;; Arrays_findMax_safety_po_20, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= i_5_0 (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))))))

;; Arrays_findMax_safety_po_21, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0) (IMPLIES (EQ i_5_0 (+ i_5 1)) (<= 0 r_0))))))))))))))))))))))

;; Arrays_findMax_safety_po_22, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< r_0 (+ (offset_max Object_alloc_table t_0) 1)))))))))))))))))))))))

;; Arrays_findMax_safety_po_23, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1)) (EQ m_0 (select intM_intP (shift t_0 r_0))))))))))))))))))))))))

;; Arrays_findMax_safety_po_24, File "HOME/tests/java/Arrays.java", line 56, characters 14-129
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(FORALL (j_1)
(IMPLIES (AND (<= 0 j_1) (< j_1 i_5_0))
(<= (select intM_intP (shift t_0 j_1)) m_0))))))))))))))))))))))))

;; Arrays_findMax_safety_po_25, File "HOME/tests/java/Arrays.java", line 58, characters 25-35
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(<= 0 (- (+ (offset_max Object_alloc_table t_0) 1) i_5)))))))))))))))))))))))

;; Arrays_findMax_safety_po_26, File "HOME/tests/java/Arrays.java", line 58, characters 25-35
(FORALL (t_0)
(FORALL (Object_alloc_table)
(FORALL (intM_intP)
(IMPLIES (AND (Non_null_intM t_0 Object_alloc_table)
         (AND (<= 1 (+ (offset_max Object_alloc_table t_0) 1))
         (<= (+ (offset_max Object_alloc_table t_0) 1) 32767)))
(IMPLIES (<= 0 (offset_max Object_alloc_table t_0))
(FORALL (result)
(IMPLIES (EQ result (select intM_intP (shift t_0 0)))
(FORALL (i_5)
(FORALL (m_0)
(FORALL (r_0)
(IMPLIES (AND (<= 1 i_5)
         (AND (<= i_5 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (<= 0 r_0)
         (AND (< r_0 (+ (offset_max Object_alloc_table t_0) 1))
         (AND (EQ m_0 (select intM_intP (shift t_0 r_0)))
         (FORALL (j_1)
         (IMPLIES (AND (<= 0 j_1) (< j_1 i_5))
         (<= (select intM_intP (shift t_0 j_1)) m_0))))))))
(IMPLIES (>= (offset_max Object_alloc_table t_0) (- 0 1))
(FORALL (result0)
(IMPLIES (AND (<= result0 constant_too_large_2147483647)
         (AND (>= result0 0)
         (AND (EQ result0 (+ (offset_max Object_alloc_table t_0) 1))
         (EQ |@true| |@true|))))
(IMPLIES (< i_5 result0)
(IMPLIES (AND (<= 0 i_5) (<= i_5 (offset_max Object_alloc_table t_0)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intM_intP (shift t_0 i_5)))
(IMPLIES (<= result1 m_0)
(FORALL (i_5_0)
(IMPLIES (EQ i_5_0 (+ i_5 1))
(< (- (+ (offset_max Object_alloc_table t_0) 1) i_5_0) (- (+ (offset_max
                                                             Object_alloc_table t_0) 1) i_5)))))))))))))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/Arrays_why.sx        : .................................................................................................................... (116/0/0/0/0)
total   : 116
valid   : 116 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
========== generation of alt-ergo VC output ==========
why --why [...] why/Arrays.why
========== file tests/java/why/Arrays_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic div_int : int, int -> int

logic mod_int : int, int -> int

logic neg_int : int -> int

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic pow_real : real, real -> real

logic neg_real : real -> real

logic abs_real : real -> real

logic sqrt_real : real -> real

logic real_of_int : int -> real

logic int_of_real : real -> int

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic int_max : int, int -> int

logic int_min : int, int -> int

logic real_max : real, real -> real

logic real_min : real, real -> real

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

axiom div_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a / b)) and ((a / b) <= a)))))

axiom div_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((a <= (a / b)) and ((a / b) <= 0)))))

axiom div_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-a) <= (a / b)) and ((a / b) <= 0)))))

axiom div_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> ((0 <= (a / b)) and ((a / b) <= (-a))))))

axiom mod_positive_by_positive:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_negative_by_positive:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (0 < b)) -> ((0 <= (a % b)) and ((a % b) < b)))))

axiom mod_positive_by_negative:
  (forall a:int.
    (forall b:int.
      (((0 <= a) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

axiom mod_negative_by_negative:
  (forall a:int.
    (forall b:int.
      (((a <= 0) and (b < 0)) -> (((-b) < (a % b)) and ((a % b) <= 0)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic address : 'a1 pointer -> int

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic shift : 'a1 pointer, int -> 'a1 pointer

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic null :  -> 'a1 pointer

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_positive: (forall p:'a1 pointer. (0 <= address(p)))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)].
        (same_block(p, q) -> (sub_pointer(shift(p, i), q) = (sub_pointer(p,
         q) + i))))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))].
        (same_block(p, q) -> (sub_pointer(p, shift(q, i)) = (sub_pointer(p,
         q) - i))))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty :  -> 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag :  -> 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type bitvector

logic concat_bitvector : bitvector, bitvector -> bitvector

logic offset_min_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

logic offset_max_bytes : 'a1 alloc_table, 'a1 pointer, int -> int

axiom offset_min_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_min_bytes(a, p, s)]. (offset_min(a,
        p) <= (s * offset_min_bytes(a, p, s))))))

axiom offset_max_bytes_def:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall s:int [offset_max_bytes(a, p, s)]. ((((s * offset_max_bytes(a,
        p, s)) + s) - 1) <= offset_max(a, p)))))

logic extract_bytes : bitvector, int, int -> bitvector

logic replace_bytes : bitvector, int, int, bitvector -> bitvector

axiom select_store_eq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              (((o1 = o2) and (s1 = s2)) -> (extract_bytes(replace_bytes(v1,
               o1, s1, v2), o2, s2) = v2))))))))

axiom select_store_neq_union:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector [extract_bytes(replace_bytes(v1, o1, s1,
              v2), o2, s2)].
              ((((o2 + s2) <= o1) or ((o1 + s2) <= o2)) ->
               (extract_bytes(replace_bytes(v1, o1, s1, v2), o2,
               s2) = extract_bytes(v1, o2, s2)))))))))

axiom concat_replace_bytes_up:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o1 + s1) = o2) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o1, (s1 + s2),
                 concat_bitvector(v2, v3)))))))))))

axiom concat_replace_bytes_down:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v1:bitvector.
            (forall v2:bitvector.
              (forall v3:bitvector [replace_bytes(replace_bytes(v1, o1, s1,
                v2), o2, s2, v3)].
                (((o2 + s2) = o1) -> (replace_bytes(replace_bytes(v1, o1, s1,
                 v2), o2, s2, v3) = replace_bytes(v1, o2, (s1 + s2),
                 concat_bitvector(v3, v2)))))))))))

axiom concat_extract_bytes:
  (forall o1:int.
    (forall s1:int.
      (forall o2:int.
        (forall s2:int.
          (forall v:bitvector [concat_bitvector(extract_bytes(v, o1, s1),
            extract_bytes(v, o2, s2))].
            (((o1 + s1) = o2) -> (concat_bitvector(extract_bytes(v, o1, s1),
             extract_bytes(v, o2, s2)) = extract_bytes(v, o1, (s1 + s2)))))))))

logic select_bytes : ('a1, bitvector) memory, 'a1 pointer, int,
int -> bitvector

logic store_bytes : ('a1, bitvector) memory, 'a1 pointer, int, int,
bitvector -> ('a1, bitvector) memory

axiom select_store_eq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (((p1 = p2) and ((o1 = o2) and (s1 = s2))) ->
                   (select_bytes(store_bytes(m, p1, o1, s1, v), p2, o2,
                   s2) = v))))))))))

axiom select_store_neq_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall o1:int.
          (forall s1:int.
            (forall o2:int.
              (forall s2:int.
                (forall v:bitvector [select_bytes(store_bytes(m, p1, o1, s1,
                  v), p2, o2, s2)].
                  (pset_disjoint(pset_range(pset_singleton(p1), o1,
                   (o1 + s1)), pset_range(pset_singleton(p2), o2,
                   (o2 + s2))) -> (select_bytes(store_bytes(m, p1, o1, s1,
                   v), p2, o2, s2) = select_bytes(m, p2, o2, s2)))))))))))

axiom shift_store_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [store_bytes(m, shift(p, i), o, s, v)].
              (store_bytes(m, shift(p, i), o, s, v) = store_bytes(m, p,
              (o + i), s, v))))))))

axiom shift_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall i:int.
        (forall o:int.
          (forall s:int.
            (forall v:bitvector [select_bytes(m, shift(p, i), o, s)].
              (select_bytes(m, shift(p, i), o, s) = select_bytes(m, p,
              (o + i), s))))))))

axiom concat_store_bytes_up:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o1 + s1) = o2) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o1, (s1 + s2),
                   concat_bitvector(v1, v2))))))))))))

axiom concat_store_bytes_down:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int.
              (forall v1:bitvector.
                (forall v2:bitvector [store_bytes(store_bytes(m, p, o1, s1,
                  v1), p, o2, s2, v2)].
                  (((o2 + s2) = o1) -> (store_bytes(store_bytes(m, p, o1, s1,
                   v1), p, o2, s2, v2) = store_bytes(m, p, o2, (s1 + s2),
                   concat_bitvector(v2, v1))))))))))))

axiom concat_select_bytes:
  (forall m:('a1, bitvector) memory.
    (forall p:'a1 pointer.
      (forall o1:int.
        (forall s1:int.
          (forall o2:int.
            (forall s2:int [concat_bitvector(select_bytes(m, p, o1, s1),
              select_bytes(m, p, o2, s2))].
              (((o1 + s1) = o2) -> (concat_bitvector(select_bytes(m, p, o1,
               s1), select_bytes(m, p, o2, s2)) = select_bytes(m, p, o1,
               (s1 + s2))))))))))

type Object

type interface

logic Arrays_tag :  -> Object tag_id

logic Object_tag :  -> Object tag_id

axiom Arrays_parenttag_Object: parenttag(Arrays_tag, Object_tag)

predicate Non_null_Object(x_0: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x_0) = 0)

predicate Non_null_intM(x: Object pointer,
  Object_alloc_table: Object alloc_table) = (offset_max(Object_alloc_table,
  x) >= (-1))

axiom Object_int: (int_of_tag(Object_tag) = 1)

axiom Object_parenttag_bottom: parenttag(Object_tag, bottom_tag)

axiom Object_tags:
  (forall x:Object pointer.
    (forall Object_tag_table:Object tag_table. instanceof(Object_tag_table,
      x, Object_tag)))

logic String_tag :  -> Object tag_id

axiom String_parenttag_Object: parenttag(String_tag, Object_tag)

logic Throwable_tag :  -> Object tag_id

axiom Throwable_parenttag_Object: parenttag(Throwable_tag, Object_tag)

logic intM_tag :  -> Object tag_id

axiom intM_parenttag_Object: parenttag(intM_tag, Object_tag)

logic interface_tag :  -> interface tag_id

axiom interface_int: (int_of_tag(interface_tag) = 1)

axiom interface_parenttag_bottom: parenttag(interface_tag, bottom_tag)

axiom interface_tags:
  (forall x:interface pointer.
    (forall interface_tag_table:interface tag_table.
      instanceof(interface_tag_table, x, interface_tag)))

predicate is_max(t: Object pointer, i: int, l: int,
  Object_alloc_table_at_L: Object alloc_table, intM_intP_at_L: (Object,
  int) memory) =
  (Non_null_intM(t, Object_alloc_table_at_L) and
   ((0 <= i) and
    ((i < l) and
     ((l <= (offset_max(Object_alloc_table_at_L, t) + 1)) and
      (forall j:int.
        (((0 <= j) and (j < l)) -> (select(intM_intP_at_L, shift(t,
         j)) <= select(intM_intP_at_L, shift(t, i)))))))))

predicate valid_struct_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_struct_Arrays(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_String(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_Throwable(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_intM(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) = valid_struct_Object(p, a, b,
  Object_alloc_table)

predicate valid_struct_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

predicate valid_variant_Object(p: Object pointer, a: int, b: int,
  Object_alloc_table: Object alloc_table) =
  ((offset_min(Object_alloc_table, p) = a) and
   (offset_max(Object_alloc_table, p) = b))

predicate valid_variant_interface(p: interface pointer, a: int, b: int,
  interface_alloc_table: interface alloc_table) =
  ((offset_min(interface_alloc_table, p) = a) and
   (offset_max(interface_alloc_table, p) = b))

goal Arrays_arrayShift_ensures_default_po_1:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ("JC_76": ((result - 1) < (offset_max(Object_alloc_table, t_2) + 1)))

goal Arrays_arrayShift_ensures_default_po_2:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_76": (0 <= (result - 1)))

goal Arrays_arrayShift_ensures_default_po_3:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  (((result - 1) < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_76": (select(intM_intP, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

goal Arrays_arrayShift_ensures_default_po_4:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ("JC_76": (j_0_0 < (offset_max(Object_alloc_table, t_2) + 1)))

goal Arrays_arrayShift_ensures_default_po_5:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_76": (0 <= j_0_0))

goal Arrays_arrayShift_ensures_default_po_6:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_1:int.
  ((0 <= i_1) and (i_1 <= j_0_0)) ->
  ("JC_76": (select(intM_intP1, shift(t_2, i_1)) = select(intM_intP,
  shift(t_2, i_1))))

goal Arrays_arrayShift_ensures_default_po_7:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  ((j_0_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_76": (select(intM_intP1, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

goal Arrays_arrayShift_ensures_default_po_8:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_76":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 <= 0) ->
  forall i_0:int.
  ((0 < i_0) and (i_0 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_63": (select(intM_intP0, shift(t_2, i_0)) = select(intM_intP,
  shift(t_2, (i_0 - 1)))))

goal Arrays_arrayShift_safety_po_1:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1))

goal Arrays_arrayShift_safety_po_2:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ("JC_68": ((result - 1) < (offset_max(Object_alloc_table, t_2) + 1)))

goal Arrays_arrayShift_safety_po_3:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_68": (0 <= (result - 1)))

goal Arrays_arrayShift_safety_po_4:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  (((result - 1) < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_68": (select(intM_intP, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

goal Arrays_arrayShift_safety_po_5:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  (0 <= (j_0 - 1))

goal Arrays_arrayShift_safety_po_6:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))

goal Arrays_arrayShift_safety_po_7:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  (0 <= j_0)

goal Arrays_arrayShift_safety_po_8:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  (j_0 <= offset_max(Object_alloc_table, t_2))

goal Arrays_arrayShift_safety_po_9:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ("JC_68": (j_0_0 < (offset_max(Object_alloc_table, t_2) + 1)))

goal Arrays_arrayShift_safety_po_10:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  ("JC_68": (0 <= j_0_0))

goal Arrays_arrayShift_safety_po_11:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_1:int.
  ((0 <= i_1) and (i_1 <= j_0_0)) ->
  ("JC_68": (select(intM_intP1, shift(t_2, i_1)) = select(intM_intP,
  shift(t_2, i_1))))

goal Arrays_arrayShift_safety_po_12:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  ((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
  forall i_2:int.
  ((j_0_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
  ("JC_68": (select(intM_intP1, shift(t_2, i_2)) = select(intM_intP,
  shift(t_2, (i_2 - 1)))))

goal Arrays_arrayShift_safety_po_13:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  (0 <= ("JC_73": j_0))

goal Arrays_arrayShift_safety_po_14:
  forall t_2:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_60": Non_null_intM(t_2, Object_alloc_table)) ->
  (offset_max(Object_alloc_table, t_2) >= (-1)) ->
  forall result:int.
  ("JC_12":
  ((result <= 2147483647) and
   ((result >= 0) and
    ((result = (offset_max(Object_alloc_table, t_2) + 1)) and (true = true))))) ->
  forall intM_intP0:(Object,
  int) memory.
  forall j_0:int.
  ("JC_68":
  ((j_0 < (offset_max(Object_alloc_table, t_2) + 1)) and
   (((offset_max(Object_alloc_table, t_2) + 1) > 0) ->
    ((0 <= j_0) and
     ((forall i_1:int.
        (((0 <= i_1) and (i_1 <= j_0)) -> (select(intM_intP0, shift(t_2,
         i_1)) = select(intM_intP, shift(t_2, i_1))))) and
      (forall i_2:int.
        (((j_0 < i_2) and (i_2 < (offset_max(Object_alloc_table, t_2) + 1))) ->
         (select(intM_intP0, shift(t_2, i_2)) = select(intM_intP, shift(t_2,
         (i_2 - 1))))))))))) ->
  (j_0 > 0) ->
  ((0 <= (j_0 - 1)) and ((j_0 - 1) <= offset_max(Object_alloc_table, t_2))) ->
  forall result0:int.
  (result0 = select(intM_intP0, shift(t_2, (j_0 - 1)))) ->
  ((0 <= j_0) and (j_0 <= offset_max(Object_alloc_table, t_2))) ->
  forall intM_intP1:(Object,
  int) memory.
  (intM_intP1 = store(intM_intP0, shift(t_2, j_0), result0)) ->
  forall j_0_0:int.
  (j_0_0 = (j_0 - 1)) ->
  (("JC_73": j_0_0) < ("JC_73": j_0))

goal Arrays_findMax2_ensures_max_found_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (1 <= 1))

goal Arrays_findMax2_ensures_max_found_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (1 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (0 <= 0))

goal Arrays_findMax2_ensures_max_found_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (0 < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": (result = select(intM_intP, shift(t_1, 0))))

goal Arrays_findMax2_ensures_max_found_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_55": is_max(t_1, 0, 1, Object_alloc_table, intM_intP))

goal Arrays_findMax2_ensures_max_found_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (1 <= i_3_0))

goal Arrays_findMax2_ensures_max_found_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (0 <= r0))

goal Arrays_findMax2_ensures_max_found_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (r0 < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (m0 = select(intM_intP, shift(t_1, r0))))

goal Arrays_findMax2_ensures_max_found_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": is_max(t_1, r0, i_3_0, Object_alloc_table, intM_intP))

goal Arrays_findMax2_ensures_max_found_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (1 <= i_3_0))

goal Arrays_findMax2_ensures_max_found_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (0 <= r))

goal Arrays_findMax2_ensures_max_found_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (r < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": (m = select(intM_intP, shift(t_1, r))))

goal Arrays_findMax2_ensures_max_found_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_55": is_max(t_1, r, i_3_0, Object_alloc_table, intM_intP))

goal Arrays_findMax2_ensures_max_found_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": (0 <= return))

goal Arrays_findMax2_ensures_max_found_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": (return < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_ensures_max_found_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_55":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 >= result0) ->
  forall return:int.
  (return = r) ->
  ("JC_44": is_max(t_1, return, (offset_max(Object_alloc_table, t_1) + 1),
  Object_alloc_table, intM_intP))

goal Arrays_findMax2_safety_po_1:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1))

goal Arrays_findMax2_safety_po_2:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (1 <= 1))

goal Arrays_findMax2_safety_po_3:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (1 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_4:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (0 <= 0))

goal Arrays_findMax2_safety_po_5:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (0 < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_6:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": (result = select(intM_intP, shift(t_1, 0))))

goal Arrays_findMax2_safety_po_7:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  ("JC_47": is_max(t_1, 0, 1, Object_alloc_table, intM_intP))

goal Arrays_findMax2_safety_po_8:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1))

goal Arrays_findMax2_safety_po_9:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  (0 <= i_3)

goal Arrays_findMax2_safety_po_10:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  (i_3 <= offset_max(Object_alloc_table, t_1))

goal Arrays_findMax2_safety_po_11:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (1 <= i_3_0))

goal Arrays_findMax2_safety_po_12:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_13:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (0 <= r0))

goal Arrays_findMax2_safety_po_14:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (r0 < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_15:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (m0 = select(intM_intP, shift(t_1, r0))))

goal Arrays_findMax2_safety_po_16:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": is_max(t_1, r0, i_3_0, Object_alloc_table, intM_intP))

goal Arrays_findMax2_safety_po_17:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3)))

goal Arrays_findMax2_safety_po_18:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 > m) ->
  forall r0:int.
  (r0 = i_3) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_1, i_3))) ->
  forall m0:int.
  (m0 = result2) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3_0)) < ("JC_54":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_1) + 1) - i_3)))

goal Arrays_findMax2_safety_po_19:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (1 <= i_3_0))

goal Arrays_findMax2_safety_po_20:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (i_3_0 <= (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_21:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (0 <= r))

goal Arrays_findMax2_safety_po_22:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (r < (offset_max(Object_alloc_table, t_1) + 1)))

goal Arrays_findMax2_safety_po_23:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": (m = select(intM_intP, shift(t_1, r))))

goal Arrays_findMax2_safety_po_24:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  ("JC_47": is_max(t_1, r, i_3_0, Object_alloc_table, intM_intP))

goal Arrays_findMax2_safety_po_25:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (0 <= ("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3)))

goal Arrays_findMax2_safety_po_26:
  forall t_1:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_41":
  (Non_null_intM(t_1, Object_alloc_table) and
   ((offset_max(Object_alloc_table, t_1) + 1) >= 1))) ->
  (0 <= offset_max(Object_alloc_table, t_1)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_1, 0))) ->
  forall i_3:int.
  forall m:int.
  forall r:int.
  ("JC_47":
  ((1 <= i_3) and
   ((i_3 <= (offset_max(Object_alloc_table, t_1) + 1)) and
    ((0 <= r) and
     ((r < (offset_max(Object_alloc_table, t_1) + 1)) and
      ((m = select(intM_intP, shift(t_1, r))) and is_max(t_1, r, i_3,
       Object_alloc_table, intM_intP))))))) ->
  (offset_max(Object_alloc_table, t_1) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_1) + 1)) and (true = true))))) ->
  (i_3 < result0) ->
  ((0 <= i_3) and (i_3 <= offset_max(Object_alloc_table, t_1))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_1, i_3))) ->
  (result1 <= m) ->
  forall i_3_0:int.
  (i_3_0 = (i_3 + 1)) ->
  (("JC_54": ((offset_max(Object_alloc_table, t_1) + 1) - i_3_0)) < ("JC_54":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_1) + 1) - i_3)))

goal Arrays_findMax_ensures_max_found_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (1 <= 1))

goal Arrays_findMax_ensures_max_found_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (1 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (0 <= 0))

goal Arrays_findMax_ensures_max_found_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_36": (result = select(intM_intP, shift(t_0, 0))))

goal Arrays_findMax_ensures_max_found_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < 1)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= result))

goal Arrays_findMax_ensures_max_found_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (1 <= i_5_0))

goal Arrays_findMax_ensures_max_found_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (0 <= r_0_0))

goal Arrays_findMax_ensures_max_found_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (r_0_0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (m_0_0 = select(intM_intP, shift(t_0, r_0_0))))

goal Arrays_findMax_ensures_max_found_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= m_0_0))

goal Arrays_findMax_ensures_max_found_po_13:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (1 <= i_5_0))

goal Arrays_findMax_ensures_max_found_po_14:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_15:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (0 <= r_0))

goal Arrays_findMax_ensures_max_found_po_16:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (r_0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_17:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_36": (m_0 = select(intM_intP, shift(t_0, r_0))))

goal Arrays_findMax_ensures_max_found_po_18:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_36": (select(intM_intP, shift(t_0, j_1)) <= m_0))

goal Arrays_findMax_ensures_max_found_po_19:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  ("JC_25": (0 <= return))

goal Arrays_findMax_ensures_max_found_po_20:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  ("JC_25": (return < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_ensures_max_found_po_21:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_36":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 >= result0) ->
  forall return:int.
  (return = r_0) ->
  forall i_4:int.
  ((0 <= i_4) and (i_4 < (offset_max(Object_alloc_table, t_0) + 1))) ->
  ("JC_25": (select(intM_intP, shift(t_0, i_4)) <= select(intM_intP,
  shift(t_0, return))))

goal Arrays_findMax_safety_po_1:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0))

goal Arrays_findMax_safety_po_2:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (1 <= 1))

goal Arrays_findMax_safety_po_3:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (1 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_4:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (0 <= 0))

goal Arrays_findMax_safety_po_5:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_6:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  ("JC_28": (result = select(intM_intP, shift(t_0, 0))))

goal Arrays_findMax_safety_po_7:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < 1)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= result))

goal Arrays_findMax_safety_po_8:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1))

goal Arrays_findMax_safety_po_9:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  (0 <= i_5)

goal Arrays_findMax_safety_po_10:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  (i_5 <= offset_max(Object_alloc_table, t_0))

goal Arrays_findMax_safety_po_11:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (1 <= i_5_0))

goal Arrays_findMax_safety_po_12:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_13:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (0 <= r_0_0))

goal Arrays_findMax_safety_po_14:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (r_0_0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_15:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (m_0_0 = select(intM_intP, shift(t_0, r_0_0))))

goal Arrays_findMax_safety_po_16:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= m_0_0))

goal Arrays_findMax_safety_po_17:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (0 <= ("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5)))

goal Arrays_findMax_safety_po_18:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 > m_0) ->
  forall r_0_0:int.
  (r_0_0 = i_5) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result2:int.
  (result2 = select(intM_intP, shift(t_0, i_5))) ->
  forall m_0_0:int.
  (m_0_0 = result2) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5_0)) < ("JC_35":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_0) + 1) - i_5)))

goal Arrays_findMax_safety_po_19:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (1 <= i_5_0))

goal Arrays_findMax_safety_po_20:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (i_5_0 <= (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_21:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (0 <= r_0))

goal Arrays_findMax_safety_po_22:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (r_0 < (offset_max(Object_alloc_table, t_0) + 1)))

goal Arrays_findMax_safety_po_23:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  ("JC_28": (m_0 = select(intM_intP, shift(t_0, r_0))))

goal Arrays_findMax_safety_po_24:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  forall j_1:int.
  ((0 <= j_1) and (j_1 < i_5_0)) ->
  ("JC_28": (select(intM_intP, shift(t_0, j_1)) <= m_0))

goal Arrays_findMax_safety_po_25:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (0 <= ("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5)))

goal Arrays_findMax_safety_po_26:
  forall t_0:Object pointer.
  forall Object_alloc_table:Object alloc_table.
  forall intM_intP:(Object,
  int) memory.
  ("JC_22":
  (Non_null_intM(t_0, Object_alloc_table) and
   ((1 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((offset_max(Object_alloc_table, t_0) + 1) <= 32767)))) ->
  (0 <= offset_max(Object_alloc_table, t_0)) ->
  forall result:int.
  (result = select(intM_intP, shift(t_0, 0))) ->
  forall i_5:int.
  forall m_0:int.
  forall r_0:int.
  ("JC_28":
  ((1 <= i_5) and
   ((i_5 <= (offset_max(Object_alloc_table, t_0) + 1)) and
    ((0 <= r_0) and
     ((r_0 < (offset_max(Object_alloc_table, t_0) + 1)) and
      ((m_0 = select(intM_intP, shift(t_0, r_0))) and
       (forall j_1:int.
         (((0 <= j_1) and (j_1 < i_5)) -> (select(intM_intP, shift(t_0,
          j_1)) <= m_0))))))))) ->
  (offset_max(Object_alloc_table, t_0) >= (-1)) ->
  forall result0:int.
  ("JC_12":
  ((result0 <= 2147483647) and
   ((result0 >= 0) and
    ((result0 = (offset_max(Object_alloc_table, t_0) + 1)) and (true = true))))) ->
  (i_5 < result0) ->
  ((0 <= i_5) and (i_5 <= offset_max(Object_alloc_table, t_0))) ->
  forall result1:int.
  (result1 = select(intM_intP, shift(t_0, i_5))) ->
  (result1 <= m_0) ->
  forall i_5_0:int.
  (i_5_0 = (i_5 + 1)) ->
  (("JC_35": ((offset_max(Object_alloc_table, t_0) + 1) - i_5_0)) < ("JC_35":
                                                                    ((offset_max(Object_alloc_table,
                                                                    t_0) + 1) - i_5)))

========== running alt-ergo ==========
Running Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/Arrays_why.why            : .................................................................................................................... (116/0/0/0/0)
total   : 116
valid   : 116 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
