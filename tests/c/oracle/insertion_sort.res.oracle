========== file tests/c/insertion_sort.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

// RUNSIMPLIFY: will ask regtests to run Simplify on this program

#pragma JessieIntegerModel(math)

#include "sorting.h"

/*@ requires \valid(t+(0..n-1));
  @ ensures Sorted(t,0,n-1);
  @*/
void insert_sort(int t[], int n) {
  int i,j;
  int mv;
  if (n <= 1) return;
  /*@ loop invariant 0 <= i <= n;
    @ loop invariant Sorted(t,0,i);
    @ loop variant n-i;
    @*/
  for (i=1; i<n; i++) {
    // assuming t[0..i-1] is sorted, insert t[i] at the right place
    mv = t[i]; 
    /*@ loop invariant 0 <= j <= i;
      @ loop invariant j == i ==> Sorted(t,0,i);
      @ loop invariant j < i ==> Sorted(t,0,i+1);
      @ loop invariant \forall integer k; j <= k < i ==> t[k] > mv;
      @ loop variant j;
      @*/
    // look for the right index j to put t[i]
    for (j=i; j > 0; j--) {
      if (t[j-1] <= mv) break;
      t[j] = t[j-1];
    }
    t[j] = mv;
  }
}


/*
Local Variables:
compile-command: "make insertion_sort.why3ide"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/insertion_sort.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/insertion_sort.jessie
[jessie] File tests/c/insertion_sort.jessie/insertion_sort.jc written.
[jessie] File tests/c/insertion_sort.jessie/insertion_sort.cloc written.
========== file tests/c/insertion_sort.jessie/insertion_sort.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag intP = {
  integer intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  integer unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate Swap{L1, L2}(intP[..] a, integer i_1, integer j_0) =
(((\at((a + i_1).intM,L1) == \at((a + j_0).intM,L2)) &&
   (\at((a + j_0).intM,L1) == \at((a + i_1).intM,L2))) &&
  (\forall integer k;
    (((k != i_1) && (k != j_0)) ==>
      (\at((a + k).intM,L1) == \at((a + k).intM,L2)))))

predicate Permut{L1, L2}(intP[..] a_0, integer l, integer h) {
case Permut_refl{L}: \at((\forall intP[..] a_1;
                           (\forall integer l_0;
                             (\forall integer h_0;
                               Permut{L,
                               L}(a_1, l_0, h_0)))),L);
  
  case Permut_sym{L1, L2}: (\forall intP[..] a_2;
                             (\forall integer l_1;
                               (\forall integer h_1;
                                 (Permut{L1,
                                   L2}(a_2, l_1, h_1) ==>
                                   Permut{L2,
                                   L1}(a_2, l_1, h_1)))));
  
  case Permut_trans{L1, L2, L3}: (\forall intP[..] a_3;
                                   (\forall integer l_2;
                                     (\forall integer h_2;
                                       ((Permut{L1,
                                          L2}(a_3, l_2, h_2) &&
                                          Permut{L2,
                                          L3}(a_3, l_2, h_2)) ==>
                                         Permut{L1,
                                         L3}(a_3, l_2, h_2)))));
  
  case Permut_swap{L1, L2}: (\forall intP[..] a_4;
                              (\forall integer l_3;
                                (\forall integer h_3;
                                  (\forall integer i_2;
                                    (\forall integer j_1;
                                      (((((l_3 <= i_2) && (i_2 <= h_3)) &&
                                          ((l_3 <= j_1) && (j_1 <= h_3))) &&
                                         Swap{L1,
                                         L2}(a_4, i_2, j_1)) ==>
                                        Permut{L1,
                                        L2}(a_4, l_3, h_3)))))));
  
}

predicate Sorted{L}(intP[..] a_5, integer l_4, integer h_4) =
(\forall integer i_3;
  (\forall integer j_2;
    (((l_4 <= i_3) && ((i_3 <= j_2) && (j_2 < h_4))) ==>
      ((a_5 + i_3).intM <= (a_5 + j_2).intM))))

unit insert_sort(intP[..] t, integer n_1)
  requires (C_35 : ((C_36 : (\offset_min(t) <= 0)) &&
                     (C_37 : (\offset_max(t) >= (n_1 - 1)))));
behavior default:
  ensures (C_34 : Sorted{Here}(\at(t,Old), 0, (\at(n_1,Old) - 1)));
{  
   (var integer i);
   
   (var integer j);
   
   (var integer mv);
   
   {  (if (n_1 <= 1) then 
      (goto return_label) else ());
      (C_1 : (i = 1));
      
      loop 
      behavior default:
        invariant (C_4 : ((C_5 : (0 <= i)) && (C_6 : (i <= n_1))));
      behavior default:
        invariant (C_3 : Sorted{Here}(t, 0, i));
      variant (C_2 : (n_1 - i));
      while (true)
      {  
         {  (if (i < n_1) then () else 
            (goto while_0_break));
            
            {  (C_9 : (mv = (C_8 : (C_7 : (t + i)).intM)));
               (C_10 : (j = i));
               
               loop 
               behavior default:
                 invariant (C_15 : ((C_16 : (0 <= j)) && (C_17 : (j <= i))));
               behavior default:
                 invariant (C_14 : ((j == i) ==> Sorted{Here}(t, 0, i)));
               behavior default:
                 invariant (C_13 : ((j < i) ==> Sorted{Here}(t, 0, (i + 1))));
               behavior default:
                 invariant (C_12 : (\forall integer k_0;
                                     (((j <= k_0) && (k_0 < i)) ==>
                                       ((t + k_0).intM > mv))));
               variant (C_11 : j);
               while (true)
               {  
                  {  (if (j > 0) then () else 
                     (goto while_1_break));
                     
                     {  (if ((C_20 : (C_19 : (t + (C_18 : (j - 1)))).intM) <=
                              mv) then 
                        (goto while_1_break) else ());
                        (C_26 : ((C_25 : (C_24 : (t + j)).intM) = (C_23 : 
                                                                  (C_22 : 
                                                                  (t +
                                                                    (C_21 : 
                                                                    (j -
                                                                    1)))).intM)))
                     };
                     (C_28 : (j = (C_27 : (j - 1))))
                  }
               };
               (while_1_break : ());
               (C_31 : ((C_30 : (C_29 : (t + j)).intM) = mv))
            };
            (C_33 : (i = (C_32 : (i + 1))))
         }
      };
      (while_0_break : ());
      (return_label : 
      (return ()))
   }
}
========== file tests/c/insertion_sort.jessie/insertion_sort.cloc ==========
[C_15]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 34

[C_11]
file = "HOME/tests/c/insertion_sort.c"
line = 56
begin = 21
end = 22

[C_1]
file = "HOME/tests/c/insertion_sort.c"
line = 49
begin = 9
end = 10

[C_33]
file = "HOME/tests/c/insertion_sort.c"
line = 49
begin = 17
end = 20

[C_9]
file = "HOME/tests/c/insertion_sort.c"
line = 51
begin = 9
end = 13

[C_10]
file = "HOME/tests/c/insertion_sort.c"
line = 59
begin = 11
end = 12

[C_20]
file = "HOME/tests/c/insertion_sort.c"
line = 60
begin = 10
end = 16

[C_32]
file = "HOME/tests/c/insertion_sort.c"
line = 49
begin = 17
end = 20

[C_17]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 28
end = 34

[C_36]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[C_5]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 27

[C_34]
file = "HOME/tests/c/insertion_sort.c"
line = 39
begin = 12
end = 27

[C_29]
file = "HOME/tests/c/insertion_sort.c"
line = 63
begin = 4
end = 5

[C_13]
file = "HOME/tests/c/insertion_sort.c"
line = 54
begin = 23
end = 48

[C_7]
file = "HOME/tests/c/insertion_sort.c"
line = 51
begin = 9
end = 10

[C_22]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 13
end = 14

[C_14]
file = "HOME/tests/c/insertion_sort.c"
line = 53
begin = 23
end = 47

[C_35]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[C_25]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 13
end = 19

[C_8]
file = "HOME/tests/c/insertion_sort.c"
line = 51
begin = 9
end = 13

[insert_sort]
name = "Function insert_sort"
file = "HOME/tests/c/insertion_sort.c"
line = 41
begin = 5
end = 16

[C_27]
file = "HOME/tests/c/insertion_sort.c"
line = 59
begin = 21
end = 24

[C_37]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[C_19]
file = "HOME/tests/c/insertion_sort.c"
line = 60
begin = 10
end = 11

[C_4]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 32

[C_12]
file = "HOME/tests/c/insertion_sort.c"
line = 55
begin = 23
end = 66

[C_26]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 13
end = 19

[C_18]
file = "HOME/tests/c/insertion_sort.c"
line = 60
begin = 12
end = 15

[C_2]
file = "HOME/tests/c/insertion_sort.c"
line = 47
begin = 19
end = 22

[C_28]
file = "HOME/tests/c/insertion_sort.c"
line = 59
begin = 21
end = 24

[C_24]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 6
end = 7

[C_6]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 26
end = 32

[C_30]
file = "HOME/tests/c/insertion_sort.c"
line = 63
begin = 11
end = 13

[C_21]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 15
end = 18

[C_3]
file = "HOME/tests/c/insertion_sort.c"
line = 46
begin = 21
end = 34

[C_16]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 29

[C_31]
file = "HOME/tests/c/insertion_sort.c"
line = 63
begin = 11
end = 13

[C_23]
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 13
end = 19

========== jessie execution ==========
Generating Why function insert_sort
========== file tests/c/insertion_sort.jessie/insertion_sort.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

USERWHYTWOOPT= -split-user-conj
USERWHYTHREEOPT=
WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs insertion_sort.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs insertion_sort.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/insertion_sort_why.sx

project: why/insertion_sort.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/insertion_sort_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/insertion_sort_why.vo

coq/insertion_sort_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/insertion_sort_why.v: why/insertion_sort.why
	@echo 'why -coq [...] why/insertion_sort.why' && $(WHY) $(JESSIELIBFILES) why/insertion_sort.why && rm -f coq/jessie_why.v

coq-goals: goals coq/insertion_sort_ctx_why.vo
	for f in why/*_po*.why; do make -f insertion_sort.makefile coq/`basename $$f .why`_why.v ; done

coq/insertion_sort_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/insertion_sort_ctx_why.v: why/insertion_sort_ctx.why
	@echo 'why -coq [...] why/insertion_sort_ctx.why' && $(WHY) why/insertion_sort_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export insertion_sort_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/insertion_sort_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/insertion_sort_ctx_why.vo

pvs: pvs/insertion_sort_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/insertion_sort_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/insertion_sort_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/insertion_sort_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/insertion_sort_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/insertion_sort_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/insertion_sort_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/insertion_sort_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/insertion_sort_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/insertion_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/insertion_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/insertion_sort_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/insertion_sort_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/insertion_sort_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/insertion_sort_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: insertion_sort.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/insertion_sort_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: insertion_sort.mlw
	 why3 $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3ide: insertion_sort.mlw
	 why3ide $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3replay: insertion_sort.mlw
	 why3replayer $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

-include insertion_sort.depend

depend: coq/insertion_sort_why.v
	-$(COQDEP) -I coq coq/insertion_sort*_why.v > insertion_sort.depend

clean:
	rm -f coq/*.vo

========== file tests/c/insertion_sort.jessie/insertion_sort.loc ==========
[JC_51]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 117
begin = 15
end = 1508

[JC_45]
file = "HOME/tests/c/insertion_sort.c"
line = 53
begin = 23
end = 47

[JC_31]
kind = PointerDeref
file = "HOME/tests/c/insertion_sort.c"
line = 61
begin = 13
end = 19

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 34

[JC_23]
file = "HOME/tests/c/insertion_sort.c"
line = 53
begin = 23
end = 47

[JC_22]
file = "HOME/tests/c/insertion_sort.c"
line = 54
begin = 23
end = 48

[JC_5]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_9]
file = "HOME/tests/c/insertion_sort.c"
line = 39
begin = 12
end = 27

[JC_24]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 29

[JC_25]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 28
end = 34

[JC_41]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 103
begin = 6
end = 2122

[JC_47]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 28
end = 34

[JC_26]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 34

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/c/insertion_sort.c"
line = 46
begin = 21
end = 34

[insert_sort_ensures_default]
name = "Function insert_sort"
behavior = "default behavior"
file = "HOME/tests/c/insertion_sort.c"
line = 41
begin = 5
end = 16

[JC_11]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 26
end = 32

[JC_36]
file = "HOME/tests/c/insertion_sort.c"
line = 46
begin = 21
end = 34

[JC_39]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 32

[JC_40]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_35]
file = "HOME/tests/c/insertion_sort.c"
line = 47
begin = 19
end = 22

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 26
end = 32

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_44]
file = "HOME/tests/c/insertion_sort.c"
line = 54
begin = 23
end = 48

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_42]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 103
begin = 6
end = 2122

[JC_46]
file = "HOME/tests/c/insertion_sort.c"
line = 52
begin = 23
end = 29

[JC_32]
kind = PointerDeref
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 137
begin = 33
end = 450

[JC_33]
file = "HOME/tests/c/insertion_sort.c"
line = 56
begin = 21
end = 22

[JC_29]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 117
begin = 15
end = 1508

[JC_7]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_16]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 32

[JC_43]
file = "HOME/tests/c/insertion_sort.c"
line = 55
begin = 23
end = 66

[JC_2]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_34]
kind = PointerDeref
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 148
begin = 24
end = 59

[JC_14]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 27

[JC_21]
file = "HOME/tests/c/insertion_sort.c"
line = 55
begin = 23
end = 66

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_37]
file = "HOME/tests/c/insertion_sort.c"
line = 45
begin = 21
end = 27

[insert_sort_safety]
name = "Function insert_sort"
behavior = "Safety"
file = "HOME/tests/c/insertion_sort.c"
line = 41
begin = 5
end = 16

[JC_10]
file = "HOME/tests/c/insertion_sort.c"
line = 39
begin = 12
end = 27

[JC_20]
kind = PointerDeref
file = "HOME/tests/c/insertion_sort.c"
line = 51
begin = 9
end = 13

[JC_18]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 103
begin = 6
end = 2122

[JC_3]
file = "HOME/tests/c/insertion_sort.c"
line = 38
begin = 13
end = 31

[JC_19]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 103
begin = 6
end = 2122

[JC_50]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 117
begin = 15
end = 1508

[JC_30]
kind = PointerDeref
file = "HOME/tests/c/insertion_sort.c"
line = 60
begin = 10
end = 16

[JC_28]
file = "HOME/tests/c/insertion_sort.jessie/insertion_sort.jc"
line = 117
begin = 15
end = 1508

========== file tests/c/insertion_sort.jessie/why/insertion_sort.why ==========
type charP

type intP

type padding

type unsigned_charP

type voidP

predicate Swap(a:intP pointer, i_1:int, j_0:int,
 intP_intM_a_1_at_L2:(intP, int) memory,
 intP_intM_a_1_at_L1:(intP, int) memory) =
 ((select(intP_intM_a_1_at_L1, shift(a, i_1)) = select(intP_intM_a_1_at_L2,
                                                shift(a, j_0)))
 and ((select(intP_intM_a_1_at_L1, shift(a, j_0)) = select(intP_intM_a_1_at_L2,
                                                    shift(a, i_1)))
     and (forall k:int.
          (((k <> i_1) and (k <> j_0)) ->
           (select(intP_intM_a_1_at_L1, shift(a, k)) = select(intP_intM_a_1_at_L2,
                                                       shift(a, k)))))))

inductive Permut: intP pointer, int, int, (intP, int) memory,
                  (intP, int) memory -> prop =
 | Permut_refl: (forall intP_intM_a_0_2_at_L:(intP, int) memory.
                 (forall a_1:intP pointer.
                  (forall l_0:int.
                   (forall h_0:int.
                    Permut(a_1, l_0, h_0, intP_intM_a_0_2_at_L,
                    intP_intM_a_0_2_at_L)))))
 | Permut_sym: (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                 (forall a_2:intP pointer.
                  (forall l_1:int.
                   (forall h_1:int.
                    (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
                     intP_intM_a_0_2_at_L1) ->
                     Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L1,
                     intP_intM_a_0_2_at_L2)))))))
 | Permut_trans: (forall intP_intM_a_0_2_at_L3:(intP, int) memory.
                  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                   (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                    (forall a_3:intP pointer.
                     (forall l_2:int.
                      (forall h_2:int.
                       ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                         intP_intM_a_0_2_at_L1)
                        and Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
                            intP_intM_a_0_2_at_L2)) ->
                        Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
                        intP_intM_a_0_2_at_L1))))))))
 | Permut_swap: (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                 (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                  (forall a_4:intP pointer.
                   (forall l_3:int.
                    (forall h_3:int.
                     (forall i_2:int.
                      (forall j_1:int.
                       ((le_int(l_3, i_2)
                        and (le_int(i_2, h_3)
                            and (le_int(l_3, j_1)
                                and (le_int(j_1, h_3)
                                    and Swap(a_4, i_2, j_1,
                                        intP_intM_a_0_2_at_L2,
                                        intP_intM_a_0_2_at_L1))))) ->
                        Permut(a_4, l_3, h_3, intP_intM_a_0_2_at_L2,
                        intP_intM_a_0_2_at_L1)))))))))
 
predicate Sorted(a_5:intP pointer, l_4:int, h_4:int,
 intP_intM_a_5_3_at_L:(intP, int) memory) =
 (forall i_3:int.
  (forall j_2:int.
   ((le_int(l_4, i_3) and (le_int(i_3, j_2) and lt_int(j_2, h_4))) ->
    le_int(select(intP_intM_a_5_3_at_L, shift(a_5, i_3)),
    select(intP_intM_a_5_3_at_L, shift(a_5, j_2))))))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter insert_sort :
 t:intP pointer ->
  n_1:int ->
   intP_intM_t_4:(intP, int) memory ref ->
    intP_t_4_alloc_table:intP alloc_table ->
     { } unit reads intP_intM_t_4 writes intP_intM_t_4
     { (JC_10: Sorted(t, (0), sub_int(n_1, (1)), intP_intM_t_4)) }

parameter insert_sort_requires :
 t:intP pointer ->
  n_1:int ->
   intP_intM_t_4:(intP, int) memory ref ->
    intP_t_4_alloc_table:intP alloc_table ->
     { (JC_3:
       ((JC_1: le_int(offset_min(intP_t_4_alloc_table, t), (0)))
       and (JC_2:
           ge_int(offset_max(intP_t_4_alloc_table, t), sub_int(n_1, (1))))))}
     unit reads intP_intM_t_4 writes intP_intM_t_4
     { (JC_10: Sorted(t, (0), sub_int(n_1, (1)), intP_intM_t_4)) }

let insert_sort_ensures_default =
 fun (t : intP pointer) (n_1 : int) (intP_intM_t_4 : (intP, int) memory ref) (intP_t_4_alloc_table : intP alloc_table) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(intP_t_4_alloc_table, t), (0)))
    and (JC_6:
        ge_int(offset_max(intP_t_4_alloc_table, t), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let i = ref (any_int void) in
     (let j = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      begin
        try
         (C_1:
         (loop_3:
         begin
           (if ((le_int_ n_1) (1)) then (raise (Return_label_exc void))
           else void); (let _jessie_<num> = (i := (1)) in void);
          while true do
          { invariant
              ((JC_36: Sorted(t, (0), i, intP_intM_t_4))
              and (JC_39:
                  ((JC_37: le_int((0), i)) and (JC_38: le_int(i, n_1))))) 
             }
           begin
             [ { } unit { true } ];
            try
             begin
               (let _jessie_<num> =
               (C_33:
               begin
                 (if ((lt_int_ !i) n_1) then void
                 else (raise (Goto_while_0_break_exc void)));
                try
                 (C_9:
                 (C_10:
                 (loop_4:
                 begin
                   (let _jessie_<num> =
                   (mv := (C_8:
                          ((safe_acc_ !intP_intM_t_4) (C_7: ((shift t) !i))))) in
                   void); (let _jessie_<num> = (j := !i) in void);
                  while true do
                  { invariant
                      ((JC_43:
                       (forall k_0:int.
                        ((le_int(j, k_0) and lt_int(k_0, i)) ->
                         gt_int(select(intP_intM_t_4, shift(t, k_0)), mv))))
                      and ((JC_44:
                           (lt_int(j, i) ->
                            Sorted(t, (0), add_int(i, (1)), intP_intM_t_4)))
                          and ((JC_45:
                               ((j = i) -> Sorted(t, (0), i, intP_intM_t_4)))
                              and (JC_48:
                                  ((JC_46: le_int((0), j))
                                  and (JC_47: le_int(j, i)))))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     begin
                       (let _jessie_<num> =
                       (C_28:
                       begin
                         (if ((gt_int_ !j) (0)) then void
                         else (raise (Goto_while_1_break_exc void)));
                        (let _jessie_<num> =
                        begin
                          (if ((le_int_ (C_20:
                                        ((safe_acc_ !intP_intM_t_4) (C_19:
                                                                    ((shift t) 
                                                                    (C_18:
                                                                    ((sub_int !j) (1)))))))) !mv)
                          then (raise (Goto_while_1_break_exc void))
                          else void);
                         (C_26:
                         (let _jessie_<num> =
                         (C_23:
                         ((safe_acc_ !intP_intM_t_4) (C_22:
                                                     ((shift t) (C_21:
                                                                ((sub_int !j) (1))))))) in
                         (let _jessie_<num> = t in
                         (let _jessie_<num> = !j in
                         (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
                         begin
                           (((safe_upd_ intP_intM_t_4) _jessie_<num>) _jessie_<num>);
                          _jessie_<num> end))))) end in void);
                        (j := (C_27: ((sub_int !j) (1)))); !j end) in void);
                      (raise (Loop_continue_exc void)) end with
                     Loop_continue_exc _jessie_<num> -> void end end done;
                  (raise (Goto_while_1_break_exc void)) end))) with
                 Goto_while_1_break_exc _jessie_<num> ->
                 (let _jessie_<num> =
                 (while_1_break:
                 begin
                   void;
                  (C_31:
                  (let _jessie_<num> = !mv in
                  (let _jessie_<num> = t in
                  (let _jessie_<num> = !j in
                  (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
                  begin
                    (((safe_upd_ intP_intM_t_4) _jessie_<num>) _jessie_<num>);
                   _jessie_<num> end))))) end) in void) end;
                (i := (C_32: ((add_int !i) (1)))); !i end) in void);
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc _jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc _jessie_<num> -> (while_0_break: void) end;
       (raise (Return_label_exc void)) end with Return_label_exc _jessie_<num> ->
      (return_label: (raise Return)) end))); (raise Return) end with
   Return -> void end)
  { (JC_9: Sorted(t, (0), sub_int(n_1, (1)), intP_intM_t_4)) }

let insert_sort_safety =
 fun (t : intP pointer) (n_1 : int) (intP_intM_t_4 : (intP, int) memory ref) (intP_t_4_alloc_table : intP alloc_table) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(intP_t_4_alloc_table, t), (0)))
    and (JC_6:
        ge_int(offset_max(intP_t_4_alloc_table, t), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let i = ref (any_int void) in
     (let j = ref (any_int void) in
     (let mv = ref (any_int void) in
     try
      begin
        try
         (C_1:
         (loop_1:
         begin
           (if ((le_int_ n_1) (1)) then (raise (Return_label_exc void))
           else void); (let _jessie_<num> = (i := (1)) in void);
          while true do
          { invariant (JC_18: true) variant (JC_35 : sub_int(n_1, i)) }
           begin
             [ { } unit reads i,intP_intM_t_4
               { ((JC_13: Sorted(t, (0), i, intP_intM_t_4))
                 and (JC_16:
                     ((JC_14: le_int((0), i)) and (JC_15: le_int(i, n_1))))) } ];
            try
             begin
               (let _jessie_<num> =
               (C_33:
               begin
                 (if ((lt_int_ !i) n_1) then void
                 else (raise (Goto_while_0_break_exc void)));
                try
                 (C_9:
                 (C_10:
                 (loop_2:
                 begin
                   (let _jessie_<num> =
                   (mv := (C_8:
                          (JC_20:
                          ((((offset_acc_ intP_t_4_alloc_table) !intP_intM_t_4) t) !i)))) in
                   void); (let _jessie_<num> = (j := !i) in void);
                  while true do
                  { invariant (JC_28: true) variant (JC_33 : j) }
                   begin
                     [ { } unit reads i,intP_intM_t_4,j,mv
                       { ((JC_21:
                          (forall k_0:int.
                           ((le_int(j, k_0) and lt_int(k_0, i)) ->
                            gt_int(select(intP_intM_t_4, shift(t, k_0)), mv))))
                         and ((JC_22:
                              (lt_int(j, i) ->
                               Sorted(t, (0), add_int(i, (1)), intP_intM_t_4)))
                             and ((JC_23:
                                  ((j = i) ->
                                   Sorted(t, (0), i, intP_intM_t_4)))
                                 and (JC_26:
                                     ((JC_24: le_int((0), j))
                                     and (JC_25: le_int(j, i))))))) } ];
                    try
                     begin
                       (let _jessie_<num> =
                       (C_28:
                       begin
                         (if ((gt_int_ !j) (0)) then void
                         else (raise (Goto_while_1_break_exc void)));
                        (let _jessie_<num> =
                        begin
                          (if ((le_int_ (C_20:
                                        (JC_30:
                                        ((((offset_acc_ intP_t_4_alloc_table) !intP_intM_t_4) t) 
                                         (C_18: ((sub_int !j) (1))))))) !mv)
                          then (raise (Goto_while_1_break_exc void))
                          else void);
                         (C_26:
                         (let _jessie_<num> =
                         (C_23:
                         (JC_31:
                         ((((offset_acc_ intP_t_4_alloc_table) !intP_intM_t_4) t) 
                          (C_21: ((sub_int !j) (1)))))) in
                         (let _jessie_<num> = t in
                         (let _jessie_<num> = !j in
                         (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
                         (JC_32:
                         begin
                           (((((offset_upd_ intP_t_4_alloc_table) intP_intM_t_4) _jessie_<num>) _jessie_<num>) _jessie_<num>);
                          _jessie_<num> end)))))) end in void);
                        (j := (C_27: ((sub_int !j) (1)))); !j end) in void);
                      (raise (Loop_continue_exc void)) end with
                     Loop_continue_exc _jessie_<num> -> void end end done;
                  (raise (Goto_while_1_break_exc void)) end))) with
                 Goto_while_1_break_exc _jessie_<num> ->
                 (let _jessie_<num> =
                 (while_1_break:
                 begin
                   void;
                  (C_31:
                  (let _jessie_<num> = !mv in
                  (let _jessie_<num> = t in
                  (let _jessie_<num> = !j in
                  (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
                  (JC_34:
                  begin
                    (((((offset_upd_ intP_t_4_alloc_table) intP_intM_t_4) _jessie_<num>) _jessie_<num>) _jessie_<num>);
                   _jessie_<num> end)))))) end) in void) end;
                (i := (C_32: ((add_int !i) (1)))); !i end) in void);
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc _jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc _jessie_<num> -> (while_0_break: void) end;
       (raise (Return_label_exc void)) end with Return_label_exc _jessie_<num> ->
      (return_label: (raise Return)) end))); (raise Return) end with
   Return -> void end) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/insertion_sort.why
========== file tests/c/insertion_sort.jessie/why/insertion_sort_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type intP

type padding

type unsigned_charP

type voidP

predicate Swap(a: intP pointer, i_1: int, j_0: int,
  intP_intM_a_1_at_L2: (intP, int) memory, intP_intM_a_1_at_L1: (intP,
  int) memory) =
  ((select(intP_intM_a_1_at_L1, shift(a, i_1)) = select(intP_intM_a_1_at_L2,
   shift(a, j_0))) and
   ((select(intP_intM_a_1_at_L1, shift(a, j_0)) = select(intP_intM_a_1_at_L2,
    shift(a, i_1))) and
    (forall k:int.
      (((k <> i_1) and (k <> j_0)) -> (select(intP_intM_a_1_at_L1, shift(a,
       k)) = select(intP_intM_a_1_at_L2, shift(a, k)))))))

logic Permut : intP pointer, int, int, (intP, int) memory, (intP,
int) memory -> prop

axiom Permut_inversion:
  (forall aux_1:intP pointer.
    (forall aux_2:int.
      (forall aux_3:int.
        (forall aux_4:(intP, int) memory.
          (forall aux_5:(intP, int) memory [Permut(aux_1, aux_2, aux_3,
            aux_4, aux_5)].
            (Permut(aux_1, aux_2, aux_3, aux_4, aux_5) ->
             ((exists intP_intM_a_0_2_at_L:(intP, int) memory.
                (exists a_1:intP pointer.
                  (exists l_0:int.
                    (exists h_0:int.
                      ((aux_1 = a_1) and
                       ((aux_2 = l_0) and
                        ((aux_3 = h_0) and
                         ((aux_4 = intP_intM_a_0_2_at_L) and
                          (aux_5 = intP_intM_a_0_2_at_L))))))))) or
              ((exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                 (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                   (exists a_2:intP pointer.
                     (exists l_1:int.
                       (exists h_1:int.
                         (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
                          intP_intM_a_0_2_at_L1) and
                          ((aux_1 = a_2) and
                           ((aux_2 = l_1) and
                            ((aux_3 = h_1) and
                             ((aux_4 = intP_intM_a_0_2_at_L1) and
                              (aux_5 = intP_intM_a_0_2_at_L2))))))))))) or
               ((exists intP_intM_a_0_2_at_L3:(intP, int) memory.
                  (exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                    (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                      (exists a_3:intP pointer.
                        (exists l_2:int.
                          (exists h_2:int.
                            ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                              intP_intM_a_0_2_at_L1) and Permut(a_3, l_2,
                              h_2, intP_intM_a_0_2_at_L3,
                              intP_intM_a_0_2_at_L2)) and
                             ((aux_1 = a_3) and
                              ((aux_2 = l_2) and
                               ((aux_3 = h_2) and
                                ((aux_4 = intP_intM_a_0_2_at_L3) and
                                 (aux_5 = intP_intM_a_0_2_at_L1)))))))))))) or
                (exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                  (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                    (exists a_4:intP pointer.
                      (exists l_3:int.
                        (exists h_3:int.
                          (exists i_2:int.
                            (exists j_1:int.
                              (((l_3 <= i_2) and
                                ((i_2 <= h_3) and
                                 ((l_3 <= j_1) and
                                  ((j_1 <= h_3) and Swap(a_4, i_2, j_1,
                                   intP_intM_a_0_2_at_L2,
                                   intP_intM_a_0_2_at_L1))))) and
                               ((aux_1 = a_4) and
                                ((aux_2 = l_3) and
                                 ((aux_3 = h_3) and
                                  ((aux_4 = intP_intM_a_0_2_at_L2) and
                                   (aux_5 = intP_intM_a_0_2_at_L1))))))))))))))))))))))

axiom Permut_refl:
  (forall intP_intM_a_0_2_at_L:(intP, int) memory.
    (forall a_1:intP pointer.
      (forall l_0:int.
        (forall h_0:int. Permut(a_1, l_0, h_0, intP_intM_a_0_2_at_L,
          intP_intM_a_0_2_at_L)))))

axiom Permut_sym:
  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
      (forall a_2:intP pointer.
        (forall l_1:int.
          (forall h_1:int.
            (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
             intP_intM_a_0_2_at_L1) -> Permut(a_2, l_1, h_1,
             intP_intM_a_0_2_at_L1, intP_intM_a_0_2_at_L2)))))))

axiom Permut_trans:
  (forall intP_intM_a_0_2_at_L3:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
      (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
        (forall a_3:intP pointer.
          (forall l_2:int.
            (forall h_2:int.
              ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                intP_intM_a_0_2_at_L1) and Permut(a_3, l_2, h_2,
                intP_intM_a_0_2_at_L3, intP_intM_a_0_2_at_L2)) ->
               Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
               intP_intM_a_0_2_at_L1))))))))

axiom Permut_swap:
  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
      (forall a_4:intP pointer.
        (forall l_3:int.
          (forall h_3:int.
            (forall i_2:int.
              (forall j_1:int.
                (((l_3 <= i_2) and
                  ((i_2 <= h_3) and
                   ((l_3 <= j_1) and
                    ((j_1 <= h_3) and Swap(a_4, i_2, j_1,
                     intP_intM_a_0_2_at_L2, intP_intM_a_0_2_at_L1))))) ->
                 Permut(a_4, l_3, h_3, intP_intM_a_0_2_at_L2,
                 intP_intM_a_0_2_at_L1)))))))))

predicate Sorted(a_5: intP pointer, l_4: int, h_4: int,
  intP_intM_a_5_3_at_L: (intP, int) memory) =
  (forall i_3:int.
    (forall j_2:int.
      (((l_4 <= i_3) and ((i_3 <= j_2) and (j_2 < h_4))) ->
       (select(intP_intM_a_5_3_at_L, shift(a_5,
       i_3)) <= select(intP_intM_a_5_3_at_L, shift(a_5, j_2))))))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal insert_sort_ensures_default_po_1:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 <= 1) ->
  ("JC_9": Sorted(t, 0, (n_1 - 1), intP_intM_t_4))

goal insert_sort_ensures_default_po_2:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  ("JC_36": Sorted(t, 0, i, intP_intM_t_4))

goal insert_sort_ensures_default_po_3:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  ("JC_39": ("JC_37": (0 <= i)))

goal insert_sort_ensures_default_po_4:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  ("JC_39": ("JC_38": (i <= n_1)))

goal insert_sort_ensures_default_po_5:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall k_0:int.
  ((j <= k_0) and (k_0 < i0)) ->
  ("JC_43": (select(intP_intM_t_4_0, shift(t, k_0)) > mv))

goal insert_sort_ensures_default_po_6:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  (j < i0) ->
  ("JC_44": Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))

goal insert_sort_ensures_default_po_7:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  ("JC_48": ("JC_46": (0 <= j)))

goal insert_sort_ensures_default_po_8:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  ("JC_48": ("JC_47": (j <= i0)))

goal insert_sort_ensures_default_po_9:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_36": Sorted(t, 0, i1, intP_intM_t_4_2))

goal insert_sort_ensures_default_po_10:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_39": ("JC_37": (0 <= i1)))

goal insert_sort_ensures_default_po_11:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_39": ("JC_38": (i1 <= n_1)))

goal insert_sort_ensures_default_po_12:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  forall k_0:int.
  ((j1 <= k_0) and (k_0 < i0)) ->
  ("JC_43": (select(intP_intM_t_4_2, shift(t, k_0)) > mv))

goal insert_sort_ensures_default_po_13:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (j1 < i0) ->
  ("JC_44": Sorted(t, 0, (i0 + 1), intP_intM_t_4_2))

goal insert_sort_ensures_default_po_14:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (j1 = i0) ->
  ("JC_45": Sorted(t, 0, i0, intP_intM_t_4_2))

goal insert_sort_ensures_default_po_15:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ("JC_48": ("JC_46": (0 <= j1)))

goal insert_sort_ensures_default_po_16:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 > 0) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_1, shift(t, (j0 - 1)))) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  ("JC_48": ("JC_47": (j1 <= i0)))

goal insert_sort_ensures_default_po_17:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_36": Sorted(t, 0, i1, intP_intM_t_4_2))

goal insert_sort_ensures_default_po_18:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_39": ("JC_37": (0 <= i1)))

goal insert_sort_ensures_default_po_19:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  forall result:int.
  (result = select(intP_intM_t_4_0, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  forall j0:int.
  (("JC_43":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_1, shift(t,
      k_0)) > mv)))) and
   (("JC_44": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_1))) and
    (("JC_45": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_1))) and
     ("JC_48": (("JC_46": (0 <= j0)) and ("JC_47": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  forall intP_intM_t_4_2:(intP,
  int) memory.
  (intP_intM_t_4_2 = store(intP_intM_t_4_1, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  ("JC_39": ("JC_38": (i1 <= n_1)))

goal insert_sort_ensures_default_po_20:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4_0:(intP,
  int) memory.
  (("JC_36": Sorted(t, 0, i0, intP_intM_t_4_0)) and
   ("JC_39": (("JC_37": (0 <= i0)) and ("JC_38": (i0 <= n_1))))) ->
  (i0 >= n_1) ->
  ("JC_9": Sorted(t, 0, (n_1 - 1), intP_intM_t_4_0))

goal insert_sort_safety_po_1:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  (offset_min(intP_t_4_alloc_table, t) <= i0)

goal insert_sort_safety_po_2:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  (i0 <= offset_max(intP_t_4_alloc_table, t))

goal insert_sort_safety_po_3:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  (offset_min(intP_t_4_alloc_table, t) <= (j0 - 1))

goal insert_sort_safety_po_4:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))

goal insert_sort_safety_po_5:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  (offset_min(intP_t_4_alloc_table, t) <= j0)

goal insert_sort_safety_po_6:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  (j0 <= offset_max(intP_t_4_alloc_table, t))

goal insert_sort_safety_po_7:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (0 <= ("JC_35": (n_1 - i0)))

goal insert_sort_safety_po_8:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 <= mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (("JC_35": (n_1 - i1)) < ("JC_35": (n_1 - i0)))

goal insert_sort_safety_po_9:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (offset_min(intP_t_4_alloc_table, t) <= j0)

goal insert_sort_safety_po_10:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (j0 <= offset_max(intP_t_4_alloc_table, t))

goal insert_sort_safety_po_11:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (0 <= ("JC_33": j0))

goal insert_sort_safety_po_12:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 > 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  (result0 > mv) ->
  ((offset_min(intP_t_4_alloc_table, t) <= (j0 - 1)) and
   ((j0 - 1) <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result1:int.
  (result1 = select(intP_intM_t_4_0, shift(t, (j0 - 1)))) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), result1)) ->
  forall j1:int.
  (j1 = (j0 - 1)) ->
  (("JC_33": j1) < ("JC_33": j0))

goal insert_sort_safety_po_13:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  (offset_min(intP_t_4_alloc_table, t) <= j0)

goal insert_sort_safety_po_14:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  (j0 <= offset_max(intP_t_4_alloc_table, t))

goal insert_sort_safety_po_15:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (0 <= ("JC_35": (n_1 - i0)))

goal insert_sort_safety_po_16:
  forall t:intP pointer.
  forall n_1:int.
  forall intP_t_4_alloc_table:intP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(intP_t_4_alloc_table, t) <= 0)) and
   ("JC_6": (offset_max(intP_t_4_alloc_table, t) >= (n_1 - 1))))) ->
  (n_1 > 1) ->
  forall i:int.
  (i = 1) ->
  forall i0:int.
  forall intP_intM_t_4:(intP,
  int) memory.
  ("JC_18": true) ->
  (("JC_13": Sorted(t, 0, i0, intP_intM_t_4)) and
   ("JC_16": (("JC_14": (0 <= i0)) and ("JC_15": (i0 <= n_1))))) ->
  (i0 < n_1) ->
  ((offset_min(intP_t_4_alloc_table, t) <= i0) and
   (i0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_4, shift(t, i0))) ->
  forall mv:int.
  (mv = result) ->
  forall j:int.
  (j = i0) ->
  forall intP_intM_t_4_0:(intP,
  int) memory.
  forall j0:int.
  ("JC_28": true) ->
  (("JC_21":
   (forall k_0:int.
     (((j0 <= k_0) and (k_0 < i0)) -> (select(intP_intM_t_4_0, shift(t,
      k_0)) > mv)))) and
   (("JC_22": ((j0 < i0) -> Sorted(t, 0, (i0 + 1), intP_intM_t_4_0))) and
    (("JC_23": ((j0 = i0) -> Sorted(t, 0, i0, intP_intM_t_4_0))) and
     ("JC_26": (("JC_24": (0 <= j0)) and ("JC_25": (j0 <= i0))))))) ->
  (j0 <= 0) ->
  ((offset_min(intP_t_4_alloc_table, t) <= j0) and
   (j0 <= offset_max(intP_t_4_alloc_table, t))) ->
  forall intP_intM_t_4_1:(intP,
  int) memory.
  (intP_intM_t_4_1 = store(intP_intM_t_4_0, shift(t, j0), mv)) ->
  forall i1:int.
  (i1 = (i0 + 1)) ->
  (("JC_35": (n_1 - i1)) < ("JC_35": (n_1 - i0)))

// RUNSIMPLIFY: will ask regtests to run Simplify on this program
========== generation of Simplify VC output ==========
why -simplify [...] why/insertion_sort.why
========== file tests/c/insertion_sort.jessie/simplify/insertion_sort_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (ge_real (real_sqrt x) real_constant_0_0e) |@true|))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom sqr_sqrt
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (real_sqrt (real_mul x x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(BG_PUSH
 ;; Why axiom math_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))))

(BG_PUSH
 ;; Why axiom math_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0)
 (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))))

(BG_PUSH
 ;; Why axiom computer_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))))

(BG_PUSH
 ;; Why axiom computer_div_bound
 (FORALL (x y)
 (IMPLIES (AND (>= x 0) (> y 0))
 (AND (<= 0 (computer_div x y)) (<= (computer_div x y) x)))))

(BG_PUSH
 ;; Why axiom computer_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (< (abs_int (computer_mod x y)) (abs_int y))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (< (abs_int (computer_mod x y)) (abs_int y))))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_pos
 (FORALL (x y) (IMPLIES (AND (>= x 0) (NEQ y 0)) (>= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_neg
 (FORALL (x y) (IMPLIES (AND (<= x 0) (NEQ y 0)) (<= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_rounds_toward_zero
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom disj_sym
 (FORALL (s1 s2)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|) (EQ (disj_mybag s2 s1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_refl
 (FORALL (sa) (EQ (sub_mybag sa sa) |@true|)))

(BG_PUSH
 ;; Why axiom sub_disj
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))

 (FORALL (s1 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (FORALL (s2)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_in
 (FORALL (s1 s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))

 (FORALL (s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (FORALL (s1)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_sub
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))

 (FORALL (s1 s2)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (FORALL (s3)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_refl
 (FORALL (sa m) (EQ (frame_between sa m m) |@true|)))

(BG_PUSH
 ;; Why axiom frame_between_gen
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (FORALL (v) (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|)))))))

(BG_PUSH
 ;; Why axiom frame_between_gen2
 (FORALL (sa m1 m2 m3)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub1
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 s13)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (FORALL (m2 m1)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s23 m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub2
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 m1 m2)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s13 s23)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_pointer
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (EQ (select m1 p) (select m2 p)))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (FORALL (v) (EQ (select m1 p) (select m2 p))))))))

(BG_PUSH
 ;; Why axiom frame_between_sub
 (FORALL (sa sb m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (sb)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))))

(DEFPRED (Swap a i_1 j_0 intP_intM_a_1_at_L2 intP_intM_a_1_at_L1)
  (AND
  (EQ (select intP_intM_a_1_at_L1 (shift a i_1))
  (select intP_intM_a_1_at_L2 (shift a j_0)))
  (AND
  (EQ (select intP_intM_a_1_at_L1 (shift a j_0))
  (select intP_intM_a_1_at_L2 (shift a i_1)))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i_1) (NEQ k j_0))
  (EQ (select intP_intM_a_1_at_L1 (shift a k))
  (select intP_intM_a_1_at_L2 (shift a k))))))))

(BG_PUSH
 ;; Why axiom Permut_inversion
 (FORALL (aux_1 aux_2 aux_3 aux_4 aux_5)
 (IMPLIES (EQ (Permut aux_1 aux_2 aux_3 aux_4 aux_5) |@true|)
 (OR
 (EXISTS (intP_intM_a_0_2_at_L)
 (EXISTS (a_1)
 (EXISTS (l_0)
 (EXISTS (h_0)
 (AND (EQ aux_1 a_1)
 (AND (EQ aux_2 l_0)
 (AND (EQ aux_3 h_0)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L) (EQ aux_5 intP_intM_a_0_2_at_L)))))))))
 (OR
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_2)
 (EXISTS (l_1)
 (EXISTS (h_1)
 (AND
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (AND (EQ aux_1 a_2)
 (AND (EQ aux_2 l_1)
 (AND (EQ aux_3 h_1)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L1) (EQ aux_5 intP_intM_a_0_2_at_L2)))))))))))
 (OR
 (EXISTS (intP_intM_a_0_2_at_L3)
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_3)
 (EXISTS (l_2)
 (EXISTS (h_2)
 (AND
 (AND
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2) |@true|))
 (AND (EQ aux_1 a_3)
 (AND (EQ aux_2 l_2)
 (AND (EQ aux_3 h_2)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L3) (EQ aux_5 intP_intM_a_0_2_at_L1))))))))))))
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_4)
 (EXISTS (l_3)
 (EXISTS (h_3)
 (EXISTS (i_2)
 (EXISTS (j_1)
 (AND
 (AND (<= l_3 i_2)
 (AND (<= i_2 h_3)
 (AND (<= l_3 j_1)
 (AND (<= j_1 h_3)
 (Swap a_4 i_2 j_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1)))))
 (AND (EQ aux_1 a_4)
 (AND (EQ aux_2 l_3)
 (AND (EQ aux_3 h_3)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L2) (EQ aux_5 intP_intM_a_0_2_at_L1)))))))))))))))))))

(BG_PUSH
 ;; Why axiom Permut_refl
 (FORALL (intP_intM_a_0_2_at_L a_1 l_0 h_0)
 (EQ (Permut a_1 l_0 h_0 intP_intM_a_0_2_at_L intP_intM_a_0_2_at_L) |@true|)))

(BG_PUSH
 ;; Why axiom Permut_sym
 (FORALL (intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_2 l_1 h_1)
 (IMPLIES
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L1 intP_intM_a_0_2_at_L2) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_trans
 (FORALL (intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_3 l_2 h_2)
 (IMPLIES
 (AND
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2) |@true|))
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_swap
 (FORALL (intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_4 l_3 h_3 i_2 j_1)
 (IMPLIES
 (AND (<= l_3 i_2)
 (AND (<= i_2 h_3)
 (AND (<= l_3 j_1)
 (AND (<= j_1 h_3)
 (Swap a_4 i_2 j_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1)))))
 (EQ (Permut
 a_4 l_3 h_3 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|))))

(DEFPRED (Sorted a_5 l_4 h_4 intP_intM_a_5_3_at_L)
  (FORALL (i_3 j_2)
  (IMPLIES (AND (<= l_4 i_3) (AND (<= i_3 j_2) (< j_2 h_4)))
  (<= (select intP_intM_a_5_3_at_L (shift a_5 i_3)) (select
                                                    intP_intM_a_5_3_at_L 
                                                    (shift a_5 j_2))))))

(BG_PUSH
 ;; Why axiom charP_int
 (EQ (int_of_tag charP_tag) 1))

(BG_PUSH
 ;; Why axiom charP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (charP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom charP_parenttag_bottom
 (EQ (parenttag charP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom charP_tags
 (FORALL (x charP_tag_table) (instanceof charP_tag_table x charP_tag)))

(BG_PUSH
 ;; Why axiom intP_int
 (EQ (int_of_tag intP_tag) 1))

(BG_PUSH
 ;; Why axiom intP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (intP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom intP_parenttag_bottom
 (EQ (parenttag intP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom intP_tags
 (FORALL (x intP_tag_table) (instanceof intP_tag_table x intP_tag)))

(DEFPRED (left_valid_struct_charP p a charP_alloc_table)
  (<= (offset_min charP_alloc_table p) a))

(DEFPRED (left_valid_struct_intP p a intP_alloc_table)
  (<= (offset_min intP_alloc_table p) a))

(DEFPRED (left_valid_struct_unsigned_charP p a unsigned_charP_alloc_table)
  (<= (offset_min unsigned_charP_alloc_table p) a))

(DEFPRED (left_valid_struct_voidP p a voidP_alloc_table)
  (<= (offset_min voidP_alloc_table p) a))

(BG_PUSH
 ;; Why axiom pointer_addr_of_charP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (charP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_intP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (intP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_unsigned_charP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (unsigned_charP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_voidP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (voidP_of_pointer_address p)))))

(DEFPRED (right_valid_struct_charP p b charP_alloc_table)
  (>= (offset_max charP_alloc_table p) b))

(DEFPRED (right_valid_struct_intP p b intP_alloc_table)
  (>= (offset_max intP_alloc_table p) b))

(DEFPRED (right_valid_struct_unsigned_charP p b unsigned_charP_alloc_table)
  (>= (offset_max unsigned_charP_alloc_table p) b))

(DEFPRED (right_valid_struct_voidP p b voidP_alloc_table)
  (>= (offset_max voidP_alloc_table p) b))

(DEFPRED (strict_valid_root_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_root_intP p a b intP_alloc_table)
  (AND (EQ (offset_min intP_alloc_table p) a)
  (EQ (offset_max intP_alloc_table p) b)))

(DEFPRED (strict_valid_root_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (EQ (offset_min unsigned_charP_alloc_table p) a)
  (EQ (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (strict_valid_root_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_intP p a b intP_alloc_table)
  (AND (EQ (offset_min intP_alloc_table p) a)
  (EQ (offset_max intP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (EQ (offset_min unsigned_charP_alloc_table p) a)
  (EQ (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(BG_PUSH
 ;; Why axiom unsigned_charP_int
 (EQ (int_of_tag unsigned_charP_tag) 1))

(BG_PUSH
 ;; Why axiom unsigned_charP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (unsigned_charP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom unsigned_charP_parenttag_bottom
 (EQ (parenttag unsigned_charP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom unsigned_charP_tags
 (FORALL (x unsigned_charP_tag_table)
 (instanceof unsigned_charP_tag_table x unsigned_charP_tag)))

(DEFPRED (valid_root_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_root_intP p a b intP_alloc_table)
  (AND (<= (offset_min intP_alloc_table p) a)
  (>= (offset_max intP_alloc_table p) b)))

(DEFPRED (valid_root_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (<= (offset_min unsigned_charP_alloc_table p) a)
  (>= (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (valid_root_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(DEFPRED (valid_struct_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_struct_intP p a b intP_alloc_table)
  (AND (<= (offset_min intP_alloc_table p) a)
  (>= (offset_max intP_alloc_table p) b)))

(DEFPRED (valid_struct_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (<= (offset_min unsigned_charP_alloc_table p) a)
  (>= (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (valid_struct_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(BG_PUSH
 ;; Why axiom voidP_int
 (EQ (int_of_tag voidP_tag) 1))

(BG_PUSH
 ;; Why axiom voidP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (voidP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom voidP_parenttag_bottom
 (EQ (parenttag voidP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom voidP_tags
 (FORALL (x voidP_tag_table) (instanceof voidP_tag_table x voidP_tag)))

;; insert_sort_ensures_default_po_1, File "HOME/tests/c/insertion_sort.c", line 39, characters 12-27
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(FORALL (intP_intM_t_4)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (<= n_1 1) (Sorted t 0 (- n_1 1) intP_intM_t_4)))))))

;; insert_sort_ensures_default_po_2, File "HOME/tests/c/insertion_sort.c", line 46, characters 21-34
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(FORALL (intP_intM_t_4)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i) (IMPLIES (EQ i 1) (Sorted t 0 i intP_intM_t_4)))))))))

;; insert_sort_ensures_default_po_3, File "HOME/tests/c/insertion_sort.c", line 45, characters 21-27
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1) (FORALL (i) (IMPLIES (EQ i 1) (<= 0 i))))))))

;; insert_sort_ensures_default_po_4, File "HOME/tests/c/insertion_sort.c", line 45, characters 26-32
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1) (FORALL (i) (IMPLIES (EQ i 1) (<= i n_1))))))))

;; insert_sort_ensures_default_po_5, File "HOME/tests/c/insertion_sort.c", line 55, characters 23-66
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (k_0)
(IMPLIES (AND (<= j k_0) (< k_0 i0))
(> (select intP_intM_t_4_0 (shift t k_0)) mv))))))))))))))))))))

;; insert_sort_ensures_default_po_6, File "HOME/tests/c/insertion_sort.c", line 54, characters 23-48
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0) (IMPLIES (< j i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0)))))))))))))))))))

;; insert_sort_ensures_default_po_7, File "HOME/tests/c/insertion_sort.c", line 52, characters 23-29
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result) (FORALL (j) (IMPLIES (EQ j i0) (<= 0 j))))))))))))))))))

;; insert_sort_ensures_default_po_8, File "HOME/tests/c/insertion_sort.c", line 52, characters 28-34
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result) (FORALL (j) (IMPLIES (EQ j i0) (<= j i0))))))))))))))))))

;; insert_sort_ensures_default_po_9, File "HOME/tests/c/insertion_sort.c", line 46, characters 21-34
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (<= result0 mv)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (Sorted t 0 i1 intP_intM_t_4_2)))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_10, File "HOME/tests/c/insertion_sort.c", line 45, characters 21-27
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (<= result0 mv)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= 0 i1)))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_11, File "HOME/tests/c/insertion_sort.c", line 45, characters 26-32
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (<= result0 mv)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= i1 n_1)))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_12, File "HOME/tests/c/insertion_sort.c", line 55, characters 23-66
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_1 (shift t (- j0 1))))
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2
         (|why__store| intP_intM_t_4_1 (shift t j0) result1))
(FORALL (j1)
(IMPLIES (EQ j1 (- j0 1))
(FORALL (k_0)
(IMPLIES (AND (<= j1 k_0) (< k_0 i0))
(> (select intP_intM_t_4_2 (shift t k_0)) mv)))))))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_13, File "HOME/tests/c/insertion_sort.c", line 54, characters 23-48
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_1 (shift t (- j0 1))))
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2
         (|why__store| intP_intM_t_4_1 (shift t j0) result1))
(FORALL (j1)
(IMPLIES (EQ j1 (- j0 1))
(IMPLIES (< j1 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_2))))))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_14, File "HOME/tests/c/insertion_sort.c", line 53, characters 23-47
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_1 (shift t (- j0 1))))
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2
         (|why__store| intP_intM_t_4_1 (shift t j0) result1))
(FORALL (j1)
(IMPLIES (EQ j1 (- j0 1))
(IMPLIES (EQ j1 i0) (Sorted t 0 i0 intP_intM_t_4_2))))))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_15, File "HOME/tests/c/insertion_sort.c", line 52, characters 23-29
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_1 (shift t (- j0 1))))
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2
         (|why__store| intP_intM_t_4_1 (shift t j0) result1))
(FORALL (j1) (IMPLIES (EQ j1 (- j0 1)) (<= 0 j1)))))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_16, File "HOME/tests/c/insertion_sort.c", line 52, characters 28-34
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_1 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_1 (shift t (- j0 1))))
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2
         (|why__store| intP_intM_t_4_1 (shift t j0) result1))
(FORALL (j1) (IMPLIES (EQ j1 (- j0 1)) (<= j1 i0)))))))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_17, File "HOME/tests/c/insertion_sort.c", line 46, characters 21-34
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (Sorted t 0 i1 intP_intM_t_4_2))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_18, File "HOME/tests/c/insertion_sort.c", line 45, characters 21-27
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= 0 i1))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_19, File "HOME/tests/c/insertion_sort.c", line 45, characters 26-32
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4_0 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_1)
(FORALL (j0)
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_1 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_1))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_1))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0)
(FORALL (intP_intM_t_4_2)
(IMPLIES (EQ intP_intM_t_4_2 (|why__store| intP_intM_t_4_1 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= i1 n_1))))))))))))))))))))))))))

;; insert_sort_ensures_default_po_20, File "HOME/tests/c/insertion_sort.c", line 39, characters 12-27
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4_0)
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4_0) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (>= i0 n_1) (Sorted t 0 (- n_1 1) intP_intM_t_4_0))))))))))))

;; insert_sort_safety_po_1, File "HOME/tests/c/insertion_sort.c", line 51, characters 9-13
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1) (<= (offset_min intP_t_4_alloc_table t) i0)))))))))))))

;; insert_sort_safety_po_2, File "HOME/tests/c/insertion_sort.c", line 51, characters 9-13
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1) (<= i0 (offset_max intP_t_4_alloc_table t))))))))))))))

;; insert_sort_safety_po_3, File "HOME/tests/c/insertion_sort.c", line 60, characters 10-16
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0) (<= (offset_min intP_t_4_alloc_table t) (- j0 1))))))))))))))))))))))))))

;; insert_sort_safety_po_4, File "HOME/tests/c/insertion_sort.c", line 60, characters 10-16
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0) (<= (- j0 1) (offset_max intP_t_4_alloc_table t))))))))))))))))))))))))))

;; insert_sort_safety_po_5, File "why/insertion_sort.why", line 626, characters 21-108
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (<= result0 mv) (<= (offset_min intP_t_4_alloc_table t) j0)))))))))))))))))))))))))))))

;; insert_sort_safety_po_6, File "why/insertion_sort.why", line 626, characters 21-108
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (<= result0 mv) (<= j0 (offset_max intP_t_4_alloc_table t))))))))))))))))))))))))))))))

;; insert_sort_safety_po_7, File "HOME/tests/c/insertion_sort.c", line 47, characters 19-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (<= result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1 (|why__store| intP_intM_t_4_0 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= 0 (- n_1 i0)))))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_8, File "HOME/tests/c/insertion_sort.c", line 47, characters 19-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (<= result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1 (|why__store| intP_intM_t_4_0 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (< (- n_1 i1) (- n_1 i0)))))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_9, File "why/insertion_sort.why", line 608, characters 28-115
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_0 (shift t (- j0 1))))
(<= (offset_min intP_t_4_alloc_table t) j0))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_10, File "why/insertion_sort.why", line 608, characters 28-115
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_0 (shift t (- j0 1))))
(<= j0 (offset_max intP_t_4_alloc_table t)))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_11, File "HOME/tests/c/insertion_sort.c", line 56, characters 21-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1
         (|why__store| intP_intM_t_4_0 (shift t j0) result1))
(FORALL (j1) (IMPLIES (EQ j1 (- j0 1)) (<= 0 j0)))))))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_12, File "HOME/tests/c/insertion_sort.c", line 56, characters 21-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (> j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (> result0 mv)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) (- j0 1))
         (<= (- j0 1) (offset_max intP_t_4_alloc_table t)))
(FORALL (result1)
(IMPLIES (EQ result1 (select intP_intM_t_4_0 (shift t (- j0 1))))
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1
         (|why__store| intP_intM_t_4_0 (shift t j0) result1))
(FORALL (j1) (IMPLIES (EQ j1 (- j0 1)) (< j1 j0)))))))))))))))))))))))))))))))))))))

;; insert_sort_safety_po_13, File "why/insertion_sort.why", line 626, characters 21-108
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0) (<= (offset_min intP_t_4_alloc_table t) j0)))))))))))))))))))))))))

;; insert_sort_safety_po_14, File "why/insertion_sort.why", line 626, characters 21-108
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0) (<= j0 (offset_max intP_t_4_alloc_table t))))))))))))))))))))))))))

;; insert_sort_safety_po_15, File "HOME/tests/c/insertion_sort.c", line 47, characters 19-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1 (|why__store| intP_intM_t_4_0 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (<= 0 (- n_1 i0)))))))))))))))))))))))))))))))

;; insert_sort_safety_po_16, File "HOME/tests/c/insertion_sort.c", line 47, characters 19-22
(FORALL (t)
(FORALL (n_1)
(FORALL (intP_t_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) 0)
         (>= (offset_max intP_t_4_alloc_table t) (- n_1 1)))
(IMPLIES (> n_1 1)
(FORALL (i)
(IMPLIES (EQ i 1)
(FORALL (i0)
(FORALL (intP_intM_t_4)
(IMPLIES TRUE
(IMPLIES (AND (Sorted t 0 i0 intP_intM_t_4) (AND (<= 0 i0) (<= i0 n_1)))
(IMPLIES (< i0 n_1)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) i0)
         (<= i0 (offset_max intP_t_4_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_4 (shift t i0)))
(FORALL (mv)
(IMPLIES (EQ mv result)
(FORALL (j)
(IMPLIES (EQ j i0)
(FORALL (intP_intM_t_4_0)
(FORALL (j0)
(IMPLIES TRUE
(IMPLIES (AND
         (FORALL (k_0)
         (IMPLIES (AND (<= j0 k_0) (< k_0 i0))
         (> (select intP_intM_t_4_0 (shift t k_0)) mv)))
         (AND (IMPLIES (< j0 i0) (Sorted t 0 (+ i0 1) intP_intM_t_4_0))
         (AND (IMPLIES (EQ j0 i0) (Sorted t 0 i0 intP_intM_t_4_0))
         (AND (<= 0 j0) (<= j0 i0)))))
(IMPLIES (<= j0 0)
(IMPLIES (AND (<= (offset_min intP_t_4_alloc_table t) j0)
         (<= j0 (offset_max intP_t_4_alloc_table t)))
(FORALL (intP_intM_t_4_1)
(IMPLIES (EQ intP_intM_t_4_1 (|why__store| intP_intM_t_4_0 (shift t j0) mv))
(FORALL (i1) (IMPLIES (EQ i1 (+ i0 1)) (< (- n_1 i1) (- n_1 i0)))))))))))))))))))))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
Unknown section [Zenon] in config file '/home/cmarche/.whyrc'
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/insertion_sort_why.sx: .................................... (36/0/0/0/0)
total   :  36
valid   :  36 (100%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   0 (  0%)
failure :   0 (  0%)
