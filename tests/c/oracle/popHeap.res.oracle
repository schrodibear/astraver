========== file tests/c/popHeap.c ==========

/**
Extract from
http://www.first.fraunhofer.de/fileadmin/FIRST/ACSL-by-Example.pdf
*/

#pragma SeparationPolicy(none)


typedef int bool;
#define false		((bool)0)
#define true		((bool)1)

typedef int value_type;

typedef int size_type; 




/*@
  predicate IsValidRange(value_type* a, integer n) =
    (0 <= n) && \valid_range(a, 0, n-1);
*/

/*@
  predicate
    IsEqual{A,B}(value_type* a, integer n, value_type* b) =
      \forall integer i; 0 <= i < n ==> 
        \at(a[i], A) == \at(b[i], B);
*/



/*@
  axiomatic ParentChildAxioms
  {
    predicate ParentChild(integer i, integer j);

    axiom ParentChild_1:
      \forall integer i, j; ParentChild(i, j) <==>
         0 <= i < j && (j == 2*i+1 || j == 2*i+2);

    axiom ParentChild_2:
      \forall integer i, j; ParentChild(i, j) <==>
        0 < j && i == (j-1)/2;
  }

  lemma ParentChild_3:
    \forall integer i; 0 < i ==>
      ParentChild((i-1)/2, i) && 0 <= (i-1)/2 < i;

  predicate IsHeap{L}(value_type* c, integer n) = 
    \forall integer i, j;
      j < n && ParentChild(i, j) ==> c[i] >= c[j];
*/

/*@
  predicate IsMaximum{L}(value_type* a, integer n, integer max) =
     \forall integer i; 0 <= i < n ==> a[max] >= a[i];

  predicate IsFirstMaximum{L}(value_type* a, integer max) =
    \forall integer i; 0 <= i < max ==> a[i] < a[max];
*/

/*@
  axiomatic CountAxiomatic
  {
    logic integer Count{L}(value_type* a, value_type v,
                           integer i, integer j) reads a[i..(j-1)];

    axiom Count0:
      \forall value_type *a, v, integer i,j;
        i >= j ==> Count(a, v, i, j) == 0;

    axiom Count1:
      \forall value_type *a, v, integer i, j, k;
        0 <= i <= j <= k ==> Count(a, v, i ,k) ==
                             Count(a, v, i, j) + Count(a, v, j, k);

    axiom Count2:
      \forall value_type *a, v, integer i;
        (a[i] != v ==> Count(a, v, i, i+1) == 0) &&
        (a[i] == v ==> Count(a, v, i, i+1) == 1);

  logic integer CountWithHole{L}(value_type* c, value_type v, integer i, integer h,  integer j) =
      Count{L}(c, v, i, h) + Count{L}(c, v, h+1, j);

  logic integer CountWithoutHole{L}(value_type* c, value_type v, integer i, integer h,  integer j) =
      Count{L}(c, v, i, h) + Count{L}(c, v, h, j);
  }

  lemma CountLemma: \forall value_type *a, v, integer i;
    0 <= i ==> Count(a, v, 0, i+1) ==
               Count(a, v, 0, i) + Count(a, v, i, i+1);
*/

/*@
  predicate
    Permutation{A,B}(value_type* c, size_type n) = 
      \forall value_type x; 
        Count{A}(c, x, 0, n) == Count{B}(c, x, 0, n);
*/

/*@
  requires 0 < n && IsValidRange(a, n);
  requires IsHeap(a, n);

  assigns \nothing;

  ensures \forall integer i; 0 <= i < n ==> a[0] >= a[i];
*/
void pop_heap_induction(const value_type* a, size_type n);


/*@
  requires 0 < n && IsValidRange(a, n);
  requires 0 <= parent < child < n;
  requires a[parent] == a[child];

  assigns \nothing;

  ensures \forall value_type x; 
    CountWithHole(a, x, 0, child, n) == CountWithHole(a, x, 0, parent, n);
*/
void pop_push_heap_copy(value_type* a, size_type n, size_type parent, size_type child);

#define INT_MAX			2147483647

/*@
   requires 0 < n <  (INT_MAX-2)/2;
   requires IsValidRange(a, n);
   requires IsHeap(a, n);

   assigns a[0..(n-1)];

   ensures IsHeap(a, n-1);
   ensures a[n-1] == \old(a[0]);
   ensures IsMaximum(a, n, n-1);
   ensures Permutation{Old, Here}(a, n);
*/
void pop_heap(value_type* a, size_type n);


void pop_heap(value_type* a, size_type n)
{
  //@ ghost pop_heap_induction(a,n);
  //@ assert \forall integer i; 0 < i < n ==> a[0] >= a[i];
  value_type tmp = 0, max = 0;
  size_type hole = 0;
  tmp = a[n-1];
  max  = a[0];
  /*@ assert \forall value_type x;
        CountWithHole(a,x,0,hole,n) == Count{Pre}(a,x,1,n);
  */
  /*@
     loop invariant 0 <= hole < n;
     loop invariant IsHeap(a,n-1);
     loop invariant \forall integer i; 0 <= i < n ==> a[i] <= max;
     loop invariant \forall integer i;
        hole < n-1 && ParentChild(i,hole) ==> a[i] >= tmp;
     loop invariant \forall value_type x;
        CountWithHole(a,x,0,hole,n) == Count{Pre}(a,x,1,n);
     loop invariant \at(a[n-1],Pre) == a[n-1];

     loop assigns a[0..hole],hole;
     loop   variant n - hole;
  */
  while (true)
  {
    size_type child = 2*hole + 2;
    if (child < n-1)
    {
      if (a[child] < a[child-1]) child--;
      //@ assert ParentChild(hole,child);
      if (a[child] > tmp)
      {
        //@ assert hole < n-1;
        a[hole] = a[child];
        //@ assert \at(a[n-1],Pre) == a[n-1];
        //@ ghost pop_push_heap_copy(a,n,hole,child);
        hole = child;
      }
      else break;
    }
    else
    {
      child = 2*hole + 1;
      if (child == n-2 && a[child] > tmp)
      {
        //@ assert hole < n-1;
        a[hole] = a[child];
        //@ assert \at(a[n-1],Pre) == a[n-1];
        //@ ghost pop_push_heap_copy(a,n,hole,child);
        hole = child;
      }
      break;
    }
  }
  /*@  assert \forall integer i;
    hole < n-1 && ParentChild(i,hole) ==> a[i] >= tmp;
  */

  a[hole] = tmp;
  /*@ assert \forall value_type x;
        CountWithHole(a,x,0,hole,n) == Count{Pre}(a,x,1,n);
  */
  //@ assert hole<n-1 ==> a[hole] ==tmp== \at(a[n-1],Pre) == a[n-1];
  /*@ assert \forall value_type x; hole < n-1 ==>
        Count(a,x,hole+1,(n-1)+1)==CountWithoutHole(a,x,hole+1,n-1,n);
  */

  /*@ assert \forall value_type x;
      (hole < n-1 ==> CountWithHole(a,x,0,hole,n) ==
        CountWithHole(a,x,0,hole,n-1) +  Count(a,x,n-1 ,(n-1)+1) ==
        CountWithoutHole(a,x,0,hole,hole+1) + Count(a,x,hole+1,n-1) ==
        CountWithoutHole(a,x,0,hole,n-1) ==
        Count(a,x,0,n-1)) &&
      (hole == n-1 ==> CountWithHole(a,x,0,hole,n) ==
        CountWithHole(a,x,0,n-1,n) == Count(a,x,0,n-1));
  */
  /*@ assert \forall value_type x; Count(a,x,0,n-1) ==
        CountWithHole(a,x,0,hole,n) == Count{Pre}(a,x,1,n);
  */

  a[n-1]  = max;
  /*@ assert \forall value_type x;
        Count(a,x,n-1,(n-1)+1) == Count{Pre}(a,x,0,1);
  */
  /*@ assert \forall value_type x; CountWithoutHole(a,x,0,n-1,n) 
        == CountWithoutHole{Pre}(a,x,0,1,n);
  */
  /*@ assert \forall value_type x;
        Count(a,x,0,n) == CountWithoutHole(a,x,0,n-1,n) ==
        CountWithoutHole{Pre}(a,x,0,1,n) == Count{Pre}(a,x,0,n);
  */
}



void pop_heap_induction(const value_type* a, size_type n)
{
  /*@
  loop invariant 0 <= i <= n;
  loop invariant  \forall integer j;
     0 <= j < i <= n ==> a[0] >= a[j];
  loop   variant n - i;
  */
  for (size_type i = 1; i < n; i++)
  {
    //@ assert 0 < i ==> ParentChild((i-1)/2, i);
  }
}



========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/popHeap.c"
tests/c/popHeap.c:23:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/popHeap.jessie
[jessie] File tests/c/popHeap.jessie/popHeap.jc written.
[jessie] File tests/c/popHeap.jessie/popHeap.cloc written.
========== file tests/c/popHeap.jessie/popHeap.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = None
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate IsValidRange{L}(intP[..] a, integer n) =
\at(((0 <= n) && ((\offset_min(a) <= 0) && (\offset_max(a) >= (n - 1)))),L)

predicate IsEqual{A, B}(intP[..] a_0, integer n_0, intP[..] b) =
(\forall integer i;
  (((0 <= i) && (i < n_0)) ==>
    (\at((a_0 + i).intM,A) == \at((b + i).intM,B))))

axiomatic ParentChildAxioms {

  predicate ParentChild(integer i_0, integer j)
   
  axiom ParentChild_1 :
  (\forall integer i_1;
    (\forall integer j_0;
      (ParentChild(i_1, j_0) <==>
        (((0 <= i_1) && (i_1 < j_0)) &&
          ((j_0 == ((2 * i_1) + 1)) || (j_0 == ((2 * i_1) + 2)))))))
   
  axiom ParentChild_2 :
  (\forall integer i_2;
    (\forall integer j_1;
      (ParentChild(i_2, j_1) <==> ((0 < j_1) && (i_2 == ((j_1 - 1) / 2))))))
  
}

lemma ParentChild_3 :
(\forall integer i_3;
  ((0 < i_3) ==>
    (ParentChild(((i_3 - 1) / 2), i_3) &&
      ((0 <= ((i_3 - 1) / 2)) && (((i_3 - 1) / 2) < i_3)))))

predicate IsHeap{L}(intP[..] c, integer n_1) =
(\forall integer i_4;
  (\forall integer j_2;
    (((j_2 < n_1) && ParentChild(i_4, j_2)) ==>
      ((c + i_4).intM >= (c + j_2).intM))))

predicate IsMaximum{L}(intP[..] a_1, integer n_2, integer max) =
(\forall integer i_5;
  (((0 <= i_5) && (i_5 < n_2)) ==> ((a_1 + max).intM >= (a_1 + i_5).intM)))

predicate IsFirstMaximum{L}(intP[..] a_2, integer max_0) =
(\forall integer i_6;
  (((0 <= i_6) && (i_6 < max_0)) ==> ((a_2 + i_6).intM < (a_2 + max_0).intM)))

axiomatic CountAxiomatic {

  logic integer Count{L}(intP[..] a_3, int32 v, integer i_7, integer j_3)
  reads (a_3 + [i_7..(j_3 - 1)]).intM;
   
  axiom Count0{L} :
  (\forall intP[..] a_4;
    (\forall int32 v_0;
      (\forall integer i_8;
        (\forall integer j_4;
          ((i_8 >= j_4) ==> (Count{L}(a_4, v_0, i_8, j_4) == 0))))))
   
  axiom Count1{L} :
  (\forall intP[..] a_5;
    (\forall int32 v_1;
      (\forall integer i_9;
        (\forall integer j_5;
          (\forall integer k;
            (((0 <= i_9) && ((i_9 <= j_5) && (j_5 <= k))) ==>
              (Count{L}(a_5, v_1, i_9, k) ==
                (Count{L}(a_5, v_1, i_9, j_5) + Count{L}(a_5, v_1, j_5, k)))))))))
   
  axiom Count2{L} :
  (\forall intP[..] a_6;
    (\forall int32 v_2;
      (\forall integer i_10;
        ((((a_6 + i_10).intM != v_2) ==>
           (Count{L}(a_6, v_2, i_10, (i_10 + 1)) == 0)) &&
          (((a_6 + i_10).intM == v_2) ==>
            (Count{L}(a_6, v_2, i_10, (i_10 + 1)) == 1))))))
   
  logic integer CountWithHole{L}(intP[..] c_0, int32 v_3, integer i_11,
                                 integer h, integer j_6) =
  (Count{L}(c_0, v_3, i_11, h) + Count{L}(c_0, v_3, (h + 1), j_6))
   
  logic integer CountWithoutHole{L}(intP[..] c_1, int32 v_4, integer i_12,
                                    integer h_0, integer j_7) =
  (Count{L}(c_1, v_4, i_12, h_0) + Count{L}(c_1, v_4, h_0, j_7))
  
}

lemma CountLemma{L} :
(\forall intP[..] a_7;
  (\forall int32 v_5;
    (\forall integer i_13;
      ((0 <= i_13) ==>
        (Count{L}(a_7, v_5, 0, (i_13 + 1)) ==
          (Count{L}(a_7, v_5, 0, i_13) +
            Count{L}(a_7, v_5, i_13, (i_13 + 1))))))))

predicate Permutation{A, B}(intP[..] c_2, int32 n_3) =
(\forall int32 x;
  (Count{A}(c_2, x, 0, n_3) == Count{B}(c_2, x, 0, n_3)))

unit pop_push_heap_copy(intP[..] a_1, int32 n_1, int32 parent, int32 child)
  requires (C_8 : ((C_9 : (0 < n_1)) &&
                    (C_10 : IsValidRange{Here}(a_1, n_1))));
  requires (C_3 : ((C_4 : (0 <= parent)) &&
                    ((C_6 : (parent < child)) && (C_7 : (child < n_1)))));
  requires (C_2 : ((a_1 + parent).intM == (a_1 + child).intM));
behavior default:
  assigns \nothing;
  allocates \nothing;
  ensures (C_1 : (\forall int32 x_0;
                   (CountWithHole{Here}(\at(a_1,Old), x_0, 0, \at(child,Old),
                                        \at(n_1,Old)) ==
                     CountWithHole{Here}(\at(a_1,Old), x_0, 0,
                                         \at(parent,Old), \at(n_1,Old)))));
;

unit pop_heap(intP[..] a, int32 n)
  requires (C_106 : ((C_107 : (0 < n)) &&
                      (C_108 : (n < ((2147483647 - 2) / 2)))));
  requires (C_105 : IsValidRange{Here}(a, n));
  requires (C_104 : IsHeap{Here}(a, n));
behavior default:
  assigns (a + [0..(n - 1)]).intM;
  ensures (C_97 : ((C_98 : IsHeap{Here}(\at(a,Old), (\at(n,Old) - 1))) &&
                    ((C_100 : ((\at(a,Old) + (\at(n,Old) - 1)).intM ==
                                \at((a + 0).intM,Old))) &&
                      ((C_102 : IsMaximum{Here}(\at(a,Old), \at(n,Old),
                                                (\at(n,Old) - 1))) &&
                        (C_103 : Permutation{Old,
                        Here}(\at(a,Old), \at(n,Old)))))));
{  
   (var int32 tmp);
   
   (var int32 max);
   
   (var int32 hole);
   
   (var int32 child_0);
   
   {  (C_11 : pop_heap_induction(a, n));
      
      {  
         (assert for default: (C_12 : (\forall integer i_14;
                                        (((0 < i_14) && (i_14 < n)) ==>
                                          ((a + 0).intM >= (a + i_14).intM)))));
         ()
      };
      
      {  (C_13 : (tmp = 0));
         (C_14 : (max = 0))
      };
      (C_15 : (hole = 0));
      (C_20 : (tmp = (C_19 : (C_18 : (a +
                                       (C_17 : ((C_16 : (n - 1)) :> int32)))).intM)));
      (C_23 : (max = (C_22 : (C_21 : (a + 0)).intM)));
      
      {  
         (assert for default: (C_24 : (\forall int32 x_1;
                                        (CountWithHole{Here}(a, x_1, 0, hole,
                                                             n) ==
                                          Count{Pre}(a, x_1, 1, n)))));
         ()
      };
      
      loop 
      behavior default:
        invariant (C_31 : ((C_32 : (0 <= hole)) && (C_33 : (hole < n))));
      behavior default:
        invariant (C_30 : IsHeap{Here}(a, (n - 1)));
      behavior default:
        invariant (C_29 : (\forall integer i_15;
                            (((0 <= i_15) && (i_15 < n)) ==>
                              ((a + i_15).intM <= max))));
      behavior default:
        invariant (C_28 : (\forall integer i_16;
                            (((hole < (n - 1)) && ParentChild(i_16, hole)) ==>
                              ((a + i_16).intM >= tmp))));
      behavior default:
        invariant (C_27 : (\forall int32 x_2;
                            (CountWithHole{Here}(a, x_2, 0, hole, n) ==
                              Count{Pre}(a, x_2, 1, n))));
      behavior default:
        invariant (C_26 : (\at((a + (n - 1)).intM,Pre) == (a + (n - 1)).intM));
      behavior default:
        
        assigns (a + [0..hole]).intM,
        hole;
      variant (C_25 : (n - hole));
      while (true)
      {  
         {  (C_38 : (child_0 = (C_37 : ((C_36 : ((C_35 : ((C_34 : (2 * hole)) :> int32)) +
                                                  2)) :> int32))));
            (if (child_0 < (C_79 : ((C_78 : (n - 1)) :> int32))) then 
            {  (if ((C_65 : (C_64 : (a + child_0)).intM) <
                     (C_63 : (C_62 : (a +
                                       (C_61 : ((C_60 : (child_0 - 1)) :> int32)))).intM)) then 
               (C_59 : (child_0 = (C_58 : ((C_57 : (child_0 - 1)) :> int32)))) else ());
               
               {  
                  (assert for default: (C_66 : ParentChild(hole, child_0)));
                  ()
               };
               
               {  (if ((C_77 : (C_76 : (a + child_0)).intM) > tmp) then 
                  {  
                     {  
                        (assert for default: (C_67 : (hole < (n - 1))));
                        ()
                     };
                     (C_72 : ((C_71 : (C_70 : (a + hole)).intM) = (C_69 : 
                                                                  (C_68 : 
                                                                  (a +
                                                                    child_0)).intM)));
                     
                     {  
                        (assert for default: (C_73 : (\at((a + (n - 1)).intM,Pre) ==
                                                       (a + (n - 1)).intM)));
                        ()
                     };
                     (C_74 : pop_push_heap_copy(a, n, hole, child_0));
                     (C_75 : (hole = child_0))
                  } else 
                  (goto while_0_break))
               }
            } else 
            {  (C_43 : (child_0 = (C_42 : ((C_41 : ((C_40 : ((C_39 : 
                                                             (2 *
                                                               hole)) :> int32)) +
                                                     1)) :> int32))));
               (if (child_0 == (C_56 : ((C_55 : (n - 2)) :> int32))) then 
               (if ((C_54 : (C_53 : (a + child_0)).intM) > tmp) then 
               {  
                  {  
                     (assert for default: (C_44 : (hole < (n - 1))));
                     ()
                  };
                  (C_49 : ((C_48 : (C_47 : (a + hole)).intM) = (C_46 : 
                                                               (C_45 : 
                                                               (a +
                                                                 child_0)).intM)));
                  
                  {  
                     (assert for default: (C_50 : (\at((a + (n - 1)).intM,Pre) ==
                                                    (a + (n - 1)).intM)));
                     ()
                  };
                  (C_51 : pop_push_heap_copy(a, n, hole, child_0));
                  (C_52 : (hole = child_0))
               } else ()) else ());
               
               (goto while_0_break)
            })
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (C_80 : (\forall integer i_17;
                                        (((hole < (n - 1)) &&
                                           ParentChild(i_17, hole)) ==>
                                          ((a + i_17).intM >= tmp)))));
         ()
      };
      (C_83 : ((C_82 : (C_81 : (a + hole)).intM) = tmp));
      
      {  
         (assert for default: (C_84 : (\forall int32 x_3;
                                        (CountWithHole{Here}(a, x_3, 0, hole,
                                                             n) ==
                                          Count{Pre}(a, x_3, 1, n)))));
         ()
      };
      
      {  
         (assert for default: (C_85 : ((hole < (n - 1)) ==>
                                        (((a + hole).intM == tmp) &&
                                          ((tmp ==
                                             \at((a + (n - 1)).intM,Pre)) &&
                                            (\at((a + (n - 1)).intM,Pre) ==
                                              (a + (n - 1)).intM))))));
         ()
      };
      
      {  
         (assert for default: (C_86 : (\forall int32 x_4;
                                        ((hole < (n - 1)) ==>
                                          (Count{Here}(a, x_4, (hole + 1),
                                                       ((n - 1) + 1)) ==
                                            CountWithoutHole{Here}(a, x_4,
                                                                   (hole + 1),
                                                                   (n - 1), n))))));
         ()
      };
      
      {  
         (assert for default: (C_87 : (\forall int32 x_5;
                                        (((hole < (n - 1)) ==>
                                           ((CountWithHole{Here}(a, x_5, 0,
                                                                 hole, n) ==
                                              (CountWithHole{Here}(a, x_5, 0,
                                                                   hole,
                                                                   (n - 1)) +
                                                Count{Here}(a, x_5, (n - 1),
                                                            ((n - 1) + 1)))) &&
                                             (((CountWithHole{Here}(a, x_5,
                                                                    0, hole,
                                                                    (n - 1)) +
                                                 Count{Here}(a, x_5, 
                                                             (n - 1),
                                                             ((n - 1) + 1))) ==
                                                (CountWithoutHole{Here}(
                                                  a, x_5, 0, hole, (hole + 1)) +
                                                  Count{Here}(a, x_5,
                                                              (hole + 1),
                                                              (n - 1)))) &&
                                               (((CountWithoutHole{Here}(
                                                   a, x_5, 0, hole,
                                                   (hole + 1)) +
                                                   Count{Here}(a, x_5,
                                                               (hole + 1),
                                                               (n - 1))) ==
                                                  CountWithoutHole{Here}(
                                                  a, x_5, 0, hole, (n - 1))) &&
                                                 (CountWithoutHole{Here}(
                                                   a, x_5, 0, hole, (n - 1)) ==
                                                   Count{Here}(a, x_5, 0,
                                                               (n - 1))))))) &&
                                          ((hole == (n - 1)) ==>
                                            ((CountWithHole{Here}(a, x_5, 0,
                                                                  hole, n) ==
                                               CountWithHole{Here}(a, x_5, 0,
                                                                   (n - 1), n)) &&
                                              (CountWithHole{Here}(a, x_5, 0,
                                                                   (n - 1), n) ==
                                                Count{Here}(a, x_5, 0,
                                                            (n - 1)))))))));
         ()
      };
      
      {  
         (assert for default: (C_88 : (\forall int32 x_6;
                                        ((Count{Here}(a, x_6, 0, (n - 1)) ==
                                           CountWithHole{Here}(a, x_6, 0,
                                                               hole, n)) &&
                                          (CountWithHole{Here}(a, x_6, 0,
                                                               hole, n) ==
                                            Count{Pre}(a, x_6, 1, n))))));
         ()
      };
      (C_93 : ((C_92 : (C_91 : (a + (C_90 : ((C_89 : (n - 1)) :> int32)))).intM) = max));
      
      {  
         (assert for default: (C_94 : (\forall int32 x_7;
                                        (Count{Here}(a, x_7, (n - 1),
                                                     ((n - 1) + 1)) ==
                                          Count{Pre}(a, x_7, 0, 1)))));
         ()
      };
      
      {  
         (assert for default: (C_95 : (\forall int32 x_8;
                                        (CountWithoutHole{Here}(a, x_8, 0,
                                                                (n - 1), n) ==
                                          CountWithoutHole{Pre}(a, x_8, 0, 1,
                                                                n)))));
         ()
      };
      
      {  
         (assert for default: (C_96 : (\forall int32 x_9;
                                        ((Count{Here}(a, x_9, 0, n) ==
                                           CountWithoutHole{Here}(a, x_9, 0,
                                                                  (n - 1), n)) &&
                                          ((CountWithoutHole{Here}(a, x_9, 0,
                                                                   (n - 1), n) ==
                                             CountWithoutHole{Pre}(a, x_9, 0,
                                                                   1, n)) &&
                                            (CountWithoutHole{Pre}(a, x_9, 0,
                                                                   1, n) ==
                                              Count{Pre}(a, x_9, 0, n)))))));
         ()
      };
      
      (return ())
   }
}

unit pop_heap_induction(intP[..] a_0, int32 n_0)
  requires (C_121 : ((C_122 : (0 < n_0)) &&
                      (C_123 : IsValidRange{Here}(a_0, n_0))));
  requires (C_120 : IsHeap{Here}(a_0, n_0));
behavior default:
  assigns \nothing;
  ensures (C_119 : (\forall integer i_18;
                     (((0 <= i_18) && (i_18 < \at(n_0,Old))) ==>
                       ((\at(a_0,Old) + 0).intM >=
                         (\at(a_0,Old) + i_18).intM))));
{  
   (var int32 i);
   
   {  (C_109 : (i = 1));
      
      loop 
      behavior default:
        invariant (C_112 : ((C_113 : (0 <= i)) && (C_114 : (i <= n_0))));
      behavior default:
        invariant (C_111 : (\forall integer j_8;
                             (((0 <= j_8) && ((j_8 < i) && (i <= n_0))) ==>
                               ((a_0 + 0).intM >= (a_0 + j_8).intM))));
      variant (C_110 : (n_0 - i));
      while (true)
      {  
         {  (if (i < n_0) then () else 
            (goto while_0_break));
            
            {  
               {  
                  (assert for default: (C_115 : ((0 < i) ==>
                                                  ParentChild(((i - 1) / 2),
                                                              i))));
                  ()
               }
            };
            (C_118 : (i = (C_117 : ((C_116 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
========== file tests/c/popHeap.jessie/popHeap.cloc ==========
[C_50]
file = "HOME/tests/c/popHeap.c"
line = 193
begin = 19
end = 44

[C_51]
file = "HOME/tests/c/popHeap.c"
line = 194
begin = 18
end = 52

[C_52]
file = "HOME/tests/c/popHeap.c"
line = 195
begin = 15
end = 20

[C_53]
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 26
end = 27

[C_54]
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 26
end = 34

[C_55]
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 19
end = 22

[C_56]
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 19
end = 22

[C_57]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 33
end = 40

[C_58]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 33
end = 40

[C_59]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 33
end = 40

[pop_heap]
name = "Function pop_heap"
file = "HOME/tests/c/popHeap.c"
line = 145
begin = 5
end = 13

[Count0]
name = "Lemma Count0"
file = "HOME/tests/c/popHeap.c"
line = 72
begin = 4
end = 105

[Count1]
name = "Lemma Count1"
file = "HOME/tests/c/popHeap.c"
line = 76
begin = 4
end = 184

[Count2]
name = "Lemma Count2"
file = "HOME/tests/c/popHeap.c"
line = 81
begin = 4
end = 162

[C_60]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 23
end = 30

[C_61]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 23
end = 30

[C_62]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 21
end = 22

[C_10]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 20
end = 38

[C_63]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 21
end = 31

[C_11]
file = "HOME/tests/c/popHeap.c"
line = 147
begin = 12
end = 35

[C_64]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 10
end = 11

[C_12]
file = "HOME/tests/c/popHeap.c"
line = 148
begin = 13
end = 58

[C_65]
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 10
end = 18

[C_13]
file = "HOME/tests/c/popHeap.c"
line = 149
begin = 2
end = 12

[C_66]
file = "HOME/tests/c/popHeap.c"
line = 175
begin = 17
end = 40

[C_14]
file = "HOME/tests/c/popHeap.c"
line = 149
begin = 2
end = 12

[C_67]
file = "HOME/tests/c/popHeap.c"
line = 178
begin = 19
end = 29

[C_15]
file = "HOME/tests/c/popHeap.c"
line = 150
begin = 2
end = 11

[C_100]
file = "HOME/tests/c/popHeap.c"
line = 138
begin = 11
end = 31

[C_68]
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 18
end = 19

[C_16]
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 10
end = 13

[C_101]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_69]
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 18
end = 26

[C_17]
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 10
end = 13

[C_102]
file = "HOME/tests/c/popHeap.c"
line = 139
begin = 11
end = 31

[C_18]
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 8
end = 9

[C_103]
file = "HOME/tests/c/popHeap.c"
line = 140
begin = 11
end = 39

[C_19]
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 8
end = 14

[C_104]
file = "HOME/tests/c/popHeap.c"
line = 133
begin = 12
end = 24

[C_105]
file = "HOME/tests/c/popHeap.c"
line = 132
begin = 12
end = 30

[C_106]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 12
end = 37

[C_107]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 12
end = 17

[C_108]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 16
end = 37

[C_109]
file = "HOME/tests/c/popHeap.c"
line = 249
begin = 7
end = 16

[C_1]
file = "HOME/tests/c/popHeap.c"
line = 123
begin = 10
end = 105

[C_2]
file = "HOME/tests/c/popHeap.c"
line = 119
begin = 11
end = 32

[CountLemma]
name = "Lemma CountLemma"
file = "HOME/tests/c/popHeap.c"
line = 93
begin = 2
end = 150

[C_70]
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 8
end = 9

[C_3]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 11
end = 34

[C_71]
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 18
end = 26

[C_4]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 11
end = 22

[C_72]
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 18
end = 26

[C_20]
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 8
end = 14

[C_5]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 16
end = 34

[C_73]
file = "HOME/tests/c/popHeap.c"
line = 180
begin = 19
end = 44

[C_21]
file = "HOME/tests/c/popHeap.c"
line = 152
begin = 8
end = 9

[C_6]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 16
end = 30

[C_74]
file = "HOME/tests/c/popHeap.c"
line = 181
begin = 18
end = 52

[C_22]
file = "HOME/tests/c/popHeap.c"
line = 152
begin = 8
end = 12

[C_7]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 25
end = 34

[C_75]
file = "HOME/tests/c/popHeap.c"
line = 182
begin = 15
end = 20

[C_23]
file = "HOME/tests/c/popHeap.c"
line = 152
begin = 8
end = 12

[C_8]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 11
end = 38

[C_76]
file = "HOME/tests/c/popHeap.c"
line = 176
begin = 10
end = 11

[C_24]
file = "HOME/tests/c/popHeap.c"
line = 153
begin = 13
end = 93

[C_9]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 11
end = 16

[C_77]
file = "HOME/tests/c/popHeap.c"
line = 176
begin = 10
end = 18

[C_25]
file = "HOME/tests/c/popHeap.c"
line = 167
begin = 18
end = 26

[C_110]
file = "HOME/tests/c/popHeap.c"
line = 247
begin = 15
end = 20

[C_78]
file = "HOME/tests/c/popHeap.c"
line = 172
begin = 16
end = 19

[C_26]
file = "HOME/tests/c/popHeap.c"
line = 164
begin = 20
end = 45

[C_111]
file = "HOME/tests/c/popHeap.c"
line = 245
begin = 17
end = 73

[C_79]
file = "HOME/tests/c/popHeap.c"
line = 172
begin = 16
end = 19

[C_27]
file = "HOME/tests/c/popHeap.c"
line = 162
begin = 20
end = 100

[C_112]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 28

[C_28]
file = "HOME/tests/c/popHeap.c"
line = 160
begin = 20
end = 96

[C_113]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 23

[C_29]
file = "HOME/tests/c/popHeap.c"
line = 159
begin = 20
end = 65

[C_114]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 22
end = 28

[C_115]
file = "HOME/tests/c/popHeap.c"
line = 251
begin = 15
end = 48

[C_116]
file = "HOME/tests/c/popHeap.c"
line = 249
begin = 31
end = 34

[C_117]
file = "HOME/tests/c/popHeap.c"
line = 249
begin = 31
end = 34

[ParentChild_1]
name = "Lemma ParentChild_1"
file = "HOME/tests/c/popHeap.c"
line = 40
begin = 4
end = 126

[C_118]
file = "HOME/tests/c/popHeap.c"
line = 249
begin = 31
end = 34

[ParentChild_2]
name = "Lemma ParentChild_2"
file = "HOME/tests/c/popHeap.c"
line = 44
begin = 4
end = 106

[C_119]
file = "HOME/tests/c/popHeap.c"
line = 111
begin = 10
end = 56

[ParentChild_3]
name = "Lemma ParentChild_3"
file = "HOME/tests/c/popHeap.c"
line = 49
begin = 2
end = 234

[C_80]
file = "HOME/tests/c/popHeap.c"
line = 200
begin = 14
end = 86

[C_81]
file = "HOME/tests/c/popHeap.c"
line = 204
begin = 2
end = 3

[C_82]
file = "HOME/tests/c/popHeap.c"
line = 204
begin = 12
end = 15

[C_30]
file = "HOME/tests/c/popHeap.c"
line = 158
begin = 20
end = 33

[C_83]
file = "HOME/tests/c/popHeap.c"
line = 204
begin = 12
end = 15

[C_31]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 33

[C_84]
file = "HOME/tests/c/popHeap.c"
line = 205
begin = 13
end = 93

[C_32]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 29

[C_85]
file = "HOME/tests/c/popHeap.c"
line = 208
begin = 13
end = 67

[C_33]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 25
end = 33

[C_86]
file = "HOME/tests/c/popHeap.c"
line = 209
begin = 13
end = 119

[C_34]
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 28

[C_87]
file = "HOME/tests/c/popHeap.c"
line = 213
begin = 13
end = 408

[C_35]
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 28

[C_120]
file = "HOME/tests/c/popHeap.c"
line = 107
begin = 11
end = 23

[C_88]
file = "HOME/tests/c/popHeap.c"
line = 222
begin = 13
end = 113

[C_36]
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 32

[C_121]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 11
end = 38

[C_89]
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 4
end = 7

[C_37]
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 32

[C_122]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 11
end = 16

[C_38]
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 4
end = 13

[C_123]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 20
end = 38

[C_39]
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 20

[pop_heap_induction]
name = "Function pop_heap_induction"
file = "HOME/tests/c/popHeap.c"
line = 241
begin = 5
end = 23

[C_90]
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 4
end = 7

[C_91]
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 2
end = 3

[C_92]
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 11
end = 14

[C_40]
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 20

[C_93]
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 11
end = 14

[C_41]
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 24

[C_94]
file = "HOME/tests/c/popHeap.c"
line = 227
begin = 13
end = 88

[C_42]
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 24

[C_95]
file = "HOME/tests/c/popHeap.c"
line = 230
begin = 13
end = 108

[C_43]
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 24

[C_96]
file = "HOME/tests/c/popHeap.c"
line = 233
begin = 13
end = 157

[C_44]
file = "HOME/tests/c/popHeap.c"
line = 191
begin = 19
end = 29

[C_97]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_45]
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 18
end = 19

[C_98]
file = "HOME/tests/c/popHeap.c"
line = 137
begin = 11
end = 25

[C_46]
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 18
end = 26

[C_99]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_47]
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 8
end = 9

[C_48]
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 18
end = 26

[C_49]
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 18
end = 26

========== jessie execution ==========
Generating Why function pop_heap
Generating Why function pop_heap_induction
========== file tests/c/popHeap.jessie/popHeap.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs popHeap.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs popHeap.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/popHeap_why.sx

project: why/popHeap.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/popHeap_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/popHeap_why.vo

coq/popHeap_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/popHeap_why.v: why/popHeap.why
	@echo 'why -coq [...] why/popHeap.why' && $(WHY) $(JESSIELIBFILES) why/popHeap.why && rm -f coq/jessie_why.v

coq-goals: goals coq/popHeap_ctx_why.vo
	for f in why/*_po*.why; do make -f popHeap.makefile coq/`basename $$f .why`_why.v ; done

coq/popHeap_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/popHeap_ctx_why.v: why/popHeap_ctx.why
	@echo 'why -coq [...] why/popHeap_ctx.why' && $(WHY) why/popHeap_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export popHeap_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/popHeap_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/popHeap_ctx_why.vo

pvs: pvs/popHeap_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/popHeap_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/popHeap_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/popHeap_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/popHeap_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/popHeap_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/popHeap_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/popHeap_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/popHeap_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/popHeap_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/popHeap_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/popHeap_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/popHeap_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/popHeap_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/popHeap_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: popHeap.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/popHeap_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/popHeap_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: popHeap.mlw
	@echo 'why3ml [...] $<' && why3ide --extra-config $(JESSIE3CONF) $<

-include popHeap.depend

depend: coq/popHeap_why.v
	-$(COQDEP) -I coq coq/popHeap*_why.v > popHeap.depend

clean:
	rm -f coq/*.vo

========== file tests/c/popHeap.jessie/popHeap.loc ==========
[JC_90]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 280
begin = 26
end = 65

[JC_91]
file = "HOME/tests/c/popHeap.c"
line = 167
begin = 18
end = 26

[JC_92]
file = "HOME/tests/c/popHeap.c"
line = 200
begin = 14
end = 86

[JC_40]
file = "HOME/tests/c/popHeap.c"
line = 145
begin = 5
end = 13

[JC_93]
kind = PointerDeref
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 297
begin = 15
end = 54

[JC_41]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 155
begin = 9
end = 16

[JC_94]
file = "HOME/tests/c/popHeap.c"
line = 205
begin = 13
end = 93

[JC_42]
file = "HOME/tests/c/popHeap.c"
line = 137
begin = 11
end = 25

[JC_95]
file = "HOME/tests/c/popHeap.c"
line = 208
begin = 13
end = 67

[JC_43]
file = "HOME/tests/c/popHeap.c"
line = 138
begin = 11
end = 31

[JC_96]
file = "HOME/tests/c/popHeap.c"
line = 209
begin = 13
end = 119

[JC_44]
file = "HOME/tests/c/popHeap.c"
line = 139
begin = 11
end = 31

[pop_heap_induction_safety]
name = "Function pop_heap_induction"
behavior = "Safety"
file = "HOME/tests/c/popHeap.c"
line = 241
begin = 5
end = 23

[JC_150]
file = "HOME/tests/c/popHeap.c"
line = 245
begin = 17
end = 73

[JC_97]
file = "HOME/tests/c/popHeap.c"
line = 213
begin = 13
end = 408

[JC_45]
file = "HOME/tests/c/popHeap.c"
line = 140
begin = 11
end = 39

[JC_151]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 23

[JC_98]
file = "HOME/tests/c/popHeap.c"
line = 222
begin = 13
end = 113

[JC_46]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 11
end = 16

[JC_152]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 22
end = 28

[JC_100]
kind = PointerDeref
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 383
begin = 15
end = 86

[JC_99]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 226
begin = 4
end = 7

[JC_47]
file = "HOME/tests/c/popHeap.c"
line = 145
begin = 5
end = 13

[JC_2]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 20
end = 38

[JC_153]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 28

[JC_101]
file = "HOME/tests/c/popHeap.c"
line = 227
begin = 13
end = 88

[JC_48]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 155
begin = 9
end = 16

[JC_3]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 11
end = 22

[JC_154]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_102]
file = "HOME/tests/c/popHeap.c"
line = 230
begin = 13
end = 108

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 16
end = 30

[JC_155]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 436
begin = 6
end = 863

[JC_103]
file = "HOME/tests/c/popHeap.c"
line = 233
begin = 13
end = 157

[JC_5]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 25
end = 34

[JC_156]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 436
begin = 6
end = 863

[JC_104]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 173
begin = 14
end = 38

[JC_6]
file = "HOME/tests/c/popHeap.c"
line = 119
begin = 11
end = 32

[JC_157]
file = "HOME/tests/c/popHeap.c"
line = 251
begin = 15
end = 48

[JC_105]
file = "HOME/tests/c/popHeap.c"
line = 148
begin = 13
end = 58

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[pop_heap_induction_ensures_default]
name = "Function pop_heap_induction"
behavior = "default behavior"
file = "HOME/tests/c/popHeap.c"
line = 241
begin = 5
end = 23

[JC_158]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 249
begin = 31
end = 34

[JC_106]
file = "HOME/tests/c/popHeap.c"
line = 153
begin = 13
end = 93

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_159]
file = "HOME/tests/c/popHeap.c"
line = 247
begin = 15
end = 20

[JC_107]
file = "HOME/tests/c/popHeap.c"
line = 164
begin = 20
end = 45

[JC_9]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 11
end = 16

[JC_108]
file = "HOME/tests/c/popHeap.c"
line = 162
begin = 20
end = 100

[JC_109]
file = "HOME/tests/c/popHeap.c"
line = 160
begin = 20
end = 96

[Count0]
name = "Lemma Count0"
behavior = "axiom"
file = "HOME/tests/c/popHeap.c"
line = 72
begin = 4
end = 105

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[Count1]
name = "Lemma Count1"
behavior = "axiom"
file = "HOME/tests/c/popHeap.c"
line = 76
begin = 4
end = 184

[JC_51]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 173
begin = 14
end = 38

[Count2]
name = "Lemma Count2"
behavior = "axiom"
file = "HOME/tests/c/popHeap.c"
line = 81
begin = 4
end = 162

[JC_52]
file = "HOME/tests/c/popHeap.c"
line = 148
begin = 13
end = 58

[JC_53]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 10
end = 13

[JC_54]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 151
begin = 8
end = 14

[JC_160]
file = "HOME/tests/c/popHeap.c"
line = 245
begin = 17
end = 73

[JC_55]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 152
begin = 8
end = 12

[JC_161]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 23

[JC_56]
file = "HOME/tests/c/popHeap.c"
line = 153
begin = 13
end = 93

[JC_162]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 22
end = 28

[JC_110]
file = "HOME/tests/c/popHeap.c"
line = 159
begin = 20
end = 65

[JC_57]
file = "HOME/tests/c/popHeap.c"
line = 164
begin = 20
end = 45

[JC_163]
file = "HOME/tests/c/popHeap.c"
line = 244
begin = 17
end = 28

[JC_111]
file = "HOME/tests/c/popHeap.c"
line = 158
begin = 20
end = 33

[JC_58]
file = "HOME/tests/c/popHeap.c"
line = 162
begin = 20
end = 100

[JC_164]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_112]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 29

[JC_59]
file = "HOME/tests/c/popHeap.c"
line = 160
begin = 20
end = 96

[JC_165]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 436
begin = 6
end = 863

[JC_113]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 25
end = 33

[JC_166]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 436
begin = 6
end = 863

[JC_114]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 33

[JC_167]
file = "HOME/tests/c/popHeap.c"
line = 251
begin = 15
end = 48

[JC_115]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_116]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 198
begin = 6
end = 4126

[JC_117]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 198
begin = 6
end = 4126

[pop_heap_safety]
name = "Function pop_heap"
behavior = "Safety"
file = "HOME/tests/c/popHeap.c"
line = 145
begin = 5
end = 13

[JC_118]
file = "HOME/tests/c/popHeap.c"
line = 175
begin = 17
end = 40

[JC_119]
file = "HOME/tests/c/popHeap.c"
line = 178
begin = 19
end = 29

[JC_60]
file = "HOME/tests/c/popHeap.c"
line = 159
begin = 20
end = 65

[JC_61]
file = "HOME/tests/c/popHeap.c"
line = 158
begin = 20
end = 33

[JC_62]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 29

[JC_10]
file = "HOME/tests/c/popHeap.c"
line = 117
begin = 20
end = 38

[JC_63]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 25
end = 33

[JC_11]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 11
end = 22

[JC_64]
file = "HOME/tests/c/popHeap.c"
line = 157
begin = 20
end = 33

[JC_12]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 16
end = 30

[CountLemma]
name = "Lemma CountLemma"
behavior = "lemma"
file = "HOME/tests/c/popHeap.c"
line = 93
begin = 2
end = 150

[JC_65]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/c/popHeap.c"
line = 118
begin = 25
end = 34

[JC_66]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 198
begin = 6
end = 4126

[JC_14]
file = "HOME/tests/c/popHeap.c"
line = 119
begin = 11
end = 32

[JC_120]
file = "HOME/tests/c/popHeap.c"
line = 180
begin = 19
end = 44

[JC_67]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 198
begin = 6
end = 4126

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_121]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 253
begin = 29
end = 68

[JC_68]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 28

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_122]
file = "HOME/tests/c/popHeap.c"
line = 191
begin = 19
end = 29

[JC_69]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 171
begin = 22
end = 32

[JC_17]
file = "HOME/tests/c/popHeap.c"
line = 123
begin = 10
end = 105

[JC_123]
file = "HOME/tests/c/popHeap.c"
line = 193
begin = 19
end = 44

[JC_18]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 141
begin = 10
end = 18

[JC_124]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 280
begin = 26
end = 65

[JC_19]
file = "HOME/tests/c/popHeap.c"
line = 123
begin = 10
end = 105

[JC_125]
file = "HOME/tests/c/popHeap.c"
line = 200
begin = 14
end = 86

[JC_126]
file = "HOME/tests/c/popHeap.c"
line = 205
begin = 13
end = 93

[JC_127]
file = "HOME/tests/c/popHeap.c"
line = 208
begin = 13
end = 67

[JC_128]
file = "HOME/tests/c/popHeap.c"
line = 209
begin = 13
end = 119

[JC_129]
file = "HOME/tests/c/popHeap.c"
line = 213
begin = 13
end = 408

[JC_70]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 172
begin = 16
end = 19

[JC_71]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 10
end = 18

[ParentChild_1]
name = "Lemma ParentChild_1"
behavior = "axiom"
file = "HOME/tests/c/popHeap.c"
line = 40
begin = 4
end = 126

[JC_72]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 23
end = 30

[JC_20]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 141
begin = 10
end = 18

[ParentChild_2]
name = "Lemma ParentChild_2"
behavior = "axiom"
file = "HOME/tests/c/popHeap.c"
line = 44
begin = 4
end = 106

[JC_73]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 21
end = 31

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[ParentChild_3]
name = "Lemma ParentChild_3"
behavior = "lemma"
file = "HOME/tests/c/popHeap.c"
line = 49
begin = 2
end = 234

[pop_heap_ensures_default]
name = "Function pop_heap"
behavior = "default behavior"
file = "HOME/tests/c/popHeap.c"
line = 145
begin = 5
end = 13

[JC_74]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 174
begin = 33
end = 40

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_75]
file = "HOME/tests/c/popHeap.c"
line = 175
begin = 17
end = 40

[JC_23]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 12
end = 17

[JC_76]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 176
begin = 10
end = 18

[JC_24]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 16
end = 37

[JC_130]
file = "HOME/tests/c/popHeap.c"
line = 222
begin = 13
end = 113

[JC_77]
file = "HOME/tests/c/popHeap.c"
line = 178
begin = 19
end = 29

[JC_25]
file = "HOME/tests/c/popHeap.c"
line = 132
begin = 12
end = 30

[JC_131]
file = "HOME/tests/c/popHeap.c"
line = 227
begin = 13
end = 88

[JC_78]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 179
begin = 18
end = 26

[JC_26]
file = "HOME/tests/c/popHeap.c"
line = 133
begin = 12
end = 24

[JC_132]
file = "HOME/tests/c/popHeap.c"
line = 230
begin = 13
end = 108

[JC_79]
kind = PointerDeref
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 243
begin = 30
end = 304

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_133]
file = "HOME/tests/c/popHeap.c"
line = 233
begin = 13
end = 157

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_134]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 11
end = 16

[JC_29]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 12
end = 17

[JC_135]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 20
end = 38

[JC_136]
file = "HOME/tests/c/popHeap.c"
line = 107
begin = 11
end = 23

[JC_137]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_138]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_139]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 11
end = 16

[JC_80]
file = "HOME/tests/c/popHeap.c"
line = 180
begin = 19
end = 44

[JC_81]
kind = UserCall
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 253
begin = 29
end = 68

[JC_82]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 20

[JC_30]
file = "HOME/tests/c/popHeap.c"
line = 131
begin = 16
end = 37

[JC_83]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 188
begin = 14
end = 24

[JC_31]
file = "HOME/tests/c/popHeap.c"
line = 132
begin = 12
end = 30

[JC_84]
kind = ArithOverflow
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 19
end = 22

[JC_32]
file = "HOME/tests/c/popHeap.c"
line = 133
begin = 12
end = 24

[JC_85]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 189
begin = 26
end = 34

[JC_33]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_86]
file = "HOME/tests/c/popHeap.c"
line = 191
begin = 19
end = 29

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_140]
file = "HOME/tests/c/popHeap.c"
line = 106
begin = 20
end = 38

[JC_87]
kind = PointerDeref
file = "HOME/tests/c/popHeap.c"
line = 192
begin = 18
end = 26

[JC_35]
file = "HOME/tests/c/popHeap.c"
line = 137
begin = 11
end = 25

[JC_141]
file = "HOME/tests/c/popHeap.c"
line = 107
begin = 11
end = 23

[JC_88]
kind = PointerDeref
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 270
begin = 27
end = 292

[JC_36]
file = "HOME/tests/c/popHeap.c"
line = 138
begin = 11
end = 31

[JC_142]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_89]
file = "HOME/tests/c/popHeap.c"
line = 193
begin = 19
end = 44

[JC_37]
file = "HOME/tests/c/popHeap.c"
line = 139
begin = 11
end = 31

[JC_143]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
file = "HOME/tests/c/popHeap.c"
line = 140
begin = 11
end = 39

[JC_144]
file = "HOME/tests/c/popHeap.c"
line = 111
begin = 10
end = 56

[JC_39]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_145]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 426
begin = 10
end = 18

[JC_146]
file = "HOME/tests/c/popHeap.c"
line = 111
begin = 10
end = 56

[JC_147]
file = "HOME/tests/c/popHeap.jessie/popHeap.jc"
line = 426
begin = 10
end = 18

[JC_148]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_149]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/c/popHeap.jessie/why/popHeap.why ==========
type charP

type int32

type int8

type intP

type padding

type voidP

logic Count: intP pointer, int32, int, int, (intP, int32) memory -> int

function CountWithHole(c_0:intP pointer, v_3:int32, i_11:int, h:int, j_6:int,
 intP_intM_at_L:(intP, int32) memory) : int =
 add_int(Count(c_0, v_3, i_11, h, intP_intM_at_L),
 Count(c_0, v_3, add_int(h, (1)), j_6, intP_intM_at_L))

function CountWithoutHole(c_1:intP pointer, v_4:int32, i_12:int, h_0:int,
 j_7:int, intP_intM_at_L:(intP, int32) memory) : int =
 add_int(Count(c_1, v_4, i_12, h_0, intP_intM_at_L),
 Count(c_1, v_4, h_0, j_7, intP_intM_at_L))

logic integer_of_int32: int32 -> int

predicate IsEqual(a_0:intP pointer, n_0:int, b:intP pointer,
 intP_intM_at_B:(intP, int32) memory, intP_intM_at_A:(intP, int32) memory) =
 (forall i:int.
  ((le_int((0), i) and lt_int(i, n_0)) ->
   (integer_of_int32(select(intP_intM_at_A, shift(a_0, i))) = integer_of_int32(
                                                              select(intP_intM_at_B,
                                                              shift(b, i))))))

predicate IsFirstMaximum(a_2:intP pointer, max_0:int,
 intP_intM_at_L:(intP, int32) memory) =
 (forall i_6:int.
  ((le_int((0), i_6) and lt_int(i_6, max_0)) ->
   lt_int(integer_of_int32(select(intP_intM_at_L, shift(a_2, i_6))),
   integer_of_int32(select(intP_intM_at_L, shift(a_2, max_0))))))

logic ParentChild: int, int -> prop

predicate IsHeap(c:intP pointer, n_1:int,
 intP_intM_at_L:(intP, int32) memory) =
 (forall i_4:int.
  (forall j_2:int.
   ((lt_int(j_2, n_1) and ParentChild(i_4, j_2)) ->
    ge_int(integer_of_int32(select(intP_intM_at_L, shift(c, i_4))),
    integer_of_int32(select(intP_intM_at_L, shift(c, j_2)))))))

predicate IsMaximum(a_1:intP pointer, n_2:int, max:int,
 intP_intM_at_L:(intP, int32) memory) =
 (forall i_5:int.
  ((le_int((0), i_5) and lt_int(i_5, n_2)) ->
   ge_int(integer_of_int32(select(intP_intM_at_L, shift(a_1, max))),
   integer_of_int32(select(intP_intM_at_L, shift(a_1, i_5))))))

predicate IsValidRange(a:intP pointer, n:int,
 intP_alloc_table_at_L:intP alloc_table) =
 (le_int((0), n)
 and (le_int(offset_min(intP_alloc_table_at_L, a), (0))
     and ge_int(offset_max(intP_alloc_table_at_L, a), sub_int(n, (1)))))

predicate Permutation(c_2:intP pointer, n_3:int32,
 intP_intM_at_B:(intP, int32) memory, intP_intM_at_A:(intP, int32) memory) =
 (forall x_0:int32.
  (Count(c_2, x_0, (0), integer_of_int32(n_3), intP_intM_at_A) = Count(c_2,
                                                                 x_0, (0),
                                                                 integer_of_int32(n_3),
                                                                 intP_intM_at_B)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom no_assign_Count_0 :
 (forall tmp:intP pset.
  (forall tmpmem:(intP, int32) memory.
   (forall tmpalloc:intP alloc_table.
    (forall intP_intM_at_L:(intP, int32) memory.
     (forall j_3:int.
      (forall i_7:int.
       (forall v:int32.
        (forall a_3:intP pointer.
         ((pset_disjoint(tmp,
           pset_range(pset_singleton(a_3), i_7, sub_int(j_3, (1))))
          and not_assigns(tmpalloc, intP_intM_at_L, tmpmem, tmp)) ->
          (Count(a_3, v, i_7, j_3, intP_intM_at_L) = Count(a_3, v, i_7, j_3,
                                                     tmpmem)))))))))))

axiom no_update_Count_0 :
 (forall tmp:intP pointer.
  (forall tmpval:int32.
   (forall intP_intM_at_L:(intP, int32) memory.
    (forall j_3:int.
     (forall i_7:int.
      (forall v:int32.
       (forall a_3:intP pointer.
        ((not in_pset(tmp,
              pset_range(pset_singleton(a_3), i_7, sub_int(j_3, (1))))) ->
         (Count(a_3, v, i_7, j_3, intP_intM_at_L) = Count(a_3, v, i_7, j_3,
                                                    store(intP_intM_at_L,
                                                    tmp, tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom ParentChild_1 :
 (forall i_1:int.
  (forall j_0:int.
   (ParentChild(i_1, j_0)
   <-> (le_int((0), i_1)
       and (lt_int(i_1, j_0)
           and ((j_0 = add_int(mul_int((2), i_1), (1)))
               or (j_0 = add_int(mul_int((2), i_1), (2)))))))))

axiom ParentChild_2 :
 (forall i_2:int.
  (forall j_1:int.
   (ParentChild(i_2, j_1)
   <-> (lt_int((0), j_1) and (i_2 = computer_div(sub_int(j_1, (1)), (2)))))))

lemma ParentChild_3 :
 (forall i_3:int.
  (lt_int((0), i_3) ->
   (ParentChild(computer_div(sub_int(i_3, (1)), (2)), i_3)
   and (le_int((0), computer_div(sub_int(i_3, (1)), (2)))
       and lt_int(computer_div(sub_int(i_3, (1)), (2)), i_3)))))

axiom Count0 :
 (forall intP_intM_at_L:(intP, int32) memory.
  (forall a_4_0:intP pointer.
   (forall v_0:int32.
    (forall i_8:int.
     (forall j_4:int.
      (ge_int(i_8, j_4) ->
       (Count(a_4_0, v_0, i_8, j_4, intP_intM_at_L) = (0))))))))

axiom Count1 :
 (forall intP_intM_at_L:(intP, int32) memory.
  (forall a_5:intP pointer.
   (forall v_1:int32.
    (forall i_9:int.
     (forall j_5:int.
      (forall k:int.
       ((le_int((0), i_9) and (le_int(i_9, j_5) and le_int(j_5, k))) ->
        (Count(a_5, v_1, i_9, k, intP_intM_at_L) = add_int(Count(a_5, v_1,
                                                           i_9, j_5,
                                                           intP_intM_at_L),
                                                   Count(a_5, v_1, j_5, k,
                                                   intP_intM_at_L))))))))))

axiom Count2 :
 (forall intP_intM_at_L:(intP, int32) memory.
  (forall a_6:intP pointer.
   (forall v_2:int32.
    (forall i_10:int.
     (((integer_of_int32(select(intP_intM_at_L, shift(a_6, i_10))) <> 
       integer_of_int32(v_2)) ->
       (Count(a_6, v_2, i_10, add_int(i_10, (1)), intP_intM_at_L) = (0)))
     and ((integer_of_int32(select(intP_intM_at_L, shift(a_6, i_10))) = 
          integer_of_int32(v_2)) ->
          (Count(a_6, v_2, i_10, add_int(i_10, (1)), intP_intM_at_L) = (1))))))))

lemma CountLemma :
 (forall intP_intM_at_L:(intP, int32) memory.
  (forall a_7:intP pointer.
   (forall v_5:int32.
    (forall i_13:int.
     (le_int((0), i_13) ->
      (Count(a_7, v_5, (0), add_int(i_13, (1)), intP_intM_at_L) = add_int(
                                                                  Count(a_7,
                                                                  v_5, (0),
                                                                  i_13,
                                                                  intP_intM_at_L),
                                                                  Count(a_7,
                                                                  v_5, i_13,
                                                                  add_int(i_13,
                                                                  (1)),
                                                                  intP_intM_at_L))))))))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter charP_charM : (charP, int8) memory ref

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter intP_intM : (intP, int32) memory ref

parameter pop_heap :
 a_4:intP pointer ->
  n_4:int32 ->
   { } unit reads intP_alloc_table,intP_intM writes intP_intM
   { (JC_48:
     ((JC_46:
      ((JC_42: IsHeap(a_4, sub_int(integer_of_int32(n_4), (1)), intP_intM))
      and ((JC_43:
           (integer_of_int32(select(intP_intM,
                             shift(a_4, sub_int(integer_of_int32(n_4), (1))))) = 
           integer_of_int32(select(intP_intM@, shift(a_4, (0))))))
          and ((JC_44:
               IsMaximum(a_4, integer_of_int32(n_4),
               sub_int(integer_of_int32(n_4), (1)), intP_intM))
              and (JC_45: Permutation(a_4, n_4, intP_intM, intP_intM@))))))
     and (JC_47:
         not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
         pset_range(pset_singleton(a_4), (0),
         sub_int(integer_of_int32(n_4), (1))))))) }

parameter pop_heap_induction :
 a_0_0:intP pointer ->
  n_0_0:int32 ->
   { } unit reads intP_alloc_table,intP_intM
   { (JC_146:
     (forall i_18:int.
      ((le_int((0), i_18) and lt_int(i_18, integer_of_int32(n_0_0))) ->
       ge_int(integer_of_int32(select(intP_intM, shift(a_0_0, (0)))),
       integer_of_int32(select(intP_intM, shift(a_0_0, i_18))))))) }

parameter pop_heap_induction_requires :
 a_0_0:intP pointer ->
  n_0_0:int32 ->
   { (JC_137:
     ((JC_134: lt_int((0), integer_of_int32(n_0_0)))
     and ((JC_135:
          IsValidRange(a_0_0, integer_of_int32(n_0_0), intP_alloc_table))
         and (JC_136: IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM)))))}
   unit reads intP_alloc_table,intP_intM
   { (JC_146:
     (forall i_18:int.
      ((le_int((0), i_18) and lt_int(i_18, integer_of_int32(n_0_0))) ->
       ge_int(integer_of_int32(select(intP_intM, shift(a_0_0, (0)))),
       integer_of_int32(select(intP_intM, shift(a_0_0, i_18))))))) }

parameter pop_heap_requires :
 a_4:intP pointer ->
  n_4:int32 ->
   { (JC_27:
     ((JC_23: lt_int((0), integer_of_int32(n_4)))
     and ((JC_24:
          lt_int(integer_of_int32(n_4),
          computer_div(sub_int((2147483647), (2)), (2))))
         and ((JC_25:
              IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table))
             and (JC_26: IsHeap(a_4, integer_of_int32(n_4), intP_intM))))))}
   unit reads intP_alloc_table,intP_intM writes intP_intM
   { (JC_48:
     ((JC_46:
      ((JC_42: IsHeap(a_4, sub_int(integer_of_int32(n_4), (1)), intP_intM))
      and ((JC_43:
           (integer_of_int32(select(intP_intM,
                             shift(a_4, sub_int(integer_of_int32(n_4), (1))))) = 
           integer_of_int32(select(intP_intM@, shift(a_4, (0))))))
          and ((JC_44:
               IsMaximum(a_4, integer_of_int32(n_4),
               sub_int(integer_of_int32(n_4), (1)), intP_intM))
              and (JC_45: Permutation(a_4, n_4, intP_intM, intP_intM@))))))
     and (JC_47:
         not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
         pset_range(pset_singleton(a_4), (0),
         sub_int(integer_of_int32(n_4), (1))))))) }

parameter pop_push_heap_copy :
 a_1_0:intP pointer ->
  n_1_0:int32 ->
   parent:int32 ->
    child:int32 ->
     { } unit reads intP_alloc_table,intP_intM
     { (JC_19:
       (forall x_0_0:int32.
        (CountWithHole(a_1_0, x_0_0, (0), integer_of_int32(child),
         integer_of_int32(n_1_0), intP_intM) = CountWithHole(a_1_0, x_0_0,
                                               (0), integer_of_int32(parent),
                                               integer_of_int32(n_1_0),
                                               intP_intM)))) }

parameter pop_push_heap_copy_requires :
 a_1_0:intP pointer ->
  n_1_0:int32 ->
   parent:int32 ->
    child:int32 ->
     { (JC_7:
       ((JC_1: lt_int((0), integer_of_int32(n_1_0)))
       and ((JC_2:
            IsValidRange(a_1_0, integer_of_int32(n_1_0), intP_alloc_table))
           and ((JC_3: le_int((0), integer_of_int32(parent)))
               and ((JC_4:
                    lt_int(integer_of_int32(parent), integer_of_int32(child)))
                   and ((JC_5:
                        lt_int(integer_of_int32(child),
                        integer_of_int32(n_1_0)))
                       and (JC_6:
                           (integer_of_int32(select(intP_intM,
                                             shift(a_1_0,
                                             integer_of_int32(parent)))) = 
                           integer_of_int32(select(intP_intM,
                                            shift(a_1_0,
                                            integer_of_int32(child))))))))))))}
     unit reads intP_alloc_table,intP_intM
     { (JC_19:
       (forall x_0_0:int32.
        (CountWithHole(a_1_0, x_0_0, (0), integer_of_int32(child),
         integer_of_int32(n_1_0), intP_intM) = CountWithHole(a_1_0, x_0_0,
                                               (0), integer_of_int32(parent),
                                               integer_of_int32(n_1_0),
                                               intP_intM)))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let pop_heap_ensures_default =
 fun (a_4 : intP pointer) (n_4 : int32) ->
  { (JC_33:
    ((JC_29: lt_int((0), integer_of_int32(n_4)))
    and ((JC_30:
         lt_int(integer_of_int32(n_4),
         computer_div(sub_int((2147483647), (2)), (2))))
        and ((JC_31:
             IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table))
            and (JC_32: IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let max_1 = ref (any_int32 void) in
     (let hole = ref (any_int32 void) in
     (let child_0 = ref (any_int32 void) in
     try
      (C_11:
      (C_15:
      (C_20:
      (C_23:
      begin
        (let jessie_<num> = a_4 in
        (let jessie_<num> = n_4 in
        (JC_104: ((pop_heap_induction jessie_<num>) jessie_<num>))));
       (assert
       { (JC_105:
         (forall i_14:int.
          ((lt_int((0), i_14) and lt_int(i_14, integer_of_int32(n_4))) ->
           ge_int(integer_of_int32(select(intP_intM, shift(a_4, (0)))),
           integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) }; void);
       void;
       (let jessie_<num> =
       (C_13:
       (C_14:
       begin
         (let jessie_<num> = (tmp := (safe_int32_of_integer_ (0))) in void);
        (max_1 := (safe_int32_of_integer_ (0))); !max_1 end)) in void);
       (let jessie_<num> = (hole := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<num> =
       (tmp := (C_19:
               ((safe_acc_ !intP_intM) (C_18:
                                       ((shift a_4) (integer_of_int32 
                                                     (C_17:
                                                     (safe_int32_of_integer_ 
                                                      (C_16:
                                                      ((sub_int (integer_of_int32 n_4)) (1))))))))))) in
       void);
       (let jessie_<num> =
       (max_1 := (C_22: ((safe_acc_ !intP_intM) (C_21: ((shift a_4) (0)))))) in
       void);
       (assert
       { (JC_106:
         (forall x_1:int32.
          (CountWithHole(a_4, x_1, (0), integer_of_int32(hole),
           integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, (1),
                                               integer_of_int32(n_4),
                                               intP_intM@init)))) }; void);
       void;
       (loop_2:
       while true do
       { invariant
           (((JC_107:
             (integer_of_int32(select(intP_intM@init,
                               shift(a_4,
                               sub_int(integer_of_int32(n_4), (1))))) = 
             integer_of_int32(select(intP_intM,
                              shift(a_4, sub_int(integer_of_int32(n_4), (1)))))))
            and ((JC_108:
                 (forall x_2:int32.
                  (CountWithHole(a_4, x_2, (0), integer_of_int32(hole),
                   integer_of_int32(n_4), intP_intM) = Count(a_4, x_2, (1),
                                                       integer_of_int32(n_4),
                                                       intP_intM@init))))
                and ((JC_109:
                     (forall i_16:int.
                      ((lt_int(integer_of_int32(hole),
                        sub_int(integer_of_int32(n_4), (1)))
                       and ParentChild(i_16, integer_of_int32(hole))) ->
                       ge_int(integer_of_int32(select(intP_intM,
                                               shift(a_4, i_16))),
                       integer_of_int32(tmp)))))
                    and ((JC_110:
                         (forall i_15:int.
                          ((le_int((0), i_15)
                           and lt_int(i_15, integer_of_int32(n_4))) ->
                           le_int(integer_of_int32(select(intP_intM,
                                                   shift(a_4, i_15))),
                           integer_of_int32(max_1)))))
                        and ((JC_111:
                             IsHeap(a_4, sub_int(integer_of_int32(n_4), (1)),
                             intP_intM))
                            and (JC_114:
                                ((JC_112:
                                 le_int((0), integer_of_int32(hole)))
                                and (JC_113:
                                    lt_int(integer_of_int32(hole),
                                    integer_of_int32(n_4))))))))))
           and ((JC_116:
                not_assigns(intP_alloc_table@loop_2, intP_intM@loop_2,
                intP_intM,
                pset_range(pset_singleton(a_4), (0), integer_of_int32(hole))))
               and (JC_117:
                   not_assigns(intP_alloc_table@init, intP_intM@init,
                   intP_intM,
                   pset_range(pset_singleton(a_4), (0),
                   sub_int(integer_of_int32(n_4), (1)))))))  }
        begin
          [ { } unit { true } ];
         try
          (C_38:
          begin
            (let jessie_<num> =
            (child_0 := (C_37:
                        (safe_int32_of_integer_ (C_36:
                                                ((add_int (integer_of_int32 
                                                           (C_35:
                                                           (safe_int32_of_integer_ 
                                                            (C_34:
                                                            ((mul_int (2)) 
                                                             (integer_of_int32 !hole))))))) (2)))))) in
            void);
           (if ((lt_int_ (integer_of_int32 !child_0)) (integer_of_int32 
                                                       (C_79:
                                                       (safe_int32_of_integer_ 
                                                        (C_78:
                                                        ((sub_int (integer_of_int32 n_4)) (1)))))))
           then
            begin
              (if ((lt_int_ (integer_of_int32 (C_65:
                                              ((safe_acc_ !intP_intM) 
                                               (C_64:
                                               ((shift a_4) (integer_of_int32 !child_0))))))) 
                   (integer_of_int32 (C_63:
                                     ((safe_acc_ !intP_intM) (C_62:
                                                             ((shift a_4) 
                                                              (integer_of_int32 
                                                               (C_61:
                                                               (safe_int32_of_integer_ 
                                                                (C_60:
                                                                ((sub_int 
                                                                  (integer_of_int32 !child_0)) (1))))))))))))
              then
               (let jessie_<num> =
               (C_59:
               (child_0 := (C_58:
                           (safe_int32_of_integer_ (C_57:
                                                   ((sub_int (integer_of_int32 !child_0)) (1))))))) in
               void) else void);
             (assert
             { (JC_118:
               ParentChild(integer_of_int32(hole), integer_of_int32(child_0))) };
             void); void;
             (if ((gt_int_ (integer_of_int32 (C_77:
                                             ((safe_acc_ !intP_intM) 
                                              (C_76:
                                              ((shift a_4) (integer_of_int32 !child_0))))))) 
                  (integer_of_int32 !tmp))
             then
              (let jessie_<num> =
              (C_72:
              (C_74:
              (C_75:
              begin
                (assert
                { (JC_119:
                  lt_int(integer_of_int32(hole),
                  sub_int(integer_of_int32(n_4), (1)))) }; void); void;
               (let jessie_<num> =
               (let jessie_<num> =
               (C_69:
               ((safe_acc_ !intP_intM) (C_68:
                                       ((shift a_4) (integer_of_int32 !child_0))))) in
               (let jessie_<num> = a_4 in
               (let jessie_<num> = (integer_of_int32 !hole) in
               (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
               (((safe_upd_ intP_intM) jessie_<num>) jessie_<num>))))) in void);
               (assert
               { (JC_120:
                 (integer_of_int32(select(intP_intM@init,
                                   shift(a_4,
                                   sub_int(integer_of_int32(n_4), (1))))) = 
                 integer_of_int32(select(intP_intM,
                                  shift(a_4,
                                  sub_int(integer_of_int32(n_4), (1))))))) };
               void); void;
               (let jessie_<num> = a_4 in
               (let jessie_<num> = n_4 in
               (let jessie_<num> = !hole in
               (let jessie_<num> = !child_0 in
               (JC_121:
               ((((pop_push_heap_copy jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))));
               (hole := !child_0); !hole end))) in void)
             else (raise (Goto_while_0_break_exc void))) end
           else
            (C_43:
            begin
              (let jessie_<num> =
              (child_0 := (C_42:
                          (safe_int32_of_integer_ (C_41:
                                                  ((add_int (integer_of_int32 
                                                             (C_40:
                                                             (safe_int32_of_integer_ 
                                                              (C_39:
                                                              ((mul_int (2)) 
                                                               (integer_of_int32 !hole))))))) (1)))))) in
              void);
             (if ((eq_int_ (integer_of_int32 !child_0)) (integer_of_int32 
                                                         (C_56:
                                                         (safe_int32_of_integer_ 
                                                          (C_55:
                                                          ((sub_int (integer_of_int32 n_4)) (2)))))))
             then
              (if ((gt_int_ (integer_of_int32 (C_54:
                                              ((safe_acc_ !intP_intM) 
                                               (C_53:
                                               ((shift a_4) (integer_of_int32 !child_0))))))) 
                   (integer_of_int32 !tmp))
              then
               (let jessie_<num> =
               (C_49:
               (C_51:
               (C_52:
               begin
                 (assert
                 { (JC_122:
                   lt_int(integer_of_int32(hole),
                   sub_int(integer_of_int32(n_4), (1)))) }; void); void;
                (let jessie_<num> =
                (let jessie_<num> =
                (C_46:
                ((safe_acc_ !intP_intM) (C_45:
                                        ((shift a_4) (integer_of_int32 !child_0))))) in
                (let jessie_<num> = a_4 in
                (let jessie_<num> = (integer_of_int32 !hole) in
                (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                (((safe_upd_ intP_intM) jessie_<num>) jessie_<num>))))) in void);
                (assert
                { (JC_123:
                  (integer_of_int32(select(intP_intM@init,
                                    shift(a_4,
                                    sub_int(integer_of_int32(n_4), (1))))) = 
                  integer_of_int32(select(intP_intM,
                                   shift(a_4,
                                   sub_int(integer_of_int32(n_4), (1))))))) };
                void); void;
                (let jessie_<num> = a_4 in
                (let jessie_<num> = n_4 in
                (let jessie_<num> = !hole in
                (let jessie_<num> = !child_0 in
                (JC_124:
                ((((pop_push_heap_copy jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))));
                (hole := !child_0); !hole end))) in void) else void)
             else void); (raise (Goto_while_0_break_exc void)) end));
           (raise (Loop_continue_exc void)) end) with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break:
      (C_83:
      (C_93:
      begin
        void;
       (assert
       { (JC_125:
         (forall i_17:int.
          ((lt_int(integer_of_int32(hole),
            sub_int(integer_of_int32(n_4), (1)))
           and ParentChild(i_17, integer_of_int32(hole))) ->
           ge_int(integer_of_int32(select(intP_intM, shift(a_4, i_17))),
           integer_of_int32(tmp))))) }; void); void;
       (let jessie_<num> =
       (let jessie_<num> = !tmp in
       (let jessie_<num> = a_4 in
       (let jessie_<num> = (integer_of_int32 !hole) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (((safe_upd_ intP_intM) jessie_<num>) jessie_<num>))))) in void);
       (assert
       { (JC_126:
         (forall x_3:int32.
          (CountWithHole(a_4, x_3, (0), integer_of_int32(hole),
           integer_of_int32(n_4), intP_intM) = Count(a_4, x_3, (1),
                                               integer_of_int32(n_4),
                                               intP_intM@init)))) }; void);
       void;
       (assert
       { (JC_127:
         (lt_int(integer_of_int32(hole), sub_int(integer_of_int32(n_4), (1))) ->
          ((integer_of_int32(select(intP_intM,
                             shift(a_4, integer_of_int32(hole)))) = integer_of_int32(tmp))
          and ((integer_of_int32(tmp) = integer_of_int32(select(intP_intM@init,
                                                         shift(a_4,
                                                         sub_int(integer_of_int32(n_4),
                                                         (1))))))
              and (integer_of_int32(select(intP_intM@init,
                                    shift(a_4,
                                    sub_int(integer_of_int32(n_4), (1))))) = 
                  integer_of_int32(select(intP_intM,
                                   shift(a_4,
                                   sub_int(integer_of_int32(n_4), (1)))))))))) };
       void); void;
       (assert
       { (JC_128:
         (forall x_4:int32.
          (lt_int(integer_of_int32(hole),
           sub_int(integer_of_int32(n_4), (1))) ->
           (Count(a_4, x_4, add_int(integer_of_int32(hole), (1)),
            add_int(sub_int(integer_of_int32(n_4), (1)), (1)), intP_intM) = 
           CountWithoutHole(a_4, x_4, add_int(integer_of_int32(hole), (1)),
           sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
           intP_intM))))) }; void); void;
       (assert
       { (JC_129:
         (forall x_5:int32.
          ((lt_int(integer_of_int32(hole),
            sub_int(integer_of_int32(n_4), (1))) ->
            ((CountWithHole(a_4, x_5, (0), integer_of_int32(hole),
              integer_of_int32(n_4), intP_intM) = add_int(CountWithHole(a_4,
                                                          x_5, (0),
                                                          integer_of_int32(hole),
                                                          sub_int(integer_of_int32(n_4),
                                                          (1)), intP_intM),
                                                  Count(a_4, x_5,
                                                  sub_int(integer_of_int32(n_4),
                                                  (1)),
                                                  add_int(sub_int(integer_of_int32(n_4),
                                                          (1)),
                                                  (1)), intP_intM)))
            and ((add_int(CountWithHole(a_4, x_5, (0),
                          integer_of_int32(hole),
                          sub_int(integer_of_int32(n_4), (1)), intP_intM),
                  Count(a_4, x_5, sub_int(integer_of_int32(n_4), (1)),
                  add_int(sub_int(integer_of_int32(n_4), (1)), (1)),
                  intP_intM)) = add_int(CountWithoutHole(a_4, x_5, (0),
                                        integer_of_int32(hole),
                                        add_int(integer_of_int32(hole), (1)),
                                        intP_intM),
                                Count(a_4, x_5,
                                add_int(integer_of_int32(hole), (1)),
                                sub_int(integer_of_int32(n_4), (1)),
                                intP_intM)))
                and ((add_int(CountWithoutHole(a_4, x_5, (0),
                              integer_of_int32(hole),
                              add_int(integer_of_int32(hole), (1)),
                              intP_intM),
                      Count(a_4, x_5, add_int(integer_of_int32(hole), (1)),
                      sub_int(integer_of_int32(n_4), (1)), intP_intM)) = 
                     CountWithoutHole(a_4, x_5, (0), integer_of_int32(hole),
                     sub_int(integer_of_int32(n_4), (1)), intP_intM))
                    and (CountWithoutHole(a_4, x_5, (0),
                         integer_of_int32(hole),
                         sub_int(integer_of_int32(n_4), (1)), intP_intM) = 
                        Count(a_4, x_5, (0),
                        sub_int(integer_of_int32(n_4), (1)), intP_intM))))))
          and ((integer_of_int32(hole) = sub_int(integer_of_int32(n_4), (1))) ->
               ((CountWithHole(a_4, x_5, (0), integer_of_int32(hole),
                 integer_of_int32(n_4), intP_intM) = CountWithHole(a_4, x_5,
                                                     (0),
                                                     sub_int(integer_of_int32(n_4),
                                                     (1)),
                                                     integer_of_int32(n_4),
                                                     intP_intM))
               and (CountWithHole(a_4, x_5, (0),
                    sub_int(integer_of_int32(n_4), (1)),
                    integer_of_int32(n_4), intP_intM) = Count(a_4, x_5, (0),
                                                        sub_int(integer_of_int32(n_4),
                                                        (1)), intP_intM))))))) };
       void); void;
       (assert
       { (JC_130:
         (forall x_6:int32.
          ((Count(a_4, x_6, (0), sub_int(integer_of_int32(n_4), (1)),
            intP_intM) = CountWithHole(a_4, x_6, (0), integer_of_int32(hole),
                         integer_of_int32(n_4), intP_intM))
          and (CountWithHole(a_4, x_6, (0), integer_of_int32(hole),
               integer_of_int32(n_4), intP_intM) = Count(a_4, x_6, (1),
                                                   integer_of_int32(n_4),
                                                   intP_intM@init))))) };
       void); void;
       (let jessie_<num> =
       (let jessie_<num> = !max_1 in
       (let jessie_<num> = a_4 in
       (let jessie_<num> =
       (integer_of_int32 (C_90:
                         (safe_int32_of_integer_ (C_89:
                                                 ((sub_int (integer_of_int32 n_4)) (1)))))) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (((safe_upd_ intP_intM) jessie_<num>) jessie_<num>))))) in void);
       (assert
       { (JC_131:
         (forall x_7:int32.
          (Count(a_4, x_7, sub_int(integer_of_int32(n_4), (1)),
           add_int(sub_int(integer_of_int32(n_4), (1)), (1)), intP_intM) = 
          Count(a_4, x_7, (0), (1), intP_intM@init)))) }; void); void;
       (assert
       { (JC_132:
         (forall x_8:int32.
          (CountWithoutHole(a_4, x_8, (0),
           sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
           intP_intM) = CountWithoutHole(a_4, x_8, (0), (1),
                        integer_of_int32(n_4), intP_intM@init)))) }; void);
       void;
       (assert
       { (JC_133:
         (forall x_9:int32.
          ((Count(a_4, x_9, (0), integer_of_int32(n_4), intP_intM) = 
           CountWithoutHole(a_4, x_9, (0),
           sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
           intP_intM))
          and ((CountWithoutHole(a_4, x_9, (0),
                sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
                intP_intM) = CountWithoutHole(a_4, x_9, (0), (1),
                             integer_of_int32(n_4), intP_intM@init))
              and (CountWithoutHole(a_4, x_9, (0), (1),
                   integer_of_int32(n_4), intP_intM@init) = Count(a_4, x_9,
                                                            (0),
                                                            integer_of_int32(n_4),
                                                            intP_intM@init)))))) };
       void); void; (raise Return) end))) end)))); (raise Return) end with
   Return -> void end)
  { (JC_41:
    ((JC_39:
     ((JC_35: IsHeap(a_4, sub_int(integer_of_int32(n_4), (1)), intP_intM))
     and ((JC_36:
          (integer_of_int32(select(intP_intM,
                            shift(a_4, sub_int(integer_of_int32(n_4), (1))))) = 
          integer_of_int32(select(intP_intM@, shift(a_4, (0))))))
         and ((JC_37:
              IsMaximum(a_4, integer_of_int32(n_4),
              sub_int(integer_of_int32(n_4), (1)), intP_intM))
             and (JC_38: Permutation(a_4, n_4, intP_intM, intP_intM@))))))
    and (JC_40:
        not_assigns(intP_alloc_table@, intP_intM@, intP_intM,
        pset_range(pset_singleton(a_4), (0),
        sub_int(integer_of_int32(n_4), (1))))))) }

let pop_heap_induction_ensures_default =
 fun (a_0_0 : intP pointer) (n_0_0 : int32) ->
  { (JC_142:
    ((JC_139: lt_int((0), integer_of_int32(n_0_0)))
    and ((JC_140:
         IsValidRange(a_0_0, integer_of_int32(n_0_0), intP_alloc_table))
        and (JC_141: IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) }
  (init:
  try
   begin
     (let i_19 = ref (any_int32 void) in
     try
      (C_109:
      begin
        (let jessie_<num> = (i_19 := (safe_int32_of_integer_ (1))) in void);
       (loop_4:
       while true do
       { invariant
           ((JC_160:
            (forall j_8:int.
             ((le_int((0), j_8)
              and (lt_int(j_8, integer_of_int32(i_19))
                  and le_int(integer_of_int32(i_19), integer_of_int32(n_0_0)))) ->
              ge_int(integer_of_int32(select(intP_intM, shift(a_0_0, (0)))),
              integer_of_int32(select(intP_intM, shift(a_0_0, j_8)))))))
           and (JC_163:
               ((JC_161: le_int((0), integer_of_int32(i_19)))
               and (JC_162:
                   le_int(integer_of_int32(i_19), integer_of_int32(n_0_0))))))
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<num> =
            (C_118:
            begin
              (if ((lt_int_ (integer_of_int32 !i_19)) (integer_of_int32 n_0_0))
              then void else (raise (Goto_while_0_break_exc void)));
             (assert
             { (JC_167:
               (lt_int((0), integer_of_int32(i_19)) ->
                ParentChild(computer_div(sub_int(integer_of_int32(i_19), (1)),
                            (2)),
                integer_of_int32(i_19)))) }; void); void;
             (i_19 := (C_117:
                      (safe_int32_of_integer_ (C_116:
                                              ((add_int (integer_of_int32 !i_19)) (1))))));
             !i_19 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end); (raise Return)
   end with Return -> void end)
  { (JC_144:
    (forall i_18:int.
     ((le_int((0), i_18) and lt_int(i_18, integer_of_int32(n_0_0))) ->
      ge_int(integer_of_int32(select(intP_intM, shift(a_0_0, (0)))),
      integer_of_int32(select(intP_intM, shift(a_0_0, i_18))))))) }

let pop_heap_induction_safety =
 fun (a_0_0 : intP pointer) (n_0_0 : int32) ->
  { (JC_142:
    ((JC_139: lt_int((0), integer_of_int32(n_0_0)))
    and ((JC_140:
         IsValidRange(a_0_0, integer_of_int32(n_0_0), intP_alloc_table))
        and (JC_141: IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) }
  (init:
  try
   begin
     (let i_19 = ref (any_int32 void) in
     try
      (C_109:
      begin
        (let jessie_<num> = (i_19 := (safe_int32_of_integer_ (1))) in void);
       (loop_3:
       while true do
       { invariant (JC_155: true)
         variant (JC_159 : sub_int(integer_of_int32(n_0_0),
                           integer_of_int32(i_19))) }
        begin
          [ { } unit reads i_19,intP_intM
            { ((JC_150:
               (forall j_8:int.
                ((le_int((0), j_8)
                 and (lt_int(j_8, integer_of_int32(i_19))
                     and le_int(integer_of_int32(i_19),
                         integer_of_int32(n_0_0)))) ->
                 ge_int(integer_of_int32(select(intP_intM, shift(a_0_0, (0)))),
                 integer_of_int32(select(intP_intM, shift(a_0_0, j_8)))))))
              and (JC_153:
                  ((JC_151: le_int((0), integer_of_int32(i_19)))
                  and (JC_152:
                      le_int(integer_of_int32(i_19), integer_of_int32(n_0_0)))))) } ];
         try
          begin
            (let jessie_<num> =
            (C_118:
            begin
              (if ((lt_int_ (integer_of_int32 !i_19)) (integer_of_int32 n_0_0))
              then void else (raise (Goto_while_0_break_exc void)));
             [ { } unit reads i_19
               { (JC_157:
                 (lt_int((0), integer_of_int32(i_19)) ->
                  ParentChild(computer_div(sub_int(integer_of_int32(i_19),
                                           (1)),
                              (2)),
                  integer_of_int32(i_19)))) } ]; void;
             (i_19 := (C_117:
                      (JC_158:
                      (int32_of_integer_ (C_116:
                                         ((add_int (integer_of_int32 !i_19)) (1)))))));
             !i_19 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end); (raise Return)
   end with Return -> void end) { true }

let pop_heap_safety =
 fun (a_4 : intP pointer) (n_4 : int32) ->
  { (JC_33:
    ((JC_29: lt_int((0), integer_of_int32(n_4)))
    and ((JC_30:
         lt_int(integer_of_int32(n_4),
         computer_div(sub_int((2147483647), (2)), (2))))
        and ((JC_31:
             IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table))
            and (JC_32: IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int32 void) in
     (let max_1 = ref (any_int32 void) in
     (let hole = ref (any_int32 void) in
     (let child_0 = ref (any_int32 void) in
     try
      (C_11:
      (C_15:
      (C_20:
      (C_23:
      begin
        (let jessie_<num> = a_4 in
        (let jessie_<num> = n_4 in
        (JC_51: ((pop_heap_induction_requires jessie_<num>) jessie_<num>))));
       [ { } unit reads intP_intM
         { (JC_52:
           (forall i_14:int.
            ((lt_int((0), i_14) and lt_int(i_14, integer_of_int32(n_4))) ->
             ge_int(integer_of_int32(select(intP_intM, shift(a_4, (0)))),
             integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) } ];
       void;
       (let jessie_<num> =
       (C_13:
       (C_14:
       begin
         (let jessie_<num> = (tmp := (safe_int32_of_integer_ (0))) in void);
        (max_1 := (safe_int32_of_integer_ (0))); !max_1 end)) in void);
       (let jessie_<num> = (hole := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<num> =
       (tmp := (C_19:
               (JC_54:
               ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) (integer_of_int32 
                                                                    (C_17:
                                                                    (JC_53:
                                                                    (int32_of_integer_ 
                                                                    (C_16:
                                                                    ((sub_int 
                                                                    (integer_of_int32 n_4)) (1))))))))))) in
       void);
       (let jessie_<num> =
       (max_1 := (C_22: (JC_55: (((acc_ !intP_alloc_table) !intP_intM) a_4)))) in
       void);
       [ { } unit reads hole,intP_intM
         { (JC_56:
           (forall x_1:int32.
            (CountWithHole(a_4, x_1, (0), integer_of_int32(hole),
             integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, (1),
                                                 integer_of_int32(n_4),
                                                 intP_intM@init)))) } ];
       void;
       (loop_1:
       while true do
       { invariant (JC_66: true)
         variant (JC_91 : sub_int(integer_of_int32(n_4),
                          integer_of_int32(hole))) }
        begin
          [ { } unit reads hole,intP_intM,max_1,tmp
            { ((JC_57:
               (integer_of_int32(select(intP_intM@init,
                                 shift(a_4,
                                 sub_int(integer_of_int32(n_4), (1))))) = 
               integer_of_int32(select(intP_intM,
                                shift(a_4,
                                sub_int(integer_of_int32(n_4), (1)))))))
              and ((JC_58:
                   (forall x_2:int32.
                    (CountWithHole(a_4, x_2, (0), integer_of_int32(hole),
                     integer_of_int32(n_4), intP_intM) = Count(a_4, x_2, (1),
                                                         integer_of_int32(n_4),
                                                         intP_intM@init))))
                  and ((JC_59:
                       (forall i_16:int.
                        ((lt_int(integer_of_int32(hole),
                          sub_int(integer_of_int32(n_4), (1)))
                         and ParentChild(i_16, integer_of_int32(hole))) ->
                         ge_int(integer_of_int32(select(intP_intM,
                                                 shift(a_4, i_16))),
                         integer_of_int32(tmp)))))
                      and ((JC_60:
                           (forall i_15:int.
                            ((le_int((0), i_15)
                             and lt_int(i_15, integer_of_int32(n_4))) ->
                             le_int(integer_of_int32(select(intP_intM,
                                                     shift(a_4, i_15))),
                             integer_of_int32(max_1)))))
                          and ((JC_61:
                               IsHeap(a_4,
                               sub_int(integer_of_int32(n_4), (1)),
                               intP_intM))
                              and (JC_64:
                                  ((JC_62:
                                   le_int((0), integer_of_int32(hole)))
                                  and (JC_63:
                                      lt_int(integer_of_int32(hole),
                                      integer_of_int32(n_4)))))))))) } ];
         try
          (C_38:
          begin
            (let jessie_<num> =
            (child_0 := (C_37:
                        (JC_69:
                        (int32_of_integer_ (C_36:
                                           ((add_int (integer_of_int32 
                                                      (C_35:
                                                      (JC_68:
                                                      (int32_of_integer_ 
                                                       (C_34:
                                                       ((mul_int (2)) 
                                                        (integer_of_int32 !hole)))))))) (2))))))) in
            void);
           (if ((lt_int_ (integer_of_int32 !child_0)) (integer_of_int32 
                                                       (C_79:
                                                       (JC_70:
                                                       (int32_of_integer_ 
                                                        (C_78:
                                                        ((sub_int (integer_of_int32 n_4)) (1))))))))
           then
            begin
              (if ((lt_int_ (integer_of_int32 (C_65:
                                              (JC_71:
                                              ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) 
                                               (integer_of_int32 !child_0)))))) 
                   (integer_of_int32 (C_63:
                                     (JC_73:
                                     ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) 
                                      (integer_of_int32 (C_61:
                                                        (JC_72:
                                                        (int32_of_integer_ 
                                                         (C_60:
                                                         ((sub_int (integer_of_int32 !child_0)) (1))))))))))))
              then
               (let jessie_<num> =
               (C_59:
               (child_0 := (C_58:
                           (JC_74:
                           (int32_of_integer_ (C_57:
                                              ((sub_int (integer_of_int32 !child_0)) (1)))))))) in
               void) else void);
             [ { } unit reads child_0,hole
               { (JC_75:
                 ParentChild(integer_of_int32(hole),
                 integer_of_int32(child_0))) } ]; void;
             (if ((gt_int_ (integer_of_int32 (C_77:
                                             (JC_76:
                                             ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) 
                                              (integer_of_int32 !child_0)))))) 
                  (integer_of_int32 !tmp))
             then
              (let jessie_<num> =
              (C_72:
              (C_74:
              (C_75:
              begin
                [ { } unit reads hole
                  { (JC_77:
                    lt_int(integer_of_int32(hole),
                    sub_int(integer_of_int32(n_4), (1)))) } ]; void;
               (let jessie_<num> =
               (let jessie_<num> =
               (C_69:
               (JC_78:
               ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) (integer_of_int32 !child_0)))) in
               (let jessie_<num> = a_4 in
               (let jessie_<num> = (integer_of_int32 !hole) in
               (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
               (JC_79:
               (((((offset_upd_ !intP_alloc_table) intP_intM) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
               void);
               [ { } unit reads intP_intM
                 { (JC_80:
                   (integer_of_int32(select(intP_intM@init,
                                     shift(a_4,
                                     sub_int(integer_of_int32(n_4), (1))))) = 
                   integer_of_int32(select(intP_intM,
                                    shift(a_4,
                                    sub_int(integer_of_int32(n_4), (1))))))) } ];
               void;
               (let jessie_<num> = a_4 in
               (let jessie_<num> = n_4 in
               (let jessie_<num> = !hole in
               (let jessie_<num> = !child_0 in
               (JC_81:
               ((((pop_push_heap_copy_requires jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))));
               (hole := !child_0); !hole end))) in void)
             else (raise (Goto_while_0_break_exc void))) end
           else
            (C_43:
            begin
              (let jessie_<num> =
              (child_0 := (C_42:
                          (JC_83:
                          (int32_of_integer_ (C_41:
                                             ((add_int (integer_of_int32 
                                                        (C_40:
                                                        (JC_82:
                                                        (int32_of_integer_ 
                                                         (C_39:
                                                         ((mul_int (2)) 
                                                          (integer_of_int32 !hole)))))))) (1))))))) in
              void);
             (if ((eq_int_ (integer_of_int32 !child_0)) (integer_of_int32 
                                                         (C_56:
                                                         (JC_84:
                                                         (int32_of_integer_ 
                                                          (C_55:
                                                          ((sub_int (integer_of_int32 n_4)) (2))))))))
             then
              (if ((gt_int_ (integer_of_int32 (C_54:
                                              (JC_85:
                                              ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) 
                                               (integer_of_int32 !child_0)))))) 
                   (integer_of_int32 !tmp))
              then
               (let jessie_<num> =
               (C_49:
               (C_51:
               (C_52:
               begin
                 [ { } unit reads hole
                   { (JC_86:
                     lt_int(integer_of_int32(hole),
                     sub_int(integer_of_int32(n_4), (1)))) } ]; void;
                (let jessie_<num> =
                (let jessie_<num> =
                (C_46:
                (JC_87:
                ((((offset_acc_ !intP_alloc_table) !intP_intM) a_4) (integer_of_int32 !child_0)))) in
                (let jessie_<num> = a_4 in
                (let jessie_<num> = (integer_of_int32 !hole) in
                (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                (JC_88:
                (((((offset_upd_ !intP_alloc_table) intP_intM) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
                void);
                [ { } unit reads intP_intM
                  { (JC_89:
                    (integer_of_int32(select(intP_intM@init,
                                      shift(a_4,
                                      sub_int(integer_of_int32(n_4), (1))))) = 
                    integer_of_int32(select(intP_intM,
                                     shift(a_4,
                                     sub_int(integer_of_int32(n_4), (1))))))) } ];
                void;
                (let jessie_<num> = a_4 in
                (let jessie_<num> = n_4 in
                (let jessie_<num> = !hole in
                (let jessie_<num> = !child_0 in
                (JC_90:
                ((((pop_push_heap_copy_requires jessie_<num>) jessie_<num>) jessie_<num>) jessie_<num>))))));
                (hole := !child_0); !hole end))) in void) else void)
             else void); (raise (Goto_while_0_break_exc void)) end));
           (raise (Loop_continue_exc void)) end) with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break:
      (C_83:
      (C_93:
      begin
        void;
       [ { } unit reads hole,intP_intM,tmp
         { (JC_92:
           (forall i_17:int.
            ((lt_int(integer_of_int32(hole),
              sub_int(integer_of_int32(n_4), (1)))
             and ParentChild(i_17, integer_of_int32(hole))) ->
             ge_int(integer_of_int32(select(intP_intM, shift(a_4, i_17))),
             integer_of_int32(tmp))))) } ]; void;
       (let jessie_<num> =
       (let jessie_<num> = !tmp in
       (let jessie_<num> = a_4 in
       (let jessie_<num> = (integer_of_int32 !hole) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (JC_93:
       (((((offset_upd_ !intP_alloc_table) intP_intM) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
       void);
       [ { } unit reads hole,intP_intM
         { (JC_94:
           (forall x_3:int32.
            (CountWithHole(a_4, x_3, (0), integer_of_int32(hole),
             integer_of_int32(n_4), intP_intM) = Count(a_4, x_3, (1),
                                                 integer_of_int32(n_4),
                                                 intP_intM@init)))) } ];
       void;
       [ { } unit reads hole,intP_intM,tmp
         { (JC_95:
           (lt_int(integer_of_int32(hole),
            sub_int(integer_of_int32(n_4), (1))) ->
            ((integer_of_int32(select(intP_intM,
                               shift(a_4, integer_of_int32(hole)))) = 
             integer_of_int32(tmp))
            and ((integer_of_int32(tmp) = integer_of_int32(select(intP_intM@init,
                                                           shift(a_4,
                                                           sub_int(integer_of_int32(n_4),
                                                           (1))))))
                and (integer_of_int32(select(intP_intM@init,
                                      shift(a_4,
                                      sub_int(integer_of_int32(n_4), (1))))) = 
                    integer_of_int32(select(intP_intM,
                                     shift(a_4,
                                     sub_int(integer_of_int32(n_4), (1)))))))))) } ];
       void;
       [ { } unit reads hole,intP_intM
         { (JC_96:
           (forall x_4:int32.
            (lt_int(integer_of_int32(hole),
             sub_int(integer_of_int32(n_4), (1))) ->
             (Count(a_4, x_4, add_int(integer_of_int32(hole), (1)),
              add_int(sub_int(integer_of_int32(n_4), (1)), (1)), intP_intM) = 
             CountWithoutHole(a_4, x_4, add_int(integer_of_int32(hole), (1)),
             sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
             intP_intM))))) } ]; void;
       [ { } unit reads hole,intP_intM
         { (JC_97:
           (forall x_5:int32.
            ((lt_int(integer_of_int32(hole),
              sub_int(integer_of_int32(n_4), (1))) ->
              ((CountWithHole(a_4, x_5, (0), integer_of_int32(hole),
                integer_of_int32(n_4), intP_intM) = add_int(CountWithHole(a_4,
                                                            x_5, (0),
                                                            integer_of_int32(hole),
                                                            sub_int(integer_of_int32(n_4),
                                                            (1)), intP_intM),
                                                    Count(a_4, x_5,
                                                    sub_int(integer_of_int32(n_4),
                                                    (1)),
                                                    add_int(sub_int(integer_of_int32(n_4),
                                                            (1)),
                                                    (1)), intP_intM)))
              and ((add_int(CountWithHole(a_4, x_5, (0),
                            integer_of_int32(hole),
                            sub_int(integer_of_int32(n_4), (1)), intP_intM),
                    Count(a_4, x_5, sub_int(integer_of_int32(n_4), (1)),
                    add_int(sub_int(integer_of_int32(n_4), (1)), (1)),
                    intP_intM)) = add_int(CountWithoutHole(a_4, x_5, (0),
                                          integer_of_int32(hole),
                                          add_int(integer_of_int32(hole),
                                          (1)), intP_intM),
                                  Count(a_4, x_5,
                                  add_int(integer_of_int32(hole), (1)),
                                  sub_int(integer_of_int32(n_4), (1)),
                                  intP_intM)))
                  and ((add_int(CountWithoutHole(a_4, x_5, (0),
                                integer_of_int32(hole),
                                add_int(integer_of_int32(hole), (1)),
                                intP_intM),
                        Count(a_4, x_5, add_int(integer_of_int32(hole), (1)),
                        sub_int(integer_of_int32(n_4), (1)), intP_intM)) = 
                       CountWithoutHole(a_4, x_5, (0),
                       integer_of_int32(hole),
                       sub_int(integer_of_int32(n_4), (1)), intP_intM))
                      and (CountWithoutHole(a_4, x_5, (0),
                           integer_of_int32(hole),
                           sub_int(integer_of_int32(n_4), (1)), intP_intM) = 
                          Count(a_4, x_5, (0),
                          sub_int(integer_of_int32(n_4), (1)), intP_intM))))))
            and ((integer_of_int32(hole) = sub_int(integer_of_int32(n_4),
                                           (1))) ->
                 ((CountWithHole(a_4, x_5, (0), integer_of_int32(hole),
                   integer_of_int32(n_4), intP_intM) = CountWithHole(a_4,
                                                       x_5, (0),
                                                       sub_int(integer_of_int32(n_4),
                                                       (1)),
                                                       integer_of_int32(n_4),
                                                       intP_intM))
                 and (CountWithHole(a_4, x_5, (0),
                      sub_int(integer_of_int32(n_4), (1)),
                      integer_of_int32(n_4), intP_intM) = Count(a_4, x_5,
                                                          (0),
                                                          sub_int(integer_of_int32(n_4),
                                                          (1)), intP_intM))))))) } ];
       void;
       [ { } unit reads hole,intP_intM
         { (JC_98:
           (forall x_6:int32.
            ((Count(a_4, x_6, (0), sub_int(integer_of_int32(n_4), (1)),
              intP_intM) = CountWithHole(a_4, x_6, (0),
                           integer_of_int32(hole), integer_of_int32(n_4),
                           intP_intM))
            and (CountWithHole(a_4, x_6, (0), integer_of_int32(hole),
                 integer_of_int32(n_4), intP_intM) = Count(a_4, x_6, (1),
                                                     integer_of_int32(n_4),
                                                     intP_intM@init))))) } ];
       void;
       (let jessie_<num> =
       (let jessie_<num> = !max_1 in
       (let jessie_<num> = a_4 in
       (let jessie_<num> =
       (integer_of_int32 (C_90:
                         (JC_99:
                         (int32_of_integer_ (C_89:
                                            ((sub_int (integer_of_int32 n_4)) (1))))))) in
       (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
       (JC_100:
       (((((offset_upd_ !intP_alloc_table) intP_intM) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
       void);
       [ { } unit reads intP_intM
         { (JC_101:
           (forall x_7:int32.
            (Count(a_4, x_7, sub_int(integer_of_int32(n_4), (1)),
             add_int(sub_int(integer_of_int32(n_4), (1)), (1)), intP_intM) = 
            Count(a_4, x_7, (0), (1), intP_intM@init)))) } ]; void;
       [ { } unit reads intP_intM
         { (JC_102:
           (forall x_8:int32.
            (CountWithoutHole(a_4, x_8, (0),
             sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
             intP_intM) = CountWithoutHole(a_4, x_8, (0), (1),
                          integer_of_int32(n_4), intP_intM@init)))) } ];
       void;
       [ { } unit reads intP_intM
         { (JC_103:
           (forall x_9:int32.
            ((Count(a_4, x_9, (0), integer_of_int32(n_4), intP_intM) = 
             CountWithoutHole(a_4, x_9, (0),
             sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
             intP_intM))
            and ((CountWithoutHole(a_4, x_9, (0),
                  sub_int(integer_of_int32(n_4), (1)), integer_of_int32(n_4),
                  intP_intM) = CountWithoutHole(a_4, x_9, (0), (1),
                               integer_of_int32(n_4), intP_intM@init))
                and (CountWithoutHole(a_4, x_9, (0), (1),
                     integer_of_int32(n_4), intP_intM@init) = Count(a_4, x_9,
                                                              (0),
                                                              integer_of_int32(n_4),
                                                              intP_intM@init)))))) } ];
       void; (raise Return) end))) end)))); (raise Return) end with Return ->
   void end) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/popHeap.why
========== file tests/c/popHeap.jessie/why/popHeap_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type voidP

logic Count : intP pointer, int32, int, int, (intP, int32) memory -> int

function CountWithHole(c_0: intP pointer, v_3: int32, i_11: int, h: int,
  j_6: int, intP_intM_at_L: (intP, int32) memory) : int = (Count(c_0, v_3,
  i_11, h, intP_intM_at_L) + Count(c_0, v_3, (h + 1), j_6, intP_intM_at_L))

function CountWithoutHole(c_1: intP pointer, v_4: int32, i_12: int, h_0: int,
  j_7: int, intP_intM_at_L: (intP, int32) memory) : int = (Count(c_1, v_4,
  i_12, h_0, intP_intM_at_L) + Count(c_1, v_4, h_0, j_7, intP_intM_at_L))

logic integer_of_int32 : int32 -> int

predicate IsEqual(a_0: intP pointer, n_0: int, b: intP pointer,
  intP_intM_at_B: (intP, int32) memory, intP_intM_at_A: (intP,
  int32) memory) =
  (forall i:int.
    (((0 <= i) and (i < n_0)) -> (integer_of_int32(select(intP_intM_at_A,
     shift(a_0, i))) = integer_of_int32(select(intP_intM_at_B, shift(b, i))))))

predicate IsFirstMaximum(a_2: intP pointer, max_0: int,
  intP_intM_at_L: (intP, int32) memory) =
  (forall i_6:int.
    (((0 <= i_6) and (i_6 < max_0)) ->
     (integer_of_int32(select(intP_intM_at_L, shift(a_2,
     i_6))) < integer_of_int32(select(intP_intM_at_L, shift(a_2, max_0))))))

logic ParentChild : int, int -> prop

predicate IsHeap(c: intP pointer, n_1: int, intP_intM_at_L: (intP,
  int32) memory) =
  (forall i_4:int.
    (forall j_2:int.
      (((j_2 < n_1) and ParentChild(i_4, j_2)) ->
       (integer_of_int32(select(intP_intM_at_L, shift(c,
       i_4))) >= integer_of_int32(select(intP_intM_at_L, shift(c, j_2)))))))

predicate IsMaximum(a_1: intP pointer, n_2: int, max: int,
  intP_intM_at_L: (intP, int32) memory) =
  (forall i_5:int.
    (((0 <= i_5) and (i_5 < n_2)) -> (integer_of_int32(select(intP_intM_at_L,
     shift(a_1, max))) >= integer_of_int32(select(intP_intM_at_L, shift(a_1,
     i_5))))))

predicate IsValidRange(a: intP pointer, n: int,
  intP_alloc_table_at_L: intP alloc_table) =
  ((0 <= n) and
   ((offset_min(intP_alloc_table_at_L, a) <= 0) and
    (offset_max(intP_alloc_table_at_L, a) >= (n - 1))))

predicate Permutation(c_2: intP pointer, n_3: int32, intP_intM_at_B: (intP,
  int32) memory, intP_intM_at_A: (intP, int32) memory) =
  (forall x_0:int32. (Count(c_2, x_0, 0, integer_of_int32(n_3),
    intP_intM_at_A) = Count(c_2, x_0, 0, integer_of_int32(n_3),
    intP_intM_at_B)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom no_assign_Count_0:
  (forall tmp:intP pset.
    (forall tmpmem:(intP, int32) memory.
      (forall tmpalloc:intP alloc_table.
        (forall intP_intM_at_L:(intP, int32) memory.
          (forall j_3:int.
            (forall i_7:int.
              (forall v:int32.
                (forall a_3:intP pointer.
                  ((pset_disjoint(tmp, pset_range(pset_singleton(a_3), i_7,
                    (j_3 - 1))) and not_assigns(tmpalloc, intP_intM_at_L,
                    tmpmem, tmp)) ->
                   (Count(a_3, v, i_7, j_3, intP_intM_at_L) = Count(a_3, v,
                   i_7, j_3, tmpmem)))))))))))

axiom no_update_Count_0:
  (forall tmp:intP pointer.
    (forall tmpval:int32.
      (forall intP_intM_at_L:(intP, int32) memory.
        (forall j_3:int.
          (forall i_7:int.
            (forall v:int32.
              (forall a_3:intP pointer.
                ((not in_pset(tmp, pset_range(pset_singleton(a_3), i_7,
                 (j_3 - 1)))) -> (Count(a_3, v, i_7, j_3,
                 intP_intM_at_L) = Count(a_3, v, i_7, j_3,
                 store(intP_intM_at_L, tmp, tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom ParentChild_1:
  (forall i_1:int.
    (forall j_0:int.
      (ParentChild(i_1, j_0) <->
       ((0 <= i_1) and
        ((i_1 < j_0) and ((j_0 = ((2 * i_1) + 1)) or (j_0 = ((2 * i_1) + 2))))))))

axiom ParentChild_2:
  (forall i_2:int.
    (forall j_1:int.
      (ParentChild(i_2, j_1) <->
       ((0 < j_1) and (i_2 = computer_div((j_1 - 1), 2))))))

goal ParentChild_3:
  (forall i_3:int.
    ((0 < i_3) ->
     (ParentChild(computer_div((i_3 - 1), 2), i_3) and
      ((0 <= computer_div((i_3 - 1), 2)) and (computer_div((i_3 - 1),
       2) < i_3)))))

axiom ParentChild_3_as_axiom:
  (forall i_3:int.
    ((0 < i_3) ->
     (ParentChild(computer_div((i_3 - 1), 2), i_3) and
      ((0 <= computer_div((i_3 - 1), 2)) and (computer_div((i_3 - 1),
       2) < i_3)))))

axiom Count0:
  (forall intP_intM_at_L:(intP, int32) memory.
    (forall a_4_0:intP pointer.
      (forall v_0:int32.
        (forall i_8:int.
          (forall j_4:int.
            ((i_8 >= j_4) -> (Count(a_4_0, v_0, i_8, j_4,
             intP_intM_at_L) = 0)))))))

axiom Count1:
  (forall intP_intM_at_L:(intP, int32) memory.
    (forall a_5:intP pointer.
      (forall v_1:int32.
        (forall i_9:int.
          (forall j_5:int.
            (forall k:int.
              (((0 <= i_9) and ((i_9 <= j_5) and (j_5 <= k))) -> (Count(a_5,
               v_1, i_9, k, intP_intM_at_L) = (Count(a_5, v_1, i_9, j_5,
               intP_intM_at_L) + Count(a_5, v_1, j_5, k, intP_intM_at_L))))))))))

axiom Count2:
  (forall intP_intM_at_L:(intP, int32) memory.
    (forall a_6:intP pointer.
      (forall v_2:int32.
        (forall i_10:int.
          (((integer_of_int32(select(intP_intM_at_L, shift(a_6,
            i_10))) <> integer_of_int32(v_2)) -> (Count(a_6, v_2, i_10,
            (i_10 + 1), intP_intM_at_L) = 0)) and
           ((integer_of_int32(select(intP_intM_at_L, shift(a_6,
            i_10))) = integer_of_int32(v_2)) -> (Count(a_6, v_2, i_10,
            (i_10 + 1), intP_intM_at_L) = 1)))))))

goal CountLemma:
  (forall intP_intM_at_L:(intP, int32) memory.
    (forall a_7:intP pointer.
      (forall v_5:int32.
        (forall i_13:int.
          ((0 <= i_13) -> (Count(a_7, v_5, 0, (i_13 + 1),
           intP_intM_at_L) = (Count(a_7, v_5, 0, i_13,
           intP_intM_at_L) + Count(a_7, v_5, i_13, (i_13 + 1),
           intP_intM_at_L))))))))

axiom CountLemma_as_axiom:
  (forall intP_intM_at_L:(intP, int32) memory.
    (forall a_7:intP pointer.
      (forall v_5:int32.
        (forall i_13:int.
          ((0 <= i_13) -> (Count(a_7, v_5, 0, (i_13 + 1),
           intP_intM_at_L) = (Count(a_7, v_5, 0, i_13,
           intP_intM_at_L) + Count(a_7, v_5, i_13, (i_13 + 1),
           intP_intM_at_L))))))))

goal pop_heap_ensures_default_po_1:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  forall i_14:int.
  ((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
  ("JC_105": (integer_of_int32(select(intP_intM, shift(a_4,
  0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14)))))

goal pop_heap_ensures_default_po_2:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  forall x_1:int32.
  ("JC_106": (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
  integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_3:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall x_2:int32.
  ("JC_108": (CountWithHole(a_4, x_2, 0, integer_of_int32(hole),
  integer_of_int32(n_4), intP_intM) = Count(a_4, x_2, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_4:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall i_16:int.
  ((integer_of_int32(hole) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_16, integer_of_int32(hole))) ->
  ("JC_109": (integer_of_int32(select(intP_intM, shift(a_4,
  i_16))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_5:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall i_15:int.
  ((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
  ("JC_110": (integer_of_int32(select(intP_intM, shift(a_4,
  i_15))) <= integer_of_int32(max_1_0)))

goal pop_heap_ensures_default_po_6:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM))

goal pop_heap_ensures_default_po_7:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_114": ("JC_112": (0 <= integer_of_int32(hole))))

goal pop_heap_ensures_default_po_8:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_114": ("JC_113": (integer_of_int32(hole) < integer_of_int32(n_4))))

goal pop_heap_ensures_default_po_9:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM,
  pset_range(pset_singleton(a_4), 0, integer_of_int32(hole))))

goal pop_heap_ensures_default_po_10:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1))))

goal pop_heap_ensures_default_po_11:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0)))

goal pop_heap_ensures_default_po_12:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)))

goal pop_heap_ensures_default_po_13:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_14:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  forall x_2:int32.
  ("JC_108": (CountWithHole(a_4, x_2, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_2, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_15:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  forall i_16:int.
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_16, integer_of_int32(hole1))) ->
  ("JC_109": (integer_of_int32(select(intP_intM1, shift(a_4,
  i_16))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_16:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  forall i_15:int.
  ((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
  ("JC_110": (integer_of_int32(select(intP_intM1, shift(a_4,
  i_15))) <= integer_of_int32(max_1_0)))

goal pop_heap_ensures_default_po_17:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM1))

goal pop_heap_ensures_default_po_18:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_114": ("JC_112": (0 <= integer_of_int32(hole1))))

goal pop_heap_ensures_default_po_19:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_114": ("JC_113": (integer_of_int32(hole1) < integer_of_int32(n_4))))

goal pop_heap_ensures_default_po_20:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM1,
  pset_range(pset_singleton(a_4), 0, integer_of_int32(hole1))))

goal pop_heap_ensures_default_po_21:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM1,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1))))

goal pop_heap_ensures_default_po_22:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  forall i_17:int.
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_17, integer_of_int32(hole0))) ->
  ("JC_125": (integer_of_int32(select(intP_intM0, shift(a_4,
  i_17))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_23:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  forall x_3:int32.
  ("JC_126": (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_24:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_25:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(tmp0) = integer_of_int32(select(intP_intM,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_26:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_27:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  forall x_4:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_128": (Count(a_4, x_4, (integer_of_int32(hole0) + 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1) = CountWithoutHole(a_4, x_4,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_28:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
  integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
  intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1))))

goal pop_heap_ensures_default_po_29:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
  intP_intM1)) = (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1), intP_intM1))))

goal pop_heap_ensures_default_po_30:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  intP_intM1)) = CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_31:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_32:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_33:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_34:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
  intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_35:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_6, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_36:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  forall x_7:int32.
  ("JC_131": (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
  intP_intM)))

goal pop_heap_ensures_default_po_37:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  forall x_8:int32.
  ("JC_132": (CountWithoutHole(a_4, x_8, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_38:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (Count(a_4, x_9, 0, integer_of_int32(n_4),
  intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_39:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_40:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, 1, integer_of_int32(n_4),
  intP_intM) = Count(a_4, x_9, 0, integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_41:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_35": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_42:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_36": (integer_of_int32(select(intP_intM2, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM,
  shift(a_4, 0)))))))

goal pop_heap_ensures_default_po_43:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_37": IsMaximum(a_4, integer_of_int32(n_4),
  (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_44:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_38": Permutation(a_4, n_4, intP_intM2, intP_intM))))

goal pop_heap_ensures_default_po_45:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_118": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_40": not_assigns(intP_alloc_table, intP_intM, intP_intM2,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))

goal pop_heap_ensures_default_po_46:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0)))

goal pop_heap_ensures_default_po_47:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)))

goal pop_heap_ensures_default_po_48:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_49:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  forall x_2:int32.
  ("JC_108": (CountWithHole(a_4, x_2, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_2, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_50:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  forall i_16:int.
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_16, integer_of_int32(hole1))) ->
  ("JC_109": (integer_of_int32(select(intP_intM1, shift(a_4,
  i_16))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_51:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  forall i_15:int.
  ((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
  ("JC_110": (integer_of_int32(select(intP_intM1, shift(a_4,
  i_15))) <= integer_of_int32(max_1_0)))

goal pop_heap_ensures_default_po_52:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  ("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM1))

goal pop_heap_ensures_default_po_53:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  ("JC_114": ("JC_112": (0 <= integer_of_int32(hole1))))

goal pop_heap_ensures_default_po_54:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  ("JC_114": ("JC_113": (integer_of_int32(hole1) < integer_of_int32(n_4))))

goal pop_heap_ensures_default_po_55:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  ("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM1,
  pset_range(pset_singleton(a_4), 0, integer_of_int32(hole1))))

goal pop_heap_ensures_default_po_56:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_119": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_120": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM1,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1))))

goal pop_heap_ensures_default_po_57:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  forall i_17:int.
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_17, integer_of_int32(hole0))) ->
  ("JC_125": (integer_of_int32(select(intP_intM0, shift(a_4,
  i_17))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_58:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  forall x_3:int32.
  ("JC_126": (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_59:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_60:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(tmp0) = integer_of_int32(select(intP_intM,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_61:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_62:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  forall x_4:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_128": (Count(a_4, x_4, (integer_of_int32(hole0) + 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1) = CountWithoutHole(a_4, x_4,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_63:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
  integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
  intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1))))

goal pop_heap_ensures_default_po_64:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
  intP_intM1)) = (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1), intP_intM1))))

goal pop_heap_ensures_default_po_65:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  intP_intM1)) = CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_66:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_67:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_68:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_69:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
  intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_70:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_6, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_71:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  forall x_7:int32.
  ("JC_131": (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
  intP_intM)))

goal pop_heap_ensures_default_po_72:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  forall x_8:int32.
  ("JC_132": (CountWithoutHole(a_4, x_8, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_73:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (Count(a_4, x_9, 0, integer_of_int32(n_4),
  intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_74:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_75:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, 1, integer_of_int32(n_4),
  intP_intM) = Count(a_4, x_9, 0, integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_76:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_35": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_77:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_36": (integer_of_int32(select(intP_intM2, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM,
  shift(a_4, 0)))))))

goal pop_heap_ensures_default_po_78:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_37": IsMaximum(a_4, integer_of_int32(n_4),
  (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_79:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_38": Permutation(a_4, n_4, intP_intM2, intP_intM))))

goal pop_heap_ensures_default_po_80:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_118": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_40": not_assigns(intP_alloc_table, intP_intM, intP_intM2,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))

goal pop_heap_ensures_default_po_81:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)))

goal pop_heap_ensures_default_po_82:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_83:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  forall i_17:int.
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_17, integer_of_int32(hole1))) ->
  ("JC_125": (integer_of_int32(select(intP_intM1, shift(a_4,
  i_17))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_84:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  forall x_3:int32.
  ("JC_126": (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_85:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM2, shift(a_4,
  integer_of_int32(hole1)))) = integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_86:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(tmp0) = integer_of_int32(select(intP_intM,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_87:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_88:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  forall x_4:int32.
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_128": (Count(a_4, x_4, (integer_of_int32(hole1) + 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = CountWithoutHole(a_4, x_4,
  (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_89:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
  integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
  intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2))))

goal pop_heap_ensures_default_po_90:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
  (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
  (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
  intP_intM2)) = (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
  (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
  (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_91:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
  (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
  (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
  intP_intM2)) = CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
  (integer_of_int32(n_4) - 1), intP_intM2)))

goal pop_heap_ensures_default_po_92:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
  (integer_of_int32(n_4) - 1), intP_intM2) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM2)))

goal pop_heap_ensures_default_po_93:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_94:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  forall x_5:int32.
  (integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM2)))

goal pop_heap_ensures_default_po_95:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  forall x_6:int32.
  ("JC_130": (Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
  intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_96:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  forall x_6:int32.
  ("JC_130": (CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
  integer_of_int32(n_4), intP_intM2) = Count(a_4, x_6, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_97:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  forall x_7:int32.
  ("JC_131": (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
  intP_intM)))

goal pop_heap_ensures_default_po_98:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  forall x_8:int32.
  ("JC_132": (CountWithoutHole(a_4, x_8, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_99:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (Count(a_4, x_9, 0, integer_of_int32(n_4),
  intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM3)))

goal pop_heap_ensures_default_po_100:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_101:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, 1, integer_of_int32(n_4),
  intP_intM) = Count(a_4, x_9, 0, integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_102:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM3)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_35": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM3))))

goal pop_heap_ensures_default_po_103:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM3)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_36": (integer_of_int32(select(intP_intM3, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM,
  shift(a_4, 0)))))))

goal pop_heap_ensures_default_po_104:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM3)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_37": IsMaximum(a_4, integer_of_int32(n_4),
  (integer_of_int32(n_4) - 1), intP_intM3))))

goal pop_heap_ensures_default_po_105:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM3)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_38": Permutation(a_4, n_4, intP_intM3, intP_intM))))

goal pop_heap_ensures_default_po_106:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_122": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_123": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM3:(intP,
  int32) memory.
  (intP_intM3 = store(intP_intM2, shift(a_4, integer_of_int32(result13)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM3) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM3) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM3) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM3)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM3) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_40": not_assigns(intP_alloc_table, intP_intM, intP_intM3,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))

goal pop_heap_ensures_default_po_107:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  forall i_17:int.
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_17, integer_of_int32(hole0))) ->
  ("JC_125": (integer_of_int32(select(intP_intM0, shift(a_4,
  i_17))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_108:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  forall x_3:int32.
  ("JC_126": (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_109:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_110:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(tmp0) = integer_of_int32(select(intP_intM,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_111:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_112:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  forall x_4:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_128": (Count(a_4, x_4, (integer_of_int32(hole0) + 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1) = CountWithoutHole(a_4, x_4,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_113:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
  integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
  intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1))))

goal pop_heap_ensures_default_po_114:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
  intP_intM1)) = (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1), intP_intM1))))

goal pop_heap_ensures_default_po_115:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  intP_intM1)) = CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_116:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_117:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_118:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_119:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
  intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_120:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_6, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_121:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  forall x_7:int32.
  ("JC_131": (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
  intP_intM)))

goal pop_heap_ensures_default_po_122:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  forall x_8:int32.
  ("JC_132": (CountWithoutHole(a_4, x_8, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_123:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (Count(a_4, x_9, 0, integer_of_int32(n_4),
  intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_124:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_125:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, 1, integer_of_int32(n_4),
  intP_intM) = Count(a_4, x_9, 0, integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_126:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_35": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_127:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_36": (integer_of_int32(select(intP_intM2, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM,
  shift(a_4, 0)))))))

goal pop_heap_ensures_default_po_128:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_37": IsMaximum(a_4, integer_of_int32(n_4),
  (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_129:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_38": Permutation(a_4, n_4, intP_intM2, intP_intM))))

goal pop_heap_ensures_default_po_130:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result12)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_40": not_assigns(intP_alloc_table, intP_intM, intP_intM2,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))

goal pop_heap_ensures_default_po_131:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  forall i_17:int.
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
   ParentChild(i_17, integer_of_int32(hole0))) ->
  ("JC_125": (integer_of_int32(select(intP_intM0, shift(a_4,
  i_17))) >= integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_132:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  forall x_3:int32.
  ("JC_126": (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_133:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(tmp0)))

goal pop_heap_ensures_default_po_134:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(tmp0) = integer_of_int32(select(intP_intM,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_135:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_127": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1))))))

goal pop_heap_ensures_default_po_136:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  forall x_4:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_128": (Count(a_4, x_4, (integer_of_int32(hole0) + 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1) = CountWithoutHole(a_4, x_4,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_137:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
  integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
  intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM1))))

goal pop_heap_ensures_default_po_138:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
  intP_intM1)) = (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1), intP_intM1))))

goal pop_heap_ensures_default_po_139:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": ((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
  (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
  intP_intM1)) = CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_140:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
  (integer_of_int32(n_4) - 1), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_141:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_142:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  forall x_5:int32.
  (integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
  ("JC_129": (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
  (integer_of_int32(n_4) - 1), intP_intM1)))

goal pop_heap_ensures_default_po_143:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
  intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1)))

goal pop_heap_ensures_default_po_144:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  forall x_6:int32.
  ("JC_130": (CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
  integer_of_int32(n_4), intP_intM1) = Count(a_4, x_6, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_145:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  forall x_7:int32.
  ("JC_131": (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
  ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
  intP_intM)))

goal pop_heap_ensures_default_po_146:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  forall x_8:int32.
  ("JC_132": (CountWithoutHole(a_4, x_8, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_147:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (Count(a_4, x_9, 0, integer_of_int32(n_4),
  intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2)))

goal pop_heap_ensures_default_po_148:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
  integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
  integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_149:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  forall x_9:int32.
  ("JC_133": (CountWithoutHole(a_4, x_9, 0, 1, integer_of_int32(n_4),
  intP_intM) = Count(a_4, x_9, 0, integer_of_int32(n_4), intP_intM)))

goal pop_heap_ensures_default_po_150:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_35": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_151:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_36": (integer_of_int32(select(intP_intM2, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM,
  shift(a_4, 0)))))))

goal pop_heap_ensures_default_po_152:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39":
  ("JC_37": IsMaximum(a_4, integer_of_int32(n_4),
  (integer_of_int32(n_4) - 1), intP_intM2))))

goal pop_heap_ensures_default_po_153:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_39": ("JC_38": Permutation(a_4, n_4, intP_intM2, intP_intM))))

goal pop_heap_ensures_default_po_154:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_105":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM, shift(a_4, 0))) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_106":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ((("JC_107": (integer_of_int32(select(intP_intM, shift(a_4,
    (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
    shift(a_4, (integer_of_int32(n_4) - 1)))))) and
    (("JC_108":
     (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
       integer_of_int32(n_4), intP_intM)))) and
     (("JC_109":
      (forall i_16:int.
        (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
          ParentChild(i_16, integer_of_int32(hole0))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_16))) >= integer_of_int32(tmp0))))) and
      (("JC_110":
       (forall i_15:int.
         (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
          (integer_of_int32(select(intP_intM0, shift(a_4,
          i_15))) <= integer_of_int32(max_1_0))))) and
       (("JC_111": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
        ("JC_114":
        (("JC_112": (0 <= integer_of_int32(hole0))) and
         ("JC_113": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) and
   (("JC_116": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, integer_of_int32(hole0)))) and
    ("JC_117": not_assigns(intP_alloc_table, intP_intM, intP_intM0,
    pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_125":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_126":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_127":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_128":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_129":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_130":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(result11)),
  max_1_0)) ->
  ("JC_131":
  (forall x_7:int32. (Count(a_4, x_7, (integer_of_int32(n_4) - 1),
    ((integer_of_int32(n_4) - 1) + 1), intP_intM2) = Count(a_4, x_7, 0, 1,
    intP_intM)))) ->
  ("JC_132":
  (forall x_8:int32. (CountWithoutHole(a_4, x_8, 0,
    (integer_of_int32(n_4) - 1), integer_of_int32(n_4),
    intP_intM2) = CountWithoutHole(a_4, x_8, 0, 1, integer_of_int32(n_4),
    intP_intM)))) ->
  ("JC_133":
  (forall x_9:int32.
    ((Count(a_4, x_9, 0, integer_of_int32(n_4),
     intP_intM2) = CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
     integer_of_int32(n_4), intP_intM2)) and
     ((CountWithoutHole(a_4, x_9, 0, (integer_of_int32(n_4) - 1),
      integer_of_int32(n_4), intP_intM2) = CountWithoutHole(a_4, x_9, 0, 1,
      integer_of_int32(n_4), intP_intM)) and (CountWithoutHole(a_4, x_9, 0,
      1, integer_of_int32(n_4), intP_intM) = Count(a_4, x_9, 0,
      integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_41":
  ("JC_40": not_assigns(intP_alloc_table, intP_intM, intP_intM2,
  pset_range(pset_singleton(a_4), 0, (integer_of_int32(n_4) - 1)))))

goal pop_heap_induction_ensures_default_po_1:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall j_8:int.
  ((0 <= j_8) and
   ((j_8 < integer_of_int32(i_19)) and
    (integer_of_int32(i_19) <= integer_of_int32(n_0_0)))) ->
  ("JC_160": (integer_of_int32(select(intP_intM, shift(a_0_0,
  0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8)))))

goal pop_heap_induction_ensures_default_po_2:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  ("JC_163": ("JC_161": (0 <= integer_of_int32(i_19))))

goal pop_heap_induction_ensures_default_po_3:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  ("JC_163": ("JC_162": (integer_of_int32(i_19) <= integer_of_int32(n_0_0))))

goal pop_heap_induction_ensures_default_po_4:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  (("JC_160":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_163":
   (("JC_161": (0 <= integer_of_int32(i_19_0))) and
    ("JC_162": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  (0 < integer_of_int32(i_19_0)) ->
  ("JC_167": ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
  integer_of_int32(i_19_0)))

goal pop_heap_induction_ensures_default_po_5:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  (("JC_160":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_163":
   (("JC_161": (0 <= integer_of_int32(i_19_0))) and
    ("JC_162": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_167":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(i_19_0) + 1)) ->
  forall i_19_1:int32.
  (i_19_1 = result0) ->
  forall j_8:int.
  ((0 <= j_8) and
   ((j_8 < integer_of_int32(i_19_1)) and
    (integer_of_int32(i_19_1) <= integer_of_int32(n_0_0)))) ->
  ("JC_160": (integer_of_int32(select(intP_intM, shift(a_0_0,
  0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8)))))

goal pop_heap_induction_ensures_default_po_6:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  (("JC_160":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_163":
   (("JC_161": (0 <= integer_of_int32(i_19_0))) and
    ("JC_162": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_167":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(i_19_0) + 1)) ->
  forall i_19_1:int32.
  (i_19_1 = result0) ->
  ("JC_163": ("JC_161": (0 <= integer_of_int32(i_19_1))))

goal pop_heap_induction_ensures_default_po_7:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  (("JC_160":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_163":
   (("JC_161": (0 <= integer_of_int32(i_19_0))) and
    ("JC_162": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_167":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(i_19_0) + 1)) ->
  forall i_19_1:int32.
  (i_19_1 = result0) ->
  ("JC_163":
  ("JC_162": (integer_of_int32(i_19_1) <= integer_of_int32(n_0_0))))

goal pop_heap_induction_ensures_default_po_8:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  (("JC_160":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_163":
   (("JC_161": (0 <= integer_of_int32(i_19_0))) and
    ("JC_162": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) >= integer_of_int32(n_0_0)) ->
  forall i_18:int.
  ((0 <= i_18) and (i_18 < integer_of_int32(n_0_0))) ->
  ("JC_144": (integer_of_int32(select(intP_intM, shift(a_0_0,
  0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, i_18)))))

goal pop_heap_induction_safety_po_1:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  ("JC_155": true) ->
  (("JC_150":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_153":
   (("JC_151": (0 <= integer_of_int32(i_19_0))) and
    ("JC_152": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_157":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  ((-2147483648) <= (integer_of_int32(i_19_0) + 1))

goal pop_heap_induction_safety_po_2:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  ("JC_155": true) ->
  (("JC_150":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_153":
   (("JC_151": (0 <= integer_of_int32(i_19_0))) and
    ("JC_152": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_157":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  ((integer_of_int32(i_19_0) + 1) <= 2147483647)

goal pop_heap_induction_safety_po_3:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  ("JC_155": true) ->
  (("JC_150":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_153":
   (("JC_151": (0 <= integer_of_int32(i_19_0))) and
    ("JC_152": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_157":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  (((-2147483648) <= (integer_of_int32(i_19_0) + 1)) and
   ((integer_of_int32(i_19_0) + 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(i_19_0) + 1)) ->
  forall i_19_1:int32.
  (i_19_1 = result0) ->
  (0 <= ("JC_159": (integer_of_int32(n_0_0) - integer_of_int32(i_19_0))))

goal pop_heap_induction_safety_po_4:
  forall a_0_0:intP pointer.
  forall n_0_0:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_142":
  (("JC_139": (0 < integer_of_int32(n_0_0))) and
   (("JC_140": IsValidRange(a_0_0, integer_of_int32(n_0_0),
    intP_alloc_table)) and
    ("JC_141": IsHeap(a_0_0, integer_of_int32(n_0_0), intP_intM))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall i_19:int32.
  (i_19 = result) ->
  forall i_19_0:int32.
  ("JC_155": true) ->
  (("JC_150":
   (forall j_8:int.
     (((0 <= j_8) and
       ((j_8 < integer_of_int32(i_19_0)) and
        (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))) ->
      (integer_of_int32(select(intP_intM, shift(a_0_0,
      0))) >= integer_of_int32(select(intP_intM, shift(a_0_0, j_8))))))) and
   ("JC_153":
   (("JC_151": (0 <= integer_of_int32(i_19_0))) and
    ("JC_152": (integer_of_int32(i_19_0) <= integer_of_int32(n_0_0)))))) ->
  (integer_of_int32(i_19_0) < integer_of_int32(n_0_0)) ->
  ("JC_157":
  ((0 < integer_of_int32(i_19_0)) ->
   ParentChild(computer_div((integer_of_int32(i_19_0) - 1), 2),
   integer_of_int32(i_19_0)))) ->
  (((-2147483648) <= (integer_of_int32(i_19_0) + 1)) and
   ((integer_of_int32(i_19_0) + 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(i_19_0) + 1)) ->
  forall i_19_1:int32.
  (i_19_1 = result0) ->
  (("JC_159": (integer_of_int32(n_0_0) - integer_of_int32(i_19_1))) < 
  ("JC_159": (integer_of_int32(n_0_0) - integer_of_int32(i_19_0))))

goal pop_heap_safety_po_1:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  ("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)))

goal pop_heap_safety_po_2:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137": ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))

goal pop_heap_safety_po_3:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  ((-2147483648) <= (integer_of_int32(n_4) - 1))

goal pop_heap_safety_po_4:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  ((integer_of_int32(n_4) - 1) <= 2147483647)

goal pop_heap_safety_po_5:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2))

goal pop_heap_safety_po_6:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_7:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  (offset_min(intP_alloc_table, a_4) <= 0)

goal pop_heap_safety_po_8:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  (0 <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_9:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  ((-2147483648) <= (2 * integer_of_int32(hole0)))

goal pop_heap_safety_po_10:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  ((2 * integer_of_int32(hole0)) <= 2147483647)

goal pop_heap_safety_po_11:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  ((-2147483648) <= (integer_of_int32(result5) + 2))

goal pop_heap_safety_po_12:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  ((integer_of_int32(result5) + 2) <= 2147483647)

goal pop_heap_safety_po_13:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0))

goal pop_heap_safety_po_14:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_15:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((-2147483648) <= (integer_of_int32(child_0) - 1))

goal pop_heap_safety_po_16:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((integer_of_int32(child_0) - 1) <= 2147483647)

goal pop_heap_safety_po_17:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9))

goal pop_heap_safety_po_18:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_19:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0))

goal pop_heap_safety_po_20:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_21:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_22:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_23:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)))

goal pop_heap_safety_po_24:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_3": (0 <= integer_of_int32(hole0))))

goal pop_heap_safety_po_25:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))))

goal pop_heap_safety_po_26:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))))

goal pop_heap_safety_po_27:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(child_0_0)))))))

goal pop_heap_safety_po_28:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  (0 <= ("JC_91": (integer_of_int32(n_4) - integer_of_int32(hole0))))

goal pop_heap_safety_po_29:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result13:int32.
  (result13 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result13)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  (("JC_91": (integer_of_int32(n_4) - integer_of_int32(hole1))) < ("JC_91":
                                                                  (integer_of_int32(n_4) - integer_of_int32(hole0))))

goal pop_heap_safety_po_30:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_31:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_32:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result13))

goal pop_heap_safety_po_33:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) < integer_of_int32(result10)) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(child_0) - 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result11) ->
  ("JC_75": ParentChild(integer_of_int32(hole0),
  integer_of_int32(child_0_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result12) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result13) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_34:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_35:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_36:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)))

goal pop_heap_safety_po_37:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_3": (0 <= integer_of_int32(hole0))))

goal pop_heap_safety_po_38:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0))))

goal pop_heap_safety_po_39:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_5": (integer_of_int32(child_0) < integer_of_int32(n_4))))

goal pop_heap_safety_po_40:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(child_0)))))))

goal pop_heap_safety_po_41:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0))) and
      (("JC_5": (integer_of_int32(child_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  (0 <= ("JC_91": (integer_of_int32(n_4) - integer_of_int32(hole0))))

goal pop_heap_safety_po_42:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_77": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_80": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0))) and
      (("JC_5": (integer_of_int32(child_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0) ->
  (("JC_91": (integer_of_int32(n_4) - integer_of_int32(hole1))) < ("JC_91":
                                                                  (integer_of_int32(n_4) - integer_of_int32(hole0))))

goal pop_heap_safety_po_43:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_44:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_45:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result12))

goal pop_heap_safety_po_46:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) < integer_of_int32(result7)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result8:int32.
  (result8 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (((-2147483648) <= (integer_of_int32(child_0) - 1)) and
   ((integer_of_int32(child_0) - 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(child_0) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result9)) and
   (integer_of_int32(result9) <= offset_max(intP_alloc_table, a_4))) ->
  forall result10:int32.
  (result10 = select(intP_intM0, shift(a_4, integer_of_int32(result9)))) ->
  (integer_of_int32(result8) >= integer_of_int32(result10)) ->
  ("JC_75": ParentChild(integer_of_int32(hole0), integer_of_int32(child_0))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0)) and
   (integer_of_int32(child_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result12) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_47:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  ((-2147483648) <= (integer_of_int32(result8) + 1))

goal pop_heap_safety_po_48:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  ((integer_of_int32(result8) + 1) <= 2147483647)

goal pop_heap_safety_po_49:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  ((-2147483648) <= (integer_of_int32(n_4) - 2))

goal pop_heap_safety_po_50:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  ((integer_of_int32(n_4) - 2) <= 2147483647)

goal pop_heap_safety_po_51:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0))

goal pop_heap_safety_po_52:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_53:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_54:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_55:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)))

goal pop_heap_safety_po_56:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_3": (0 <= integer_of_int32(hole0))))

goal pop_heap_safety_po_57:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))))

goal pop_heap_safety_po_58:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7": ("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))))

goal pop_heap_safety_po_59:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1, shift(a_4,
  integer_of_int32(child_0_0)))))))

goal pop_heap_safety_po_60:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole1))

goal pop_heap_safety_po_61:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (integer_of_int32(hole1) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_62:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole1)) and
   (integer_of_int32(hole1) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result13))

goal pop_heap_safety_po_63:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) > integer_of_int32(tmp0)) ->
  ("JC_86": (integer_of_int32(hole0) < (integer_of_int32(n_4) - 1))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result12:int32.
  (result12 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  result12)) ->
  ("JC_89": (integer_of_int32(select(intP_intM, shift(a_4,
  (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
  shift(a_4, (integer_of_int32(n_4) - 1)))))) ->
  ("JC_7":
  (("JC_1": (0 < integer_of_int32(n_4))) and
   (("JC_2": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    (("JC_3": (0 <= integer_of_int32(hole0))) and
     (("JC_4": (integer_of_int32(hole0) < integer_of_int32(child_0_0))) and
      (("JC_5": (integer_of_int32(child_0_0) < integer_of_int32(n_4))) and
       ("JC_6": (integer_of_int32(select(intP_intM1, shift(a_4,
       integer_of_int32(hole0)))) = integer_of_int32(select(intP_intM1,
       shift(a_4, integer_of_int32(child_0_0)))))))))))) ->
  ("JC_19":
  (forall x_0_0:int32. (CountWithHole(a_4, x_0_0, 0,
    integer_of_int32(child_0_0), integer_of_int32(n_4),
    intP_intM1) = CountWithHole(a_4, x_0_0, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1)))) ->
  forall hole1:int32.
  (hole1 = child_0_0) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole1))) ->
     (integer_of_int32(select(intP_intM1, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole1)) and
   (integer_of_int32(hole1) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM2:(intP,
  int32) memory.
  (intP_intM2 = store(intP_intM1, shift(a_4, integer_of_int32(hole1)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole1),
    integer_of_int32(n_4), intP_intM2) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM2, shift(a_4,
    integer_of_int32(hole1)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM2,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole1) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM2) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole1) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole1) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
       intP_intM2) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM2))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
        (integer_of_int32(n_4) - 1), intP_intM2) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM2)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole1), (integer_of_int32(hole1) + 1),
        intP_intM2) + Count(a_4, x_5, (integer_of_int32(hole1) + 1),
        (integer_of_int32(n_4) - 1), intP_intM2))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole1),
         (integer_of_int32(hole1) + 1), intP_intM2) + Count(a_4, x_5,
         (integer_of_int32(hole1) + 1), (integer_of_int32(n_4) - 1),
         intP_intM2)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole1), (integer_of_int32(n_4) - 1),
         intP_intM2) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM2)))))) and
     ((integer_of_int32(hole1) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole1),
       integer_of_int32(n_4), intP_intM2) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM2)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM2) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM2))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM2) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole1),
     integer_of_int32(n_4), intP_intM2)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole1), integer_of_int32(n_4), intP_intM2) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result13:int32.
  (integer_of_int32(result13) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result13) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_64:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_65:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_66:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result12))

goal pop_heap_safety_po_67:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) = integer_of_int32(result10)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(child_0_0)) and
   (integer_of_int32(child_0_0) <= offset_max(intP_alloc_table, a_4))) ->
  forall result11:int32.
  (result11 = select(intP_intM0, shift(a_4, integer_of_int32(child_0_0)))) ->
  (integer_of_int32(result11) <= integer_of_int32(tmp0)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result12:int32.
  (integer_of_int32(result12) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result12) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_68:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0))

goal pop_heap_safety_po_69:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))

goal pop_heap_safety_po_70:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  (offset_min(intP_alloc_table, a_4) <= integer_of_int32(result11))

goal pop_heap_safety_po_71:
  forall a_4:intP pointer.
  forall n_4:int32.
  forall intP_alloc_table:intP alloc_table.
  forall intP_intM:(intP,
  int32) memory.
  ("JC_33":
  (("JC_29": (0 < integer_of_int32(n_4))) and
   (("JC_30": (integer_of_int32(n_4) < computer_div((2147483647 - 2), 2))) and
    (("JC_31": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
     ("JC_32": IsHeap(a_4, integer_of_int32(n_4), intP_intM)))))) ->
  ("JC_137":
  (("JC_134": (0 < integer_of_int32(n_4))) and
   (("JC_135": IsValidRange(a_4, integer_of_int32(n_4), intP_alloc_table)) and
    ("JC_136": IsHeap(a_4, integer_of_int32(n_4), intP_intM))))) ->
  ("JC_146":
  (forall i_18:int.
    (((0 <= i_18) and (i_18 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_18))))))) ->
  ("JC_52":
  (forall i_14:int.
    (((0 < i_14) and (i_14 < integer_of_int32(n_4))) ->
     (integer_of_int32(select(intP_intM, shift(a_4,
     0))) >= integer_of_int32(select(intP_intM, shift(a_4, i_14))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall tmp:int32.
  (tmp = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall max_1:int32.
  (max_1 = result0) ->
  forall result1:int32.
  (integer_of_int32(result1) = 0) ->
  forall hole:int32.
  (hole = result1) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(n_4) - 1)) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(result2)) and
   (integer_of_int32(result2) <= offset_max(intP_alloc_table, a_4))) ->
  forall result3:int32.
  (result3 = select(intP_intM, shift(a_4, integer_of_int32(result2)))) ->
  forall tmp0:int32.
  (tmp0 = result3) ->
  ((offset_min(intP_alloc_table, a_4) <= 0) and
   (0 <= offset_max(intP_alloc_table, a_4))) ->
  forall result4:int32.
  (result4 = select(intP_intM, a_4)) ->
  forall max_1_0:int32.
  (max_1_0 = result4) ->
  ("JC_56":
  (forall x_1:int32. (CountWithHole(a_4, x_1, 0, integer_of_int32(hole),
    integer_of_int32(n_4), intP_intM) = Count(a_4, x_1, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  forall hole0:int32.
  forall intP_intM0:(intP,
  int32) memory.
  ("JC_66": true) ->
  (("JC_57": (integer_of_int32(select(intP_intM, shift(a_4,
   (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM0,
   shift(a_4, (integer_of_int32(n_4) - 1)))))) and
   (("JC_58":
    (forall x_2:int32. (CountWithHole(a_4, x_2, 0, integer_of_int32(hole0),
      integer_of_int32(n_4), intP_intM0) = Count(a_4, x_2, 1,
      integer_of_int32(n_4), intP_intM)))) and
    (("JC_59":
     (forall i_16:int.
       (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
         ParentChild(i_16, integer_of_int32(hole0))) ->
        (integer_of_int32(select(intP_intM0, shift(a_4,
        i_16))) >= integer_of_int32(tmp0))))) and
     (("JC_60":
      (forall i_15:int.
        (((0 <= i_15) and (i_15 < integer_of_int32(n_4))) ->
         (integer_of_int32(select(intP_intM0, shift(a_4,
         i_15))) <= integer_of_int32(max_1_0))))) and
      (("JC_61": IsHeap(a_4, (integer_of_int32(n_4) - 1), intP_intM0)) and
       ("JC_64":
       (("JC_62": (0 <= integer_of_int32(hole0))) and
        ("JC_63": (integer_of_int32(hole0) < integer_of_int32(n_4)))))))))) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 2)) and
   ((integer_of_int32(result5) + 2) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 2)) ->
  forall child_0:int32.
  (child_0 = result6) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(child_0) >= integer_of_int32(result7)) ->
  (((-2147483648) <= (2 * integer_of_int32(hole0))) and
   ((2 * integer_of_int32(hole0)) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (2 * integer_of_int32(hole0))) ->
  (((-2147483648) <= (integer_of_int32(result8) + 1)) and
   ((integer_of_int32(result8) + 1) <= 2147483647)) ->
  forall result9:int32.
  (integer_of_int32(result9) = (integer_of_int32(result8) + 1)) ->
  forall child_0_0:int32.
  (child_0_0 = result9) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 2)) and
   ((integer_of_int32(n_4) - 2) <= 2147483647)) ->
  forall result10:int32.
  (integer_of_int32(result10) = (integer_of_int32(n_4) - 2)) ->
  (integer_of_int32(child_0_0) <> integer_of_int32(result10)) ->
  ("JC_92":
  (forall i_17:int.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) and
      ParentChild(i_17, integer_of_int32(hole0))) ->
     (integer_of_int32(select(intP_intM0, shift(a_4,
     i_17))) >= integer_of_int32(tmp0))))) ->
  ((offset_min(intP_alloc_table, a_4) <= integer_of_int32(hole0)) and
   (integer_of_int32(hole0) <= offset_max(intP_alloc_table, a_4))) ->
  forall intP_intM1:(intP,
  int32) memory.
  (intP_intM1 = store(intP_intM0, shift(a_4, integer_of_int32(hole0)),
  tmp0)) ->
  ("JC_94":
  (forall x_3:int32. (CountWithHole(a_4, x_3, 0, integer_of_int32(hole0),
    integer_of_int32(n_4), intP_intM1) = Count(a_4, x_3, 1,
    integer_of_int32(n_4), intP_intM)))) ->
  ("JC_95":
  ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
   ((integer_of_int32(select(intP_intM1, shift(a_4,
    integer_of_int32(hole0)))) = integer_of_int32(tmp0)) and
    ((integer_of_int32(tmp0) = integer_of_int32(select(intP_intM, shift(a_4,
     (integer_of_int32(n_4) - 1))))) and (integer_of_int32(select(intP_intM,
     shift(a_4,
     (integer_of_int32(n_4) - 1)))) = integer_of_int32(select(intP_intM1,
     shift(a_4, (integer_of_int32(n_4) - 1))))))))) ->
  ("JC_96":
  (forall x_4:int32.
    ((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) -> (Count(a_4,
     x_4, (integer_of_int32(hole0) + 1), ((integer_of_int32(n_4) - 1) + 1),
     intP_intM1) = CountWithoutHole(a_4, x_4, (integer_of_int32(hole0) + 1),
     (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1))))) ->
  ("JC_97":
  (forall x_5:int32.
    (((integer_of_int32(hole0) < (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = (CountWithHole(a_4, x_5, 0,
       integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
       intP_intM1) + Count(a_4, x_5, (integer_of_int32(n_4) - 1),
       ((integer_of_int32(n_4) - 1) + 1), intP_intM1))) and
       (((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
        (integer_of_int32(n_4) - 1), intP_intM1) + Count(a_4, x_5,
        (integer_of_int32(n_4) - 1), ((integer_of_int32(n_4) - 1) + 1),
        intP_intM1)) = (CountWithoutHole(a_4, x_5, 0,
        integer_of_int32(hole0), (integer_of_int32(hole0) + 1),
        intP_intM1) + Count(a_4, x_5, (integer_of_int32(hole0) + 1),
        (integer_of_int32(n_4) - 1), intP_intM1))) and
        (((CountWithoutHole(a_4, x_5, 0, integer_of_int32(hole0),
         (integer_of_int32(hole0) + 1), intP_intM1) + Count(a_4, x_5,
         (integer_of_int32(hole0) + 1), (integer_of_int32(n_4) - 1),
         intP_intM1)) = CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1)) and (CountWithoutHole(a_4, x_5, 0,
         integer_of_int32(hole0), (integer_of_int32(n_4) - 1),
         intP_intM1) = Count(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
         intP_intM1)))))) and
     ((integer_of_int32(hole0) = (integer_of_int32(n_4) - 1)) ->
      ((CountWithHole(a_4, x_5, 0, integer_of_int32(hole0),
       integer_of_int32(n_4), intP_intM1) = CountWithHole(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), integer_of_int32(n_4), intP_intM1)) and
       (CountWithHole(a_4, x_5, 0, (integer_of_int32(n_4) - 1),
       integer_of_int32(n_4), intP_intM1) = Count(a_4, x_5, 0,
       (integer_of_int32(n_4) - 1), intP_intM1))))))) ->
  ("JC_98":
  (forall x_6:int32.
    ((Count(a_4, x_6, 0, (integer_of_int32(n_4) - 1),
     intP_intM1) = CountWithHole(a_4, x_6, 0, integer_of_int32(hole0),
     integer_of_int32(n_4), intP_intM1)) and (CountWithHole(a_4, x_6, 0,
     integer_of_int32(hole0), integer_of_int32(n_4), intP_intM1) = Count(a_4,
     x_6, 1, integer_of_int32(n_4), intP_intM))))) ->
  (((-2147483648) <= (integer_of_int32(n_4) - 1)) and
   ((integer_of_int32(n_4) - 1) <= 2147483647)) ->
  forall result11:int32.
  (integer_of_int32(result11) = (integer_of_int32(n_4) - 1)) ->
  (integer_of_int32(result11) <= offset_max(intP_alloc_table, a_4))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/popHeap_why.why           : ..............##.##..##.##.#.#.#.....##...###.#..##.##..##.##.#.#.#.....##...###.#.#.##.#.#.......##...###.#.##.#.#.#.....##...###.#.##.#.#.#.....##...###.#....#................#.#.#............#............#..................#............ (165/0/0/74/0)
total   : 239
valid   : 165 ( 69%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :  74 ( 31%)
failure :   0 (  0%)
