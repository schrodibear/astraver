========== file tests/c/my_cosine.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

// does not work: RUN GAPPA: will ask regtests to run Gappa on this program
// RUNCOQ: for the first VC


/*@ lemma method_error: \forall real x;
  @     \abs(x) <= 0x1p-5 ==> \abs(1.0 - x*x*0.5 - \cos(x)) <= 0x1p-24;
  @*/

/*@ requires \abs(x) <= 0x1p-5;
  @ ensures \abs(\result - \cos(x)) <= 0x1p-23;
  @*/
float my_cos1(float x) {
  //@ assert \abs(1.0 - x*x*0.5 - \cos(x)) <= 0x1p-24;
  return 1.0f - x * x * 0.5f;
}

/*@ requires \abs(x) <= 0x1p-5 && \round_error(x) == 0.0;
  @ ensures \abs(\result - \cos(x)) <= 0x1p-23;
  @*/
float my_cos2(float x) {
  //@ assert \exact(x) == x;
  float r = 1.0f - x * x * 0.5f;
  //@ assert \abs(\exact(r) - \cos(x)) <= 0x1p-24;
  return r;
}


/*@ requires \abs(\exact(x)) <= 0x1p-5
  @     && \round_error(x) <= 0x1p-20;
  @ ensures \abs(\exact(\result) - \cos(\exact(x))) <= 0x1p-24
  @     && \round_error(\result) <= \round_error(x) + 0x3p-24;
  @*/
float my_cos3(float x) {
  float r = 1.0f - x * x * 0.5f;
  //@ assert \abs(\exact(r) - \cos(\exact(x))) <= 0x1p-24;  // by interval
  return r;
}

/*@ requires \abs(x) <= 0.07 ;
  @ ensures \abs(\result - \cos(x)) <= 0x1.3p-20;
  @*/
float my_cos4(float x) {
  //@ assert \abs(1.0 - x*x*0.5 - \cos(x)) <= 0x1.2p-20;
  return 1.0f - x * x * 0.5f;
}


/*
Local Variables:
compile-command: "make my_cosine.why3ml"
End:
*/


========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/my_cosine.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/my_cosine.jessie
[jessie] File tests/c/my_cosine.jessie/my_cosine.jc written.
[jessie] File tests/c/my_cosine.jessie/my_cosine.cloc written.
========== file tests/c/my_cosine.jessie/my_cosine.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

lemma method_error :
(\forall real x;
  ((\real_abs(x) <= 0x1p-5) ==>
    (\real_abs(((1.0 - ((x * x) * 0.5)) - \cos(x))) <= 0x1p-24)))

float my_cos1(float x)
  requires (C_7 : (\real_abs((x :> real)) <= 0x1p-5));
behavior default:
  ensures (C_6 : (\real_abs(((\result :> real) - \cos((\at(x,Old) :> real)))) <=
                   0x1p-23));
{  
   (var float __retres);
   
   {  
      {  
         (assert for default: (C_1 : (\real_abs(((1.0 -
                                                   (((x :> real) *
                                                      (x :> real)) *
                                                     0.5)) -
                                                  \cos((x :> real)))) <=
                                       0x1p-24)));
         ()
      };
      (C_5 : (__retres = (C_4 : ((1.0 :> float) -
                                  (C_3 : ((C_2 : (x * x)) * (0.5 :> float)))))));
      
      (return __retres)
   }
}

float my_cos2(float x_0)
  requires (C_15 : ((C_16 : (\real_abs((x_0 :> real)) <= 0x1p-5)) &&
                     (C_17 : (\single_round_error(x_0) == 0.0))));
behavior default:
  ensures (C_14 : (\real_abs(((\result :> real) -
                               \cos((\at(x_0,Old) :> real)))) <=
                    0x1p-23));
{  
   (var float r);
   
   {  
      {  
         (assert for default: (C_8 : (\single_exact(x_0) == (x_0 :> real))));
         ()
      };
      
      {  (C_12 : (r = (C_11 : ((1.0 :> float) -
                                (C_10 : ((C_9 : (x_0 * x_0)) *
                                          (0.5 :> float)))))))
      };
      
      {  
         (assert for default: (C_13 : (\real_abs((\single_exact(r) -
                                                   \cos((x_0 :> real)))) <=
                                        0x1p-24)));
         ()
      };
      
      (return r)
   }
}

float my_cos3(float x_1)
  requires (C_26 : ((C_27 : (\real_abs(\single_exact(x_1)) <= 0x1p-5)) &&
                     (C_28 : (\single_round_error(x_1) <= 0x1p-20))));
behavior default:
  ensures (C_23 : ((C_24 : (\real_abs((\single_exact(\result) -
                                        \cos(\single_exact(\at(x_1,Old))))) <=
                             0x1p-24)) &&
                    (C_25 : (\single_round_error(\result) <=
                              (\single_round_error(\at(x_1,Old)) + 0x3p-24)))));
{  
   (var float r_0);
   
   {  (C_21 : (r_0 = (C_20 : ((1.0 :> float) -
                               (C_19 : ((C_18 : (x_1 * x_1)) *
                                         (0.5 :> float)))))));
      
      {  
         (assert for default: (C_22 : (\real_abs((\single_exact(r_0) -
                                                   \cos(\single_exact(x_1)))) <=
                                        0x1p-24)));
         ()
      };
      
      (return r_0)
   }
}

float my_cos4(float x_2)
  requires (C_35 : (\real_abs((x_2 :> real)) <= 0.07));
behavior default:
  ensures (C_34 : (\real_abs(((\result :> real) -
                               \cos((\at(x_2,Old) :> real)))) <=
                    0x1.3p-20));
{  
   (var float __retres_0);
   
   {  
      {  
         (assert for default: (C_29 : (\real_abs(((1.0 -
                                                    (((x_2 :> real) *
                                                       (x_2 :> real)) *
                                                      0.5)) -
                                                   \cos((x_2 :> real)))) <=
                                        0x1.2p-20)));
         ()
      };
      (C_33 : (__retres_0 = (C_32 : ((1.0 :> float) -
                                      (C_31 : ((C_30 : (x_2 * x_2)) *
                                                (0.5 :> float)))))));
      
      (return __retres_0)
   }
}
========== file tests/c/my_cosine.jessie/my_cosine.cloc ==========
[C_10]
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 31

[C_11]
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 12
end = 31

[C_12]
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 2
end = 7

[C_13]
file = "HOME/tests/c/my_cosine.c"
line = 54
begin = 13
end = 49

[C_14]
file = "HOME/tests/c/my_cosine.c"
line = 49
begin = 12
end = 46

[C_15]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 56

[C_16]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 30

[C_17]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 34
end = 56

[C_18]
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 24

[C_19]
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 31

[C_1]
file = "HOME/tests/c/my_cosine.c"
line = 44
begin = 13
end = 53

[C_2]
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 21

[C_3]
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 28

[C_4]
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 9
end = 28

[C_20]
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 12
end = 31

[C_5]
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 2
end = 29

[C_21]
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 2
end = 7

[C_6]
file = "HOME/tests/c/my_cosine.c"
line = 41
begin = 12
end = 46

[C_22]
file = "HOME/tests/c/my_cosine.c"
line = 66
begin = 13
end = 57

[C_7]
file = "HOME/tests/c/my_cosine.c"
line = 40
begin = 13
end = 30

[C_23]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 124

[C_8]
file = "HOME/tests/c/my_cosine.c"
line = 52
begin = 13
end = 27

[C_24]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 62

[C_9]
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 24

[C_25]
file = "HOME/tests/c/my_cosine.c"
line = 62
begin = 11
end = 61

[C_26]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 76

[C_27]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 38

[C_28]
file = "HOME/tests/c/my_cosine.c"
line = 60
begin = 11
end = 37

[C_29]
file = "HOME/tests/c/my_cosine.c"
line = 74
begin = 13
end = 55

[method_error]
name = "Lemma method_error"
file = "HOME/tests/c/my_cosine.c"
line = 36
begin = 4
end = 111

[C_30]
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 21

[C_31]
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 28

[C_32]
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 9
end = 28

[C_33]
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 2
end = 29

[C_34]
file = "HOME/tests/c/my_cosine.c"
line = 71
begin = 12
end = 48

[C_35]
file = "HOME/tests/c/my_cosine.c"
line = 70
begin = 13
end = 28

[my_cos1]
name = "Function my_cos1"
file = "HOME/tests/c/my_cosine.c"
line = 43
begin = 6
end = 13

[my_cos2]
name = "Function my_cos2"
file = "HOME/tests/c/my_cosine.c"
line = 51
begin = 6
end = 13

[my_cos3]
name = "Function my_cos3"
file = "HOME/tests/c/my_cosine.c"
line = 64
begin = 6
end = 13

[my_cos4]
name = "Function my_cos4"
file = "HOME/tests/c/my_cosine.c"
line = 73
begin = 6
end = 13

========== jessie execution ==========
Generating Why function my_cos1
Generating Why function my_cos2
Generating Why function my_cos3
Generating Why function my_cos4
========== file tests/c/my_cosine.jessie/my_cosine.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs my_cosine.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs my_cosine.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why $(WHYLIB)/why/floats_strict.why
JESSIE3LIB ?=$(WHYLIB)/why3

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/my_cosine_why.sx

project: why/my_cosine.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/my_cosine_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/my_cosine_why.vo

coq/my_cosine_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/my_cosine_why.v: why/my_cosine.why
	@echo 'why -coq [...] why/my_cosine.why' && $(WHY) $(JESSIELIBFILES) why/my_cosine.why && rm -f coq/jessie_why.v

coq-goals: goals coq/my_cosine_ctx_why.vo
	for f in why/*_po*.why; do make -f my_cosine.makefile coq/`basename $$f .why`_why.v ; done

coq/my_cosine_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/my_cosine_ctx_why.v: why/my_cosine_ctx.why
	@echo 'why -coq [...] why/my_cosine_ctx.why' && $(WHY) why/my_cosine_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export my_cosine_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/my_cosine_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/my_cosine_ctx_why.vo

pvs: pvs/my_cosine_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/my_cosine_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/my_cosine_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/my_cosine_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/my_cosine_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/my_cosine_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/my_cosine_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/my_cosine_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/my_cosine_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/my_cosine_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/my_cosine_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/my_cosine_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/my_cosine_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/my_cosine_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/my_cosine_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: my_cosine.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/my_cosine_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/my_cosine_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: my_cosine.mlw
	@echo 'why3ml [...] $<' && why3ide -I $(JESSIE3LIB) $<

-include my_cosine.depend

depend: coq/my_cosine_why.v
	-$(COQDEP) -I coq coq/my_cosine*_why.v > my_cosine.depend

clean:
	rm -f coq/*.vo

========== file tests/c/my_cosine.jessie/my_cosine.loc ==========
[my_cos4_ensures_default]
name = "Function my_cos4"
behavior = "default behavior"
file = "HOME/tests/c/my_cosine.c"
line = 73
begin = 6
end = 13

[JC_40]
file = "HOME/tests/c/my_cosine.c"
line = 60
begin = 11
end = 37

[my_cos3_safety]
name = "Function my_cos3"
behavior = "Safety"
file = "HOME/tests/c/my_cosine.c"
line = 64
begin = 6
end = 13

[JC_41]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 76

[JC_42]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_43]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 38

[JC_44]
file = "HOME/tests/c/my_cosine.c"
line = 60
begin = 11
end = 37

[JC_45]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 76

[JC_46]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/c/my_cosine.c"
line = 40
begin = 13
end = 30

[JC_47]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 62

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
file = "HOME/tests/c/my_cosine.c"
line = 62
begin = 11
end = 61

[JC_3]
file = "HOME/tests/c/my_cosine.c"
line = 40
begin = 13
end = 30

[JC_49]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 124

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/c/my_cosine.c"
line = 41
begin = 12
end = 46

[JC_6]
file = "HOME/tests/c/my_cosine.c"
line = 41
begin = 12
end = 46

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/c/my_cosine.c"
line = 44
begin = 13
end = 53

[JC_50]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 62

[JC_51]
file = "HOME/tests/c/my_cosine.c"
line = 62
begin = 11
end = 61

[JC_52]
file = "HOME/tests/c/my_cosine.c"
line = 61
begin = 12
end = 124

[JC_53]
file = "HOME/"
line = 0
begin = -1
end = -1

[my_cos4_safety]
name = "Function my_cos4"
behavior = "Safety"
file = "HOME/tests/c/my_cosine.c"
line = 73
begin = 6
end = 13

[JC_54]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_55]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 24

[JC_56]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 31

[JC_57]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 12
end = 31

[JC_58]
file = "HOME/tests/c/my_cosine.c"
line = 66
begin = 13
end = 57

[JC_59]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 24

[JC_60]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 19
end = 31

[JC_61]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 65
begin = 12
end = 31

[JC_62]
file = "HOME/tests/c/my_cosine.c"
line = 66
begin = 13
end = 57

[JC_10]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 21

[JC_63]
file = "HOME/tests/c/my_cosine.c"
line = 70
begin = 13
end = 28

[JC_11]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 28

[JC_64]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_12]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 9
end = 28

[JC_65]
file = "HOME/tests/c/my_cosine.c"
line = 70
begin = 13
end = 28

[JC_13]
file = "HOME/tests/c/my_cosine.c"
line = 44
begin = 13
end = 53

[JC_66]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_14]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 21

[JC_67]
file = "HOME/tests/c/my_cosine.c"
line = 71
begin = 12
end = 48

[JC_15]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 16
end = 28

[JC_68]
file = "HOME/tests/c/my_cosine.c"
line = 71
begin = 12
end = 48

[JC_16]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 45
begin = 9
end = 28

[JC_69]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_17]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 30

[JC_18]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 34
end = 56

[JC_19]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 56

[my_cos1_ensures_default]
name = "Function my_cos1"
behavior = "default behavior"
file = "HOME/tests/c/my_cosine.c"
line = 43
begin = 6
end = 13

[my_cos1_safety]
name = "Function my_cos1"
behavior = "Safety"
file = "HOME/tests/c/my_cosine.c"
line = 43
begin = 6
end = 13

[JC_70]
file = "HOME/"
line = 0
begin = -1
end = -1

[my_cos3_ensures_default]
name = "Function my_cos3"
behavior = "default behavior"
file = "HOME/tests/c/my_cosine.c"
line = 64
begin = 6
end = 13

[JC_71]
file = "HOME/tests/c/my_cosine.c"
line = 74
begin = 13
end = 55

[JC_72]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 21

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_73]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 28

[JC_21]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 30

[JC_74]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 9
end = 28

[JC_22]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 34
end = 56

[method_error]
name = "Lemma method_error"
behavior = "lemma"
file = "HOME/tests/c/my_cosine.c"
line = 36
begin = 4
end = 111

[JC_75]
file = "HOME/tests/c/my_cosine.c"
line = 74
begin = 13
end = 55

[JC_23]
file = "HOME/tests/c/my_cosine.c"
line = 48
begin = 13
end = 56

[JC_76]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 21

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 16
end = 28

[JC_25]
file = "HOME/tests/c/my_cosine.c"
line = 49
begin = 12
end = 46

[JC_78]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 75
begin = 9
end = 28

[JC_26]
file = "HOME/tests/c/my_cosine.c"
line = 49
begin = 12
end = 46

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/tests/c/my_cosine.c"
line = 52
begin = 13
end = 27

[my_cos2_safety]
name = "Function my_cos2"
behavior = "Safety"
file = "HOME/tests/c/my_cosine.c"
line = 51
begin = 6
end = 13

[JC_30]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 24

[JC_31]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 31

[JC_32]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 12
end = 31

[JC_33]
file = "HOME/tests/c/my_cosine.c"
line = 54
begin = 13
end = 49

[JC_34]
file = "HOME/tests/c/my_cosine.c"
line = 52
begin = 13
end = 27

[JC_35]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 24

[JC_36]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 19
end = 31

[my_cos2_ensures_default]
name = "Function my_cos2"
behavior = "default behavior"
file = "HOME/tests/c/my_cosine.c"
line = 51
begin = 6
end = 13

[JC_37]
kind = FPOverflow
file = "HOME/tests/c/my_cosine.c"
line = 53
begin = 12
end = 31

[JC_38]
file = "HOME/tests/c/my_cosine.c"
line = 54
begin = 13
end = 49

[JC_39]
file = "HOME/tests/c/my_cosine.c"
line = 59
begin = 13
end = 38

========== file tests/c/my_cosine.jessie/why/my_cosine.why ==========
type charP

type int8

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

lemma method_error :
 (forall x_3:real.
  (le_real(abs_real(x_3), 0x1p-5) ->
   le_real(abs_real(sub_real(sub_real(1.0, mul_real(mul_real(x_3, x_3), 0.5)),
                    cos(x_3))),
   0x1p-24)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter my_cos1 :
 x_0:single ->
  { } single
  { (JC_6:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0)))),
    0x1p-23)) }

parameter my_cos1_requires :
 x_0:single ->
  { (JC_1: le_real(abs_real(single_value(x_0)), 0x1p-5))} single
  { (JC_6:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0)))),
    0x1p-23)) }

parameter my_cos2 :
 x_0_0:single ->
  { } single
  { (JC_26:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0_0)))),
    0x1p-23)) }

parameter my_cos2_requires :
 x_0_0:single ->
  { (JC_19:
    ((JC_17: le_real(abs_real(single_value(x_0_0)), 0x1p-5))
    and (JC_18: (single_round_error(x_0_0) = 0.0))))}
  single
  { (JC_26:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0_0)))),
    0x1p-23)) }

parameter my_cos3 :
 x_1:single ->
  { } single
  { (JC_52:
    ((JC_50:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_1)))),
     0x1p-24))
    and (JC_51:
        le_real(single_round_error(result),
        add_real(single_round_error(x_1), 0x3p-24))))) }

parameter my_cos3_requires :
 x_1:single ->
  { (JC_41:
    ((JC_39: le_real(abs_real(single_exact(x_1)), 0x1p-5))
    and (JC_40: le_real(single_round_error(x_1), 0x1p-20))))}
  single
  { (JC_52:
    ((JC_50:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_1)))),
     0x1p-24))
    and (JC_51:
        le_real(single_round_error(result),
        add_real(single_round_error(x_1), 0x3p-24))))) }

parameter my_cos4 :
 x_2:single ->
  { } single
  { (JC_68:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1.3p-20)) }

parameter my_cos4_requires :
 x_2:single ->
  { (JC_63: le_real(abs_real(single_value(x_2)), 0.07))} single
  { (JC_68:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1.3p-20)) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let my_cos1_ensures_default =
 fun (x_0 : single) ->
  { (JC_3: le_real(abs_real(single_value(x_0)), 0x1p-5)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres = ref (any_single void) in
     (C_5:
     begin
       (assert
       { (JC_13:
         le_real(abs_real(sub_real(sub_real(1.0,
                                   mul_real(mul_real(single_value(x_0),
                                            single_value(x_0)),
                                   0.5)),
                          cos(single_value(x_0)))),
         0x1p-24)) }; void); void;
      (let jessie_<num> =
      (__retres := (C_4:
                   (JC_16:
                   (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
                    (C_3:
                    (JC_15:
                    (((mul_single_safe nearest_even) (C_2:
                                                     (JC_14:
                                                     (((mul_single_safe nearest_even) x_0) x_0)))) 
                     (single_of_real_exact 0.5)))))))) in void);
      (return := !__retres); (raise Return) end)); absurd  end with Return ->
   !return end))
  { (JC_5:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0)))),
    0x1p-23)) }

let my_cos1_safety =
 fun (x_0 : single) ->
  { (JC_3: le_real(abs_real(single_value(x_0)), 0x1p-5)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres = ref (any_single void) in
     (C_5:
     begin
       [ { } unit
         { (JC_9:
           le_real(abs_real(sub_real(sub_real(1.0,
                                     mul_real(mul_real(single_value(x_0),
                                              single_value(x_0)),
                                     0.5)),
                            cos(single_value(x_0)))),
           0x1p-24)) } ]; void;
      (let jessie_<num> =
      (__retres := (C_4:
                   (JC_12:
                   (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                    (C_3:
                    (JC_11:
                    (((mul_single nearest_even) (C_2:
                                                (JC_10:
                                                (((mul_single nearest_even) x_0) x_0)))) 
                     (single_of_real_exact 0.5)))))))) in void);
      (return := !__retres); (raise Return) end)); absurd  end with Return ->
   !return end)) { true }

let my_cos2_ensures_default =
 fun (x_0_0 : single) ->
  { (JC_23:
    ((JC_21: le_real(abs_real(single_value(x_0_0)), 0x1p-5))
    and (JC_22: (single_round_error(x_0_0) = 0.0)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r = ref (any_single void) in
     begin
       (assert { (JC_34: (single_exact(x_0_0) = single_value(x_0_0))) };
       void); void;
      (let jessie_<num> =
      (C_12:
      begin
        (r := (C_11:
              (JC_37:
              (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
               (C_10:
               (JC_36:
               (((mul_single_safe nearest_even) (C_9:
                                                (JC_35:
                                                (((mul_single_safe nearest_even) x_0_0) x_0_0)))) 
                (single_of_real_exact 0.5)))))))); !r end) in void);
      (assert
      { (JC_38:
        le_real(abs_real(sub_real(single_exact(r), cos(single_value(x_0_0)))),
        0x1p-24)) }; void); void; (return := !r); (raise Return) end); 
    absurd  end with Return -> !return end))
  { (JC_25:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_0_0)))),
    0x1p-23)) }

let my_cos2_safety =
 fun (x_0_0 : single) ->
  { (JC_23:
    ((JC_21: le_real(abs_real(single_value(x_0_0)), 0x1p-5))
    and (JC_22: (single_round_error(x_0_0) = 0.0)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r = ref (any_single void) in
     begin
       [ { } unit { (JC_29: (single_exact(x_0_0) = single_value(x_0_0))) } ];
      void;
      (let jessie_<num> =
      (C_12:
      begin
        (r := (C_11:
              (JC_32:
              (((sub_single nearest_even) (single_of_real_exact 1.0)) 
               (C_10:
               (JC_31:
               (((mul_single nearest_even) (C_9:
                                           (JC_30:
                                           (((mul_single nearest_even) x_0_0) x_0_0)))) 
                (single_of_real_exact 0.5)))))))); !r end) in void);
      [ { } unit reads r
        { (JC_33:
          le_real(abs_real(sub_real(single_exact(r),
                           cos(single_value(x_0_0)))),
          0x1p-24)) } ]; void; (return := !r); (raise Return) end); absurd 
   end with Return -> !return end)) { true }

let my_cos3_ensures_default =
 fun (x_1 : single) ->
  { (JC_45:
    ((JC_43: le_real(abs_real(single_exact(x_1)), 0x1p-5))
    and (JC_44: le_real(single_round_error(x_1), 0x1p-20)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r_0 = ref (any_single void) in
     (C_21:
     begin
       (let jessie_<num> =
       (r_0 := (C_20:
               (JC_61:
               (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
                (C_19:
                (JC_60:
                (((mul_single_safe nearest_even) (C_18:
                                                 (JC_59:
                                                 (((mul_single_safe nearest_even) x_1) x_1)))) 
                 (single_of_real_exact 0.5)))))))) in void);
      (assert
      { (JC_62:
        le_real(abs_real(sub_real(single_exact(r_0), cos(single_exact(x_1)))),
        0x1p-24)) }; void); void; (return := !r_0); (raise Return) end));
    absurd  end with Return -> !return end))
  { (JC_49:
    ((JC_47:
     le_real(abs_real(sub_real(single_exact(result), cos(single_exact(x_1)))),
     0x1p-24))
    and (JC_48:
        le_real(single_round_error(result),
        add_real(single_round_error(x_1), 0x3p-24))))) }

let my_cos3_safety =
 fun (x_1 : single) ->
  { (JC_45:
    ((JC_43: le_real(abs_real(single_exact(x_1)), 0x1p-5))
    and (JC_44: le_real(single_round_error(x_1), 0x1p-20)))) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let r_0 = ref (any_single void) in
     (C_21:
     begin
       (let jessie_<num> =
       (r_0 := (C_20:
               (JC_57:
               (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                (C_19:
                (JC_56:
                (((mul_single nearest_even) (C_18:
                                            (JC_55:
                                            (((mul_single nearest_even) x_1) x_1)))) 
                 (single_of_real_exact 0.5)))))))) in void);
      [ { } unit reads r_0
        { (JC_58:
          le_real(abs_real(sub_real(single_exact(r_0),
                           cos(single_exact(x_1)))),
          0x1p-24)) } ]; void; (return := !r_0); (raise Return) end)); 
    absurd  end with Return -> !return end)) { true }

let my_cos4_ensures_default =
 fun (x_2 : single) ->
  { (JC_65: le_real(abs_real(single_value(x_2)), 0.07)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres_0 = ref (any_single void) in
     (C_33:
     begin
       (assert
       { (JC_75:
         le_real(abs_real(sub_real(sub_real(1.0,
                                   mul_real(mul_real(single_value(x_2),
                                            single_value(x_2)),
                                   0.5)),
                          cos(single_value(x_2)))),
         0x1.2p-20)) }; void); void;
      (let jessie_<num> =
      (__retres_0 := (C_32:
                     (JC_78:
                     (((sub_single_safe nearest_even) (single_of_real_exact 1.0)) 
                      (C_31:
                      (JC_77:
                      (((mul_single_safe nearest_even) (C_30:
                                                       (JC_76:
                                                       (((mul_single_safe nearest_even) x_2) x_2)))) 
                       (single_of_real_exact 0.5)))))))) in void);
      (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end))
  { (JC_67:
    le_real(abs_real(sub_real(single_value(result), cos(single_value(x_2)))),
    0x1.3p-20)) }

let my_cos4_safety =
 fun (x_2 : single) ->
  { (JC_65: le_real(abs_real(single_value(x_2)), 0.07)) }
  (init:
  (let return = ref (any_single void) in
  try
   begin
     (let __retres_0 = ref (any_single void) in
     (C_33:
     begin
       [ { } unit
         { (JC_71:
           le_real(abs_real(sub_real(sub_real(1.0,
                                     mul_real(mul_real(single_value(x_2),
                                              single_value(x_2)),
                                     0.5)),
                            cos(single_value(x_2)))),
           0x1.2p-20)) } ]; void;
      (let jessie_<num> =
      (__retres_0 := (C_32:
                     (JC_74:
                     (((sub_single nearest_even) (single_of_real_exact 1.0)) 
                      (C_31:
                      (JC_73:
                      (((mul_single nearest_even) (C_30:
                                                  (JC_72:
                                                  (((mul_single nearest_even) x_2) x_2)))) 
                       (single_of_real_exact 0.5)))))))) in void);
      (return := !__retres_0); (raise Return) end)); absurd  end with
   Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/my_cosine.why
========== file tests/c/my_cosine.jessie/why/my_cosine_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode

logic nearest_even : mode

logic to_zero : mode

logic up : mode

logic down : mode

logic nearest_away : mode

logic mode_match : mode, 'a1, 'a1, 'a1, 'a1, 'a1 -> 'a1

axiom mode_match_nearest_even:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_2))))))

axiom mode_match_to_zero:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_3))))))

axiom mode_match_up:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_4))))))

axiom mode_match_down:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_5))))))

axiom mode_match_nearest_away:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_6))))))

axiom mode_inversion:
  (forall aux_1:mode.
    (((((aux_1 = nearest_even) or (aux_1 = to_zero)) or (aux_1 = up)) or
      (aux_1 = down)) or
     (aux_1 = nearest_away)))

logic mode_to_int : mode -> int

axiom mode_to_int_nearest_even: (mode_to_int(nearest_even) = 0)

axiom mode_to_int_to_zero: (mode_to_int(to_zero) = 1)

axiom mode_to_int_up: (mode_to_int(up) = 2)

axiom mode_to_int_down: (mode_to_int(down) = 3)

axiom mode_to_int_nearest_away: (mode_to_int(nearest_away) = 4)

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type charP

type int8

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal method_error:
  (forall x_3:real.
    ((abs_real(x_3) <= 0x1.p-5) ->
     (abs_real(((1.0 - ((x_3 * x_3) * 0.5)) - cos(x_3))) <= 0x1.p-24)))

axiom method_error_as_axiom:
  (forall x_3:real.
    ((abs_real(x_3) <= 0x1.p-5) ->
     (abs_real(((1.0 - ((x_3 * x_3) * 0.5)) - cos(x_3))) <= 0x1.p-24)))

goal my_cos1_ensures_default_po_1:
  forall x_0:single.
  ("JC_3": (abs_real(single_value(x_0)) <= 0x1.p-5)) ->
  ("JC_13":
  (abs_real(((1.0 - ((single_value(x_0) * single_value(x_0)) * 0.5)) - cos(single_value(x_0)))) <= 0x1.p-24))

goal my_cos1_ensures_default_po_2:
  forall x_0:single.
  ("JC_3": (abs_real(single_value(x_0)) <= 0x1.p-5)) ->
  ("JC_13":
  (abs_real(((1.0 - ((single_value(x_0) * single_value(x_0)) * 0.5)) - cos(single_value(x_0)))) <= 0x1.p-24)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0, x_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall __retres:single.
  (__retres = result3) ->
  forall return:single.
  (return = __retres) ->
  ("JC_5":
  (abs_real((single_value(return) - cos(single_value(x_0)))) <= 0x1.p-23))

goal my_cos1_safety_po_1:
  forall x_0:single.
  ("JC_3": (abs_real(single_value(x_0)) <= 0x1.p-5)) ->
  ("JC_9":
  (abs_real(((1.0 - ((single_value(x_0) * single_value(x_0)) * 0.5)) - cos(single_value(x_0)))) <= 0x1.p-24)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even, (single_value(x_0) * single_value(x_0)))

goal my_cos1_safety_po_2:
  forall x_0:single.
  ("JC_3": (abs_real(single_value(x_0)) <= 0x1.p-5)) ->
  ("JC_9":
  (abs_real(((1.0 - ((single_value(x_0) * single_value(x_0)) * 0.5)) - cos(single_value(x_0)))) <= 0x1.p-24)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_0) * single_value(x_0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0, x_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1)))

goal my_cos1_safety_po_3:
  forall x_0:single.
  ("JC_3": (abs_real(single_value(x_0)) <= 0x1.p-5)) ->
  ("JC_9":
  (abs_real(((1.0 - ((single_value(x_0) * single_value(x_0)) * 0.5)) - cos(single_value(x_0)))) <= 0x1.p-24)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_0) * single_value(x_0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0, x_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  no_overflow_single(nearest_even,
  (single_value(result) - single_value(result2)))

goal my_cos2_ensures_default_po_1:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_34": (single_exact(x_0_0) = single_value(x_0_0)))

goal my_cos2_ensures_default_po_2:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_34": (single_exact(x_0_0) = single_value(x_0_0))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0_0, x_0_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall r:single.
  (r = result3) ->
  ("JC_38":
  (abs_real((single_exact(r) - cos(single_value(x_0_0)))) <= 0x1.p-24))

goal my_cos2_ensures_default_po_3:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_34": (single_exact(x_0_0) = single_value(x_0_0))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0_0, x_0_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall r:single.
  (r = result3) ->
  ("JC_38":
  (abs_real((single_exact(r) - cos(single_value(x_0_0)))) <= 0x1.p-24)) ->
  forall return:single.
  (return = r) ->
  ("JC_25":
  (abs_real((single_value(return) - cos(single_value(x_0_0)))) <= 0x1.p-23))

goal my_cos2_safety_po_1:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_29": (single_exact(x_0_0) = single_value(x_0_0))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_0_0) * single_value(x_0_0)))

goal my_cos2_safety_po_2:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_29": (single_exact(x_0_0) = single_value(x_0_0))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_0_0) * single_value(x_0_0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0_0, x_0_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1)))

goal my_cos2_safety_po_3:
  forall x_0_0:single.
  ("JC_23":
  (("JC_21": (abs_real(single_value(x_0_0)) <= 0x1.p-5)) and
   ("JC_22": (single_round_error(x_0_0) = 0.0)))) ->
  ("JC_29": (single_exact(x_0_0) = single_value(x_0_0))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_0_0) * single_value(x_0_0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_0_0, x_0_0, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  no_overflow_single(nearest_even,
  (single_value(result) - single_value(result2)))

goal my_cos3_ensures_default_po_1:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_1, x_1, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall r_0:single.
  (r_0 = result3) ->
  ("JC_62":
  (abs_real((single_exact(r_0) - cos(single_exact(x_1)))) <= 0x1.p-24))

goal my_cos3_ensures_default_po_2:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_1, x_1, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall r_0:single.
  (r_0 = result3) ->
  ("JC_62":
  (abs_real((single_exact(r_0) - cos(single_exact(x_1)))) <= 0x1.p-24)) ->
  forall return:single.
  (return = r_0) ->
  ("JC_49":
  ("JC_47":
  (abs_real((single_exact(return) - cos(single_exact(x_1)))) <= 0x1.p-24)))

goal my_cos3_ensures_default_po_3:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_1, x_1, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall r_0:single.
  (r_0 = result3) ->
  ("JC_62":
  (abs_real((single_exact(r_0) - cos(single_exact(x_1)))) <= 0x1.p-24)) ->
  forall return:single.
  (return = r_0) ->
  ("JC_49":
  ("JC_48":
  (single_round_error(return) <= (single_round_error(x_1) + 0x3.p-24))))

goal my_cos3_safety_po_1:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even, (single_value(x_1) * single_value(x_1)))

goal my_cos3_safety_po_2:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_1) * single_value(x_1))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_1, x_1, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1)))

goal my_cos3_safety_po_3:
  forall x_1:single.
  ("JC_45":
  (("JC_43": (abs_real(single_exact(x_1)) <= 0x1.p-5)) and
   ("JC_44": (single_round_error(x_1) <= 0x1.p-20)))) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_1) * single_value(x_1))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_1, x_1, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  no_overflow_single(nearest_even,
  (single_value(result) - single_value(result2)))

goal my_cos4_ensures_default_po_1:
  forall x_2:single.
  ("JC_65": (abs_real(single_value(x_2)) <= 0.07)) ->
  ("JC_75":
  (abs_real(((1.0 - ((single_value(x_2) * single_value(x_2)) * 0.5)) - cos(single_value(x_2)))) <= 0x1.2p-20))

goal my_cos4_ensures_default_po_2:
  forall x_2:single.
  ("JC_65": (abs_real(single_value(x_2)) <= 0.07)) ->
  ("JC_75":
  (abs_real(((1.0 - ((single_value(x_2) * single_value(x_2)) * 0.5)) - cos(single_value(x_2)))) <= 0x1.2p-20)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_2, x_2, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  forall result3:single.
  sub_single_post(nearest_even, result, result2, result3) ->
  forall __retres_0:single.
  (__retres_0 = result3) ->
  forall return:single.
  (return = __retres_0) ->
  ("JC_67":
  (abs_real((single_value(return) - cos(single_value(x_2)))) <= 0x1.3p-20))

goal my_cos4_safety_po_1:
  forall x_2:single.
  ("JC_65": (abs_real(single_value(x_2)) <= 0.07)) ->
  ("JC_71":
  (abs_real(((1.0 - ((single_value(x_2) * single_value(x_2)) * 0.5)) - cos(single_value(x_2)))) <= 0x1.2p-20)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even, (single_value(x_2) * single_value(x_2)))

goal my_cos4_safety_po_2:
  forall x_2:single.
  ("JC_65": (abs_real(single_value(x_2)) <= 0.07)) ->
  ("JC_71":
  (abs_real(((1.0 - ((single_value(x_2) * single_value(x_2)) * 0.5)) - cos(single_value(x_2)))) <= 0x1.2p-20)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_2) * single_value(x_2))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_2, x_2, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1)))

goal my_cos4_safety_po_3:
  forall x_2:single.
  ("JC_65": (abs_real(single_value(x_2)) <= 0.07)) ->
  ("JC_71":
  (abs_real(((1.0 - ((single_value(x_2) * single_value(x_2)) * 0.5)) - cos(single_value(x_2)))) <= 0x1.2p-20)) ->
  forall result:single.
  ((single_value(result) = 1.0) and
   ((single_exact(result) = 1.0) and (single_model(result) = 1.0))) ->
  no_overflow_single(nearest_even,
  (single_value(x_2) * single_value(x_2))) ->
  forall result0:single.
  mul_single_post(nearest_even, x_2, x_2, result0) ->
  forall result1:single.
  ((single_value(result1) = 0.5) and
   ((single_exact(result1) = 0.5) and (single_model(result1) = 0.5))) ->
  no_overflow_single(nearest_even,
  (single_value(result0) * single_value(result1))) ->
  forall result2:single.
  mul_single_post(nearest_even, result0, result1, result2) ->
  no_overflow_single(nearest_even,
  (single_value(result) - single_value(result2)))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/my_cosine_why.why         : ?.#?.#..#..#..#?.#?#?.# (10/0/5/8/0)
total   :  23
valid   :  10 ( 43%)
invalid :   0 (  0%)
unknown :   5 ( 22%)
timeout :   8 ( 35%)
failure :   0 (  0%)
// RUNCOQ: for the first VC
========== generation of Coq VC output ==========
why -coq [...] why/my_cosine.why
========== file tests/c/my_cosine.jessie/coq/my_cosine_why.v ==========
(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export jessie_why. 
Require Import WhyFloatsStrict.
Require Import Interval_tactic.
Require Import Rtrigo_def.

(*Why type*) Definition charP: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition voidP: Set.
Admitted.

(*Why logic*) Definition charP_tag : (tag_id charP).
Admitted.

(*Why axiom*) Lemma charP_int : (int_of_tag charP_tag) = 1.
Admitted.
Dp_hint charP_int.

(*Why logic*) Definition charP_of_pointer_address :
  (pointer unit) -> (pointer charP).
Admitted.

(*Why axiom*) Lemma charP_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer charP)),
   p = (charP_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint charP_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma charP_parenttag_bottom :
  (parenttag charP_tag (@bottom_tag charP)).
Admitted.
Dp_hint charP_parenttag_bottom.

(*Why axiom*) Lemma charP_tags :
  (forall (x:(pointer charP)),
   (forall (charP_tag_table:(tag_table charP)),
    (instanceof charP_tag_table x charP_tag))).
Admitted.
Dp_hint charP_tags.

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.

(*Why axiom*) Lemma int8_extensionality :
  (forall (x:int8),
   (forall (y:int8), ((integer_of_int8 x) = (integer_of_int8 y) -> x = y))).
Admitted.
Dp_hint int8_extensionality.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.

(*Why predicate*) Definition left_valid_struct_charP  (p:(pointer charP)) (a:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_voidP  (p:(pointer voidP)) (a:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a.

(*Why axiom*) Lemma pointer_addr_of_charP_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (charP_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_charP_of_pointer_address.

(*Why logic*) Definition voidP_of_pointer_address :
  (pointer unit) -> (pointer voidP).
Admitted.

(*Why axiom*) Lemma pointer_addr_of_voidP_of_pointer_address :
  (forall (p:(pointer unit)),
   p = (pointer_address (voidP_of_pointer_address p))).
Admitted.
Dp_hint pointer_addr_of_voidP_of_pointer_address.

(*Why predicate*) Definition right_valid_struct_charP  (p:(pointer charP)) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_voidP  (p:(pointer voidP)) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_max voidP_alloc_table p) >= b.

(*Why predicate*) Definition strict_valid_root_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) = a /\
     (offset_max charP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) = a /\
     (offset_max voidP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) = a /\
     (offset_max charP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) = a /\
     (offset_max voidP_alloc_table p) = b.

(*Why predicate*) Definition valid_root_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a /\
     (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a /\
     (offset_max voidP_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a /\
     (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a /\
     (offset_max voidP_alloc_table p) >= b.

(*Why logic*) Definition voidP_tag : (tag_id voidP).
Admitted.

(*Why axiom*) Lemma voidP_int : (int_of_tag voidP_tag) = 1.
Admitted.
Dp_hint voidP_int.

(*Why axiom*) Lemma voidP_of_pointer_address_of_pointer_addr :
  (forall (p:(pointer voidP)),
   p = (voidP_of_pointer_address (pointer_address p))).
Admitted.
Dp_hint voidP_of_pointer_address_of_pointer_addr.

(*Why axiom*) Lemma voidP_parenttag_bottom :
  (parenttag voidP_tag (@bottom_tag voidP)).
Admitted.
Dp_hint voidP_parenttag_bottom.

(*Why axiom*) Lemma voidP_tags :
  (forall (x:(pointer voidP)),
   (forall (voidP_tag_table:(tag_table voidP)),
    (instanceof voidP_tag_table x voidP_tag))).
Admitted.
Dp_hint voidP_tags.

(* Why obligation from file "my_cosine.c", line 36, characters 4-111: *)
(*Why goal*) Lemma method_error : 
  (forall (x_3:R),
   ((Rle (Rabs x_3) (1 / 32)%R) ->
    (Rle
     (Rabs
      (Rminus (Rminus (1)%R (Rmult (Rmult x_3 x_3) (05 / 10)%R)) (cos x_3)))
     (1 / 16777216)%R))).
Proof.
intros x H.

interval with (i_bisect_diff x).
Save.

Dp_hint method_error.

(* Why obligation from file "my_cosine.c", line 44, characters 13-53: *)
(*Why goal*) Lemma my_cos1_ensures_default_po_1 : 
  forall (x_0: single),
  forall (HW_1: (* JC_3 *) (Rle (Rabs (single_value x_0)) (1 / 32)%R)),
  (* JC_13 *)
  (Rle
   (Rabs
    (Rminus
     (Rminus
      (1)%R (Rmult (Rmult (single_value x_0) (single_value x_0)) (05 / 10)%R)) (
     cos (single_value x_0))))
   (1 / 16777216)%R).
Proof.
intros x H.
interval with (i_bisect_diff (single_value x)).
Save.

(* Why obligation from file "my_cosine.c", line 41, characters 12-46: *)
(*Why goal*) Lemma my_cos1_ensures_default_po_2 : 
  forall (x_0: single),
  forall (HW_1: (* JC_3 *) (Rle (Rabs (single_value x_0)) (1 / 32)%R)),
  forall (HW_4: (* JC_13 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_0) (single_value x_0)) (05 / 10)%R)) (
                   cos (single_value x_0))))
                 (1 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_0 x_0 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_8: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_9: (sub_single_post nearest_even result result2 result3)),
  forall (__retres: single),
  forall (HW_10: __retres = result3),
  forall (why__return: single),
  forall (HW_11: why__return = __retres),
  (* JC_5 *)
  (Rle (Rabs (Rminus (single_value why__return) (cos (single_value x_0))))
   (1 / 8388608)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 45, characters 16-21: *)
(*Why goal*) Lemma my_cos1_safety_po_1 : 
  forall (x_0: single),
  forall (HW_1: (* JC_3 *) (Rle (Rabs (single_value x_0)) (1 / 32)%R)),
  forall (HW_4: (* JC_9 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_0) (single_value x_0)) (05 / 10)%R)) (
                   cos (single_value x_0))))
                 (1 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value x_0) (single_value x_0))).
Proof.
admit.
Save.

(* Why obligation from file "my_cosine.c", line 45, characters 16-28: *)
(*Why goal*) Lemma my_cos1_safety_po_2 : 
  forall (x_0: single),
  forall (HW_1: (* JC_3 *) (Rle (Rabs (single_value x_0)) (1 / 32)%R)),
  forall (HW_4: (* JC_9 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_0) (single_value x_0)) (05 / 10)%R)) (
                   cos (single_value x_0))))
                 (1 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult (single_value x_0) (single_value x_0)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_0 x_0 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value result0) (single_value result1))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 45, characters 9-28: *)
(*Why goal*) Lemma my_cos1_safety_po_3 : 
  forall (x_0: single),
  forall (HW_1: (* JC_3 *) (Rle (Rabs (single_value x_0)) (1 / 32)%R)),
  forall (HW_4: (* JC_9 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_0) (single_value x_0)) (05 / 10)%R)) (
                   cos (single_value x_0))))
                 (1 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult (single_value x_0) (single_value x_0)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_0 x_0 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (HW_9: (no_overflow_single
                 nearest_even (Rmult
                               (single_value result0) (single_value result1)))),
  forall (result2: single),
  forall (HW_10: (mul_single_post nearest_even result0 result1 result2)),
  (no_overflow_single
   nearest_even (Rminus (single_value result) (single_value result2))).
Proof.
admit.
Save.

(* Why obligation from file "my_cosine.c", line 52, characters 13-27: *)
(*Why goal*) Lemma my_cos2_ensures_default_po_1 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  (* JC_34 *) (eq (single_exact x_0_0) (single_value x_0_0)).
Proof.
admit.
Save.

(* Why obligation from file "my_cosine.c", line 54, characters 13-49: *)
(*Why goal*) Lemma my_cos2_ensures_default_po_2 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  forall (HW_4: (* JC_34 *) (eq (single_exact x_0_0) (single_value x_0_0))),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_0_0 x_0_0 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_8: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_9: (sub_single_post nearest_even result result2 result3)),
  forall (r: single),
  forall (HW_10: r = result3),
  (* JC_38 *)
  (Rle (Rabs (Rminus (single_exact r) (cos (single_value x_0_0))))
   (1 / 16777216)%R).
Proof.
intros x (H1,H2) Heq.
intros r (_,(exa_r,_)).
intros r0 (_,(exa_r0,_)).
intros r1 (_,(exa_r1,_)).
intros r2 (_,(exa_r2,_)).
intros r3 (_,(exa_r3,_)).
intros r4 r4_eq.
subst r4.
rewrite exa_r3; clear exa_r3 r3.
rewrite exa_r2; clear exa_r2 r2.
rewrite exa_r1; clear exa_r1 r1.
rewrite exa_r0; clear exa_r0 r0.
rewrite exa_r; clear exa_r r.
unfold single_round_error in H2.
rewrite Heq.
interval with (i_bisect_diff (single_value x)).
Save.

(* Why obligation from file "my_cosine.c", line 49, characters 12-46: *)
(*Why goal*) Lemma my_cos2_ensures_default_po_3 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  forall (HW_4: (* JC_34 *) (eq (single_exact x_0_0) (single_value x_0_0))),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_0_0 x_0_0 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_8: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_9: (sub_single_post nearest_even result result2 result3)),
  forall (r: single),
  forall (HW_10: r = result3),
  forall (HW_11: (* JC_38 *)
                 (Rle
                  (Rabs (Rminus (single_exact r) (cos (single_value x_0_0))))
                  (1 / 16777216)%R)),
  forall (why__return: single),
  forall (HW_12: why__return = r),
  (* JC_25 *)
  (Rle (Rabs (Rminus (single_value why__return) (cos (single_value x_0_0))))
   (1 / 8388608)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 53, characters 19-24: *)
(*Why goal*) Lemma my_cos2_safety_po_1 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  forall (HW_4: (* JC_29 *) (eq (single_exact x_0_0) (single_value x_0_0))),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value x_0_0) (single_value x_0_0))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 53, characters 19-31: *)
(*Why goal*) Lemma my_cos2_safety_po_2 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  forall (HW_4: (* JC_29 *) (eq (single_exact x_0_0) (single_value x_0_0))),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult
                               (single_value x_0_0) (single_value x_0_0)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_0_0 x_0_0 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value result0) (single_value result1))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 53, characters 12-31: *)
(*Why goal*) Lemma my_cos2_safety_po_3 : 
  forall (x_0_0: single),
  forall (HW_1: (* JC_23 *)
                ((* JC_21 *) (Rle (Rabs (single_value x_0_0)) (1 / 32)%R) /\
                (* JC_22 *) (eq (single_round_error x_0_0) (0)%R))),
  forall (HW_4: (* JC_29 *) (eq (single_exact x_0_0) (single_value x_0_0))),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult
                               (single_value x_0_0) (single_value x_0_0)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_0_0 x_0_0 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (HW_9: (no_overflow_single
                 nearest_even (Rmult
                               (single_value result0) (single_value result1)))),
  forall (result2: single),
  forall (HW_10: (mul_single_post nearest_even result0 result1 result2)),
  (no_overflow_single
   nearest_even (Rminus (single_value result) (single_value result2))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 66, characters 13-57: *)
(*Why goal*) Lemma my_cos3_ensures_default_po_1 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_5: (mul_single_post nearest_even x_1 x_1 result0)),
  forall (result1: single),
  forall (HW_6: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_7: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_8: (sub_single_post nearest_even result result2 result3)),
  forall (r_0: single),
  forall (HW_9: r_0 = result3),
  (* JC_62 *)
  (Rle (Rabs (Rminus (single_exact r_0) (cos (single_exact x_1))))
   (1 / 16777216)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 61, characters 12-62: *)
(*Why goal*) Lemma my_cos3_ensures_default_po_2 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_5: (mul_single_post nearest_even x_1 x_1 result0)),
  forall (result1: single),
  forall (HW_6: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_7: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_8: (sub_single_post nearest_even result result2 result3)),
  forall (r_0: single),
  forall (HW_9: r_0 = result3),
  forall (HW_10: (* JC_62 *)
                 (Rle
                  (Rabs (Rminus (single_exact r_0) (cos (single_exact x_1))))
                  (1 / 16777216)%R)),
  forall (why__return: single),
  forall (HW_11: why__return = r_0),
  (* JC_49 *)
  (* JC_47 *)
  (Rle (Rabs (Rminus (single_exact why__return) (cos (single_exact x_1))))
   (1 / 16777216)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 62, characters 11-61: *)
(*Why goal*) Lemma my_cos3_ensures_default_po_3 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_5: (mul_single_post nearest_even x_1 x_1 result0)),
  forall (result1: single),
  forall (HW_6: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_7: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_8: (sub_single_post nearest_even result result2 result3)),
  forall (r_0: single),
  forall (HW_9: r_0 = result3),
  forall (HW_10: (* JC_62 *)
                 (Rle
                  (Rabs (Rminus (single_exact r_0) (cos (single_exact x_1))))
                  (1 / 16777216)%R)),
  forall (why__return: single),
  forall (HW_11: why__return = r_0),
  (* JC_49 *)
  (* JC_48 *)
  (Rle (single_round_error why__return)
   (Rplus (single_round_error x_1) (3 / 16777216)%R)).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 65, characters 19-24: *)
(*Why goal*) Lemma my_cos3_safety_po_1 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value x_1) (single_value x_1))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 65, characters 19-31: *)
(*Why goal*) Lemma my_cos3_safety_po_2 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_5: (no_overflow_single
                 nearest_even (Rmult (single_value x_1) (single_value x_1)))),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_1 x_1 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value result0) (single_value result1))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 65, characters 12-31: *)
(*Why goal*) Lemma my_cos3_safety_po_3 : 
  forall (x_1: single),
  forall (HW_1: (* JC_45 *)
                ((* JC_43 *) (Rle (Rabs (single_exact x_1)) (1 / 32)%R) /\
                (* JC_44 *) (Rle (single_round_error x_1) (1 / 1048576)%R))),
  forall (result: single),
  forall (HW_4: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_5: (no_overflow_single
                 nearest_even (Rmult (single_value x_1) (single_value x_1)))),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_1 x_1 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (HW_8: (no_overflow_single
                 nearest_even (Rmult
                               (single_value result0) (single_value result1)))),
  forall (result2: single),
  forall (HW_9: (mul_single_post nearest_even result0 result1 result2)),
  (no_overflow_single
   nearest_even (Rminus (single_value result) (single_value result2))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 74, characters 13-55: *)
(*Why goal*) Lemma my_cos4_ensures_default_po_1 : 
  forall (x_2: single),
  forall (HW_1: (* JC_65 *) (Rle (Rabs (single_value x_2)) (007 / 100)%R)),
  (* JC_75 *)
  (Rle
   (Rabs
    (Rminus
     (Rminus
      (1)%R (Rmult (Rmult (single_value x_2) (single_value x_2)) (05 / 10)%R)) (
     cos (single_value x_2))))
   (18 / 16777216)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 71, characters 12-48: *)
(*Why goal*) Lemma my_cos4_ensures_default_po_2 : 
  forall (x_2: single),
  forall (HW_1: (* JC_65 *) (Rle (Rabs (single_value x_2)) (007 / 100)%R)),
  forall (HW_4: (* JC_75 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_2) (single_value x_2)) (05 / 10)%R)) (
                   cos (single_value x_2))))
                 (18 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (result0: single),
  forall (HW_6: (mul_single_post nearest_even x_2 x_2 result0)),
  forall (result1: single),
  forall (HW_7: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (result2: single),
  forall (HW_8: (mul_single_post nearest_even result0 result1 result2)),
  forall (result3: single),
  forall (HW_9: (sub_single_post nearest_even result result2 result3)),
  forall (__retres_0: single),
  forall (HW_10: __retres_0 = result3),
  forall (why__return: single),
  forall (HW_11: why__return = __retres_0),
  (* JC_67 *)
  (Rle (Rabs (Rminus (single_value why__return) (cos (single_value x_2))))
   (19 / 16777216)%R).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 75, characters 16-21: *)
(*Why goal*) Lemma my_cos4_safety_po_1 : 
  forall (x_2: single),
  forall (HW_1: (* JC_65 *) (Rle (Rabs (single_value x_2)) (007 / 100)%R)),
  forall (HW_4: (* JC_71 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_2) (single_value x_2)) (05 / 10)%R)) (
                   cos (single_value x_2))))
                 (18 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value x_2) (single_value x_2))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 75, characters 16-28: *)
(*Why goal*) Lemma my_cos4_safety_po_2 : 
  forall (x_2: single),
  forall (HW_1: (* JC_65 *) (Rle (Rabs (single_value x_2)) (007 / 100)%R)),
  forall (HW_4: (* JC_71 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_2) (single_value x_2)) (05 / 10)%R)) (
                   cos (single_value x_2))))
                 (18 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult (single_value x_2) (single_value x_2)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_2 x_2 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  (no_overflow_single
   nearest_even (Rmult (single_value result0) (single_value result1))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "my_cosine.c", line 75, characters 9-28: *)
(*Why goal*) Lemma my_cos4_safety_po_3 : 
  forall (x_2: single),
  forall (HW_1: (* JC_65 *) (Rle (Rabs (single_value x_2)) (007 / 100)%R)),
  forall (HW_4: (* JC_71 *)
                (Rle
                 (Rabs
                  (Rminus
                   (Rminus
                    (1)%R (Rmult
                           (Rmult (single_value x_2) (single_value x_2)) (05 / 10)%R)) (
                   cos (single_value x_2))))
                 (18 / 16777216)%R)),
  forall (result: single),
  forall (HW_5: (eq (single_value result) (1)%R) /\
                (eq (single_exact result) (1)%R) /\
                (eq (single_model result) (1)%R)),
  forall (HW_6: (no_overflow_single
                 nearest_even (Rmult (single_value x_2) (single_value x_2)))),
  forall (result0: single),
  forall (HW_7: (mul_single_post nearest_even x_2 x_2 result0)),
  forall (result1: single),
  forall (HW_8: (eq (single_value result1) (05 / 10)%R) /\
                (eq (single_exact result1) (05 / 10)%R) /\
                (eq (single_model result1) (05 / 10)%R)),
  forall (HW_9: (no_overflow_single
                 nearest_even (Rmult
                               (single_value result0) (single_value result1)))),
  forall (result2: single),
  forall (HW_10: (mul_single_post nearest_even result0 result1 result2)),
  (no_overflow_single
   nearest_even (Rminus (single_value result) (single_value result2))).
Proof.
admit.
(* FILL PROOF HERE *)
Save.


========== running Coq ==========
