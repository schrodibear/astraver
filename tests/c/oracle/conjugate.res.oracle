========== file tests/c/conjugate.c ==========
/*

  This was inspired by this article:

    Franck Butelle, Florent Hivert, Micaela Mayero, and Frédéric
    Toumazet. Formal Proof of SCHUR Conjugate Function. In Proceedings
    of Calculemus 2010, pages 158-171. Springer-Verlag LNAI, 2010.

  and an improvement made in Why3 (http://why3.lri.fr) by
  Jean-Christophe Filliatre

  Original C code from SCHUR

  Note that arrays are one-based
  (that code was translated from Pascal code where arrays were one-based)

*/

#define MAX 100

/*@ predicate is_partition(int *a) =
    // elements ranges between 0 and MAX-1
    (\forall integer i; 1 <= i < MAX ==> 0 <= a[i] < MAX-1) &&
    // sorted in non-increasing order 
    (\forall integer i,j; 1 <= i <= j < MAX ==> a[i] >= a[j]) &&
    // at least one 0 sentinel
    a[MAX-1] == 0 ;

  predicate numofgt (int *a, integer n, integer v) =
    // values in a[1..n] are >= v, and a[n+1] < v
    0 <= n < MAX-1 &&
    (\forall integer j; 1 <= j <= n ==> v <= a[j]) &&
    v > a[n+1] ;

  predicate is_conjugate (int *a, int *b) =
    MAX > a[1] &&
    \forall integer j; 1 <= j < MAX ==> numofgt(a,b[j],j);

*/

/*@ requires \valid(A + (0 .. MAX-1));
  @ requires \valid(B + (0 .. MAX-1));
  @ // requires \forall integer i; 1 <= i < MAX ==> 1 <= A[i] < MAX-1;
  @ requires \forall integer k; 1 <= k < MAX ==> B[k] == 0;
  @ requires is_partition(A);
  @ assigns B[..];
  @ ensures is_conjugate(A,B);
  @*/
void conjgte (int A[MAX], int B[MAX]) {
  int i, partc = 1, edge = 0;
  /*@ loop invariant 1 <= partc < MAX;
    @ loop invariant \forall integer j;
    @   A[partc] < j <= A[1] ==> numofgt(A,B[j],j);
    @ loop invariant \forall integer j;
    @   A[1] < j < MAX ==> B[j] == 0;
    @ loop variant MAX - partc;
    @*/
  while (A[partc] != 0) 
    Start: {
    edge = A[partc];
    /*@ loop invariant \at(partc,Start) <= partc < MAX-1;
      @ loop invariant \forall integer j; 
      @    \at(partc,Start) <= j < partc ==> A[j] == edge;
      @ loop variant MAX - partc;
      @*/
    do
      partc = partc + 1;
    while (A[partc] == edge);
    /*@ loop invariant 1 <= i;
      @ loop invariant \forall integer j;
      @   edge < j < MAX ==> B[j] == \at(B[j],Start);
      @ loop invariant \forall integer j;
      @   A[partc] < j < i ==> B[j] == partc-1;
      @ loop variant edge-i;
      @*/
    for (i = A[partc] + 1; i <= edge; i++)
      B[i] = partc - 1;
  }
}

========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/conjugate.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/conjugate.jessie
[jessie] File tests/c/conjugate.jessie/conjugate.jc written.
[jessie] File tests/c/conjugate.jessie/conjugate.cloc written.
========== file tests/c/conjugate.jessie/conjugate.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate is_partition{L}(intP[..] a) =
\at((((\forall integer i_1;
        (((1 <= i_1) && (i_1 < 100)) ==>
          ((0 <= (a + i_1).intM) && ((a + i_1).intM < (100 - 1))))) &&
       (\forall integer i_2;
         (\forall integer j_0;
           (((1 <= i_2) && ((i_2 <= j_0) && (j_0 < 100))) ==>
             ((a + i_2).intM >= (a + j_0).intM))))) &&
      ((a + (100 - 1)).intM == 0)),L)

predicate numofgt{L}(intP[..] a_0, integer n, integer v) =
\at(((((0 <= n) && (n < (100 - 1))) &&
       (\forall integer j_1;
         (((1 <= j_1) && (j_1 <= n)) ==> (v <= (a_0 + j_1).intM)))) &&
      (v > (a_0 + (n + 1)).intM)),L)

predicate is_conjugate{L}(intP[..] a_1, intP[..] b) =
\at(((100 > (a_1 + 1).intM) &&
      (\forall integer j_2;
        (((1 <= j_2) && (j_2 < 100)) ==>
          numofgt{L}(a_1, (b + j_2).intM, j_2)))),L)

unit conjgte(intP[0] A, intP[0] B)
  requires (C_47 : ((C_48 : (\offset_min(A) <= 0)) &&
                     (C_49 : (\offset_max(A) >= (100 - 1)))));
  requires (C_44 : ((C_45 : (\offset_min(B) <= 0)) &&
                     (C_46 : (\offset_max(B) >= (100 - 1)))));
  requires (C_43 : (\forall integer k;
                     (((1 <= k) && (k < 100)) ==> ((B + k).intM == 0))));
  requires (C_42 : is_partition{Here}(A));
behavior default:
  assigns (B + [..]).intM;
  ensures (C_41 : is_conjugate{Here}(\at(A,Old), \at(B,Old)));
{  
   (var int32 i);
   
   (var int32 partc);
   
   (var int32 edge);
   
   {  (C_1 : (partc = 1));
      (C_2 : (edge = 0));
      
      loop 
      behavior default:
        invariant (C_6 : ((C_7 : (1 <= partc)) && (C_8 : (partc < 100))));
      behavior default:
        invariant (C_5 : (\forall integer j_6;
                           ((((A + partc).intM < j_6) &&
                              (j_6 <= (A + 1).intM)) ==>
                             numofgt{Here}(A, (B + j_6).intM, j_6))));
      behavior default:
        invariant (C_4 : (\forall integer j_7;
                           ((((A + 1).intM < j_7) && (j_7 < 100)) ==>
                             ((B + j_7).intM == 0))));
      variant (C_3 : (100 - partc));
      while (true)
      {  
         {  (if ((C_10 : (C_9 : (A + partc)).intM) != 0) then () else 
            (goto while_0_break));
            (Start : 
            {  (C_13 : (edge = (C_12 : (C_11 : (A + partc)).intM)));
               
               loop 
               behavior default:
                 invariant (C_16 : ((C_17 : (\at(partc,Start) <= partc)) &&
                                     (C_18 : (partc < (100 - 1)))));
               behavior default:
                 invariant (C_15 : (\forall integer j_3;
                                     (((\at(partc,Start) <= j_3) &&
                                        (j_3 < partc)) ==>
                                       ((A + j_3).intM == edge))));
               variant (C_14 : (100 - partc));
               while (true)
               {  
                  {  (C_21 : (partc = (C_20 : ((C_19 : (partc + 1)) :> int32))));
                     (if ((C_23 : (C_22 : (A + partc)).intM) == edge) then () else 
                     (goto while_1_break))
                  }
               };
               (while_1_break : ());
               (C_28 : (i = (C_27 : ((C_26 : ((C_25 : (C_24 : (A + partc)).intM) +
                                               1)) :> int32))));
               
               loop 
               behavior default:
                 invariant (C_32 : (1 <= i));
               behavior default:
                 invariant (C_31 : (\forall integer j_4;
                                     (((edge < j_4) && (j_4 < 100)) ==>
                                       ((B + j_4).intM ==
                                         \at((B + j_4).intM,Start)))));
               behavior default:
                 invariant (C_30 : (\forall integer j_5;
                                     ((((A + partc).intM < j_5) && (j_5 < i)) ==>
                                       ((B + j_5).intM == (partc - 1)))));
               variant (C_29 : (edge - i));
               while (true)
               {  
                  {  (if (i <= edge) then () else 
                     (goto while_2_break));
                     (C_37 : ((C_36 : (C_35 : (B + i)).intM) = (C_34 : (
                                                               (C_33 : 
                                                               (partc -
                                                                 1)) :> int32))));
                     (C_40 : (i = (C_39 : ((C_38 : (i + 1)) :> int32))))
                  }
               };
               (while_2_break : ())
            })
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
========== file tests/c/conjugate.jessie/conjugate.cloc ==========
[conjgte]
name = "Function conjgte"
file = "HOME/tests/c/conjugate.c"
line = 49
begin = 5
end = 12

[C_10]
file = "HOME/tests/c/conjugate.c"
line = 58
begin = 9
end = 17

[C_11]
file = "HOME/tests/c/conjugate.c"
line = 60
begin = 11
end = 12

[C_12]
file = "HOME/tests/c/conjugate.c"
line = 60
begin = 11
end = 19

[C_13]
file = "HOME/tests/c/conjugate.c"
line = 60
begin = 11
end = 19

[C_14]
file = "HOME/tests/c/conjugate.c"
line = 64
begin = 21
end = 32

[C_15]
file = "HOME/tests/c/conjugate.c"
line = 62
begin = 23
end = 99

[C_16]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 57

[C_17]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 48

[C_18]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 43
end = 57

[C_19]
file = "HOME/tests/c/conjugate.c"
line = 67
begin = 14
end = 23

[C_1]
file = "HOME/tests/c/conjugate.c"
line = 50
begin = 2
end = 5

[C_2]
file = "HOME/tests/c/conjugate.c"
line = 50
begin = 2
end = 5

[C_3]
file = "HOME/tests/c/conjugate.c"
line = 56
begin = 19
end = 30

[C_4]
file = "HOME/tests/c/conjugate.c"
line = 54
begin = 21
end = 76

[C_20]
file = "HOME/tests/c/conjugate.c"
line = 67
begin = 14
end = 23

[C_5]
file = "HOME/tests/c/conjugate.c"
line = 52
begin = 21
end = 90

[C_21]
file = "HOME/tests/c/conjugate.c"
line = 67
begin = 14
end = 23

[C_6]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 37

[C_22]
file = "HOME/tests/c/conjugate.c"
line = 68
begin = 11
end = 12

[C_7]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 31

[C_23]
file = "HOME/tests/c/conjugate.c"
line = 68
begin = 11
end = 19

[C_8]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 26
end = 37

[C_24]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 14

[C_9]
file = "HOME/tests/c/conjugate.c"
line = 58
begin = 9
end = 10

[C_25]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 21

[C_26]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 25

[C_27]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 25

[C_28]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 25

[C_29]
file = "HOME/tests/c/conjugate.c"
line = 74
begin = 21
end = 27

[C_30]
file = "HOME/tests/c/conjugate.c"
line = 72
begin = 23
end = 88

[C_31]
file = "HOME/tests/c/conjugate.c"
line = 70
begin = 23
end = 94

[C_32]
file = "HOME/tests/c/conjugate.c"
line = 69
begin = 23
end = 29

[C_33]
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 13
end = 22

[C_34]
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 13
end = 22

[C_35]
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 6
end = 7

[C_36]
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 13
end = 22

[C_37]
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 13
end = 22

[C_38]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 38
end = 41

[C_39]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 38
end = 41

[C_40]
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 38
end = 41

[C_41]
file = "HOME/tests/c/conjugate.c"
line = 47
begin = 12
end = 29

[C_42]
file = "HOME/tests/c/conjugate.c"
line = 45
begin = 13
end = 28

[C_43]
file = "HOME/tests/c/conjugate.c"
line = 44
begin = 13
end = 58

[C_44]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[C_45]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[C_46]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[C_47]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[C_48]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[C_49]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

========== jessie execution ==========
Generating Why function conjgte
========== file tests/c/conjugate.jessie/conjugate.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

USERWHYDEUXOPT= -split-user-conj
WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT) $(USERWHYDEUXOPT) -explain -locs conjugate.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT) $(USERWHYDEUXOPT) -explain -locs conjugate.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/conjugate_why.sx

project: why/conjugate.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/conjugate_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/conjugate_why.vo

coq/conjugate_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/conjugate_why.v: why/conjugate.why
	@echo 'why -coq [...] why/conjugate.why' && $(WHY) $(JESSIELIBFILES) why/conjugate.why && rm -f coq/jessie_why.v

coq-goals: goals coq/conjugate_ctx_why.vo
	for f in why/*_po*.why; do make -f conjugate.makefile coq/`basename $$f .why`_why.v ; done

coq/conjugate_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/conjugate_ctx_why.v: why/conjugate_ctx.why
	@echo 'why -coq [...] why/conjugate_ctx.why' && $(WHY) why/conjugate_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export conjugate_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/conjugate_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/conjugate_ctx_why.vo

pvs: pvs/conjugate_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/conjugate_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/conjugate_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/conjugate_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/conjugate_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/conjugate_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/conjugate_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/conjugate_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/conjugate_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/conjugate_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/conjugate_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/conjugate_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/conjugate_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/conjugate_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/conjugate_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: conjugate.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/conjugate_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: conjugate.mlw
	 why3 --extra-config $(JESSIE3CONF) $<

why3ide: conjugate.mlw
	 why3ide --extra-config $(JESSIE3CONF) $<

why3replay: conjugate.mlw
	 why3replayer --extra-config $(JESSIE3CONF) $<

-include conjugate.depend

depend: coq/conjugate_why.v
	-$(COQDEP) -I coq coq/conjugate*_why.v > conjugate.depend

clean:
	rm -f coq/*.vo

========== file tests/c/conjugate.jessie/conjugate.loc ==========
[JC_40]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 105
begin = 15
end = 823

[JC_41]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 105
begin = 15
end = 823

[JC_42]
kind = ArithOverflow
file = "HOME/tests/c/conjugate.c"
line = 67
begin = 14
end = 23

[JC_43]
kind = PointerDeref
file = "HOME/tests/c/conjugate.c"
line = 68
begin = 11
end = 19

[JC_44]
file = "HOME/tests/c/conjugate.c"
line = 64
begin = 21
end = 32

[JC_45]
kind = PointerDeref
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 21

[JC_46]
kind = ArithOverflow
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 13
end = 25

[JC_1]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[JC_47]
file = "HOME/tests/c/conjugate.c"
line = 72
begin = 23
end = 88

[JC_2]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[JC_48]
file = "HOME/tests/c/conjugate.c"
line = 70
begin = 23
end = 94

[JC_3]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[JC_49]
file = "HOME/tests/c/conjugate.c"
line = 69
begin = 23
end = 29

[JC_4]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[JC_5]
file = "HOME/tests/c/conjugate.c"
line = 44
begin = 13
end = 58

[JC_6]
file = "HOME/tests/c/conjugate.c"
line = 45
begin = 13
end = 28

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_51]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 126
begin = 15
end = 1234

[JC_52]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 126
begin = 15
end = 1234

[JC_53]
kind = ArithOverflow
file = "HOME/tests/c/conjugate.c"
line = 77
begin = 13
end = 22

[JC_54]
kind = PointerDeref
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 143
begin = 30
end = 296

[JC_55]
kind = ArithOverflow
file = "HOME/tests/c/conjugate.c"
line = 76
begin = 38
end = 41

[JC_56]
file = "HOME/tests/c/conjugate.c"
line = 74
begin = 21
end = 27

[JC_57]
file = "HOME/tests/c/conjugate.c"
line = 56
begin = 19
end = 30

[JC_58]
file = "HOME/tests/c/conjugate.c"
line = 54
begin = 21
end = 76

[JC_59]
file = "HOME/tests/c/conjugate.c"
line = 52
begin = 21
end = 90

[conjgte_safety]
name = "Function conjgte"
behavior = "Safety"
file = "HOME/tests/c/conjugate.c"
line = 49
begin = 5
end = 12

[conjgte_ensures_default]
name = "Function conjgte"
behavior = "default behavior"
file = "HOME/tests/c/conjugate.c"
line = 49
begin = 5
end = 12

[JC_60]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 31

[JC_61]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 26
end = 37

[JC_62]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 37

[JC_10]
file = "HOME/tests/c/conjugate.c"
line = 41
begin = 13
end = 38

[JC_63]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[JC_64]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 85
begin = 6
end = 3173

[JC_12]
file = "HOME/tests/c/conjugate.c"
line = 42
begin = 13
end = 38

[JC_65]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 85
begin = 6
end = 3173

[JC_13]
file = "HOME/tests/c/conjugate.c"
line = 44
begin = 13
end = 58

[JC_66]
file = "HOME/tests/c/conjugate.c"
line = 62
begin = 23
end = 99

[JC_14]
file = "HOME/tests/c/conjugate.c"
line = 45
begin = 13
end = 28

[JC_67]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 48

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 43
end = 57

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_69]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 57

[JC_17]
file = "HOME/tests/c/conjugate.c"
line = 47
begin = 12
end = 29

[JC_18]
file = "HOME/tests/c/conjugate.c"
line = 49
begin = 5
end = 12

[JC_19]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 72
begin = 9
end = 16

[JC_70]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_71]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 105
begin = 15
end = 823

[JC_72]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 105
begin = 15
end = 823

[JC_20]
file = "HOME/tests/c/conjugate.c"
line = 47
begin = 12
end = 29

[JC_73]
file = "HOME/tests/c/conjugate.c"
line = 72
begin = 23
end = 88

[JC_21]
file = "HOME/tests/c/conjugate.c"
line = 49
begin = 5
end = 12

[JC_74]
file = "HOME/tests/c/conjugate.c"
line = 70
begin = 23
end = 94

[JC_22]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 72
begin = 9
end = 16

[JC_75]
file = "HOME/tests/c/conjugate.c"
line = 69
begin = 23
end = 29

[JC_23]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_76]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_77]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 126
begin = 15
end = 1234

[JC_25]
file = "HOME/tests/c/conjugate.c"
line = 54
begin = 21
end = 76

[JC_78]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 126
begin = 15
end = 1234

[JC_26]
file = "HOME/tests/c/conjugate.c"
line = 52
begin = 21
end = 90

[JC_27]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 31

[JC_28]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 26
end = 37

[JC_29]
file = "HOME/tests/c/conjugate.c"
line = 51
begin = 21
end = 37

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_31]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 85
begin = 6
end = 3173

[JC_32]
file = "HOME/tests/c/conjugate.jessie/conjugate.jc"
line = 85
begin = 6
end = 3173

[JC_33]
kind = PointerDeref
file = "HOME/tests/c/conjugate.c"
line = 58
begin = 9
end = 17

[JC_34]
kind = PointerDeref
file = "HOME/tests/c/conjugate.c"
line = 60
begin = 11
end = 19

[JC_35]
file = "HOME/tests/c/conjugate.c"
line = 62
begin = 23
end = 99

[JC_36]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 48

[JC_37]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 43
end = 57

[JC_38]
file = "HOME/tests/c/conjugate.c"
line = 61
begin = 23
end = 57

[JC_39]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/c/conjugate.jessie/why/conjugate.why ==========
type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate numofgt(a_0:intP pointer, n:int, v:int,
 intP_intM_a_0_2_at_L:(intP, int32) memory) =
 (le_int((0), n)
 and (lt_int(n, sub_int((100), (1)))
     and ((forall j_1:int.
           ((le_int((1), j_1) and le_int(j_1, n)) ->
            le_int(v,
            integer_of_int32(select(intP_intM_a_0_2_at_L, shift(a_0, j_1))))))
         and gt_int(v,
             integer_of_int32(select(intP_intM_a_0_2_at_L,
                              shift(a_0, add_int(n, (1)))))))))

predicate is_conjugate(a_1:intP pointer, b:intP pointer,
 intP_intM_b_4_at_L:(intP, int32) memory,
 intP_intM_a_1_3_at_L:(intP, int32) memory) =
 (gt_int((100),
  integer_of_int32(select(intP_intM_a_1_3_at_L, shift(a_1, (1)))))
 and (forall j_2:int.
      ((le_int((1), j_2) and lt_int(j_2, (100))) ->
       numofgt(a_1,
       integer_of_int32(select(intP_intM_b_4_at_L, shift(b, j_2))), j_2,
       intP_intM_a_1_3_at_L))))

predicate is_partition(a:intP pointer,
 intP_intM_a_1_at_L:(intP, int32) memory) =
 ((forall i_1:int.
   ((le_int((1), i_1) and lt_int(i_1, (100))) ->
    (le_int((0), integer_of_int32(select(intP_intM_a_1_at_L, shift(a, i_1))))
    and lt_int(integer_of_int32(select(intP_intM_a_1_at_L, shift(a, i_1))),
        sub_int((100), (1))))))
 and ((forall i_2:int.
       (forall j_0:int.
        ((le_int((1), i_2) and (le_int(i_2, j_0) and lt_int(j_0, (100)))) ->
         ge_int(integer_of_int32(select(intP_intM_a_1_at_L, shift(a, i_2))),
         integer_of_int32(select(intP_intM_a_1_at_L, shift(a, j_0)))))))
     and (integer_of_int32(select(intP_intM_a_1_at_L,
                           shift(a, sub_int((100), (1))))) = (0))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter conjgte :
 A:intP pointer ->
  B:intP pointer ->
   intP_intM_B_6:(intP, int32) memory ref ->
    intP_B_6_alloc_table:intP alloc_table ->
     intP_A_5_alloc_table:intP alloc_table ->
      intP_intM_A_5:(intP, int32) memory ->
       { } unit reads intP_intM_B_6 writes intP_intM_B_6
       { (JC_22:
         ((JC_20: is_conjugate(A, B, intP_intM_B_6, intP_intM_A_5))
         and (JC_21:
             not_assigns(intP_B_6_alloc_table, intP_intM_B_6@, intP_intM_B_6,
             pset_all(pset_singleton(B)))))) }

parameter conjgte_requires :
 A:intP pointer ->
  B:intP pointer ->
   intP_intM_B_6:(intP, int32) memory ref ->
    intP_B_6_alloc_table:intP alloc_table ->
     intP_A_5_alloc_table:intP alloc_table ->
      intP_intM_A_5:(intP, int32) memory ->
       { (JC_7:
         ((JC_1: le_int(offset_min(intP_A_5_alloc_table, A), (0)))
         and ((JC_2:
              ge_int(offset_max(intP_A_5_alloc_table, A),
              sub_int((100), (1))))
             and ((JC_3: le_int(offset_min(intP_B_6_alloc_table, B), (0)))
                 and ((JC_4:
                      ge_int(offset_max(intP_B_6_alloc_table, B),
                      sub_int((100), (1))))
                     and ((JC_5:
                          (forall k:int.
                           ((le_int((1), k) and lt_int(k, (100))) ->
                            (integer_of_int32(select(intP_intM_B_6,
                                              shift(B, k))) = (0)))))
                         and (JC_6: is_partition(A, intP_intM_A_5))))))))}
       unit reads intP_intM_B_6 writes intP_intM_B_6
       { (JC_22:
         ((JC_20: is_conjugate(A, B, intP_intM_B_6, intP_intM_A_5))
         and (JC_21:
             not_assigns(intP_B_6_alloc_table, intP_intM_B_6@, intP_intM_B_6,
             pset_all(pset_singleton(B)))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let conjgte_ensures_default =
 fun (A : intP pointer) (B : intP pointer) (intP_intM_B_6 : (intP, int32) memory ref) (intP_A_5_alloc_table : intP alloc_table) (intP_B_6_alloc_table : intP alloc_table) (intP_intM_A_5 : (intP, int32) memory) ->
  { (valid_struct_intP(B, (0), (0), intP_B_6_alloc_table)
    and (valid_struct_intP(A, (0), (0), intP_A_5_alloc_table)
        and (JC_15:
            ((JC_9: le_int(offset_min(intP_A_5_alloc_table, A), (0)))
            and ((JC_10:
                 ge_int(offset_max(intP_A_5_alloc_table, A),
                 sub_int((100), (1))))
                and ((JC_11:
                     le_int(offset_min(intP_B_6_alloc_table, B), (0)))
                    and ((JC_12:
                         ge_int(offset_max(intP_B_6_alloc_table, B),
                         sub_int((100), (1))))
                        and ((JC_13:
                             (forall k:int.
                              ((le_int((1), k) and lt_int(k, (100))) ->
                               (integer_of_int32(select(intP_intM_B_6,
                                                 shift(B, k))) = (0)))))
                            and (JC_14: is_partition(A, intP_intM_A_5)))))))))) }
  (init:
  try
   begin
     (let i = ref (any_int32 void) in
     (let partc = ref (any_int32 void) in
     (let edge = ref (any_int32 void) in
     try
      (C_1:
      (C_2:
      (loop_4:
      begin
        (let jessie_<num> = (partc := (safe_int32_of_integer_ (1))) in void);
       (let jessie_<num> = (edge := (safe_int32_of_integer_ (0))) in void);
       while true do
       { invariant
           (((JC_58:
             (forall j_7:int.
              ((lt_int(integer_of_int32(select(intP_intM_A_5, shift(A, (1)))),
                j_7)
               and lt_int(j_7, (100))) ->
               (integer_of_int32(select(intP_intM_B_6, shift(B, j_7))) = (0)))))
            and ((JC_59:
                 (forall j_6:int.
                  ((lt_int(integer_of_int32(select(intP_intM_A_5,
                                            shift(A, integer_of_int32(partc)))),
                    j_6)
                   and le_int(j_6,
                       integer_of_int32(select(intP_intM_A_5, shift(A, (1)))))) ->
                   numofgt(A,
                   integer_of_int32(select(intP_intM_B_6, shift(B, j_6))),
                   j_6, intP_intM_A_5))))
                and (JC_62:
                    ((JC_60: le_int((1), integer_of_int32(partc)))
                    and (JC_61: lt_int(integer_of_int32(partc), (100)))))))
           and (JC_64:
               not_assigns(intP_B_6_alloc_table, intP_intM_B_6@init,
               intP_intM_B_6, pset_all(pset_singleton(B)))))  }
        begin
          [ { } unit { true } ];
         try
          begin
            (if ((neq_int_ (integer_of_int32 (C_10:
                                             ((safe_acc_ intP_intM_A_5) 
                                              (C_9:
                                              ((shift A) (integer_of_int32 !partc))))))) (0))
            then void else (raise (Goto_while_0_break_exc void)));
           (Start:
           begin
             try
              begin
                try
                 (C_13:
                 (loop_5:
                 begin
                   (let jessie_<num> =
                   (edge := (C_12:
                            ((safe_acc_ intP_intM_A_5) (C_11:
                                                       ((shift A) (integer_of_int32 !partc)))))) in
                   void);
                  while true do
                  { invariant
                      (((JC_66:
                        (forall j_3:int.
                         ((le_int(integer_of_int32(partc@Start), j_3)
                          and lt_int(j_3, integer_of_int32(partc))) ->
                          (integer_of_int32(select(intP_intM_A_5,
                                            shift(A, j_3))) = integer_of_int32(edge)))))
                       and (JC_69:
                           ((JC_67:
                            le_int(integer_of_int32(partc@Start),
                            integer_of_int32(partc)))
                           and (JC_68:
                               lt_int(integer_of_int32(partc),
                               sub_int((100), (1)))))))
                      and (JC_71:
                          not_assigns(intP_B_6_alloc_table,
                          intP_intM_B_6@init, intP_intM_B_6,
                          pset_all(pset_singleton(B)))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     (C_21:
                     begin
                       (let jessie_<num> =
                       (partc := (C_20:
                                 (safe_int32_of_integer_ (C_19:
                                                         ((add_int (integer_of_int32 !partc)) (1)))))) in
                       void);
                      (if ((eq_int_ (integer_of_int32 (C_23:
                                                      ((safe_acc_ intP_intM_A_5) 
                                                       (C_22:
                                                       ((shift A) (integer_of_int32 !partc))))))) 
                           (integer_of_int32 !edge)) then void
                      else (raise (Goto_while_1_break_exc void)));
                      (raise (Loop_continue_exc void)) end) with
                     Loop_continue_exc jessie_<num> -> void end end done;
                  (raise (Goto_while_1_break_exc void)) end)) with
                 Goto_while_1_break_exc jessie_<num> ->
                 (while_1_break:
                 (C_28:
                 begin
                   void;
                  (let jessie_<num> =
                  (i := (C_27:
                        (safe_int32_of_integer_ (C_26:
                                                ((add_int (integer_of_int32 
                                                           (C_25:
                                                           ((safe_acc_ intP_intM_A_5) 
                                                            (C_24:
                                                            ((shift A) 
                                                             (integer_of_int32 !partc))))))) (1)))))) in
                  void);
                  (loop_6:
                  while true do
                  { invariant
                      (((JC_73:
                        (forall j_5:int.
                         ((lt_int(integer_of_int32(select(intP_intM_A_5,
                                                   shift(A,
                                                   integer_of_int32(partc)))),
                           j_5)
                          and lt_int(j_5, integer_of_int32(i))) ->
                          (integer_of_int32(select(intP_intM_B_6,
                                            shift(B, j_5))) = sub_int(
                                                              integer_of_int32(partc),
                                                              (1))))))
                       and ((JC_74:
                            (forall j_4:int.
                             ((lt_int(integer_of_int32(edge), j_4)
                              and lt_int(j_4, (100))) ->
                              (integer_of_int32(select(intP_intM_B_6,
                                                shift(B, j_4))) = integer_of_int32(
                                                                  select(intP_intM_B_6@Start,
                                                                  shift(B,
                                                                  j_4)))))))
                           and (JC_75: le_int((1), integer_of_int32(i)))))
                      and (JC_77:
                          not_assigns(intP_B_6_alloc_table,
                          intP_intM_B_6@init, intP_intM_B_6,
                          pset_all(pset_singleton(B)))))  }
                   begin
                     [ { } unit { true } ];
                    try
                     begin
                       (let jessie_<num> =
                       (C_37:
                       (C_40:
                       begin
                         (if ((le_int_ (integer_of_int32 !i)) (integer_of_int32 !edge))
                         then void
                         else (raise (Goto_while_2_break_exc void)));
                        (let jessie_<num> =
                        (let jessie_<num> =
                        (C_34:
                        (safe_int32_of_integer_ (C_33:
                                                ((sub_int (integer_of_int32 !partc)) (1))))) in
                        (let jessie_<num> = B in
                        (let jessie_<num> = (integer_of_int32 !i) in
                        (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                        (((safe_upd_ intP_intM_B_6) jessie_<num>) jessie_<num>))))) in
                        void);
                        (i := (C_39:
                              (safe_int32_of_integer_ (C_38:
                                                      ((add_int (integer_of_int32 !i)) (1))))));
                        !i end)) in void); (raise (Loop_continue_exc void))
                     end with Loop_continue_exc jessie_<num> -> void end end done)
                 end)) end; (raise (Goto_while_2_break_exc void)) end with
              Goto_while_2_break_exc jessie_<num> -> (while_2_break: void) end;
            (raise (Loop_continue_exc void)) end) end with
          Loop_continue_exc jessie_<num> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end)));
    (raise Return) end with Return -> void end)
  { (JC_19:
    ((JC_17: is_conjugate(A, B, intP_intM_B_6, intP_intM_A_5))
    and (JC_18:
        not_assigns(intP_B_6_alloc_table, intP_intM_B_6@, intP_intM_B_6,
        pset_all(pset_singleton(B)))))) }

let conjgte_safety =
 fun (A : intP pointer) (B : intP pointer) (intP_intM_B_6 : (intP, int32) memory ref) (intP_A_5_alloc_table : intP alloc_table) (intP_B_6_alloc_table : intP alloc_table) (intP_intM_A_5 : (intP, int32) memory) ->
  { (valid_struct_intP(B, (0), (0), intP_B_6_alloc_table)
    and (valid_struct_intP(A, (0), (0), intP_A_5_alloc_table)
        and (JC_15:
            ((JC_9: le_int(offset_min(intP_A_5_alloc_table, A), (0)))
            and ((JC_10:
                 ge_int(offset_max(intP_A_5_alloc_table, A),
                 sub_int((100), (1))))
                and ((JC_11:
                     le_int(offset_min(intP_B_6_alloc_table, B), (0)))
                    and ((JC_12:
                         ge_int(offset_max(intP_B_6_alloc_table, B),
                         sub_int((100), (1))))
                        and ((JC_13:
                             (forall k:int.
                              ((le_int((1), k) and lt_int(k, (100))) ->
                               (integer_of_int32(select(intP_intM_B_6,
                                                 shift(B, k))) = (0)))))
                            and (JC_14: is_partition(A, intP_intM_A_5)))))))))) }
  (init:
  try
   begin
     (let i = ref (any_int32 void) in
     (let partc = ref (any_int32 void) in
     (let edge = ref (any_int32 void) in
     try
      (C_1:
      (C_2:
      (loop_1:
      begin
        (let jessie_<num> = (partc := (safe_int32_of_integer_ (1))) in void);
       (let jessie_<num> = (edge := (safe_int32_of_integer_ (0))) in void);
       while true do
       { invariant (JC_31: true)
         variant (JC_57 : sub_int((100), integer_of_int32(partc))) }
        begin
          [ { } unit reads intP_intM_B_6,partc
            { ((JC_25:
               (forall j_7:int.
                ((lt_int(integer_of_int32(select(intP_intM_A_5,
                                          shift(A, (1)))),
                  j_7)
                 and lt_int(j_7, (100))) ->
                 (integer_of_int32(select(intP_intM_B_6, shift(B, j_7))) = (0)))))
              and ((JC_26:
                   (forall j_6:int.
                    ((lt_int(integer_of_int32(select(intP_intM_A_5,
                                              shift(A,
                                              integer_of_int32(partc)))),
                      j_6)
                     and le_int(j_6,
                         integer_of_int32(select(intP_intM_A_5,
                                          shift(A, (1)))))) ->
                     numofgt(A,
                     integer_of_int32(select(intP_intM_B_6, shift(B, j_6))),
                     j_6, intP_intM_A_5))))
                  and (JC_29:
                      ((JC_27: le_int((1), integer_of_int32(partc)))
                      and (JC_28: lt_int(integer_of_int32(partc), (100))))))) } ];
         try
          begin
            (if ((neq_int_ (integer_of_int32 (C_10:
                                             (JC_33:
                                             ((((offset_acc_ intP_A_5_alloc_table) intP_intM_A_5) A) 
                                              (integer_of_int32 !partc)))))) (0))
            then void else (raise (Goto_while_0_break_exc void)));
           (Start:
           begin
             try
              begin
                try
                 (C_13:
                 (loop_2:
                 begin
                   (let jessie_<num> =
                   (edge := (C_12:
                            (JC_34:
                            ((((offset_acc_ intP_A_5_alloc_table) intP_intM_A_5) A) 
                             (integer_of_int32 !partc))))) in void);
                  while true do
                  { invariant (JC_40: true)
                    variant (JC_44 : sub_int((100), integer_of_int32(partc))) }
                   begin
                     [ { } unit reads edge,partc
                       { ((JC_35:
                          (forall j_3:int.
                           ((le_int(integer_of_int32(partc@Start), j_3)
                            and lt_int(j_3, integer_of_int32(partc))) ->
                            (integer_of_int32(select(intP_intM_A_5,
                                              shift(A, j_3))) = integer_of_int32(edge)))))
                         and (JC_38:
                             ((JC_36:
                              le_int(integer_of_int32(partc@Start),
                              integer_of_int32(partc)))
                             and (JC_37:
                                 lt_int(integer_of_int32(partc),
                                 sub_int((100), (1))))))) } ];
                    try
                     (C_21:
                     begin
                       (let jessie_<num> =
                       (partc := (C_20:
                                 (JC_42:
                                 (int32_of_integer_ (C_19:
                                                    ((add_int (integer_of_int32 !partc)) (1))))))) in
                       void);
                      (if ((eq_int_ (integer_of_int32 (C_23:
                                                      (JC_43:
                                                      ((((offset_acc_ intP_A_5_alloc_table) intP_intM_A_5) A) 
                                                       (integer_of_int32 !partc)))))) 
                           (integer_of_int32 !edge)) then void
                      else (raise (Goto_while_1_break_exc void)));
                      (raise (Loop_continue_exc void)) end) with
                     Loop_continue_exc jessie_<num> -> void end end done;
                  (raise (Goto_while_1_break_exc void)) end)) with
                 Goto_while_1_break_exc jessie_<num> ->
                 (while_1_break:
                 (C_28:
                 begin
                   void;
                  (let jessie_<num> =
                  (i := (C_27:
                        (JC_46:
                        (int32_of_integer_ (C_26:
                                           ((add_int (integer_of_int32 
                                                      (C_25:
                                                      (JC_45:
                                                      ((((offset_acc_ intP_A_5_alloc_table) intP_intM_A_5) A) 
                                                       (integer_of_int32 !partc)))))) (1))))))) in
                  void);
                  (loop_3:
                  while true do
                  { invariant (JC_51: true)
                    variant (JC_56 : sub_int(integer_of_int32(edge),
                                     integer_of_int32(i))) }
                   begin
                     [ { } unit reads edge,i,intP_intM_B_6,partc
                       { ((JC_47:
                          (forall j_5:int.
                           ((lt_int(integer_of_int32(select(intP_intM_A_5,
                                                     shift(A,
                                                     integer_of_int32(partc)))),
                             j_5)
                            and lt_int(j_5, integer_of_int32(i))) ->
                            (integer_of_int32(select(intP_intM_B_6,
                                              shift(B, j_5))) = sub_int(
                                                                integer_of_int32(partc),
                                                                (1))))))
                         and ((JC_48:
                              (forall j_4:int.
                               ((lt_int(integer_of_int32(edge), j_4)
                                and lt_int(j_4, (100))) ->
                                (integer_of_int32(select(intP_intM_B_6,
                                                  shift(B, j_4))) = integer_of_int32(
                                                                    select(intP_intM_B_6@Start,
                                                                    shift(B,
                                                                    j_4)))))))
                             and (JC_49: le_int((1), integer_of_int32(i))))) } ];
                    try
                     begin
                       (let jessie_<num> =
                       (C_37:
                       (C_40:
                       begin
                         (if ((le_int_ (integer_of_int32 !i)) (integer_of_int32 !edge))
                         then void
                         else (raise (Goto_while_2_break_exc void)));
                        (let jessie_<num> =
                        (let jessie_<num> =
                        (C_34:
                        (JC_53:
                        (int32_of_integer_ (C_33:
                                           ((sub_int (integer_of_int32 !partc)) (1)))))) in
                        (let jessie_<num> = B in
                        (let jessie_<num> = (integer_of_int32 !i) in
                        (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                        (JC_54:
                        (((((offset_upd_ intP_B_6_alloc_table) intP_intM_B_6) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
                        void);
                        (i := (C_39:
                              (JC_55:
                              (int32_of_integer_ (C_38:
                                                 ((add_int (integer_of_int32 !i)) (1)))))));
                        !i end)) in void); (raise (Loop_continue_exc void))
                     end with Loop_continue_exc jessie_<num> -> void end end done)
                 end)) end; (raise (Goto_while_2_break_exc void)) end with
              Goto_while_2_break_exc jessie_<num> -> (while_2_break: void) end;
            (raise (Loop_continue_exc void)) end) end with
          Loop_continue_exc jessie_<num> -> void end end done;
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end)));
    (raise Return) end with Return -> void end) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/conjugate.why
========== file tests/c/conjugate.jessie/why/conjugate_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate numofgt(a_0: intP pointer, n: int, v: int,
  intP_intM_a_0_2_at_L: (intP, int32) memory) =
  ((0 <= n) and
   ((n < (100 - 1)) and
    ((forall j_1:int.
       (((1 <= j_1) and (j_1 <= n)) ->
        (v <= integer_of_int32(select(intP_intM_a_0_2_at_L, shift(a_0,
        j_1)))))) and
     (v > integer_of_int32(select(intP_intM_a_0_2_at_L, shift(a_0,
     (n + 1))))))))

predicate is_conjugate(a_1: intP pointer, b: intP pointer,
  intP_intM_b_4_at_L: (intP, int32) memory, intP_intM_a_1_3_at_L: (intP,
  int32) memory) =
  ((100 > integer_of_int32(select(intP_intM_a_1_3_at_L, shift(a_1, 1)))) and
   (forall j_2:int.
     (((1 <= j_2) and (j_2 < 100)) -> numofgt(a_1,
      integer_of_int32(select(intP_intM_b_4_at_L, shift(b, j_2))), j_2,
      intP_intM_a_1_3_at_L))))

predicate is_partition(a: intP pointer, intP_intM_a_1_at_L: (intP,
  int32) memory) =
  ((forall i_1:int.
     (((1 <= i_1) and (i_1 < 100)) ->
      ((0 <= integer_of_int32(select(intP_intM_a_1_at_L, shift(a, i_1)))) and
       (integer_of_int32(select(intP_intM_a_1_at_L, shift(a,
       i_1))) < (100 - 1))))) and
   ((forall i_2:int.
      (forall j_0:int.
        (((1 <= i_2) and ((i_2 <= j_0) and (j_0 < 100))) ->
         (integer_of_int32(select(intP_intM_a_1_at_L, shift(a,
         i_2))) >= integer_of_int32(select(intP_intM_a_1_at_L, shift(a,
         j_0))))))) and
    (integer_of_int32(select(intP_intM_a_1_at_L, shift(a, (100 - 1)))) = 0)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8.
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal conjgte_ensures_default_po_1:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall j_7:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
   (j_7 < 100)) ->
  ("JC_58": (integer_of_int32(select(intP_intM_B_6, shift(B, j_7))) = 0))

goal conjgte_ensures_default_po_2:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall j_6:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A,
   integer_of_int32(partc)))) < j_6) and
   (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
  ("JC_59": numofgt(A, integer_of_int32(select(intP_intM_B_6, shift(B,
  j_6))), j_6, intP_intM_A_5))

goal conjgte_ensures_default_po_3:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  ("JC_62": ("JC_60": (1 <= integer_of_int32(partc))))

goal conjgte_ensures_default_po_4:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  ("JC_62": ("JC_61": (integer_of_int32(partc) < 100)))

goal conjgte_ensures_default_po_5:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6, intP_intM_B_6,
  pset_all(pset_singleton(B))))

goal conjgte_ensures_default_po_6:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall j_3:int.
  ((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc0))) ->
  ("JC_66": (integer_of_int32(select(intP_intM_A_5, shift(A,
  j_3))) = integer_of_int32(edge0)))

goal conjgte_ensures_default_po_7:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  ("JC_69":
  ("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc0))))

goal conjgte_ensures_default_po_8:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  ("JC_69": ("JC_68": (integer_of_int32(partc0) < (100 - 1))))

goal conjgte_ensures_default_po_9:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) = integer_of_int32(edge0)) ->
  forall j_3:int.
  ((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc2))) ->
  ("JC_66": (integer_of_int32(select(intP_intM_A_5, shift(A,
  j_3))) = integer_of_int32(edge0)))

goal conjgte_ensures_default_po_10:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) = integer_of_int32(edge0)) ->
  ("JC_69":
  ("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc2))))

goal conjgte_ensures_default_po_11:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) = integer_of_int32(edge0)) ->
  ("JC_69": ("JC_68": (integer_of_int32(partc2) < (100 - 1))))

goal conjgte_ensures_default_po_12:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall j_5:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A,
   integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i))) ->
  ("JC_73": (integer_of_int32(select(intP_intM_B_6_0, shift(B,
  j_5))) = (integer_of_int32(partc2) - 1)))

goal conjgte_ensures_default_po_13:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  ("JC_75": (1 <= integer_of_int32(i)))

goal conjgte_ensures_default_po_14:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  forall j_5:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A,
   integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i1))) ->
  ("JC_73": (integer_of_int32(select(intP_intM_B_6_2, shift(B,
  j_5))) = (integer_of_int32(partc2) - 1)))

goal conjgte_ensures_default_po_15:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  forall j_4:int.
  ((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
  ("JC_74": (integer_of_int32(select(intP_intM_B_6_2, shift(B,
  j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4)))))

goal conjgte_ensures_default_po_16:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  ("JC_75": (1 <= integer_of_int32(i1)))

goal conjgte_ensures_default_po_17:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6, intP_intM_B_6_2,
  pset_all(pset_singleton(B))))

goal conjgte_ensures_default_po_18:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  forall j_7:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
   (j_7 < 100)) ->
  ("JC_58": (integer_of_int32(select(intP_intM_B_6_1, shift(B, j_7))) = 0))

goal conjgte_ensures_default_po_19:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  forall j_6:int.
  ((integer_of_int32(select(intP_intM_A_5, shift(A,
   integer_of_int32(partc2)))) < j_6) and
   (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
  ("JC_59": numofgt(A, integer_of_int32(select(intP_intM_B_6_1, shift(B,
  j_6))), j_6, intP_intM_A_5))

goal conjgte_ensures_default_po_20:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  ("JC_62": ("JC_60": (1 <= integer_of_int32(partc2))))

goal conjgte_ensures_default_po_21:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ((("JC_66":
    (forall j_3:int.
      (((integer_of_int32(partc0) <= j_3) and
        (j_3 < integer_of_int32(partc1))) ->
       (integer_of_int32(select(intP_intM_A_5, shift(A,
       j_3))) = integer_of_int32(edge0))))) and
    ("JC_69":
    (("JC_67": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
     ("JC_68": (integer_of_int32(partc1) < (100 - 1)))))) and
   ("JC_71": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ((("JC_73":
    (forall j_5:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_5))) = (integer_of_int32(partc2) - 1))))) and
    (("JC_74":
     (forall j_4:int.
       (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
        (integer_of_int32(select(intP_intM_B_6_1, shift(B,
        j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
     ("JC_75": (1 <= integer_of_int32(i0))))) and
   ("JC_77": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_1, pset_all(pset_singleton(B))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  ("JC_62": ("JC_61": (integer_of_int32(partc2) < 100)))

goal conjgte_ensures_default_po_22:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ((("JC_58":
    (forall j_7:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
        (j_7 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
    (("JC_59":
     (forall j_6:int.
       (((integer_of_int32(select(intP_intM_A_5, shift(A,
         integer_of_int32(partc0)))) < j_6) and
         (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
        numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
        j_6, intP_intM_A_5)))) and
     ("JC_62":
     (("JC_60": (1 <= integer_of_int32(partc0))) and
      ("JC_61": (integer_of_int32(partc0) < 100)))))) and
   ("JC_64": not_assigns(intP_B_6_alloc_table, intP_intM_B_6,
   intP_intM_B_6_0, pset_all(pset_singleton(B))))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) = 0) ->
  ("JC_19": ("JC_17": is_conjugate(A, B, intP_intM_B_6_0, intP_intM_A_5)))

goal conjgte_safety_po_1:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  (offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0))

goal conjgte_safety_po_2:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))

goal conjgte_safety_po_3:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  ((-2147483648) <= (integer_of_int32(partc1) + 1))

goal conjgte_safety_po_4:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  ((integer_of_int32(partc1) + 1) <= 2147483647)

goal conjgte_safety_po_5:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  (offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2))

goal conjgte_safety_po_6:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))

goal conjgte_safety_po_7:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) = integer_of_int32(edge0)) ->
  (0 <= ("JC_44": (100 - integer_of_int32(partc1))))

goal conjgte_safety_po_8:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) = integer_of_int32(edge0)) ->
  (("JC_44": (100 - integer_of_int32(partc2))) < ("JC_44":
                                                 (100 - integer_of_int32(partc1))))

goal conjgte_safety_po_9:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  ((-2147483648) <= (integer_of_int32(result5) + 1))

goal conjgte_safety_po_10:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  ((integer_of_int32(result5) + 1) <= 2147483647)

goal conjgte_safety_po_11:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  ((-2147483648) <= (integer_of_int32(partc2) - 1))

goal conjgte_safety_po_12:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  ((integer_of_int32(partc2) - 1) <= 2147483647)

goal conjgte_safety_po_13:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  (offset_min(intP_B_6_alloc_table, B) <= integer_of_int32(i0))

goal conjgte_safety_po_14:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  (integer_of_int32(i0) <= offset_max(intP_B_6_alloc_table, B))

goal conjgte_safety_po_15:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  ((offset_min(intP_B_6_alloc_table, B) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(intP_B_6_alloc_table, B))) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  ((-2147483648) <= (integer_of_int32(i0) + 1))

goal conjgte_safety_po_16:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  ((offset_min(intP_B_6_alloc_table, B) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(intP_B_6_alloc_table, B))) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  ((integer_of_int32(i0) + 1) <= 2147483647)

goal conjgte_safety_po_17:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  ((offset_min(intP_B_6_alloc_table, B) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(intP_B_6_alloc_table, B))) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  (((-2147483648) <= (integer_of_int32(i0) + 1)) and
   ((integer_of_int32(i0) + 1) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  (0 <= ("JC_56": (integer_of_int32(edge0) - integer_of_int32(i0))))

goal conjgte_safety_po_18:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) <= integer_of_int32(edge0)) ->
  (((-2147483648) <= (integer_of_int32(partc2) - 1)) and
   ((integer_of_int32(partc2) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(partc2) - 1)) ->
  ((offset_min(intP_B_6_alloc_table, B) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(intP_B_6_alloc_table, B))) ->
  forall intP_intM_B_6_2:(intP,
  int32) memory.
  (intP_intM_B_6_2 = store(intP_intM_B_6_1, shift(B, integer_of_int32(i0)),
  result7)) ->
  (((-2147483648) <= (integer_of_int32(i0) + 1)) and
   ((integer_of_int32(i0) + 1) <= 2147483647)) ->
  forall result8:int32.
  (integer_of_int32(result8) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result8) ->
  (("JC_56": (integer_of_int32(edge0) - integer_of_int32(i1))) < ("JC_56":
                                                                 (integer_of_int32(edge0) - integer_of_int32(i0))))

goal conjgte_safety_po_19:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  (0 <= ("JC_57": (100 - integer_of_int32(partc0))))

goal conjgte_safety_po_20:
  forall A:intP pointer.
  forall B:intP pointer.
  forall intP_A_5_alloc_table:intP alloc_table.
  forall intP_B_6_alloc_table:intP alloc_table.
  forall intP_intM_A_5:(intP, int32) memory.
  forall intP_intM_B_6:(intP,
  int32) memory.
  (valid_struct_intP(B, 0, 0, intP_B_6_alloc_table) and
   (valid_struct_intP(A, 0, 0, intP_A_5_alloc_table) and
    ("JC_15":
    (("JC_9": (offset_min(intP_A_5_alloc_table, A) <= 0)) and
     (("JC_10": (offset_max(intP_A_5_alloc_table, A) >= (100 - 1))) and
      (("JC_11": (offset_min(intP_B_6_alloc_table, B) <= 0)) and
       (("JC_12": (offset_max(intP_B_6_alloc_table, B) >= (100 - 1))) and
        (("JC_13":
         (forall k:int.
           (((1 <= k) and (k < 100)) ->
            (integer_of_int32(select(intP_intM_B_6, shift(B, k))) = 0)))) and
         ("JC_14": is_partition(A, intP_intM_A_5)))))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 1) ->
  forall partc:int32.
  (partc = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall edge:int32.
  (edge = result0) ->
  forall intP_intM_B_6_0:(intP,
  int32) memory.
  forall partc0:int32.
  ("JC_31": true) ->
  (("JC_25":
   (forall j_7:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A, 1))) < j_7) and
       (j_7 < 100)) ->
      (integer_of_int32(select(intP_intM_B_6_0, shift(B, j_7))) = 0)))) and
   (("JC_26":
    (forall j_6:int.
      (((integer_of_int32(select(intP_intM_A_5, shift(A,
        integer_of_int32(partc0)))) < j_6) and
        (j_6 <= integer_of_int32(select(intP_intM_A_5, shift(A, 1))))) ->
       numofgt(A, integer_of_int32(select(intP_intM_B_6_0, shift(B, j_6))),
       j_6, intP_intM_A_5)))) and
    ("JC_29":
    (("JC_27": (1 <= integer_of_int32(partc0))) and
     ("JC_28": (integer_of_int32(partc0) < 100)))))) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result1:int32.
  (result1 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  (integer_of_int32(result1) <> 0) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc0)) and
   (integer_of_int32(partc0) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result2:int32.
  (result2 = select(intP_intM_A_5, shift(A, integer_of_int32(partc0)))) ->
  forall edge0:int32.
  (edge0 = result2) ->
  forall partc1:int32.
  ("JC_40": true) ->
  (("JC_35":
   (forall j_3:int.
     (((integer_of_int32(partc0) <= j_3) and (j_3 < integer_of_int32(partc1))) ->
      (integer_of_int32(select(intP_intM_A_5, shift(A,
      j_3))) = integer_of_int32(edge0))))) and
   ("JC_38":
   (("JC_36": (integer_of_int32(partc0) <= integer_of_int32(partc1))) and
    ("JC_37": (integer_of_int32(partc1) < (100 - 1)))))) ->
  (((-2147483648) <= (integer_of_int32(partc1) + 1)) and
   ((integer_of_int32(partc1) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(partc1) + 1)) ->
  forall partc2:int32.
  (partc2 = result3) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result4:int32.
  (result4 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (integer_of_int32(result4) <> integer_of_int32(edge0)) ->
  ((offset_min(intP_A_5_alloc_table, A) <= integer_of_int32(partc2)) and
   (integer_of_int32(partc2) <= offset_max(intP_A_5_alloc_table, A))) ->
  forall result5:int32.
  (result5 = select(intP_intM_A_5, shift(A, integer_of_int32(partc2)))) ->
  (((-2147483648) <= (integer_of_int32(result5) + 1)) and
   ((integer_of_int32(result5) + 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(result5) + 1)) ->
  forall i:int32.
  (i = result6) ->
  forall i0:int32.
  forall intP_intM_B_6_1:(intP,
  int32) memory.
  ("JC_51": true) ->
  (("JC_47":
   (forall j_5:int.
     (((integer_of_int32(select(intP_intM_A_5, shift(A,
       integer_of_int32(partc2)))) < j_5) and (j_5 < integer_of_int32(i0))) ->
      (integer_of_int32(select(intP_intM_B_6_1, shift(B,
      j_5))) = (integer_of_int32(partc2) - 1))))) and
   (("JC_48":
    (forall j_4:int.
      (((integer_of_int32(edge0) < j_4) and (j_4 < 100)) ->
       (integer_of_int32(select(intP_intM_B_6_1, shift(B,
       j_4))) = integer_of_int32(select(intP_intM_B_6_0, shift(B, j_4))))))) and
    ("JC_49": (1 <= integer_of_int32(i0))))) ->
  (integer_of_int32(i0) > integer_of_int32(edge0)) ->
  (("JC_57": (100 - integer_of_int32(partc2))) < ("JC_57":
                                                 (100 - integer_of_int32(partc0))))

