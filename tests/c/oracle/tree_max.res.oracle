========== file tests/c/tree_max.c ==========

#pragma JessieTerminationPolicy(user)

#define NULL (void*)0

//@ ensures \result == \max(x,y);
int max(int x, int y);

typedef struct Tree *tree;
struct Tree {
  int value;
  tree left;
  tree right;
};

/* not accepted by Why3 (termination not proved) 
  @ predicate mem(int x, tree t) =
  @  (t==\null) ? \false : (x==t->value) || mem(x,t->left) || mem(x,t->right);
  @*/

/*@ axiomatic Mem {
  @   predicate mem{L}(int x, tree t);
  @   axiom mem_null{L}: \forall int x; ! mem(x,\null);
  @   axiom mem_root{L}: \forall tree t; t != \null ==>
  @     mem(t->value,t);
  @   axiom mem_root_eq{L}: \forall int x, tree t; t != \null ==>
  @     x==t->value ==> mem(x,t);
  @   axiom mem_left{L}: \forall int x, tree t; t != \null ==>
  @     mem(x,t->left) ==> mem(x,t);
  @   axiom mem_right{L}: \forall int x, tree t; t != \null ==>
  @     mem(x,t->right) ==> mem(x,t);
  @   axiom mem_inversion{L}: \forall int x, tree t;
  @     mem(x,t) ==> t != \null &&
  @       (x==t->value || mem(x,t->left) || mem(x,t->right));
  @ }
  @*/

/*@ axiomatic WellFormedTree {
  @   predicate has_size{L}(tree t, integer s);
  @   axiom has_size_null{L}: has_size(\null,0);
  @   axiom has_size_non_null{L}: \forall tree t; \valid(t) ==>
  @     \forall integer s1,s2;
  @     has_size(t->left,s1) && has_size(t->right,s2) ==>
  @     has_size(t,s1+s2+1) ;
  @   axiom has_size_inversion{L}: \forall tree t, integer s;
  @     has_size(t,s) ==>
  @       (t == \null && s == 0) ||
  @       (\valid(t) && \exists integer s1,s2;
  @            has_size(t->left,s1) && has_size(t->right,s2) &&
  @            0 <= s1 && 0 <= s2 && s == s1+s2+1) ;
  @  predicate size_decreases{L}(tree t1, tree t2) =
  @    \exists integer s1,s2; has_size(t1,s1) && has_size(t2,s2) && s1 > s2;
  @   predicate valid_tree{L}(tree t) =
  @     \exists integer s; has_size(t,s);
  @ }
  @*/

/*@ requires t != \null && valid_tree(t);
  @ // decreases t for size_decreases;
  @ ensures mem(\result,t) && \forall int x; mem(x,t) ==> \result >= x;
  @*/
int tree_max(tree t) {
  int m = t->value;
  if (t->left != NULL) m = max(m,tree_max(t->left));
  if (t->right != NULL) m = max(m,tree_max(t->right));
  return m;
  }
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/tree_max.c"
[jessie] Starting Jessie translation
[kernel] warning: No code for function max, default assigns generated for default behavior
[jessie] Producing Jessie files in subdir tests/c/tree_max.jessie
[jessie] File tests/c/tree_max.jessie/tree_max.jc written.
[jessie] File tests/c/tree_max.jessie/tree_max.cloc written.
========== file tests/c/tree_max.jessie/tree_max.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# TerminationPolicy = user

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

type int32 = -2147483648..2147483647

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

tag Tree = {
  int32 value: 32; 
  Tree[..] left: 32; 
  Tree[..] right: 32;
}

type Tree = [Tree]

int32 max(int32 x, int32 y)
behavior default:
  assigns \nothing;
  ensures (C_1 : (\result == \integer_max(\at(x,Old), \at(y,Old))));
;

axiomatic Mem {

  predicate mem{L}(int32 x, Tree[..] t)
   
  axiom mem_null{L} :
  (\forall int32 x_0;
    (! mem{L}(x_0, null)))
   
  axiom mem_root{L} :
  (\forall Tree[..] t_0;
    ((t_0 != null) ==> mem{L}(t_0.value, t_0)))
   
  axiom mem_root_eq{L} :
  (\forall int32 x_1;
    (\forall Tree[..] t_1;
      ((t_1 != null) ==> ((x_1 == t_1.value) ==> mem{L}(x_1, t_1)))))
   
  axiom mem_left{L} :
  (\forall int32 x_2;
    (\forall Tree[..] t_2;
      ((t_2 != null) ==> (mem{L}(x_2, t_2.left) ==> mem{L}(x_2, t_2)))))
   
  axiom mem_right{L} :
  (\forall int32 x_3;
    (\forall Tree[..] t_3;
      ((t_3 != null) ==> (mem{L}(x_3, t_3.right) ==> mem{L}(x_3, t_3)))))
   
  axiom mem_inversion{L} :
  (\forall int32 x_4;
    (\forall Tree[..] t_4;
      (mem{L}(x_4, t_4) ==>
        ((t_4 != null) &&
          (((x_4 == t_4.value) || mem{L}(x_4, t_4.left)) ||
            mem{L}(x_4, t_4.right))))))
  
}

axiomatic WellFormedTree {

  predicate has_size{L}(Tree[..] t_5, integer s)
   
  axiom has_size_null{L} :
  has_size{L}(null, 0)
   
  axiom has_size_non_null{L} :
  (\forall Tree[..] t_6;
    (((\offset_min(t_6) <= 0) && (\offset_max(t_6) >= 0)) ==>
      (\forall integer s1;
        (\forall integer s2;
          ((has_size{L}(t_6.left, s1) && has_size{L}(t_6.right, s2)) ==>
            has_size{L}(t_6, ((s1 + s2) + 1)))))))
   
  axiom has_size_inversion{L} :
  (\forall Tree[..] t_7;
    (\forall integer s_0;
      (has_size{L}(t_7, s_0) ==>
        (((t_7 == null) && (s_0 == 0)) ||
          (((\offset_min(t_7) <= 0) && (\offset_max(t_7) >= 0)) &&
            (\exists integer s1_0;
              (\exists integer s2_0;
                ((((has_size{L}(t_7.left, s1_0) &&
                     has_size{L}(t_7.right, s2_0)) &&
                    (0 <= s1_0)) &&
                   (0 <= s2_0)) &&
                  (s_0 == ((s1_0 + s2_0) + 1))))))))))
   
  predicate size_decreases{L}(Tree[..] t1, Tree[..] t2) =
  (\exists integer s1_1;
    (\exists integer s2_1;
      ((has_size{L}(t1, s1_1) && has_size{L}(t2, s2_1)) && (s1_1 > s2_1))))
   
  predicate valid_tree{L}(Tree[..] t_8) =
  (\exists integer s_1;
    has_size{L}(t_8, s_1))
  
}

int32 tree_max(Tree[..] t)
  requires (C_19 : ((C_20 : (t != null)) && (C_21 : valid_tree{Here}(t))));
behavior default:
  ensures (C_16 : ((C_17 : mem{Here}(\result, \at(t,Old))) &&
                    (C_18 : (\forall int32 x_5;
                              (mem{Here}(x_5, \at(t,Old)) ==>
                                (\result >= x_5))))));
{  
   (var int32 m);
   
   (var int32 tmp);
   
   (var int32 tmp_0);
   
   {  (C_3 : (m = (C_2 : t.value)));
      (if ((C_9 : t.left) != null) then 
      {  (C_6 : (tmp = (C_5 : tree_max((C_4 : t.left)))));
         (C_8 : (m = (C_7 : max(m, tmp))))
      } else ());
      (if ((C_15 : t.right) != null) then 
      {  (C_12 : (tmp_0 = (C_11 : tree_max((C_10 : t.right)))));
         (C_14 : (m = (C_13 : max(m, tmp_0))))
      } else ());
      
      (return m)
   }
}
========== file tests/c/tree_max.jessie/tree_max.cloc ==========
[mem_left]
name = "Lemma mem_left"
file = "HOME/tests/c/tree_max.c"
line = 28
begin = 6
end = 99

[mem_null]
name = "Lemma mem_null"
file = "HOME/tests/c/tree_max.c"
line = 23
begin = 6
end = 55

[C_10]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 47
end = 55

[C_11]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 38
end = 56

[C_12]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 38
end = 56

[C_13]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 32
end = 57

[has_size_inversion]
name = "Lemma has_size_inversion"
file = "HOME/tests/c/tree_max.c"
line = 45
begin = 6
end = 287

[C_14]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 32
end = 57

[C_15]
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 6
end = 14

[C_16]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 70

[C_17]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 26

[C_18]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 30
end = 70

[C_19]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 40

[mem_root]
name = "Lemma mem_root"
file = "HOME/tests/c/tree_max.c"
line = 24
begin = 6
end = 80

[C_1]
file = "HOME/tests/c/tree_max.c"
line = 6
begin = 12
end = 32

[C_2]
file = "HOME/tests/c/tree_max.c"
line = 63
begin = 10
end = 18

[C_3]
file = "HOME/tests/c/tree_max.c"
line = 63
begin = 2
end = 5

[C_4]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 46
end = 53

[C_20]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 23

[C_5]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 37
end = 54

[mem_right]
name = "Lemma mem_right"
file = "HOME/tests/c/tree_max.c"
line = 30
begin = 6
end = 101

[C_21]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 27
end = 40

[C_6]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 37
end = 54

[tree_max]
name = "Function tree_max"
file = "HOME/tests/c/tree_max.c"
line = 62
begin = 4
end = 12

[C_7]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 31
end = 55

[C_8]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 31
end = 55

[C_9]
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 6
end = 13

[has_size_non_null]
name = "Lemma has_size_non_null"
file = "HOME/tests/c/tree_max.c"
line = 41
begin = 6
end = 182

[mem_root_eq]
name = "Lemma mem_root_eq"
file = "HOME/tests/c/tree_max.c"
line = 26
begin = 6
end = 99

[mem_inversion]
name = "Lemma mem_inversion"
file = "HOME/tests/c/tree_max.c"
line = 32
begin = 6
end = 149

[has_size_null]
name = "Lemma has_size_null"
file = "HOME/tests/c/tree_max.c"
line = 40
begin = 6
end = 48

========== jessie execution ==========
Generating Why function tree_max
========== file tests/c/tree_max.jessie/tree_max.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs tree_max.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs tree_max.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/tree_max_why.sx

project: why/tree_max.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/tree_max_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/tree_max_why.vo

coq/tree_max_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/tree_max_why.v: why/tree_max.why
	@echo 'why -coq [...] why/tree_max.why' && $(WHY) $(JESSIELIBFILES) why/tree_max.why && rm -f coq/jessie_why.v

coq-goals: goals coq/tree_max_ctx_why.vo
	for f in why/*_po*.why; do make -f tree_max.makefile coq/`basename $$f .why`_why.v ; done

coq/tree_max_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/tree_max_ctx_why.v: why/tree_max_ctx.why
	@echo 'why -coq [...] why/tree_max_ctx.why' && $(WHY) why/tree_max_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export tree_max_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/tree_max_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/tree_max_ctx_why.vo

pvs: pvs/tree_max_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/tree_max_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/tree_max_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/tree_max_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/tree_max_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/tree_max_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/tree_max_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/tree_max_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/tree_max_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/tree_max_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/tree_max_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/tree_max_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/tree_max_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/tree_max_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/tree_max_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: tree_max.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/tree_max_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/tree_max_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: tree_max.mlw
	@echo 'why3ml [...] $<' && why3ide --extra-config $(JESSIE3CONF) $<

-include tree_max.depend

depend: coq/tree_max_why.v
	-$(COQDEP) -I coq coq/tree_max*_why.v > tree_max.depend

clean:
	rm -f coq/*.vo

========== file tests/c/tree_max.jessie/tree_max.loc ==========
[tree_max_safety]
name = "Function tree_max"
behavior = "Safety"
file = "HOME/tests/c/tree_max.c"
line = 62
begin = 4
end = 12

[JC_1]
file = "HOME/tests/c/tree_max.jessie/tree_max.jc"
line = 37
begin = 6
end = 9

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/c/tree_max.jessie/tree_max.jc"
line = 37
begin = 6
end = 9

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/c/tree_max.c"
line = 6
begin = 12
end = 32

[JC_6]
file = "HOME/tests/c/tree_max.jessie/tree_max.jc"
line = 39
begin = 10
end = 18

[JC_7]
file = "HOME/tests/c/tree_max.c"
line = 6
begin = 12
end = 32

[JC_8]
file = "HOME/tests/c/tree_max.jessie/tree_max.jc"
line = 39
begin = 10
end = 18

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[mem_left]
name = "Lemma mem_left"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 28
begin = 6
end = 99

[mem_null]
name = "Lemma mem_null"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 23
begin = 6
end = 55

[has_size_inversion]
name = "Lemma has_size_inversion"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 45
begin = 6
end = 287

[mem_root]
name = "Lemma mem_root"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 24
begin = 6
end = 80

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_11]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 23

[JC_12]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 27
end = 40

[JC_13]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 40

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_15]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 23

[mem_right]
name = "Lemma mem_right"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 30
begin = 6
end = 101

[JC_16]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 27
end = 40

[JC_17]
file = "HOME/tests/c/tree_max.c"
line = 58
begin = 13
end = 40

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 26

[JC_20]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 30
end = 70

[JC_21]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 70

[JC_22]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 26

[JC_23]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 30
end = 70

[JC_24]
file = "HOME/tests/c/tree_max.c"
line = 60
begin = 12
end = 70

[JC_25]
file = "HOME/"
line = 0
begin = -1
end = -1

[has_size_non_null]
name = "Lemma has_size_non_null"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 41
begin = 6
end = 182

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
kind = PointerDeref
file = "HOME/tests/c/tree_max.c"
line = 63
begin = 10
end = 18

[JC_28]
kind = PointerDeref
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 6
end = 13

[JC_29]
kind = PointerDeref
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 46
end = 53

[JC_30]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 37
end = 54

[mem_root_eq]
name = "Lemma mem_root_eq"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 26
begin = 6
end = 99

[JC_31]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 31
end = 55

[JC_32]
kind = PointerDeref
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 6
end = 14

[tree_max_ensures_default]
name = "Function tree_max"
behavior = "default behavior"
file = "HOME/tests/c/tree_max.c"
line = 62
begin = 4
end = 12

[JC_33]
kind = PointerDeref
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 47
end = 55

[JC_34]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 38
end = 56

[JC_35]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 32
end = 57

[JC_36]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 37
end = 54

[JC_37]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 64
begin = 31
end = 55

[JC_38]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 38
end = 56

[JC_39]
kind = UserCall
file = "HOME/tests/c/tree_max.c"
line = 65
begin = 32
end = 57

[mem_inversion]
name = "Lemma mem_inversion"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 32
begin = 6
end = 149

[has_size_null]
name = "Lemma has_size_null"
behavior = "axiom"
file = "HOME/tests/c/tree_max.c"
line = 40
begin = 6
end = 48

========== file tests/c/tree_max.jessie/why/tree_max.why ==========
type Tree

type charP

type int32

type int8

type padding

type voidP

logic Tree_tag:  -> Tree tag_id

axiom Tree_int : (int_of_tag(Tree_tag) = (1))

logic Tree_of_pointer_address: unit pointer -> Tree pointer

axiom Tree_of_pointer_address_of_pointer_addr :
 (forall p:Tree pointer. (p = Tree_of_pointer_address(pointer_address(p))))

axiom Tree_parenttag_bottom : parenttag(Tree_tag, bottom_tag)

axiom Tree_tags :
 (forall x:Tree pointer.
  (forall Tree_tag_table:Tree tag_table.
   instanceof(Tree_tag_table, x, Tree_tag)))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic has_size: Tree pointer, int, Tree alloc_table,
 (Tree, Tree pointer) memory, (Tree, Tree pointer) memory -> prop

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_Tree(p:Tree pointer, a:int,
 Tree_alloc_table:Tree alloc_table) = (offset_min(Tree_alloc_table, p) <= a)

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

logic mem: int32, Tree pointer, (Tree, Tree pointer) memory,
 (Tree, Tree pointer) memory, (Tree, int32) memory -> prop

axiom pointer_addr_of_Tree_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(Tree_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_Tree(p:Tree pointer, b:int,
 Tree_alloc_table:Tree alloc_table) = (offset_max(Tree_alloc_table, p) >= b)

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate size_decreases(t1:Tree pointer, t2:Tree pointer,
 Tree_t2_4_alloc_table_at_L:Tree alloc_table,
 Tree_t1_3_alloc_table_at_L:Tree alloc_table,
 Tree_right_t2_4_at_L:(Tree, Tree pointer) memory,
 Tree_right_t1_3_at_L:(Tree, Tree pointer) memory,
 Tree_left_t2_4_at_L:(Tree, Tree pointer) memory,
 Tree_left_t1_3_at_L:(Tree, Tree pointer) memory) =
 (exists s1_1_0:int.
  (exists s2_1_0:int.
   (has_size(t1, s1_1_0, Tree_t1_3_alloc_table_at_L, Tree_right_t1_3_at_L,
    Tree_left_t1_3_at_L)
   and (has_size(t2, s2_1_0, Tree_t2_4_alloc_table_at_L,
        Tree_right_t2_4_at_L, Tree_left_t2_4_at_L)
       and gt_int(s1_1_0, s2_1_0)))))

predicate strict_valid_root_Tree(p:Tree pointer, a:int, b:int,
 Tree_alloc_table:Tree alloc_table) =
 ((offset_min(Tree_alloc_table, p) = a)
 and (offset_max(Tree_alloc_table, p) = b))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_Tree(p:Tree pointer, a:int, b:int,
 Tree_alloc_table:Tree alloc_table) =
 ((offset_min(Tree_alloc_table, p) = a)
 and (offset_max(Tree_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_Tree(p:Tree pointer, a:int, b:int,
 Tree_alloc_table:Tree alloc_table) =
 ((offset_min(Tree_alloc_table, p) <= a)
 and (offset_max(Tree_alloc_table, p) >= b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_Tree(p:Tree pointer, a:int, b:int,
 Tree_alloc_table:Tree alloc_table) =
 ((offset_min(Tree_alloc_table, p) <= a)
 and (offset_max(Tree_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_tree(t_8:Tree pointer,
 Tree_t_8_5_alloc_table_at_L:Tree alloc_table,
 Tree_right_t_8_5_at_L:(Tree, Tree pointer) memory,
 Tree_left_t_8_5_at_L:(Tree, Tree pointer) memory) =
 (exists s_1:int.
  has_size(t_8, s_1, Tree_t_8_5_alloc_table_at_L, Tree_right_t_8_5_at_L,
  Tree_left_t_8_5_at_L))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom mem_null :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall x_0_0:int32.
     (not mem(x_0_0, null, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
          Tree_value_t_1_at_L))))))

axiom mem_root :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall t_0_0:Tree pointer.
     ((t_0_0 <> null) ->
      mem(select(Tree_value_t_1_at_L, t_0_0), t_0_0, Tree_right_t_1_at_L,
      Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))

axiom mem_root_eq :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall x_1_0:int32.
     (forall t_1:Tree pointer.
      ((t_1 <> null) ->
       ((integer_of_int32(x_1_0) = integer_of_int32(select(Tree_value_t_1_at_L,
                                                    t_1))) ->
        mem(x_1_0, t_1, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
        Tree_value_t_1_at_L))))))))

axiom mem_left :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall x_2:int32.
     (forall t_2:Tree pointer.
      ((t_2 <> null) ->
       (mem(x_2, select(Tree_left_t_1_at_L, t_2), Tree_right_t_1_at_L,
        Tree_left_t_1_at_L, Tree_value_t_1_at_L) ->
        mem(x_2, t_2, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
        Tree_value_t_1_at_L))))))))

axiom mem_right :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall x_3:int32.
     (forall t_3:Tree pointer.
      ((t_3 <> null) ->
       (mem(x_3, select(Tree_right_t_1_at_L, t_3), Tree_right_t_1_at_L,
        Tree_left_t_1_at_L, Tree_value_t_1_at_L) ->
        mem(x_3, t_3, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
        Tree_value_t_1_at_L))))))))

axiom mem_inversion :
 (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
  (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
   (forall Tree_value_t_1_at_L:(Tree, int32) memory.
    (forall x_4:int32.
     (forall t_4:Tree pointer.
      (mem(x_4, t_4, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
       Tree_value_t_1_at_L) ->
       ((t_4 <> null)
       and ((integer_of_int32(x_4) = integer_of_int32(select(Tree_value_t_1_at_L,
                                                      t_4)))
           or (mem(x_4, select(Tree_left_t_1_at_L, t_4), Tree_right_t_1_at_L,
               Tree_left_t_1_at_L, Tree_value_t_1_at_L)
              or mem(x_4, select(Tree_right_t_1_at_L, t_4),
                 Tree_right_t_1_at_L, Tree_left_t_1_at_L,
                 Tree_value_t_1_at_L))))))))))

axiom has_size_null :
 (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
  (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
   (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
    has_size(null, (0), Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
    Tree_left_t_5_2_at_L))))

axiom has_size_non_null :
 (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
  (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
   (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
    (forall t_6:Tree pointer.
     ((le_int(offset_min(Tree_t_5_2_alloc_table_at_L, t_6), (0))
      and ge_int(offset_max(Tree_t_5_2_alloc_table_at_L, t_6), (0))) ->
      (forall s1_1:int.
       (forall s2_1:int.
        ((has_size(select(Tree_left_t_5_2_at_L, t_6), s1_1,
          Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
          Tree_left_t_5_2_at_L)
         and has_size(select(Tree_right_t_5_2_at_L, t_6), s2_1,
             Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
             Tree_left_t_5_2_at_L)) ->
         has_size(t_6, add_int(add_int(s1_1, s2_1), (1)),
         Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
         Tree_left_t_5_2_at_L)))))))))

axiom has_size_inversion :
 (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
  (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
   (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
    (forall t_7:Tree pointer.
     (forall s_0_0:int.
      (has_size(t_7, s_0_0, Tree_t_5_2_alloc_table_at_L,
       Tree_right_t_5_2_at_L, Tree_left_t_5_2_at_L) ->
       (((t_7 = null) and (s_0_0 = (0)))
       or (le_int(offset_min(Tree_t_5_2_alloc_table_at_L, t_7), (0))
          and (ge_int(offset_max(Tree_t_5_2_alloc_table_at_L, t_7), (0))
              and (exists s1_0_0:int.
                   (exists s2_0_0:int.
                    (has_size(select(Tree_left_t_5_2_at_L, t_7), s1_0_0,
                     Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                     Tree_left_t_5_2_at_L)
                    and (has_size(select(Tree_right_t_5_2_at_L, t_7), s2_0_0,
                         Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                         Tree_left_t_5_2_at_L)
                        and (le_int((0), s1_0_0)
                            and (le_int((0), s2_0_0)
                                and (s_0_0 = add_int(add_int(s1_0_0, s2_0_0),
                                             (1))))))))))))))))))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter Tree_alloc_table : Tree alloc_table ref

parameter Tree_tag_table : Tree tag_table ref

parameter alloc_struct_Tree :
 n:int ->
  Tree_alloc_table:Tree alloc_table ref ->
   Tree_tag_table:Tree tag_table ref ->
    { } Tree pointer writes Tree_alloc_table,Tree_tag_table
    { (strict_valid_struct_Tree(result, (0), sub_int(n, (1)),
       Tree_alloc_table)
      and (alloc_extends(Tree_alloc_table@, Tree_alloc_table)
          and (alloc_fresh(Tree_alloc_table@, result, n)
              and instanceof(Tree_tag_table, result, Tree_tag)))) }

parameter alloc_struct_Tree_requires :
 n:int ->
  Tree_alloc_table:Tree alloc_table ref ->
   Tree_tag_table:Tree tag_table ref ->
    { ge_int(n, (0))} Tree pointer writes Tree_alloc_table,Tree_tag_table
    { (strict_valid_struct_Tree(result, (0), sub_int(n, (1)),
       Tree_alloc_table)
      and (alloc_extends(Tree_alloc_table@, Tree_alloc_table)
          and (alloc_fresh(Tree_alloc_table@, result, n)
              and instanceof(Tree_tag_table, result, Tree_tag)))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 x_0:int32 ->
  y:int32 ->
   { } int32
   { (JC_7:
     (integer_of_int32(result) = int_max(integer_of_int32(x_0),
                                 integer_of_int32(y)))) }

parameter max_requires :
 x_0:int32 ->
  y:int32 ->
   { } int32
   { (JC_7:
     (integer_of_int32(result) = int_max(integer_of_int32(x_0),
                                 integer_of_int32(y)))) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter tree_max :
 t_0:Tree pointer ->
  Tree_t_6_alloc_table:Tree alloc_table ->
   Tree_right_t_6:(Tree, Tree pointer) memory ->
    Tree_left_t_6:(Tree, Tree pointer) memory ->
     Tree_value_t_6:(Tree, int32) memory ->
      { } int32
      { (JC_24:
        ((JC_22:
         mem(result, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6))
        and (JC_23:
            (forall x_5:int32.
             (mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
              ge_int(integer_of_int32(result), integer_of_int32(x_5))))))) }

parameter tree_max_requires :
 t_0:Tree pointer ->
  Tree_t_6_alloc_table:Tree alloc_table ->
   Tree_right_t_6:(Tree, Tree pointer) memory ->
    Tree_left_t_6:(Tree, Tree pointer) memory ->
     Tree_value_t_6:(Tree, int32) memory ->
      { (JC_13:
        ((JC_11: (t_0 <> null))
        and (JC_12:
            valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
            Tree_left_t_6))))}
      int32
      { (JC_24:
        ((JC_22:
         mem(result, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6))
        and (JC_23:
            (forall x_5:int32.
             (mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
              ge_int(integer_of_int32(result), integer_of_int32(x_5))))))) }

let tree_max_ensures_default =
 fun (t_0 : Tree pointer) (Tree_t_6_alloc_table : Tree alloc_table) (Tree_value_t_6 : (Tree, int32) memory) (Tree_left_t_6 : (Tree, Tree pointer) memory) (Tree_right_t_6 : (Tree, Tree pointer) memory) ->
  { (JC_17:
    ((JC_15: (t_0 <> null))
    and (JC_16:
        valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6, Tree_left_t_6)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let m = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_<num> = (m := (C_2: ((safe_acc_ Tree_value_t_6) t_0))) in
       void);
      (if ((safe_neq_pointer (C_9: ((safe_acc_ Tree_left_t_6) t_0))) null)
      then
       (let jessie_<num> =
       (C_6:
       (C_8:
       begin
         (let jessie_<num> =
         (tmp := (C_5:
                 (let jessie_<num> = (C_4: ((safe_acc_ Tree_left_t_6) t_0)) in
                 (JC_36:
                 (((((tree_max jessie_<num>) Tree_t_6_alloc_table) Tree_right_t_6) Tree_left_t_6) Tree_value_t_6))))) in
         void);
        (m := (C_7:
              (let jessie_<num> = !m in
              (let jessie_<num> = !tmp in (JC_37: ((max jessie_<num>) jessie_<num>))))));
        !m end)) in void) else void);
      (if ((safe_neq_pointer (C_15: ((safe_acc_ Tree_right_t_6) t_0))) null)
      then
       (let jessie_<num> =
       (C_12:
       (C_14:
       begin
         (let jessie_<num> =
         (tmp_0 := (C_11:
                   (let jessie_<num> =
                   (C_10: ((safe_acc_ Tree_right_t_6) t_0)) in
                   (JC_38:
                   (((((tree_max jessie_<num>) Tree_t_6_alloc_table) Tree_right_t_6) Tree_left_t_6) Tree_value_t_6))))) in
         void);
        (m := (C_13:
              (let jessie_<num> = !m in
              (let jessie_<num> = !tmp_0 in
              (JC_39: ((max jessie_<num>) jessie_<num>)))))); !m end)) in void)
      else void); (return := !m); (raise Return) end)))); absurd  end with
   Return -> !return end))
  { (JC_21:
    ((JC_19: mem(result, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6))
    and (JC_20:
        (forall x_5:int32.
         (mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
          ge_int(integer_of_int32(result), integer_of_int32(x_5))))))) }

let tree_max_safety =
 fun (t_0 : Tree pointer) (Tree_t_6_alloc_table : Tree alloc_table) (Tree_value_t_6 : (Tree, int32) memory) (Tree_left_t_6 : (Tree, Tree pointer) memory) (Tree_right_t_6 : (Tree, Tree pointer) memory) ->
  { (JC_17:
    ((JC_15: (t_0 <> null))
    and (JC_16:
        valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6, Tree_left_t_6)))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let m = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_<num> =
       (m := (C_2:
             (JC_27: (((acc_ Tree_t_6_alloc_table) Tree_value_t_6) t_0)))) in
       void);
      (if ((neq_pointer (C_9:
                        (JC_28:
                        (((acc_ Tree_t_6_alloc_table) Tree_left_t_6) t_0)))) null)
      then
       (let jessie_<num> =
       (C_6:
       (C_8:
       begin
         (let jessie_<num> =
         (tmp := (C_5:
                 (let jessie_<num> =
                 (C_4:
                 (JC_29: (((acc_ Tree_t_6_alloc_table) Tree_left_t_6) t_0))) in
                 (JC_30:
                 (((((tree_max_requires jessie_<num>) Tree_t_6_alloc_table) Tree_right_t_6) Tree_left_t_6) Tree_value_t_6))))) in
         void);
        (m := (C_7:
              (let jessie_<num> = !m in
              (let jessie_<num> = !tmp in
              (JC_31: ((max_requires jessie_<num>) jessie_<num>)))))); !m end)) in
       void) else void);
      (if ((neq_pointer (C_15:
                        (JC_32:
                        (((acc_ Tree_t_6_alloc_table) Tree_right_t_6) t_0)))) null)
      then
       (let jessie_<num> =
       (C_12:
       (C_14:
       begin
         (let jessie_<num> =
         (tmp_0 := (C_11:
                   (let jessie_<num> =
                   (C_10:
                   (JC_33:
                   (((acc_ Tree_t_6_alloc_table) Tree_right_t_6) t_0))) in
                   (JC_34:
                   (((((tree_max_requires jessie_<num>) Tree_t_6_alloc_table) Tree_right_t_6) Tree_left_t_6) Tree_value_t_6))))) in
         void);
        (m := (C_13:
              (let jessie_<num> = !m in
              (let jessie_<num> = !tmp_0 in
              (JC_35: ((max_requires jessie_<num>) jessie_<num>)))))); !m end)) in
       void) else void); (return := !m); (raise Return) end)))); absurd  end
   with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/tree_max.why
========== file tests/c/tree_max.jessie/why/tree_max_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type Tree

type charP

type int32

type int8

type padding

type voidP

logic Tree_tag : Tree tag_id

axiom Tree_int: (int_of_tag(Tree_tag) = 1)

logic Tree_of_pointer_address : unit pointer -> Tree pointer

axiom Tree_of_pointer_address_of_pointer_addr:
  (forall p:Tree pointer. (p = Tree_of_pointer_address(pointer_address(p))))

axiom Tree_parenttag_bottom: parenttag(Tree_tag, bottom_tag)

axiom Tree_tags:
  (forall x:Tree pointer.
    (forall Tree_tag_table:Tree tag_table. instanceof(Tree_tag_table, x,
      Tree_tag)))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic has_size : Tree pointer, int, Tree alloc_table, (Tree,
Tree pointer) memory, (Tree, Tree pointer) memory -> prop

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_Tree(p: Tree pointer, a: int,
  Tree_alloc_table: Tree alloc_table) = (offset_min(Tree_alloc_table,
  p) <= a)

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

logic mem : int32, Tree pointer, (Tree, Tree pointer) memory, (Tree,
Tree pointer) memory, (Tree, int32) memory -> prop

axiom pointer_addr_of_Tree_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(Tree_of_pointer_address(p))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_Tree(p: Tree pointer, b: int,
  Tree_alloc_table: Tree alloc_table) = (offset_max(Tree_alloc_table,
  p) >= b)

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate size_decreases(t1: Tree pointer, t2: Tree pointer,
  Tree_t2_4_alloc_table_at_L: Tree alloc_table,
  Tree_t1_3_alloc_table_at_L: Tree alloc_table, Tree_right_t2_4_at_L: (Tree,
  Tree pointer) memory, Tree_right_t1_3_at_L: (Tree, Tree pointer) memory,
  Tree_left_t2_4_at_L: (Tree, Tree pointer) memory,
  Tree_left_t1_3_at_L: (Tree, Tree pointer) memory) =
  (exists s1_1_0:int.
    (exists s2_1_0:int.
      (has_size(t1, s1_1_0, Tree_t1_3_alloc_table_at_L, Tree_right_t1_3_at_L,
       Tree_left_t1_3_at_L) and
       (has_size(t2, s2_1_0, Tree_t2_4_alloc_table_at_L,
        Tree_right_t2_4_at_L, Tree_left_t2_4_at_L) and (s1_1_0 > s2_1_0)))))

predicate strict_valid_root_Tree(p: Tree pointer, a: int, b: int,
  Tree_alloc_table: Tree alloc_table) =
  ((offset_min(Tree_alloc_table, p) = a) and (offset_max(Tree_alloc_table,
   p) = b))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_Tree(p: Tree pointer, a: int, b: int,
  Tree_alloc_table: Tree alloc_table) =
  ((offset_min(Tree_alloc_table, p) = a) and (offset_max(Tree_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_Tree(p: Tree pointer, a: int, b: int,
  Tree_alloc_table: Tree alloc_table) =
  ((offset_min(Tree_alloc_table, p) <= a) and (offset_max(Tree_alloc_table,
   p) >= b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_Tree(p: Tree pointer, a: int, b: int,
  Tree_alloc_table: Tree alloc_table) =
  ((offset_min(Tree_alloc_table, p) <= a) and (offset_max(Tree_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_tree(t_8: Tree pointer,
  Tree_t_8_5_alloc_table_at_L: Tree alloc_table,
  Tree_right_t_8_5_at_L: (Tree, Tree pointer) memory,
  Tree_left_t_8_5_at_L: (Tree, Tree pointer) memory) =
  (exists s_1:int. has_size(t_8, s_1, Tree_t_8_5_alloc_table_at_L,
    Tree_right_t_8_5_at_L, Tree_left_t_8_5_at_L))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom mem_null:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall x_0_0:int32. (not mem(x_0_0, null, Tree_right_t_1_at_L,
          Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))

axiom mem_root:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall t_0_0:Tree pointer.
          ((t_0_0 <> null) -> mem(select(Tree_value_t_1_at_L, t_0_0), t_0_0,
           Tree_right_t_1_at_L, Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))

axiom mem_root_eq:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall x_1_0:int32.
          (forall t_1:Tree pointer.
            ((t_1 <> null) ->
             ((integer_of_int32(x_1_0) = integer_of_int32(select(Tree_value_t_1_at_L,
              t_1))) -> mem(x_1_0, t_1, Tree_right_t_1_at_L,
              Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))))

axiom mem_left:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall x_2:int32.
          (forall t_2:Tree pointer.
            ((t_2 <> null) ->
             (mem(x_2, select(Tree_left_t_1_at_L, t_2), Tree_right_t_1_at_L,
              Tree_left_t_1_at_L, Tree_value_t_1_at_L) -> mem(x_2, t_2,
              Tree_right_t_1_at_L, Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))))

axiom mem_right:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall x_3:int32.
          (forall t_3:Tree pointer.
            ((t_3 <> null) ->
             (mem(x_3, select(Tree_right_t_1_at_L, t_3), Tree_right_t_1_at_L,
              Tree_left_t_1_at_L, Tree_value_t_1_at_L) -> mem(x_3, t_3,
              Tree_right_t_1_at_L, Tree_left_t_1_at_L, Tree_value_t_1_at_L))))))))

axiom mem_inversion:
  (forall Tree_right_t_1_at_L:(Tree, Tree pointer) memory.
    (forall Tree_left_t_1_at_L:(Tree, Tree pointer) memory.
      (forall Tree_value_t_1_at_L:(Tree, int32) memory.
        (forall x_4:int32.
          (forall t_4:Tree pointer.
            (mem(x_4, t_4, Tree_right_t_1_at_L, Tree_left_t_1_at_L,
             Tree_value_t_1_at_L) ->
             ((t_4 <> null) and
              ((integer_of_int32(x_4) = integer_of_int32(select(Tree_value_t_1_at_L,
               t_4))) or
               (mem(x_4, select(Tree_left_t_1_at_L, t_4),
                Tree_right_t_1_at_L, Tree_left_t_1_at_L,
                Tree_value_t_1_at_L) or mem(x_4, select(Tree_right_t_1_at_L,
                t_4), Tree_right_t_1_at_L, Tree_left_t_1_at_L,
                Tree_value_t_1_at_L))))))))))

axiom has_size_null:
  (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
    (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
      (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
        has_size(null, 0, Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
        Tree_left_t_5_2_at_L))))

axiom has_size_non_null:
  (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
    (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
      (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
        (forall t_6:Tree pointer.
          (((offset_min(Tree_t_5_2_alloc_table_at_L, t_6) <= 0) and
            (offset_max(Tree_t_5_2_alloc_table_at_L, t_6) >= 0)) ->
           (forall s1_1:int.
             (forall s2_1:int.
               ((has_size(select(Tree_left_t_5_2_at_L, t_6), s1_1,
                 Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                 Tree_left_t_5_2_at_L) and
                 has_size(select(Tree_right_t_5_2_at_L, t_6), s2_1,
                 Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                 Tree_left_t_5_2_at_L)) ->
                has_size(t_6, ((s1_1 + s2_1) + 1),
                Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                Tree_left_t_5_2_at_L)))))))))

axiom has_size_inversion:
  (forall Tree_t_5_2_alloc_table_at_L:Tree alloc_table.
    (forall Tree_right_t_5_2_at_L:(Tree, Tree pointer) memory.
      (forall Tree_left_t_5_2_at_L:(Tree, Tree pointer) memory.
        (forall t_7:Tree pointer.
          (forall s_0_0:int.
            (has_size(t_7, s_0_0, Tree_t_5_2_alloc_table_at_L,
             Tree_right_t_5_2_at_L, Tree_left_t_5_2_at_L) ->
             (((t_7 = null) and (s_0_0 = 0)) or
              ((offset_min(Tree_t_5_2_alloc_table_at_L, t_7) <= 0) and
               ((offset_max(Tree_t_5_2_alloc_table_at_L, t_7) >= 0) and
                (exists s1_0_0:int.
                  (exists s2_0_0:int.
                    (has_size(select(Tree_left_t_5_2_at_L, t_7), s1_0_0,
                     Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                     Tree_left_t_5_2_at_L) and
                     (has_size(select(Tree_right_t_5_2_at_L, t_7), s2_0_0,
                      Tree_t_5_2_alloc_table_at_L, Tree_right_t_5_2_at_L,
                      Tree_left_t_5_2_at_L) and
                      ((0 <= s1_0_0) and
                       ((0 <= s2_0_0) and (s_0_0 = ((s1_0_0 + s2_0_0) + 1)))))))))))))))))

goal tree_max_ensures_default_po_1:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 <> null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (result4 <> null) ->
  forall result5:Tree pointer.
  (result5 = select(Tree_right_t_6, t_0)) ->
  forall result6:int32.
  ("JC_24":
  (("JC_22": mem(result6, result5, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result5, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result6) >= integer_of_int32(x_5))))))) ->
  forall tmp_0:int32.
  (tmp_0 = result6) ->
  forall result7:int32.
  ("JC_7": (integer_of_int32(result7) = int_max(integer_of_int32(m0),
  integer_of_int32(tmp_0)))) ->
  forall m1:int32.
  (m1 = result7) ->
  forall return:int32.
  (return = m1) ->
  ("JC_21":
  ("JC_19": mem(return, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6)))

goal tree_max_ensures_default_po_2:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 <> null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (result4 <> null) ->
  forall result5:Tree pointer.
  (result5 = select(Tree_right_t_6, t_0)) ->
  forall result6:int32.
  ("JC_24":
  (("JC_22": mem(result6, result5, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result5, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result6) >= integer_of_int32(x_5))))))) ->
  forall tmp_0:int32.
  (tmp_0 = result6) ->
  forall result7:int32.
  ("JC_7": (integer_of_int32(result7) = int_max(integer_of_int32(m0),
  integer_of_int32(tmp_0)))) ->
  forall m1:int32.
  (m1 = result7) ->
  forall return:int32.
  (return = m1) ->
  forall x_5:int32.
  mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
  ("JC_21": ("JC_20": (integer_of_int32(return) >= integer_of_int32(x_5))))

goal tree_max_ensures_default_po_3:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 <> null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (result4 = null) ->
  forall return:int32.
  (return = m0) ->
  ("JC_21":
  ("JC_19": mem(return, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6)))

goal tree_max_ensures_default_po_4:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 <> null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (result4 = null) ->
  forall return:int32.
  (return = m0) ->
  forall x_5:int32.
  mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
  ("JC_21": ("JC_20": (integer_of_int32(return) >= integer_of_int32(x_5))))

goal tree_max_ensures_default_po_5:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 = null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (result1 <> null) ->
  forall result2:Tree pointer.
  (result2 = select(Tree_right_t_6, t_0)) ->
  forall result3:int32.
  ("JC_24":
  (("JC_22": mem(result3, result2, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result2, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result3) >= integer_of_int32(x_5))))))) ->
  forall tmp_0:int32.
  (tmp_0 = result3) ->
  forall result4:int32.
  ("JC_7": (integer_of_int32(result4) = int_max(integer_of_int32(m),
  integer_of_int32(tmp_0)))) ->
  forall m0:int32.
  (m0 = result4) ->
  forall return:int32.
  (return = m0) ->
  ("JC_21":
  ("JC_19": mem(return, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6)))

goal tree_max_ensures_default_po_6:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 = null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (result1 <> null) ->
  forall result2:Tree pointer.
  (result2 = select(Tree_right_t_6, t_0)) ->
  forall result3:int32.
  ("JC_24":
  (("JC_22": mem(result3, result2, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result2, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result3) >= integer_of_int32(x_5))))))) ->
  forall tmp_0:int32.
  (tmp_0 = result3) ->
  forall result4:int32.
  ("JC_7": (integer_of_int32(result4) = int_max(integer_of_int32(m),
  integer_of_int32(tmp_0)))) ->
  forall m0:int32.
  (m0 = result4) ->
  forall return:int32.
  (return = m0) ->
  forall x_5:int32.
  mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
  ("JC_21": ("JC_20": (integer_of_int32(return) >= integer_of_int32(x_5))))

goal tree_max_ensures_default_po_7:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 = null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (result1 = null) ->
  forall return:int32.
  (return = m) ->
  ("JC_21":
  ("JC_19": mem(return, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6)))

goal tree_max_ensures_default_po_8:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (result0 = null) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (result1 = null) ->
  forall return:int32.
  (return = m) ->
  forall x_5:int32.
  mem(x_5, t_0, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
  ("JC_21": ("JC_20": (integer_of_int32(return) >= integer_of_int32(x_5))))

goal tree_max_safety_po_1:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  (offset_min(Tree_t_6_alloc_table, t_0) <= 0)

goal tree_max_safety_po_2:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  (0 <= offset_max(Tree_t_6_alloc_table, t_0))

goal tree_max_safety_po_3:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null)))

goal tree_max_safety_po_4:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  ("JC_13": ("JC_11": (result1 <> null)))

goal tree_max_safety_po_5:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  ("JC_13":
  ("JC_12": valid_tree(result1, Tree_t_6_alloc_table, Tree_right_t_6,
  Tree_left_t_6)))

goal tree_max_safety_po_6:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  ("JC_13":
  (("JC_11": (result1 <> null)) and
   ("JC_12": valid_tree(result1, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (same_block(result4, null) or ((result4 = null) or (null = null)))

goal tree_max_safety_po_7:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  ("JC_13":
  (("JC_11": (result1 <> null)) and
   ("JC_12": valid_tree(result1, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (same_block(result4, null) or ((result4 = null) or (null = null))) ->
  (result4 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result5:Tree pointer.
  (result5 = select(Tree_right_t_6, t_0)) ->
  ("JC_13": ("JC_11": (result5 <> null)))

goal tree_max_safety_po_8:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_left_t_6, t_0)) ->
  ("JC_13":
  (("JC_11": (result1 <> null)) and
   ("JC_12": valid_tree(result1, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  forall result2:int32.
  ("JC_24":
  (("JC_22": mem(result2, result1, Tree_right_t_6, Tree_left_t_6,
   Tree_value_t_6)) and
   ("JC_23":
   (forall x_5:int32.
     (mem(x_5, result1, Tree_right_t_6, Tree_left_t_6, Tree_value_t_6) ->
      (integer_of_int32(result2) >= integer_of_int32(x_5))))))) ->
  forall tmp:int32.
  (tmp = result2) ->
  forall result3:int32.
  ("JC_7": (integer_of_int32(result3) = int_max(integer_of_int32(m),
  integer_of_int32(tmp)))) ->
  forall m0:int32.
  (m0 = result3) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result4:Tree pointer.
  (result4 = select(Tree_right_t_6, t_0)) ->
  (same_block(result4, null) or ((result4 = null) or (null = null))) ->
  (result4 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result5:Tree pointer.
  (result5 = select(Tree_right_t_6, t_0)) ->
  ("JC_13":
  ("JC_12": valid_tree(result5, Tree_t_6_alloc_table, Tree_right_t_6,
  Tree_left_t_6)))

goal tree_max_safety_po_9:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 = null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (same_block(result1, null) or ((result1 = null) or (null = null)))

goal tree_max_safety_po_10:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 = null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (same_block(result1, null) or ((result1 = null) or (null = null))) ->
  (result1 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result2:Tree pointer.
  (result2 = select(Tree_right_t_6, t_0)) ->
  ("JC_13": ("JC_11": (result2 <> null)))

goal tree_max_safety_po_11:
  forall t_0:Tree pointer.
  forall Tree_t_6_alloc_table:Tree alloc_table.
  forall Tree_value_t_6:(Tree, int32) memory.
  forall Tree_left_t_6:(Tree,
  Tree pointer) memory.
  forall Tree_right_t_6:(Tree,
  Tree pointer) memory.
  ("JC_17":
  (("JC_15": (t_0 <> null)) and
   ("JC_16": valid_tree(t_0, Tree_t_6_alloc_table, Tree_right_t_6,
   Tree_left_t_6)))) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result:int32.
  (result = select(Tree_value_t_6, t_0)) ->
  forall m:int32.
  (m = result) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result0:Tree pointer.
  (result0 = select(Tree_left_t_6, t_0)) ->
  (same_block(result0, null) or ((result0 = null) or (null = null))) ->
  (result0 = null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result1:Tree pointer.
  (result1 = select(Tree_right_t_6, t_0)) ->
  (same_block(result1, null) or ((result1 = null) or (null = null))) ->
  (result1 <> null) ->
  ((offset_min(Tree_t_6_alloc_table, t_0) <= 0) and
   (0 <= offset_max(Tree_t_6_alloc_table, t_0))) ->
  forall result2:Tree pointer.
  (result2 = select(Tree_right_t_6, t_0)) ->
  ("JC_13":
  ("JC_12": valid_tree(result2, Tree_t_6_alloc_table, Tree_right_t_6,
  Tree_left_t_6)))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/tree_max_why.why          : .#.#.#.#........... (15/0/0/4/0)
total   :  19
valid   :  15 ( 79%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   4 ( 21%)
failure :   0 (  0%)
