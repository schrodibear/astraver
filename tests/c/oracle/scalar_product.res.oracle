========== file tests/c/scalar_product.c ==========

// for N = 10
#define NMAX 10
#define NMAXR 10.0
#define B 0x1.1p-50

// for N = 100
// #define NMAX 100
// #define NMAXR 100.0
// #define B 0x1.02p-47


// for N = 1000
// #define NMAX 1000
// #define NMAXR 1000.0
// #define B 0x1.004p-44


/*@ axiomatic ScalarProduct {
  @   // exact_scalar_product(x,y,n) = x[0]*y[0] + ... + x[n-1] * y[n-1]
  @   logic real exact_scalar_product{L}(double *x, double *y, integer n)
  @       reads x[..], y[..];
  @   axiom A1{L}: \forall double *x,*y;
  @      exact_scalar_product(x,y,0) == 0.0;
  @   axiom A2{L}: \forall double *x,*y; \forall integer n ;
  @      n >= 0 ==>
  @        exact_scalar_product(x,y,n+1) == 
  @          exact_scalar_product(x,y,n) + x[n]*y[n];
  @ }
  @*/


/*@ lemma bound_int_to_real:
  @   \forall integer i; i <= NMAX ==> i <= NMAXR;
  @*/


/*@ requires 0 <= n <= NMAX;
  @ requires \valid_range(x,0,n-1) && \valid_range(y,0,n-1) ;
  @ requires \forall integer i; 0 <= i < n ==>
  @          \abs(x[i]) <= 1.0 && \abs(y[i]) <= 1.0 ;
  @ ensures
  @    \abs(\result - exact_scalar_product(x,y,n)) <= n * B;
  @*/
double scalar_product(double x[], double y[], int n) {
  double p = 0.0;
  /*@ loop invariant 0 <= i <= n ;
    @ loop invariant \abs(exact_scalar_product(x,y,i)) <= i;
    @ loop invariant \abs(p - exact_scalar_product(x,y,i)) <= i * B;
    @ loop variant n-i;
    @*/
  for (int i=0; i < n; i++) {
    // bounds, needed by Gappa
    //@ assert \abs(x[i]) <= 1.0;
    //@ assert \abs(y[i]) <= 1.0;
    //@ assert \abs(p) <= NMAXR*(1+B) ;

  L:
    p = p + x[i]*y[i];

    // bound on the rounding errors in the statement above, proved by gappa
    /*@ assert \abs(p - (\at(p,L) + x[i]*y[i])) <= B;
     */

    // the proper instance of triangular inequality to show the main invariant
    /*@ assert
          \abs(p - exact_scalar_product(x,y,i+1)) <=
          \abs(p - (\at(p,L) + x[i]*y[i])) +
          \abs((\at(p,L) + x[i]*y[i]) -
               (exact_scalar_product(x,y,i) + x[i]*y[i])) ;
    */

    // a lemma to show the invariant \abs(exact_scalar_product(x,y,i)) <= i
    /*@ assert
      \abs(exact_scalar_product(x,y,i+1)) <=
         \abs(exact_scalar_product(x,y,i)) + \abs(x[i]) * \abs(y[i]);
    */

    // a necessary lemma, proved only by gappa
    //@ assert \abs(x[i]) * \abs(y[i]) <= 1.0;
  }
  return p;
}



/*
Local Variables:
compile-command: "make clock_drift.why3ml"
End:
*/


========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/scalar_product.c"
tests/c/scalar_product.c:39:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
tests/c/scalar_product.c:39:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/scalar_product.jessie
[jessie] File tests/c/scalar_product.jessie/scalar_product.jc written.
[jessie] File tests/c/scalar_product.jessie/scalar_product.cloc written.
========== file tests/c/scalar_product.jessie/scalar_product.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag doubleP = {
  double doubleM: 64;
}

type doubleP = [doubleP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

axiomatic ScalarProduct {

  logic real exact_scalar_product{L}(doubleP[..] x, doubleP[..] y, integer n)
  reads (x + [..]).doubleM, (y + [..]).doubleM;
   
  axiom A1{L} :
  (\forall doubleP[..] x_0;
    (\forall doubleP[..] y_0;
      (exact_scalar_product{L}(x_0, y_0, 0) == 0.0)))
   
  axiom A2{L} :
  (\forall doubleP[..] x_1;
    (\forall doubleP[..] y_1;
      (\forall integer n_0;
        ((n_0 >= 0) ==>
          (exact_scalar_product{L}(x_1, y_1, (n_0 + 1)) ==
            (exact_scalar_product{L}(x_1, y_1, n_0) +
              (((x_1 + n_0).doubleM :> real) * ((y_1 + n_0).doubleM :> real))))))))
  
}

lemma bound_int_to_real :
(\forall integer i_1;
  ((i_1 <= 10) ==> (i_1 <= 10.0)))

double scalar_product(doubleP[..] x, doubleP[..] y, int32 n_1)
  requires (C_35 : ((C_36 : (0 <= n_1)) && (C_37 : (n_1 <= 10))));
  requires (C_28 : (((C_30 : (\offset_min(x) <= 0)) &&
                      (C_31 : (\offset_max(x) >= (n_1 - 1)))) &&
                     ((C_33 : (\offset_min(y) <= 0)) &&
                       (C_34 : (\offset_max(y) >= (n_1 - 1))))));
  requires (C_27 : (\forall integer i_2;
                     (((0 <= i_2) && (i_2 < n_1)) ==>
                       ((\real_abs(((x + i_2).doubleM :> real)) <= 1.0) &&
                         (\real_abs(((y + i_2).doubleM :> real)) <= 1.0)))));
behavior default:
  ensures (C_26 : (\real_abs(((\result :> real) -
                               exact_scalar_product{Here}(\at(x,Old),
                                                          \at(y,Old),
                                                          \at(n_1,Old)))) <=
                    (\at(n_1,Old) * 0x1.1p-50)));
{  
   (var double p);
   
   (var int32 i);
   
   {  (C_1 : (p = (0.0 :> double)));
      
      {  (C_2 : (i = 0));
         
         loop 
         behavior default:
           invariant (C_6 : ((C_7 : (0 <= i)) && (C_8 : (i <= n_1))));
         behavior default:
           invariant (C_5 : (\real_abs(exact_scalar_product{Here}(x, y, i)) <=
                              i));
         behavior default:
           invariant (C_4 : (\real_abs(((p :> real) -
                                         exact_scalar_product{Here}(x, y, i))) <=
                              (i * 0x1.1p-50)));
         variant (C_3 : (n_1 - i));
         while (true)
         {  
            {  (if (i < n_1) then () else 
               (goto while_0_break));
               
               {  
                  {  
                     (assert for default: (C_9 : (\real_abs(((x + i).doubleM :> real)) <=
                                                   1.0)));
                     ()
                  };
                  
                  {  
                     (assert for default: (C_10 : (\real_abs(((y + i).doubleM :> real)) <=
                                                    1.0)));
                     ()
                  };
                  
                  {  
                     (assert for default: (C_11 : (\real_abs((p :> real)) <=
                                                    (10.0 * (1 + 0x1.1p-50)))));
                     ()
                  };
                  (L : (C_18 : (p = (C_17 : (p +
                                              (C_16 : ((C_15 : (C_14 : 
                                                               (x +
                                                                 i)).doubleM) *
                                                        (C_13 : (C_12 : 
                                                                (y +
                                                                  i)).doubleM))))))));
                  
                  {  
                     (assert for default: (C_19 : (\real_abs(((p :> real) -
                                                               ((\at(p,L) :> real) +
                                                                 (((x + i).doubleM :> real) *
                                                                   ((y + i).doubleM :> real))))) <=
                                                    0x1.1p-50)));
                     ()
                  };
                  
                  {  
                     (assert for default: (C_20 : (\real_abs(((p :> real) -
                                                               exact_scalar_product{Here}(
                                                               x, y, 
                                                               (i + 1)))) <=
                                                    (\real_abs(((p :> real) -
                                                                 ((\at(p,L) :> real) +
                                                                   (((x + i).doubleM :> real) *
                                                                    ((y + i).doubleM :> real))))) +
                                                      \real_abs((((\at(p,L) :> real) +
                                                                   (((x + i).doubleM :> real) *
                                                                    ((y + i).doubleM :> real))) -
                                                                  (exact_scalar_product{Here}(
                                                                    x, y, i) +
                                                                    (((x + i).doubleM :> real) *
                                                                    ((y + i).doubleM :> real)))))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (C_21 : (\real_abs(exact_scalar_product{Here}(
                                                             x, y, (i + 1))) <=
                                                    (\real_abs(exact_scalar_product{Here}(
                                                               x, y, i)) +
                                                      (\real_abs(((x + i).doubleM :> real)) *
                                                        \real_abs(((y + i).doubleM :> real)))))));
                     ()
                  };
                  
                  {  
                     (assert for default: (C_22 : ((\real_abs(((x + i).doubleM :> real)) *
                                                     \real_abs(((y + i).doubleM :> real))) <=
                                                    1.0)));
                     ()
                  }
               };
               (C_25 : (i = (C_24 : ((C_23 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return p)
   }
}
========== file tests/c/scalar_product.jessie/scalar_product.cloc ==========
[bound_int_to_real]
name = "Lemma bound_int_to_real"
file = "HOME/tests/c/scalar_product.c"
line = 33
begin = 4
end = 76

[A1]
name = "Lemma A1"
file = "HOME/tests/c/scalar_product.c"
line = 23
begin = 6
end = 85

[A2]
name = "Lemma A2"
file = "HOME/tests/c/scalar_product.c"
line = 25
begin = 6
end = 178

[C_10]
file = "HOME/tests/c/scalar_product.c"
line = 55
begin = 15
end = 32

[C_11]
file = "HOME/tests/c/scalar_product.c"
line = 56
begin = 15
end = 44

[C_12]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 17
end = 18

[C_13]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 17
end = 21

[C_14]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 13

[C_15]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 16

[C_16]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 21

[C_17]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 8
end = 21

[C_18]
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 8
end = 21

[C_19]
file = "HOME/tests/c/scalar_product.c"
line = 62
begin = 15
end = 60

[C_1]
file = "HOME/tests/c/scalar_product.c"
line = 46
begin = 2
end = 8

[C_2]
file = "HOME/tests/c/scalar_product.c"
line = 52
begin = 7
end = 10

[C_3]
file = "HOME/tests/c/scalar_product.c"
line = 50
begin = 19
end = 22

[C_4]
file = "HOME/tests/c/scalar_product.c"
line = 49
begin = 21
end = 75

[C_20]
file = "HOME/tests/c/scalar_product.c"
line = 67
begin = 10
end = 195

[C_5]
file = "HOME/tests/c/scalar_product.c"
line = 48
begin = 21
end = 59

[C_21]
file = "HOME/tests/c/scalar_product.c"
line = 75
begin = 6
end = 113

[C_6]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 32

[C_22]
file = "HOME/tests/c/scalar_product.c"
line = 80
begin = 15
end = 45

[C_7]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 27

[C_23]
file = "HOME/tests/c/scalar_product.c"
line = 52
begin = 23
end = 26

[C_8]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 26
end = 32

[C_24]
file = "HOME/tests/c/scalar_product.c"
line = 52
begin = 23
end = 26

[C_9]
file = "HOME/tests/c/scalar_product.c"
line = 54
begin = 15
end = 32

[C_25]
file = "HOME/tests/c/scalar_product.c"
line = 52
begin = 23
end = 26

[C_26]
file = "HOME/tests/c/scalar_product.c"
line = 43
begin = 7
end = 67

[C_27]
file = "HOME/tests/c/scalar_product.c"
line = 40
begin = 13
end = 98

[C_28]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 59

[C_29]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[C_30]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[C_31]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[C_32]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[C_33]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[C_34]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[C_35]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 13
end = 25

[C_36]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 13
end = 19

[C_37]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 18
end = 25

[scalar_product]
name = "Function scalar_product"
file = "HOME/tests/c/scalar_product.c"
line = 45
begin = 7
end = 21

========== jessie execution ==========
Generating Why function scalar_product
========== file tests/c/scalar_product.jessie/scalar_product.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs scalar_product.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs scalar_product.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why $(WHYLIB)/why/floats_strict.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/scalar_product_why.sx

project: why/scalar_product.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/scalar_product_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/scalar_product_why.vo

coq/scalar_product_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/scalar_product_why.v: why/scalar_product.why
	@echo 'why -coq [...] why/scalar_product.why' && $(WHY) $(JESSIELIBFILES) why/scalar_product.why && rm -f coq/jessie_why.v

coq-goals: goals coq/scalar_product_ctx_why.vo
	for f in why/*_po*.why; do make -f scalar_product.makefile coq/`basename $$f .why`_why.v ; done

coq/scalar_product_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/scalar_product_ctx_why.v: why/scalar_product_ctx.why
	@echo 'why -coq [...] why/scalar_product_ctx.why' && $(WHY) why/scalar_product_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export scalar_product_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/scalar_product_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/scalar_product_ctx_why.vo

pvs: pvs/scalar_product_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/scalar_product_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/scalar_product_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/scalar_product_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/scalar_product_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/scalar_product_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/scalar_product_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/scalar_product_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/scalar_product_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/scalar_product_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/scalar_product_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/scalar_product_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/scalar_product_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/scalar_product_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/scalar_product_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: scalar_product.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/scalar_product_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/scalar_product_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: scalar_product.mlw
	@echo 'why3ml [...] $<' && why3ide --extra-config $(JESSIE3CONF) $<

-include scalar_product.depend

depend: coq/scalar_product_why.v
	-$(COQDEP) -I coq coq/scalar_product*_why.v > scalar_product.depend

clean:
	rm -f coq/*.vo

========== file tests/c/scalar_product.jessie/scalar_product.loc ==========
[JC_40]
file = "HOME/tests/c/scalar_product.c"
line = 75
begin = 6
end = 113

[JC_41]
file = "HOME/tests/c/scalar_product.c"
line = 80
begin = 15
end = 45

[JC_42]
kind = ArithOverflow
file = "HOME/tests/c/scalar_product.c"
line = 52
begin = 23
end = 26

[bound_int_to_real]
name = "Lemma bound_int_to_real"
behavior = "lemma"
file = "HOME/tests/c/scalar_product.c"
line = 33
begin = 4
end = 76

[JC_43]
file = "HOME/tests/c/scalar_product.c"
line = 50
begin = 19
end = 22

[JC_44]
file = "HOME/tests/c/scalar_product.c"
line = 49
begin = 21
end = 75

[JC_45]
file = "HOME/tests/c/scalar_product.c"
line = 48
begin = 21
end = 59

[JC_46]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 27

[JC_1]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 13
end = 19

[JC_47]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 26
end = 32

[JC_2]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 18
end = 25

[JC_48]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 32

[JC_3]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[JC_5]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[JC_6]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[JC_7]
file = "HOME/tests/c/scalar_product.c"
line = 40
begin = 13
end = 98

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[scalar_product_safety]
name = "Function scalar_product"
behavior = "Safety"
file = "HOME/tests/c/scalar_product.c"
line = 45
begin = 7
end = 21

[JC_50]
file = "HOME/tests/c/scalar_product.jessie/scalar_product.jc"
line = 92
begin = 9
end = 4824

[A1]
name = "Lemma A1"
behavior = "axiom"
file = "HOME/tests/c/scalar_product.c"
line = 23
begin = 6
end = 85

[JC_51]
file = "HOME/tests/c/scalar_product.jessie/scalar_product.jc"
line = 92
begin = 9
end = 4824

[A2]
name = "Lemma A2"
behavior = "axiom"
file = "HOME/tests/c/scalar_product.c"
line = 25
begin = 6
end = 178

[JC_52]
file = "HOME/tests/c/scalar_product.c"
line = 54
begin = 15
end = 32

[JC_53]
file = "HOME/tests/c/scalar_product.c"
line = 55
begin = 15
end = 32

[JC_54]
file = "HOME/tests/c/scalar_product.c"
line = 56
begin = 15
end = 44

[JC_55]
kind = FPOverflow
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 21

[JC_56]
kind = FPOverflow
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 8
end = 21

[JC_57]
file = "HOME/tests/c/scalar_product.c"
line = 62
begin = 15
end = 60

[JC_58]
file = "HOME/tests/c/scalar_product.c"
line = 67
begin = 10
end = 195

[JC_59]
file = "HOME/tests/c/scalar_product.c"
line = 75
begin = 6
end = 113

[JC_60]
file = "HOME/tests/c/scalar_product.c"
line = 80
begin = 15
end = 45

[JC_10]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 13
end = 19

[JC_11]
file = "HOME/tests/c/scalar_product.c"
line = 38
begin = 18
end = 25

[JC_12]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[JC_13]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 13
end = 34

[JC_14]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[JC_15]
file = "HOME/tests/c/scalar_product.c"
line = 39
begin = 38
end = 59

[JC_16]
file = "HOME/tests/c/scalar_product.c"
line = 40
begin = 13
end = 98

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/scalar_product.c"
line = 43
begin = 7
end = 67

[JC_20]
file = "HOME/tests/c/scalar_product.c"
line = 43
begin = 7
end = 67

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/c/scalar_product.c"
line = 49
begin = 21
end = 75

[JC_24]
file = "HOME/tests/c/scalar_product.c"
line = 48
begin = 21
end = 59

[JC_25]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 27

[JC_26]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 26
end = 32

[JC_27]
file = "HOME/tests/c/scalar_product.c"
line = 47
begin = 21
end = 32

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/tests/c/scalar_product.jessie/scalar_product.jc"
line = 92
begin = 9
end = 4824

[scalar_product_ensures_default]
name = "Function scalar_product"
behavior = "default behavior"
file = "HOME/tests/c/scalar_product.c"
line = 45
begin = 7
end = 21

[JC_30]
file = "HOME/tests/c/scalar_product.jessie/scalar_product.jc"
line = 92
begin = 9
end = 4824

[JC_31]
file = "HOME/tests/c/scalar_product.c"
line = 54
begin = 15
end = 32

[JC_32]
file = "HOME/tests/c/scalar_product.c"
line = 55
begin = 15
end = 32

[JC_33]
file = "HOME/tests/c/scalar_product.c"
line = 56
begin = 15
end = 44

[JC_34]
kind = PointerDeref
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 16

[JC_35]
kind = PointerDeref
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 17
end = 21

[JC_36]
kind = FPOverflow
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 12
end = 21

[JC_37]
kind = FPOverflow
file = "HOME/tests/c/scalar_product.c"
line = 59
begin = 8
end = 21

[JC_38]
file = "HOME/tests/c/scalar_product.c"
line = 62
begin = 15
end = 60

[JC_39]
file = "HOME/tests/c/scalar_product.c"
line = 67
begin = 10
end = 195

========== file tests/c/scalar_product.jessie/why/scalar_product.why ==========
type charP

type doubleP

type int32

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic doubleP_tag:  -> doubleP tag_id

axiom doubleP_int : (int_of_tag(doubleP_tag) = (1))

logic doubleP_of_pointer_address: unit pointer -> doubleP pointer

axiom doubleP_of_pointer_address_of_pointer_addr :
 (forall p:doubleP pointer.
  (p = doubleP_of_pointer_address(pointer_address(p))))

axiom doubleP_parenttag_bottom : parenttag(doubleP_tag, bottom_tag)

axiom doubleP_tags :
 (forall x:doubleP pointer.
  (forall doubleP_tag_table:doubleP tag_table.
   instanceof(doubleP_tag_table, x, doubleP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic exact_scalar_product: doubleP pointer, doubleP pointer, int,
 (doubleP, double) memory, (doubleP, double) memory -> real

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_doubleP(p:doubleP pointer, a:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_min(doubleP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom no_assign_exact_scalar_product_0 :
 (forall tmp:doubleP pset.
  (forall tmpmem:(doubleP, double) memory.
   (forall tmpalloc:doubleP alloc_table.
    (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
     (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
      (forall n:int.
       (forall y:doubleP pointer.
        (forall x_0:doubleP pointer.
         ((pset_disjoint(tmp, pset_all(pset_singleton(y)))
          and not_assigns(tmpalloc, doubleP_doubleM_y_2_at_L, tmpmem, tmp)) ->
          (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
           doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                                       tmpmem, doubleP_doubleM_x_1_at_L)))))))))))

axiom no_assign_exact_scalar_product_1 :
 (forall tmp:doubleP pset.
  (forall tmpmem:(doubleP, double) memory.
   (forall tmpalloc:doubleP alloc_table.
    (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
     (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
      (forall n:int.
       (forall y:doubleP pointer.
        (forall x_0:doubleP pointer.
         ((pset_disjoint(tmp, pset_all(pset_singleton(x_0)))
          and not_assigns(tmpalloc, doubleP_doubleM_x_1_at_L, tmpmem, tmp)) ->
          (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
           doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                                       doubleP_doubleM_y_2_at_L, tmpmem)))))))))))

axiom no_update_exact_scalar_product_0 :
 (forall tmp:doubleP pointer.
  (forall tmpval:double.
   (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
    (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
     (forall n:int.
      (forall y:doubleP pointer.
       (forall x_0:doubleP pointer.
        ((not in_pset(tmp, pset_all(pset_singleton(y)))) ->
         (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
          doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                                      store(doubleP_doubleM_y_2_at_L, tmp,
                                      tmpval), doubleP_doubleM_x_1_at_L))))))))))

axiom no_update_exact_scalar_product_1 :
 (forall tmp:doubleP pointer.
  (forall tmpval:double.
   (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
    (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
     (forall n:int.
      (forall y:doubleP pointer.
       (forall x_0:doubleP pointer.
        ((not in_pset(tmp, pset_all(pset_singleton(x_0)))) ->
         (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
          doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                                      doubleP_doubleM_y_2_at_L,
                                      store(doubleP_doubleM_x_1_at_L, tmp,
                                      tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_doubleP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(doubleP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_doubleP(p:doubleP pointer, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 (offset_max(doubleP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) = a)
 and (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_doubleP(p:doubleP pointer, a:int, b:int,
 doubleP_alloc_table:doubleP alloc_table) =
 ((offset_min(doubleP_alloc_table, p) <= a)
 and (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom A1 :
 (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
  (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
   (forall x_0_0:doubleP pointer.
    (forall y_0_0:doubleP pointer.
     (exact_scalar_product(x_0_0, y_0_0, (0), doubleP_doubleM_y_2_at_L,
      doubleP_doubleM_x_1_at_L) = 0.0)))))

axiom A2 :
 (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
  (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
   (forall x_1_0:doubleP pointer.
    (forall y_1:doubleP pointer.
     (forall n_0:int.
      (ge_int(n_0, (0)) ->
       (exact_scalar_product(x_1_0, y_1, add_int(n_0, (1)),
        doubleP_doubleM_y_2_at_L, doubleP_doubleM_x_1_at_L) = add_real(
                                                              exact_scalar_product(x_1_0,
                                                              y_1, n_0,
                                                              doubleP_doubleM_y_2_at_L,
                                                              doubleP_doubleM_x_1_at_L),
                                                              mul_real(
                                                              double_value(
                                                              select(doubleP_doubleM_x_1_at_L,
                                                              shift(x_1_0,
                                                              n_0))),
                                                              double_value(
                                                              select(doubleP_doubleM_y_2_at_L,
                                                              shift(y_1, n_0))))))))))))

lemma bound_int_to_real :
 (forall i_1:int. (le_int(i_1, (10)) -> le_real(real_of_int(i_1), 10.0)))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter doubleP_alloc_table : doubleP alloc_table ref

parameter doubleP_tag_table : doubleP tag_table ref

parameter alloc_struct_doubleP :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { } doubleP pointer writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter alloc_struct_doubleP_requires :
 n:int ->
  doubleP_alloc_table:doubleP alloc_table ref ->
   doubleP_tag_table:doubleP tag_table ref ->
    { ge_int(n, (0))} doubleP pointer
    writes doubleP_alloc_table,doubleP_tag_table
    { (strict_valid_struct_doubleP(result, (0), sub_int(n, (1)),
       doubleP_alloc_table)
      and (alloc_extends(doubleP_alloc_table@, doubleP_alloc_table)
          and (alloc_fresh(doubleP_alloc_table@, result, n)
              and instanceof(doubleP_tag_table, result, doubleP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter scalar_product :
 x_1:doubleP pointer ->
  y_0:doubleP pointer ->
   n_1:int32 ->
    doubleP_y_4_alloc_table:doubleP alloc_table ->
     doubleP_x_3_alloc_table:doubleP alloc_table ->
      doubleP_doubleM_y_4:(doubleP, double) memory ->
       doubleP_doubleM_x_3:(doubleP, double) memory ->
        { } double
        { (JC_20:
          le_real(abs_real(sub_real(double_value(result),
                           exact_scalar_product(x_1, y_0,
                           integer_of_int32(n_1), doubleP_doubleM_y_4,
                           doubleP_doubleM_x_3))),
          mul_real(real_of_int(integer_of_int32(n_1)), 0x1.1p-50))) }

parameter scalar_product_requires :
 x_1:doubleP pointer ->
  y_0:doubleP pointer ->
   n_1:int32 ->
    doubleP_y_4_alloc_table:doubleP alloc_table ->
     doubleP_x_3_alloc_table:doubleP alloc_table ->
      doubleP_doubleM_y_4:(doubleP, double) memory ->
       doubleP_doubleM_x_3:(doubleP, double) memory ->
        { (JC_8:
          ((JC_1: le_int((0), integer_of_int32(n_1)))
          and ((JC_2: le_int(integer_of_int32(n_1), (10)))
              and ((JC_3:
                   le_int(offset_min(doubleP_x_3_alloc_table, x_1), (0)))
                  and ((JC_4:
                       ge_int(offset_max(doubleP_x_3_alloc_table, x_1),
                       sub_int(integer_of_int32(n_1), (1))))
                      and ((JC_5:
                           le_int(offset_min(doubleP_y_4_alloc_table, y_0),
                           (0)))
                          and ((JC_6:
                               ge_int(offset_max(doubleP_y_4_alloc_table,
                                      y_0),
                               sub_int(integer_of_int32(n_1), (1))))
                              and (JC_7:
                                  (forall i_2:int.
                                   ((le_int((0), i_2)
                                    and lt_int(i_2, integer_of_int32(n_1))) ->
                                    (le_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                                   shift(x_1,
                                                                   i_2)))),
                                     1.0)
                                    and le_real(abs_real(double_value(
                                                         select(doubleP_doubleM_y_4,
                                                         shift(y_0, i_2)))),
                                        1.0))))))))))))}
        double
        { (JC_20:
          le_real(abs_real(sub_real(double_value(result),
                           exact_scalar_product(x_1, y_0,
                           integer_of_int32(n_1), doubleP_doubleM_y_4,
                           doubleP_doubleM_x_3))),
          mul_real(real_of_int(integer_of_int32(n_1)), 0x1.1p-50))) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let scalar_product_ensures_default =
 fun (x_1 : doubleP pointer) (y_0 : doubleP pointer) (n_1 : int32) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (JC_17:
    ((JC_10: le_int((0), integer_of_int32(n_1)))
    and ((JC_11: le_int(integer_of_int32(n_1), (10)))
        and ((JC_12: le_int(offset_min(doubleP_x_3_alloc_table, x_1), (0)))
            and ((JC_13:
                 ge_int(offset_max(doubleP_x_3_alloc_table, x_1),
                 sub_int(integer_of_int32(n_1), (1))))
                and ((JC_14:
                     le_int(offset_min(doubleP_y_4_alloc_table, y_0), (0)))
                    and ((JC_15:
                         ge_int(offset_max(doubleP_y_4_alloc_table, y_0),
                         sub_int(integer_of_int32(n_1), (1))))
                        and (JC_16:
                            (forall i_2:int.
                             ((le_int((0), i_2)
                              and lt_int(i_2, integer_of_int32(n_1))) ->
                              (le_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                             shift(x_1, i_2)))),
                               1.0)
                              and le_real(abs_real(double_value(select(doubleP_doubleM_y_4,
                                                                shift(y_0,
                                                                i_2)))),
                                  1.0)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let p = ref (any_double void) in
     (let i = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_<num> = (p := (double_of_real_exact 0.0)) in void);
      try
       (C_2:
       begin
         (let jessie_<num> = (i := (safe_int32_of_integer_ (0))) in void);
        (loop_2:
        while true do
        { invariant
            ((JC_44:
             le_real(abs_real(sub_real(double_value(p),
                              exact_scalar_product(x_1, y_0,
                              integer_of_int32(i), doubleP_doubleM_y_4,
                              doubleP_doubleM_x_3))),
             mul_real(real_of_int(integer_of_int32(i)), 0x1.1p-50)))
            and ((JC_45:
                 le_real(abs_real(exact_scalar_product(x_1, y_0,
                                  integer_of_int32(i), doubleP_doubleM_y_4,
                                  doubleP_doubleM_x_3)),
                 real_of_int(integer_of_int32(i))))
                and (JC_48:
                    ((JC_46: le_int((0), integer_of_int32(i)))
                    and (JC_47:
                        le_int(integer_of_int32(i), integer_of_int32(n_1)))))))
           }
         begin
           [ { } unit { true } ];
          try
           begin
             (let jessie_<num> =
             (L:
             (C_25:
             begin
               (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
               then void else (raise (Goto_while_0_break_exc void)));
              (assert
              { (JC_52:
                le_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                              shift(x_1, integer_of_int32(i))))),
                1.0)) }; void); void;
              (assert
              { (JC_53:
                le_real(abs_real(double_value(select(doubleP_doubleM_y_4,
                                              shift(y_0, integer_of_int32(i))))),
                1.0)) }; void); void;
              (assert
              { (JC_54:
                le_real(abs_real(double_value(p)),
                mul_real(10.0, add_real(1.0, 0x1.1p-50)))) }; void); void;
              (let jessie_<num> =
              (C_18:
              (p := (C_17:
                    (JC_56:
                    (((add_double_safe nearest_even) !p) (C_16:
                                                         (JC_55:
                                                         (((mul_double_safe nearest_even) 
                                                           (C_15:
                                                           ((safe_acc_ doubleP_doubleM_x_3) 
                                                            (C_14:
                                                            ((shift x_1) 
                                                             (integer_of_int32 !i)))))) 
                                                          (C_13:
                                                          ((safe_acc_ doubleP_doubleM_y_4) 
                                                           (C_12:
                                                           ((shift y_0) 
                                                            (integer_of_int32 !i))))))))))))) in
              void);
              (assert
              { (JC_57:
                le_real(abs_real(sub_real(double_value(p),
                                 add_real(double_value(p@L),
                                 mul_real(double_value(select(doubleP_doubleM_x_3,
                                                       shift(x_1,
                                                       integer_of_int32(i)))),
                                 double_value(select(doubleP_doubleM_y_4,
                                              shift(y_0, integer_of_int32(i)))))))),
                0x1.1p-50)) }; void); void;
              (assert
              { (JC_58:
                le_real(abs_real(sub_real(double_value(p),
                                 exact_scalar_product(x_1, y_0,
                                 add_int(integer_of_int32(i), (1)),
                                 doubleP_doubleM_y_4, doubleP_doubleM_x_3))),
                add_real(abs_real(sub_real(double_value(p),
                                  add_real(double_value(p@L),
                                  mul_real(double_value(select(doubleP_doubleM_x_3,
                                                        shift(x_1,
                                                        integer_of_int32(i)))),
                                  double_value(select(doubleP_doubleM_y_4,
                                               shift(y_0,
                                               integer_of_int32(i)))))))),
                abs_real(sub_real(add_real(double_value(p@L),
                                  mul_real(double_value(select(doubleP_doubleM_x_3,
                                                        shift(x_1,
                                                        integer_of_int32(i)))),
                                  double_value(select(doubleP_doubleM_y_4,
                                               shift(y_0,
                                               integer_of_int32(i)))))),
                         add_real(exact_scalar_product(x_1, y_0,
                                  integer_of_int32(i), doubleP_doubleM_y_4,
                                  doubleP_doubleM_x_3),
                         mul_real(double_value(select(doubleP_doubleM_x_3,
                                               shift(x_1,
                                               integer_of_int32(i)))),
                         double_value(select(doubleP_doubleM_y_4,
                                      shift(y_0, integer_of_int32(i))))))))))) };
              void); void;
              (assert
              { (JC_59:
                le_real(abs_real(exact_scalar_product(x_1, y_0,
                                 add_int(integer_of_int32(i), (1)),
                                 doubleP_doubleM_y_4, doubleP_doubleM_x_3)),
                add_real(abs_real(exact_scalar_product(x_1, y_0,
                                  integer_of_int32(i), doubleP_doubleM_y_4,
                                  doubleP_doubleM_x_3)),
                mul_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                               shift(x_1,
                                               integer_of_int32(i))))),
                abs_real(double_value(select(doubleP_doubleM_y_4,
                                      shift(y_0, integer_of_int32(i))))))))) };
              void); void;
              (assert
              { (JC_60:
                le_real(mul_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                       shift(x_1,
                                                       integer_of_int32(i))))),
                        abs_real(double_value(select(doubleP_doubleM_y_4,
                                              shift(y_0, integer_of_int32(i)))))),
                1.0)) }; void); void;
              (i := (C_24:
                    (safe_int32_of_integer_ (C_23:
                                            ((add_int (integer_of_int32 !i)) (1))))));
              !i end)) in void); (raise (Loop_continue_exc void)) end with
           Loop_continue_exc jessie_<num> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end) with
       Goto_while_0_break_exc jessie_<num> -> (while_0_break: void) end;
      (return := !p); (raise Return) end))); absurd  end with Return ->
   !return end))
  { (JC_19:
    le_real(abs_real(sub_real(double_value(result),
                     exact_scalar_product(x_1, y_0, integer_of_int32(n_1),
                     doubleP_doubleM_y_4, doubleP_doubleM_x_3))),
    mul_real(real_of_int(integer_of_int32(n_1)), 0x1.1p-50))) }

let scalar_product_safety =
 fun (x_1 : doubleP pointer) (y_0 : doubleP pointer) (n_1 : int32) (doubleP_x_3_alloc_table : doubleP alloc_table) (doubleP_y_4_alloc_table : doubleP alloc_table) (doubleP_doubleM_x_3 : (doubleP, double) memory) (doubleP_doubleM_y_4 : (doubleP, double) memory) ->
  { (JC_17:
    ((JC_10: le_int((0), integer_of_int32(n_1)))
    and ((JC_11: le_int(integer_of_int32(n_1), (10)))
        and ((JC_12: le_int(offset_min(doubleP_x_3_alloc_table, x_1), (0)))
            and ((JC_13:
                 ge_int(offset_max(doubleP_x_3_alloc_table, x_1),
                 sub_int(integer_of_int32(n_1), (1))))
                and ((JC_14:
                     le_int(offset_min(doubleP_y_4_alloc_table, y_0), (0)))
                    and ((JC_15:
                         ge_int(offset_max(doubleP_y_4_alloc_table, y_0),
                         sub_int(integer_of_int32(n_1), (1))))
                        and (JC_16:
                            (forall i_2:int.
                             ((le_int((0), i_2)
                              and lt_int(i_2, integer_of_int32(n_1))) ->
                              (le_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                             shift(x_1, i_2)))),
                               1.0)
                              and le_real(abs_real(double_value(select(doubleP_doubleM_y_4,
                                                                shift(y_0,
                                                                i_2)))),
                                  1.0)))))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let p = ref (any_double void) in
     (let i = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_<num> = (p := (double_of_real_exact 0.0)) in void);
      try
       (C_2:
       begin
         (let jessie_<num> = (i := (safe_int32_of_integer_ (0))) in void);
        (loop_1:
        while true do
        { invariant (JC_29: true)
          variant (JC_43 : sub_int(integer_of_int32(n_1),
                           integer_of_int32(i))) }
         begin
           [ { } unit reads i,p
             { ((JC_23:
                le_real(abs_real(sub_real(double_value(p),
                                 exact_scalar_product(x_1, y_0,
                                 integer_of_int32(i), doubleP_doubleM_y_4,
                                 doubleP_doubleM_x_3))),
                mul_real(real_of_int(integer_of_int32(i)), 0x1.1p-50)))
               and ((JC_24:
                    le_real(abs_real(exact_scalar_product(x_1, y_0,
                                     integer_of_int32(i),
                                     doubleP_doubleM_y_4,
                                     doubleP_doubleM_x_3)),
                    real_of_int(integer_of_int32(i))))
                   and (JC_27:
                       ((JC_25: le_int((0), integer_of_int32(i)))
                       and (JC_26:
                           le_int(integer_of_int32(i), integer_of_int32(n_1))))))) } ];
          try
           begin
             (let jessie_<num> =
             (L:
             (C_25:
             begin
               (if ((lt_int_ (integer_of_int32 !i)) (integer_of_int32 n_1))
               then void else (raise (Goto_while_0_break_exc void)));
              [ { } unit reads i
                { (JC_31:
                  le_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                shift(x_1,
                                                integer_of_int32(i))))),
                  1.0)) } ]; void;
              [ { } unit reads i
                { (JC_32:
                  le_real(abs_real(double_value(select(doubleP_doubleM_y_4,
                                                shift(y_0,
                                                integer_of_int32(i))))),
                  1.0)) } ]; void;
              [ { } unit reads p
                { (JC_33:
                  le_real(abs_real(double_value(p)),
                  mul_real(10.0, add_real(1.0, 0x1.1p-50)))) } ]; void;
              (let jessie_<num> =
              (C_18:
              (p := (C_17:
                    (JC_37:
                    (((add_double nearest_even) !p) (C_16:
                                                    (JC_36:
                                                    (((mul_double nearest_even) 
                                                      (C_15:
                                                      (JC_34:
                                                      ((((offset_acc_ doubleP_x_3_alloc_table) doubleP_doubleM_x_3) x_1) 
                                                       (integer_of_int32 !i))))) 
                                                     (C_13:
                                                     (JC_35:
                                                     ((((offset_acc_ doubleP_y_4_alloc_table) doubleP_doubleM_y_4) y_0) 
                                                      (integer_of_int32 !i)))))))))))) in
              void);
              [ { } unit reads i,p
                { (JC_38:
                  le_real(abs_real(sub_real(double_value(p),
                                   add_real(double_value(p@L),
                                   mul_real(double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_1,
                                                         integer_of_int32(i)))),
                                   double_value(select(doubleP_doubleM_y_4,
                                                shift(y_0,
                                                integer_of_int32(i)))))))),
                  0x1.1p-50)) } ]; void;
              [ { } unit reads i,p
                { (JC_39:
                  le_real(abs_real(sub_real(double_value(p),
                                   exact_scalar_product(x_1, y_0,
                                   add_int(integer_of_int32(i), (1)),
                                   doubleP_doubleM_y_4, doubleP_doubleM_x_3))),
                  add_real(abs_real(sub_real(double_value(p),
                                    add_real(double_value(p@L),
                                    mul_real(double_value(select(doubleP_doubleM_x_3,
                                                          shift(x_1,
                                                          integer_of_int32(i)))),
                                    double_value(select(doubleP_doubleM_y_4,
                                                 shift(y_0,
                                                 integer_of_int32(i)))))))),
                  abs_real(sub_real(add_real(double_value(p@L),
                                    mul_real(double_value(select(doubleP_doubleM_x_3,
                                                          shift(x_1,
                                                          integer_of_int32(i)))),
                                    double_value(select(doubleP_doubleM_y_4,
                                                 shift(y_0,
                                                 integer_of_int32(i)))))),
                           add_real(exact_scalar_product(x_1, y_0,
                                    integer_of_int32(i), doubleP_doubleM_y_4,
                                    doubleP_doubleM_x_3),
                           mul_real(double_value(select(doubleP_doubleM_x_3,
                                                 shift(x_1,
                                                 integer_of_int32(i)))),
                           double_value(select(doubleP_doubleM_y_4,
                                        shift(y_0, integer_of_int32(i))))))))))) } ];
              void;
              [ { } unit reads i
                { (JC_40:
                  le_real(abs_real(exact_scalar_product(x_1, y_0,
                                   add_int(integer_of_int32(i), (1)),
                                   doubleP_doubleM_y_4, doubleP_doubleM_x_3)),
                  add_real(abs_real(exact_scalar_product(x_1, y_0,
                                    integer_of_int32(i), doubleP_doubleM_y_4,
                                    doubleP_doubleM_x_3)),
                  mul_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                 shift(x_1,
                                                 integer_of_int32(i))))),
                  abs_real(double_value(select(doubleP_doubleM_y_4,
                                        shift(y_0, integer_of_int32(i))))))))) } ];
              void;
              [ { } unit reads i
                { (JC_41:
                  le_real(mul_real(abs_real(double_value(select(doubleP_doubleM_x_3,
                                                         shift(x_1,
                                                         integer_of_int32(i))))),
                          abs_real(double_value(select(doubleP_doubleM_y_4,
                                                shift(y_0,
                                                integer_of_int32(i)))))),
                  1.0)) } ]; void;
              (i := (C_24:
                    (JC_42:
                    (int32_of_integer_ (C_23:
                                       ((add_int (integer_of_int32 !i)) (1)))))));
              !i end)) in void); (raise (Loop_continue_exc void)) end with
           Loop_continue_exc jessie_<num> -> void end end done);
        (raise (Goto_while_0_break_exc void)) end) with
       Goto_while_0_break_exc jessie_<num> -> (while_0_break: void) end;
      (return := !p); (raise Return) end))); absurd  end with Return ->
   !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/scalar_product.why
========== file tests/c/scalar_product.jessie/why/scalar_product_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode

logic nearest_even : mode

logic to_zero : mode

logic up : mode

logic down : mode

logic nearest_away : mode

logic mode_match : mode, 'a1, 'a1, 'a1, 'a1, 'a1 -> 'a1

axiom mode_match_nearest_even:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_2))))))

axiom mode_match_to_zero:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_3))))))

axiom mode_match_up:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_4))))))

axiom mode_match_down:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_5))))))

axiom mode_match_nearest_away:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_6))))))

axiom mode_inversion:
  (forall aux_1:mode.
    (((((aux_1 = nearest_even) or (aux_1 = to_zero)) or (aux_1 = up)) or
      (aux_1 = down)) or
     (aux_1 = nearest_away)))

logic mode_to_int : mode -> int

axiom mode_to_int_nearest_even: (mode_to_int(nearest_even) = 0)

axiom mode_to_int_to_zero: (mode_to_int(to_zero) = 1)

axiom mode_to_int_up: (mode_to_int(up) = 2)

axiom mode_to_int_down: (mode_to_int(down) = 3)

axiom mode_to_int_nearest_away: (mode_to_int(nearest_away) = 4)

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type charP

type doubleP

type int32

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic doubleP_tag : doubleP tag_id

axiom doubleP_int: (int_of_tag(doubleP_tag) = 1)

logic doubleP_of_pointer_address : unit pointer -> doubleP pointer

axiom doubleP_of_pointer_address_of_pointer_addr:
  (forall p:doubleP pointer.
    (p = doubleP_of_pointer_address(pointer_address(p))))

axiom doubleP_parenttag_bottom: parenttag(doubleP_tag, bottom_tag)

axiom doubleP_tags:
  (forall x:doubleP pointer.
    (forall doubleP_tag_table:doubleP tag_table.
      instanceof(doubleP_tag_table, x, doubleP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic exact_scalar_product : doubleP pointer, doubleP pointer, int, (doubleP,
double) memory, (doubleP, double) memory -> real

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_doubleP(p: doubleP pointer, a: int,
  doubleP_alloc_table: doubleP alloc_table) =
  (offset_min(doubleP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom no_assign_exact_scalar_product_0:
  (forall tmp:doubleP pset.
    (forall tmpmem:(doubleP, double) memory.
      (forall tmpalloc:doubleP alloc_table.
        (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
          (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
            (forall n:int.
              (forall y:doubleP pointer.
                (forall x_0:doubleP pointer.
                  ((pset_disjoint(tmp, pset_all(pset_singleton(y))) and
                    not_assigns(tmpalloc, doubleP_doubleM_y_2_at_L, tmpmem,
                    tmp)) ->
                   (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
                   doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y,
                   n, tmpmem, doubleP_doubleM_x_1_at_L)))))))))))

axiom no_assign_exact_scalar_product_1:
  (forall tmp:doubleP pset.
    (forall tmpmem:(doubleP, double) memory.
      (forall tmpalloc:doubleP alloc_table.
        (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
          (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
            (forall n:int.
              (forall y:doubleP pointer.
                (forall x_0:doubleP pointer.
                  ((pset_disjoint(tmp, pset_all(pset_singleton(x_0))) and
                    not_assigns(tmpalloc, doubleP_doubleM_x_1_at_L, tmpmem,
                    tmp)) ->
                   (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
                   doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y,
                   n, doubleP_doubleM_y_2_at_L, tmpmem)))))))))))

axiom no_update_exact_scalar_product_0:
  (forall tmp:doubleP pointer.
    (forall tmpval:double.
      (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
        (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
          (forall n:int.
            (forall y:doubleP pointer.
              (forall x_0:doubleP pointer.
                ((not in_pset(tmp, pset_all(pset_singleton(y)))) ->
                 (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
                 doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                 store(doubleP_doubleM_y_2_at_L, tmp, tmpval),
                 doubleP_doubleM_x_1_at_L))))))))))

axiom no_update_exact_scalar_product_1:
  (forall tmp:doubleP pointer.
    (forall tmpval:double.
      (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
        (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
          (forall n:int.
            (forall y:doubleP pointer.
              (forall x_0:doubleP pointer.
                ((not in_pset(tmp, pset_all(pset_singleton(x_0)))) ->
                 (exact_scalar_product(x_0, y, n, doubleP_doubleM_y_2_at_L,
                 doubleP_doubleM_x_1_at_L) = exact_scalar_product(x_0, y, n,
                 doubleP_doubleM_y_2_at_L, store(doubleP_doubleM_x_1_at_L,
                 tmp, tmpval)))))))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_doubleP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(doubleP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_doubleP(p: doubleP pointer, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  (offset_max(doubleP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) = a) and
   (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) = a) and
   (offset_max(doubleP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8.
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) <= a) and
   (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_doubleP(p: doubleP pointer, a: int, b: int,
  doubleP_alloc_table: doubleP alloc_table) =
  ((offset_min(doubleP_alloc_table, p) <= a) and
   (offset_max(doubleP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom A1:
  (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
    (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
      (forall x_0_0:doubleP pointer.
        (forall y_0_0:doubleP pointer. (exact_scalar_product(x_0_0, y_0_0, 0,
          doubleP_doubleM_y_2_at_L, doubleP_doubleM_x_1_at_L) = 0.0)))))

axiom A2:
  (forall doubleP_doubleM_y_2_at_L:(doubleP, double) memory.
    (forall doubleP_doubleM_x_1_at_L:(doubleP, double) memory.
      (forall x_1_0:doubleP pointer.
        (forall y_1:doubleP pointer.
          (forall n_0:int.
            ((n_0 >= 0) -> (exact_scalar_product(x_1_0, y_1, (n_0 + 1),
             doubleP_doubleM_y_2_at_L,
             doubleP_doubleM_x_1_at_L) = (exact_scalar_product(x_1_0, y_1,
             n_0, doubleP_doubleM_y_2_at_L,
             doubleP_doubleM_x_1_at_L) + (double_value(select(doubleP_doubleM_x_1_at_L,
             shift(x_1_0,
             n_0))) * double_value(select(doubleP_doubleM_y_2_at_L,
             shift(y_1, n_0))))))))))))

goal bound_int_to_real:
  (forall i_1:int. ((i_1 <= 10) -> (real_of_int(i_1) <= 10.0)))

axiom bound_int_to_real_as_axiom:
  (forall i_1:int. ((i_1 <= 10) -> (real_of_int(i_1) <= 10.0)))

goal scalar_product_ensures_default_po_1:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  ("JC_44": (abs_real((double_value(p) - exact_scalar_product(x_1, y_0,
  integer_of_int32(i), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i)) * 0x1.1p-50)))

goal scalar_product_ensures_default_po_2:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  ("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i),
  doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i))))

goal scalar_product_ensures_default_po_3:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  ("JC_48": ("JC_46": (0 <= integer_of_int32(i))))

goal scalar_product_ensures_default_po_4:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  ("JC_48": ("JC_47": (integer_of_int32(i) <= integer_of_int32(n_1))))

goal scalar_product_ensures_default_po_5:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0))

goal scalar_product_ensures_default_po_6:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0))

goal scalar_product_ensures_default_po_7:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50))))

goal scalar_product_ensures_default_po_8:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50))

goal scalar_product_ensures_default_po_9:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))))))

goal scalar_product_ensures_default_po_10:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))))

goal scalar_product_ensures_default_po_11:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_60": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0))

goal scalar_product_ensures_default_po_12:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_60": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  ("JC_44": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  integer_of_int32(i1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i1)) * 0x1.1p-50)))

goal scalar_product_ensures_default_po_13:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_60": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  ("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i1),
  doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i1))))

goal scalar_product_ensures_default_po_14:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_60": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  ("JC_48": ("JC_46": (0 <= integer_of_int32(i1))))

goal scalar_product_ensures_default_po_15:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_52": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_53": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_54": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_57":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_58": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_59": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_60": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  ("JC_48": ("JC_47": (integer_of_int32(i1) <= integer_of_int32(n_1))))

goal scalar_product_ensures_default_po_16:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  (("JC_44": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_45": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_48":
    (("JC_46": (0 <= integer_of_int32(i0))) and
     ("JC_47": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) >= integer_of_int32(n_1)) ->
  forall return:double.
  (return = p0) ->
  ("JC_19": (abs_real((double_value(return) - exact_scalar_product(x_1, y_0,
  integer_of_int32(n_1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(n_1)) * 0x1.1p-50)))

goal scalar_product_safety_po_1:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  (offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0))

goal scalar_product_safety_po_2:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))

goal scalar_product_safety_po_3:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  (offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0))

goal scalar_product_safety_po_4:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))

goal scalar_product_safety_po_5:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2)))

goal scalar_product_safety_po_6:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(p0) + double_value(result3)))

goal scalar_product_safety_po_7:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(p0) + double_value(result3))) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_38":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_39": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_40": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_41": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  ((-2147483648) <= (integer_of_int32(i0) + 1))

goal scalar_product_safety_po_8:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(p0) + double_value(result3))) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_38":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_39": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_40": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_41": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  ((integer_of_int32(i0) + 1) <= 2147483647)

goal scalar_product_safety_po_9:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(p0) + double_value(result3))) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_38":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_39": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_40": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_41": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  (((-2147483648) <= (integer_of_int32(i0) + 1)) and
   ((integer_of_int32(i0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  (0 <= ("JC_43": (integer_of_int32(n_1) - integer_of_int32(i0))))

goal scalar_product_safety_po_10:
  forall x_1:doubleP pointer.
  forall y_0:doubleP pointer.
  forall n_1:int32.
  forall doubleP_x_3_alloc_table:doubleP alloc_table.
  forall doubleP_y_4_alloc_table:doubleP alloc_table.
  forall doubleP_doubleM_x_3:(doubleP,
  double) memory.
  forall doubleP_doubleM_y_4:(doubleP,
  double) memory.
  ("JC_17":
  (("JC_10": (0 <= integer_of_int32(n_1))) and
   (("JC_11": (integer_of_int32(n_1) <= 10)) and
    (("JC_12": (offset_min(doubleP_x_3_alloc_table, x_1) <= 0)) and
     (("JC_13": (offset_max(doubleP_x_3_alloc_table,
      x_1) >= (integer_of_int32(n_1) - 1))) and
      (("JC_14": (offset_min(doubleP_y_4_alloc_table, y_0) <= 0)) and
       (("JC_15": (offset_max(doubleP_y_4_alloc_table,
        y_0) >= (integer_of_int32(n_1) - 1))) and
        ("JC_16":
        (forall i_2:int.
          (((0 <= i_2) and (i_2 < integer_of_int32(n_1))) ->
           ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
            i_2)))) <= 1.0) and
            (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
            i_2)))) <= 1.0)))))))))))) ->
  forall result:double.
  ((double_value(result) = 0.0) and
   ((double_exact(result) = 0.0) and (double_model(result) = 0.0))) ->
  forall p:double.
  (p = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i:int32.
  (i = result0) ->
  forall i0:int32.
  forall p0:double.
  ("JC_29": true) ->
  (("JC_23": (abs_real((double_value(p0) - exact_scalar_product(x_1, y_0,
   integer_of_int32(i0), doubleP_doubleM_y_4,
   doubleP_doubleM_x_3))) <= (real_of_int(integer_of_int32(i0)) * 0x1.1p-50))) and
   (("JC_24": (abs_real(exact_scalar_product(x_1, y_0, integer_of_int32(i0),
    doubleP_doubleM_y_4,
    doubleP_doubleM_x_3)) <= real_of_int(integer_of_int32(i0)))) and
    ("JC_27":
    (("JC_25": (0 <= integer_of_int32(i0))) and
     ("JC_26": (integer_of_int32(i0) <= integer_of_int32(n_1))))))) ->
  (integer_of_int32(i0) < integer_of_int32(n_1)) ->
  ("JC_31": (abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_32": (abs_real(double_value(select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0))))) <= 1.0)) ->
  ("JC_33": (abs_real(double_value(p0)) <= (10.0 * (1.0 + 0x1.1p-50)))) ->
  ((offset_min(doubleP_x_3_alloc_table, x_1) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_x_3_alloc_table, x_1))) ->
  forall result1:double.
  (result1 = select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) ->
  ((offset_min(doubleP_y_4_alloc_table, y_0) <= integer_of_int32(i0)) and
   (integer_of_int32(i0) <= offset_max(doubleP_y_4_alloc_table, y_0))) ->
  forall result2:double.
  (result2 = select(doubleP_doubleM_y_4, shift(y_0,
  integer_of_int32(i0)))) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result2))) ->
  forall result3:double.
  mul_double_post(nearest_even, result1, result2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(p0) + double_value(result3))) ->
  forall result4:double.
  add_double_post(nearest_even, p0, result3, result4) ->
  forall p1:double.
  (p1 = result4) ->
  ("JC_38":
  (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))))) <= 0x1.1p-50)) ->
  ("JC_39": (abs_real((double_value(p1) - exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3))) <= (abs_real((double_value(p1) - (double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0,
  integer_of_int32(i0)))))))) + abs_real(((double_value(p0) + (double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) - (exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3) + (double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0)))) * double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))))) ->
  ("JC_40": (abs_real(exact_scalar_product(x_1, y_0,
  (integer_of_int32(i0) + 1), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) <= (abs_real(exact_scalar_product(x_1, y_0,
  integer_of_int32(i0), doubleP_doubleM_y_4,
  doubleP_doubleM_x_3)) + (abs_real(double_value(select(doubleP_doubleM_x_3,
  shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0))))))))) ->
  ("JC_41": ((abs_real(double_value(select(doubleP_doubleM_x_3, shift(x_1,
  integer_of_int32(i0))))) * abs_real(double_value(select(doubleP_doubleM_y_4,
  shift(y_0, integer_of_int32(i0)))))) <= 1.0)) ->
  (((-2147483648) <= (integer_of_int32(i0) + 1)) and
   ((integer_of_int32(i0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i0) + 1)) ->
  forall i1:int32.
  (i1 = result5) ->
  (("JC_43": (integer_of_int32(n_1) - integer_of_int32(i1))) < ("JC_43":
                                                               (integer_of_int32(n_1) - integer_of_int32(i0))))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/scalar_product_why.why    : ?.......####.........##.... (20/0/1/6/0)
total   :  27
valid   :  20 ( 74%)
invalid :   0 (  0%)
unknown :   1 (  4%)
timeout :   6 ( 22%)
failure :   0 (  0%)
