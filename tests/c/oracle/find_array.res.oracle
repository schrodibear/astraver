========== file tests/c/find_array.c ==========
/** from Julien Signoles' tutorial
 **/

/*@
  predicate sorted{L}(int* arr, integer length) =
  \forall integer i, j; 0 <= i <= j < length ==> arr[i] <= arr[j];

  predicate mem{L}(int elt, int* arr, integer length) =
  \exists integer i; 0 <= i <length && arr[i] == elt;
*/

/*@
  requires sorted(arr,length);
  requires length >= 0;
  requires \valid(arr+(0..(length-1)));

  assigns \nothing;

  behavior exists:
    assumes mem(query, arr, length);
    ensures arr[\result] == query;

  behavior not_exists:
    assumes ! mem(query, arr, length);
    ensures \result == -1;
*/
int find_array(int* arr, int length, int query) {
  int low = 0;
  int high = length - 1;
  /*@
    loop invariant 0 <= low;
    loop invariant high < length;
    loop invariant \forall integer i; 0 <= i < low ==> arr[i] < query;
    loop invariant \forall integer i; high < i < length ==> arr[i] > query;
    loop variant high - low;
  */
  while (low <= high) {
    int mean = low + (high -low) / 2;
    if (arr[mean] == query) return mean;
    if (arr[mean] < query) low = mean + 1;
    else high = mean - 1;
  }
  return -1;
}

/*
Local Variables:
compile-command: "frama-c -jessie find_array.c"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/find_array.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/find_array.jessie
[jessie] File tests/c/find_array.jessie/find_array.jc written.
[jessie] File tests/c/find_array.jessie/find_array.cloc written.
========== file tests/c/find_array.jessie/find_array.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

type int32 = -2147483648..2147483647

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate sorted{L}(intP[..] arr, integer length) =
(\forall integer i_1;
  (\forall integer j_0;
    (((0 <= i_1) && ((i_1 <= j_0) && (j_0 < length))) ==>
      ((arr + i_1).intM <= (arr + j_0).intM))))

predicate mem{L}(int32 elt, intP[..] arr_0, integer length_0) =
(\exists integer i_2;
  (((0 <= i_2) && (i_2 < length_0)) && ((arr_0 + i_2).intM == elt)))

int32 find_array(intP[..] arr, int32 length, int32 query)
  requires (C_36 : sorted{Here}(arr, length));
  requires (C_35 : (length >= 0));
  requires (C_32 : ((C_33 : (\offset_min(arr) <= 0)) &&
                     (C_34 : (\offset_max(arr) >= (length - 1)))));
behavior default:
  assigns \nothing;
  ensures (C_29 : true);
behavior exists:
  assumes mem{Here}(query, arr, length);
  ensures (C_30 : ((\at(arr,Old) + \result).intM == \at(query,Old)));
behavior not_exists:
  assumes (! mem{Here}(query, arr, length));
  ensures (C_31 : (\result == (- 1)));
{  
   (var int32 low);
   
   (var int32 high);
   
   (var int32 mean);
   
   (var int32 __retres);
   
   {  (C_1 : (low = 0));
      (C_4 : (high = (C_3 : ((C_2 : (length - 1)) :> int32))));
      
      loop 
      behavior default:
        invariant (C_9 : (0 <= low));
      behavior default:
        invariant (C_8 : (high < length));
      behavior default:
        invariant (C_7 : (\forall integer i_3;
                           (((0 <= i_3) && (i_3 < low)) ==>
                             ((arr + i_3).intM < query))));
      behavior default:
        invariant (C_6 : (\forall integer i_4;
                           (((high < i_4) && (i_4 < length)) ==>
                             ((arr + i_4).intM > query))));
      variant (C_5 : (high - low));
      while (true)
      {  
         {  (if (low <= high) then () else 
            (goto while_0_break));
            
            {  (C_16 : (mean = (C_15 : ((C_14 : (low +
                                                  (C_13 : ((C_12 : ((C_11 : (
                                                                    (C_10 : 
                                                                    (high -
                                                                    low)) :> int32)) /
                                                                    2)) :> int32)))) :> int32))));
               (if ((C_19 : (C_18 : (arr + mean)).intM) == query) then 
               {  (C_17 : (__retres = mean));
                  
                  (goto return_label)
               } else ());
               (if ((C_27 : (C_26 : (arr + mean)).intM) < query) then 
               (C_25 : (low = (C_24 : ((C_23 : (mean + 1)) :> int32)))) else 
               (C_22 : (high = (C_21 : ((C_20 : (mean - 1)) :> int32)))))
            }
         }
      };
      (while_0_break : ());
      (C_28 : (__retres = -1));
      (return_label : 
      (return __retres))
   }
}
========== file tests/c/find_array.jessie/find_array.cloc ==========
[find_array]
name = "Function find_array"
file = "HOME/tests/c/find_array.c"
line = 27
begin = 4
end = 14

[C_10]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 22
end = 31

[C_11]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 22
end = 31

[C_12]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[C_13]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[C_14]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 15
end = 36

[C_15]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 15
end = 36

[C_16]
file = "HOME/tests/c/find_array.c"
line = 38
begin = 4
end = 7

[C_17]
file = "HOME/tests/c/find_array.c"
line = 39
begin = 28
end = 40

[C_18]
file = "HOME/tests/c/find_array.c"
line = 39
begin = 8
end = 11

[C_19]
file = "HOME/tests/c/find_array.c"
line = 39
begin = 8
end = 17

[C_1]
file = "HOME/tests/c/find_array.c"
line = 28
begin = 2
end = 5

[C_2]
file = "HOME/tests/c/find_array.c"
line = 29
begin = 13
end = 23

[C_3]
file = "HOME/tests/c/find_array.c"
line = 29
begin = 13
end = 23

[C_4]
file = "HOME/tests/c/find_array.c"
line = 29
begin = 2
end = 5

[C_20]
file = "HOME/tests/c/find_array.c"
line = 41
begin = 16
end = 24

[C_5]
file = "HOME/tests/c/find_array.c"
line = 35
begin = 17
end = 27

[C_21]
file = "HOME/tests/c/find_array.c"
line = 41
begin = 16
end = 24

[C_6]
file = "HOME/tests/c/find_array.c"
line = 34
begin = 19
end = 74

[C_22]
file = "HOME/tests/c/find_array.c"
line = 41
begin = 16
end = 24

[C_7]
file = "HOME/tests/c/find_array.c"
line = 33
begin = 19
end = 69

[C_23]
file = "HOME/tests/c/find_array.c"
line = 40
begin = 33
end = 41

[C_8]
file = "HOME/tests/c/find_array.c"
line = 32
begin = 19
end = 32

[C_24]
file = "HOME/tests/c/find_array.c"
line = 40
begin = 33
end = 41

[C_9]
file = "HOME/tests/c/find_array.c"
line = 31
begin = 19
end = 27

[C_25]
file = "HOME/tests/c/find_array.c"
line = 40
begin = 33
end = 41

[C_26]
file = "HOME/tests/c/find_array.c"
line = 40
begin = 8
end = 11

[C_27]
file = "HOME/tests/c/find_array.c"
line = 40
begin = 8
end = 17

[C_28]
file = "HOME/tests/c/find_array.c"
line = 43
begin = 2
end = 12

[C_29]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_30]
file = "HOME/tests/c/find_array.c"
line = 21
begin = 12
end = 33

[C_31]
file = "HOME/tests/c/find_array.c"
line = 25
begin = 12
end = 25

[C_32]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[C_33]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[C_34]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[C_35]
file = "HOME/tests/c/find_array.c"
line = 14
begin = 11
end = 22

[C_36]
file = "HOME/tests/c/find_array.c"
line = 13
begin = 11
end = 29

========== jessie execution ==========
Generating Why function find_array
========== file tests/c/find_array.jessie/find_array.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

USERWHYDEUXOPT= -split-user-conj
WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT) $(USERWHYDEUXOPT) -explain -locs find_array.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT) $(USERWHYDEUXOPT) -explain -locs find_array.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/find_array_why.sx

project: why/find_array.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/find_array_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/find_array_why.vo

coq/find_array_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/find_array_why.v: why/find_array.why
	@echo 'why -coq [...] why/find_array.why' && $(WHY) $(JESSIELIBFILES) why/find_array.why && rm -f coq/jessie_why.v

coq-goals: goals coq/find_array_ctx_why.vo
	for f in why/*_po*.why; do make -f find_array.makefile coq/`basename $$f .why`_why.v ; done

coq/find_array_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/find_array_ctx_why.v: why/find_array_ctx.why
	@echo 'why -coq [...] why/find_array_ctx.why' && $(WHY) why/find_array_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export find_array_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/find_array_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/find_array_ctx_why.vo

pvs: pvs/find_array_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/find_array_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/find_array_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/find_array_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/find_array_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/find_array_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/find_array_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/find_array_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/find_array_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/find_array_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/find_array_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/find_array_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/find_array_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/find_array_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/find_array_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: find_array.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/find_array_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: find_array.mlw
	 why3 --extra-config $(JESSIE3CONF) $<

why3ide: find_array.mlw
	 why3ide --extra-config $(JESSIE3CONF) $<

why3replay: find_array.mlw
	 why3replayer --extra-config $(JESSIE3CONF) $<

-include find_array.depend

depend: coq/find_array_why.v
	-$(COQDEP) -I coq coq/find_array*_why.v > find_array.depend

clean:
	rm -f coq/*.vo

========== file tests/c/find_array.jessie/find_array.loc ==========
[JC_40]
file = "HOME/tests/c/find_array.c"
line = 34
begin = 19
end = 74

[JC_41]
file = "HOME/tests/c/find_array.c"
line = 33
begin = 19
end = 69

[JC_42]
file = "HOME/tests/c/find_array.c"
line = 32
begin = 19
end = 32

[JC_43]
file = "HOME/tests/c/find_array.c"
line = 31
begin = 19
end = 27

[JC_44]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_45]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_46]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_1]
file = "HOME/tests/c/find_array.c"
line = 13
begin = 11
end = 29

[JC_47]
kind = DivByZero
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[JC_2]
file = "HOME/tests/c/find_array.c"
line = 14
begin = 11
end = 22

[JC_48]
file = "HOME/tests/c/find_array.c"
line = 34
begin = 19
end = 74

[JC_3]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[JC_49]
file = "HOME/tests/c/find_array.c"
line = 33
begin = 19
end = 69

[JC_4]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_7]
file = "HOME/tests/c/find_array.c"
line = 13
begin = 11
end = 29

[JC_8]
file = "HOME/tests/c/find_array.c"
line = 14
begin = 11
end = 22

[JC_9]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[JC_50]
file = "HOME/tests/c/find_array.c"
line = 32
begin = 19
end = 32

[JC_51]
file = "HOME/tests/c/find_array.c"
line = 31
begin = 19
end = 27

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_53]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_54]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_55]
kind = DivByZero
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[JC_56]
file = "HOME/tests/c/find_array.c"
line = 34
begin = 19
end = 74

[JC_57]
file = "HOME/tests/c/find_array.c"
line = 33
begin = 19
end = 69

[JC_58]
file = "HOME/tests/c/find_array.c"
line = 32
begin = 19
end = 32

[JC_59]
file = "HOME/tests/c/find_array.c"
line = 31
begin = 19
end = 27

[JC_60]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_61]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_62]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_10]
file = "HOME/tests/c/find_array.c"
line = 15
begin = 11
end = 38

[JC_63]
kind = DivByZero
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[JC_11]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/"
line = 0
begin = -1
end = -1

[find_array_ensures_exists]
name = "Function find_array"
behavior = "Behavior `exists'"
file = "HOME/tests/c/find_array.c"
line = 27
begin = 4
end = 14

[JC_14]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 58
begin = 10
end = 18

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 58
begin = 10
end = 18

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/find_array.c"
line = 21
begin = 12
end = 33

[JC_20]
file = "HOME/tests/c/find_array.c"
line = 21
begin = 12
end = 33

[JC_21]
file = "HOME/tests/c/find_array.c"
line = 25
begin = 12
end = 25

[JC_22]
file = "HOME/tests/c/find_array.c"
line = 25
begin = 12
end = 25

[JC_23]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 29
begin = 13
end = 23

[JC_24]
file = "HOME/tests/c/find_array.c"
line = 34
begin = 19
end = 74

[JC_25]
file = "HOME/tests/c/find_array.c"
line = 33
begin = 19
end = 69

[find_array_ensures_default]
name = "Function find_array"
behavior = "default behavior"
file = "HOME/tests/c/find_array.c"
line = 27
begin = 4
end = 14

[JC_26]
file = "HOME/tests/c/find_array.c"
line = 32
begin = 19
end = 32

[JC_27]
file = "HOME/tests/c/find_array.c"
line = 31
begin = 19
end = 27

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_29]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[find_array_ensures_not_exists]
name = "Function find_array"
behavior = "Behavior `not_exists'"
file = "HOME/tests/c/find_array.c"
line = 27
begin = 4
end = 14

[find_array_safety]
name = "Function find_array"
behavior = "Safety"
file = "HOME/tests/c/find_array.c"
line = 27
begin = 4
end = 14

[JC_30]
file = "HOME/tests/c/find_array.jessie/find_array.jc"
line = 78
begin = 6
end = 1614

[JC_31]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 38
begin = 22
end = 31

[JC_32]
kind = DivByZero
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[JC_33]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 38
begin = 21
end = 36

[JC_34]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 38
begin = 15
end = 36

[JC_35]
kind = PointerDeref
file = "HOME/tests/c/find_array.c"
line = 39
begin = 8
end = 17

[JC_36]
kind = PointerDeref
file = "HOME/tests/c/find_array.c"
line = 40
begin = 8
end = 17

[JC_37]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 40
begin = 33
end = 41

[JC_38]
kind = ArithOverflow
file = "HOME/tests/c/find_array.c"
line = 41
begin = 16
end = 24

[JC_39]
file = "HOME/tests/c/find_array.c"
line = 35
begin = 17
end = 27

========== file tests/c/find_array.jessie/why/find_array.why ==========
type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

predicate mem(elt:int32, arr_0:intP pointer, length_0:int,
 intP_intM_arr_0_2_at_L:(intP, int32) memory) =
 (exists i_2:int.
  (le_int((0), i_2)
  and (lt_int(i_2, length_0)
      and (integer_of_int32(select(intP_intM_arr_0_2_at_L, shift(arr_0, i_2))) = 
          integer_of_int32(elt)))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate sorted(arr:intP pointer, length:int,
 intP_intM_arr_1_at_L:(intP, int32) memory) =
 (forall i_1:int.
  (forall j_0:int.
   ((le_int((0), i_1) and (le_int(i_1, j_0) and lt_int(j_0, length))) ->
    le_int(integer_of_int32(select(intP_intM_arr_1_at_L, shift(arr, i_1))),
    integer_of_int32(select(intP_intM_arr_1_at_L, shift(arr, j_0)))))))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter find_array :
 arr_1:intP pointer ->
  length_1:int32 ->
   query:int32 ->
    intP_arr_3_alloc_table:intP alloc_table ->
     intP_intM_arr_3:(intP, int32) memory ->
      { } int32
      { (((not mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3)) ->
          (JC_22: (integer_of_int32(result) = neg_int((1)))))
        and (mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3) ->
             (JC_20:
             (integer_of_int32(select(intP_intM_arr_3,
                               shift(arr_1, integer_of_int32(result)))) = 
             integer_of_int32(query))))) }

parameter find_array_requires :
 arr_1:intP pointer ->
  length_1:int32 ->
   query:int32 ->
    intP_arr_3_alloc_table:intP alloc_table ->
     intP_intM_arr_3:(intP, int32) memory ->
      { (JC_5:
        ((JC_1: sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3))
        and ((JC_2: ge_int(integer_of_int32(length_1), (0)))
            and ((JC_3:
                 le_int(offset_min(intP_arr_3_alloc_table, arr_1), (0)))
                and (JC_4:
                    ge_int(offset_max(intP_arr_3_alloc_table, arr_1),
                    sub_int(integer_of_int32(length_1), (1))))))))}
      int32
      { (((not mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3)) ->
          (JC_22: (integer_of_int32(result) = neg_int((1)))))
        and (mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3) ->
             (JC_20:
             (integer_of_int32(select(intP_intM_arr_3,
                               shift(arr_1, integer_of_int32(result)))) = 
             integer_of_int32(query))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let find_array_ensures_default =
 fun (arr_1 : intP pointer) (length_1 : int32) (query : int32) (intP_arr_3_alloc_table : intP alloc_table) (intP_intM_arr_3 : (intP, int32) memory) ->
  { (JC_11:
    ((JC_7: sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3))
    and ((JC_8: ge_int(integer_of_int32(length_1), (0)))
        and ((JC_9: le_int(offset_min(intP_arr_3_alloc_table, arr_1), (0)))
            and (JC_10:
                ge_int(offset_max(intP_arr_3_alloc_table, arr_1),
                sub_int(integer_of_int32(length_1), (1)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let low = ref (any_int32 void) in
     (let high = ref (any_int32 void) in
     (let mean = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         (loop_2:
         begin
           (let jessie_<num> = (low := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (high := (C_3:
                   (safe_int32_of_integer_ (C_2:
                                           ((sub_int (integer_of_int32 length_1)) (1)))))) in
          void);
          while true do
          { invariant
              ((JC_40:
               (forall i_4:int.
                ((lt_int(integer_of_int32(high), i_4)
                 and lt_int(i_4, integer_of_int32(length_1))) ->
                 gt_int(integer_of_int32(select(intP_intM_arr_3,
                                         shift(arr_1, i_4))),
                 integer_of_int32(query)))))
              and ((JC_41:
                   (forall i_3:int.
                    ((le_int((0), i_3)
                     and lt_int(i_3, integer_of_int32(low))) ->
                     lt_int(integer_of_int32(select(intP_intM_arr_3,
                                             shift(arr_1, i_3))),
                     integer_of_int32(query)))))
                  and ((JC_42:
                       lt_int(integer_of_int32(high),
                       integer_of_int32(length_1)))
                      and (JC_43: le_int((0), integer_of_int32(low)))))) 
             }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<num> =
               (C_16:
               begin
                 (if ((le_int_ (integer_of_int32 !low)) (integer_of_int32 !high))
                 then void else (raise (Goto_while_0_break_exc void)));
                (let jessie_<num> =
                (mean := (C_15:
                         (safe_int32_of_integer_ (C_14:
                                                 ((add_int (integer_of_int32 !low)) 
                                                  (integer_of_int32 (C_13:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_12:
                                                                    (JC_47:
                                                                    ((computer_div 
                                                                    (integer_of_int32 
                                                                    (C_11:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_10:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !high)) 
                                                                    (integer_of_int32 !low))))))) (2)))))))))))) in
                void);
                (if ((eq_int_ (integer_of_int32 (C_19:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_18:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_17:
                 begin
                   (let jessie_<num> = (__retres := !mean) in void);
                  (raise (Return_label_exc void)) end) else void);
                (if ((lt_int_ (integer_of_int32 (C_27:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_26:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_25:
                 begin
                   (low := (C_24:
                           (safe_int32_of_integer_ (C_23:
                                                   ((add_int (integer_of_int32 !mean)) (1))))));
                  !low end)
                else
                 (C_22:
                 begin
                   (high := (C_21:
                            (safe_int32_of_integer_ (C_20:
                                                    ((sub_int (integer_of_int32 !mean)) (1))))));
                  !high end)) end) in void); (raise (Loop_continue_exc void))
             end with Loop_continue_exc jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end))) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_28:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end)) { (JC_14: true) }

let find_array_ensures_exists =
 fun (arr_1 : intP pointer) (length_1 : int32) (query : int32) (intP_arr_3_alloc_table : intP alloc_table) (intP_intM_arr_3 : (intP, int32) memory) ->
  { (mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3)
    and (JC_11:
        ((JC_7: sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3))
        and ((JC_8: ge_int(integer_of_int32(length_1), (0)))
            and ((JC_9:
                 le_int(offset_min(intP_arr_3_alloc_table, arr_1), (0)))
                and (JC_10:
                    ge_int(offset_max(intP_arr_3_alloc_table, arr_1),
                    sub_int(integer_of_int32(length_1), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let low = ref (any_int32 void) in
     (let high = ref (any_int32 void) in
     (let mean = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         (loop_3:
         begin
           (let jessie_<num> = (low := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (high := (C_3:
                   (safe_int32_of_integer_ (C_2:
                                           ((sub_int (integer_of_int32 length_1)) (1)))))) in
          void);
          while true do
          { invariant (JC_53: true)  }
           begin
             [ { } unit reads high,low
               { ((JC_48:
                  (forall i_4:int.
                   ((lt_int(integer_of_int32(high), i_4)
                    and lt_int(i_4, integer_of_int32(length_1))) ->
                    gt_int(integer_of_int32(select(intP_intM_arr_3,
                                            shift(arr_1, i_4))),
                    integer_of_int32(query)))))
                 and ((JC_49:
                      (forall i_3:int.
                       ((le_int((0), i_3)
                        and lt_int(i_3, integer_of_int32(low))) ->
                        lt_int(integer_of_int32(select(intP_intM_arr_3,
                                                shift(arr_1, i_3))),
                        integer_of_int32(query)))))
                     and ((JC_50:
                          lt_int(integer_of_int32(high),
                          integer_of_int32(length_1)))
                         and (JC_51: le_int((0), integer_of_int32(low)))))) } ];
            try
             begin
               (let jessie_<num> =
               (C_16:
               begin
                 (if ((le_int_ (integer_of_int32 !low)) (integer_of_int32 !high))
                 then void else (raise (Goto_while_0_break_exc void)));
                (let jessie_<num> =
                (mean := (C_15:
                         (safe_int32_of_integer_ (C_14:
                                                 ((add_int (integer_of_int32 !low)) 
                                                  (integer_of_int32 (C_13:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_12:
                                                                    (JC_55:
                                                                    ((computer_div 
                                                                    (integer_of_int32 
                                                                    (C_11:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_10:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !high)) 
                                                                    (integer_of_int32 !low))))))) (2)))))))))))) in
                void);
                (if ((eq_int_ (integer_of_int32 (C_19:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_18:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_17:
                 begin
                   (let jessie_<num> = (__retres := !mean) in void);
                  (raise (Return_label_exc void)) end) else void);
                (if ((lt_int_ (integer_of_int32 (C_27:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_26:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_25:
                 begin
                   (low := (C_24:
                           (safe_int32_of_integer_ (C_23:
                                                   ((add_int (integer_of_int32 !mean)) (1))))));
                  !low end)
                else
                 (C_22:
                 begin
                   (high := (C_21:
                            (safe_int32_of_integer_ (C_20:
                                                    ((sub_int (integer_of_int32 !mean)) (1))))));
                  !high end)) end) in void); (raise (Loop_continue_exc void))
             end with Loop_continue_exc jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end))) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_28:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_19:
    (integer_of_int32(select(intP_intM_arr_3,
                      shift(arr_1, integer_of_int32(result)))) = integer_of_int32(query))) }

let find_array_ensures_not_exists =
 fun (arr_1 : intP pointer) (length_1 : int32) (query : int32) (intP_arr_3_alloc_table : intP alloc_table) (intP_intM_arr_3 : (intP, int32) memory) ->
  { ((not mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3))
    and (JC_11:
        ((JC_7: sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3))
        and ((JC_8: ge_int(integer_of_int32(length_1), (0)))
            and ((JC_9:
                 le_int(offset_min(intP_arr_3_alloc_table, arr_1), (0)))
                and (JC_10:
                    ge_int(offset_max(intP_arr_3_alloc_table, arr_1),
                    sub_int(integer_of_int32(length_1), (1))))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let low = ref (any_int32 void) in
     (let high = ref (any_int32 void) in
     (let mean = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         (loop_4:
         begin
           (let jessie_<num> = (low := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (high := (C_3:
                   (safe_int32_of_integer_ (C_2:
                                           ((sub_int (integer_of_int32 length_1)) (1)))))) in
          void);
          while true do
          { invariant (JC_61: true)  }
           begin
             [ { } unit reads high,low
               { ((JC_56:
                  (forall i_4:int.
                   ((lt_int(integer_of_int32(high), i_4)
                    and lt_int(i_4, integer_of_int32(length_1))) ->
                    gt_int(integer_of_int32(select(intP_intM_arr_3,
                                            shift(arr_1, i_4))),
                    integer_of_int32(query)))))
                 and ((JC_57:
                      (forall i_3:int.
                       ((le_int((0), i_3)
                        and lt_int(i_3, integer_of_int32(low))) ->
                        lt_int(integer_of_int32(select(intP_intM_arr_3,
                                                shift(arr_1, i_3))),
                        integer_of_int32(query)))))
                     and ((JC_58:
                          lt_int(integer_of_int32(high),
                          integer_of_int32(length_1)))
                         and (JC_59: le_int((0), integer_of_int32(low)))))) } ];
            try
             begin
               (let jessie_<num> =
               (C_16:
               begin
                 (if ((le_int_ (integer_of_int32 !low)) (integer_of_int32 !high))
                 then void else (raise (Goto_while_0_break_exc void)));
                (let jessie_<num> =
                (mean := (C_15:
                         (safe_int32_of_integer_ (C_14:
                                                 ((add_int (integer_of_int32 !low)) 
                                                  (integer_of_int32 (C_13:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_12:
                                                                    (JC_63:
                                                                    ((computer_div 
                                                                    (integer_of_int32 
                                                                    (C_11:
                                                                    (safe_int32_of_integer_ 
                                                                    (C_10:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !high)) 
                                                                    (integer_of_int32 !low))))))) (2)))))))))))) in
                void);
                (if ((eq_int_ (integer_of_int32 (C_19:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_18:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_17:
                 begin
                   (let jessie_<num> = (__retres := !mean) in void);
                  (raise (Return_label_exc void)) end) else void);
                (if ((lt_int_ (integer_of_int32 (C_27:
                                                ((safe_acc_ intP_intM_arr_3) 
                                                 (C_26:
                                                 ((shift arr_1) (integer_of_int32 !mean))))))) 
                     (integer_of_int32 query))
                then
                 (C_25:
                 begin
                   (low := (C_24:
                           (safe_int32_of_integer_ (C_23:
                                                   ((add_int (integer_of_int32 !mean)) (1))))));
                  !low end)
                else
                 (C_22:
                 begin
                   (high := (C_21:
                            (safe_int32_of_integer_ (C_20:
                                                    ((sub_int (integer_of_int32 !mean)) (1))))));
                  !high end)) end) in void); (raise (Loop_continue_exc void))
             end with Loop_continue_exc jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end))) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_28:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_21: (integer_of_int32(result) = neg_int((1)))) }

let find_array_safety =
 fun (arr_1 : intP pointer) (length_1 : int32) (query : int32) (intP_arr_3_alloc_table : intP alloc_table) (intP_intM_arr_3 : (intP, int32) memory) ->
  { (JC_11:
    ((JC_7: sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3))
    and ((JC_8: ge_int(integer_of_int32(length_1), (0)))
        and ((JC_9: le_int(offset_min(intP_arr_3_alloc_table, arr_1), (0)))
            and (JC_10:
                ge_int(offset_max(intP_arr_3_alloc_table, arr_1),
                sub_int(integer_of_int32(length_1), (1)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let low = ref (any_int32 void) in
     (let high = ref (any_int32 void) in
     (let mean = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         (loop_1:
         begin
           (let jessie_<num> = (low := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (high := (C_3:
                   (JC_23:
                   (int32_of_integer_ (C_2:
                                      ((sub_int (integer_of_int32 length_1)) (1))))))) in
          void);
          while true do
          { invariant (JC_29: true)
            variant (JC_39 : sub_int(integer_of_int32(high),
                             integer_of_int32(low))) }
           begin
             [ { } unit reads high,low
               { ((JC_24:
                  (forall i_4:int.
                   ((lt_int(integer_of_int32(high), i_4)
                    and lt_int(i_4, integer_of_int32(length_1))) ->
                    gt_int(integer_of_int32(select(intP_intM_arr_3,
                                            shift(arr_1, i_4))),
                    integer_of_int32(query)))))
                 and ((JC_25:
                      (forall i_3:int.
                       ((le_int((0), i_3)
                        and lt_int(i_3, integer_of_int32(low))) ->
                        lt_int(integer_of_int32(select(intP_intM_arr_3,
                                                shift(arr_1, i_3))),
                        integer_of_int32(query)))))
                     and ((JC_26:
                          lt_int(integer_of_int32(high),
                          integer_of_int32(length_1)))
                         and (JC_27: le_int((0), integer_of_int32(low)))))) } ];
            try
             begin
               (let jessie_<num> =
               (C_16:
               begin
                 (if ((le_int_ (integer_of_int32 !low)) (integer_of_int32 !high))
                 then void else (raise (Goto_while_0_break_exc void)));
                (let jessie_<num> =
                (mean := (C_15:
                         (JC_34:
                         (int32_of_integer_ (C_14:
                                            ((add_int (integer_of_int32 !low)) 
                                             (integer_of_int32 (C_13:
                                                               (JC_33:
                                                               (int32_of_integer_ 
                                                                (C_12:
                                                                (JC_32:
                                                                ((computer_div_ 
                                                                  (integer_of_int32 
                                                                   (C_11:
                                                                   (JC_31:
                                                                   (int32_of_integer_ 
                                                                    (C_10:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !high)) 
                                                                    (integer_of_int32 !low)))))))) (2)))))))))))))) in
                void);
                (if ((eq_int_ (integer_of_int32 (C_19:
                                                (JC_35:
                                                ((((offset_acc_ intP_arr_3_alloc_table) intP_intM_arr_3) arr_1) 
                                                 (integer_of_int32 !mean)))))) 
                     (integer_of_int32 query))
                then
                 (C_17:
                 begin
                   (let jessie_<num> = (__retres := !mean) in void);
                  (raise (Return_label_exc void)) end) else void);
                (if ((lt_int_ (integer_of_int32 (C_27:
                                                (JC_36:
                                                ((((offset_acc_ intP_arr_3_alloc_table) intP_intM_arr_3) arr_1) 
                                                 (integer_of_int32 !mean)))))) 
                     (integer_of_int32 query))
                then
                 (C_25:
                 begin
                   (low := (C_24:
                           (JC_37:
                           (int32_of_integer_ (C_23:
                                              ((add_int (integer_of_int32 !mean)) (1)))))));
                  !low end)
                else
                 (C_22:
                 begin
                   (high := (C_21:
                            (JC_38:
                            (int32_of_integer_ (C_20:
                                               ((sub_int (integer_of_int32 !mean)) (1)))))));
                  !high end)) end) in void); (raise (Loop_continue_exc void))
             end with Loop_continue_exc jessie_<num> -> void end end done;
          (raise (Goto_while_0_break_exc void)) end))) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_28:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/find_array.why
========== file tests/c/find_array.jessie/why/find_array_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

predicate mem(elt: int32, arr_0: intP pointer, length_0: int,
  intP_intM_arr_0_2_at_L: (intP, int32) memory) =
  (exists i_2:int.
    ((0 <= i_2) and
     ((i_2 < length_0) and (integer_of_int32(select(intP_intM_arr_0_2_at_L,
      shift(arr_0, i_2))) = integer_of_int32(elt)))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate sorted(arr: intP pointer, length: int, intP_intM_arr_1_at_L: (intP,
  int32) memory) =
  (forall i_1:int.
    (forall j_0:int.
      (((0 <= i_1) and ((i_1 <= j_0) and (j_0 < length))) ->
       (integer_of_int32(select(intP_intM_arr_1_at_L, shift(arr,
       i_1))) <= integer_of_int32(select(intP_intM_arr_1_at_L, shift(arr,
       j_0)))))))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8.
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal find_array_ensures_default_po_1:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall i_4:int.
  ((integer_of_int32(high) < i_4) and (i_4 < integer_of_int32(length_1))) ->
  ("JC_40": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_4))) > integer_of_int32(query)))

goal find_array_ensures_default_po_2:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall i_3:int.
  ((0 <= i_3) and (i_3 < integer_of_int32(low))) ->
  ("JC_41": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_3))) < integer_of_int32(query)))

goal find_array_ensures_default_po_3:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  ("JC_42": (integer_of_int32(high) < integer_of_int32(length_1)))

goal find_array_ensures_default_po_4:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  ("JC_43": (0 <= integer_of_int32(low)))

goal find_array_ensures_default_po_5:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) < integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result6) ->
  forall i_4:int.
  ((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
  ("JC_40": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_4))) > integer_of_int32(query)))

goal find_array_ensures_default_po_6:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) < integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result6) ->
  forall i_3:int.
  ((0 <= i_3) and (i_3 < integer_of_int32(low1))) ->
  ("JC_41": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_3))) < integer_of_int32(query)))

goal find_array_ensures_default_po_7:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) < integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result6) ->
  ("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1)))

goal find_array_ensures_default_po_8:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) < integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result6) ->
  ("JC_43": (0 <= integer_of_int32(low1)))

goal find_array_ensures_default_po_9:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) >= integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result6) ->
  forall i_4:int.
  ((integer_of_int32(high1) < i_4) and (i_4 < integer_of_int32(length_1))) ->
  ("JC_40": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_4))) > integer_of_int32(query)))

goal find_array_ensures_default_po_10:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) >= integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result6) ->
  forall i_3:int.
  ((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
  ("JC_41": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  i_3))) < integer_of_int32(query)))

goal find_array_ensures_default_po_11:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) >= integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result6) ->
  ("JC_42": (integer_of_int32(high1) < integer_of_int32(length_1)))

goal find_array_ensures_default_po_12:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  (("JC_40":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_41":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_42": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_43": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) <> integer_of_int32(query)) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) >= integer_of_int32(query)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result6) ->
  ("JC_43": (0 <= integer_of_int32(low0)))

goal find_array_ensures_exists_po_1:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  (mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3) and
   ("JC_11":
   (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
    (("JC_8": (integer_of_int32(length_1) >= 0)) and
     (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
      ("JC_10": (offset_max(intP_arr_3_alloc_table,
      arr_1) >= (integer_of_int32(length_1) - 1)))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_53": true) ->
  (("JC_48":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_49":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_50": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_51": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) = integer_of_int32(query)) ->
  forall __retres:int32.
  (__retres = mean) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_19": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(return)))) = integer_of_int32(query)))

goal find_array_ensures_exists_po_2:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  (mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3) and
   ("JC_11":
   (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
    (("JC_8": (integer_of_int32(length_1) >= 0)) and
     (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
      ("JC_10": (offset_max(intP_arr_3_alloc_table,
      arr_1) >= (integer_of_int32(length_1) - 1)))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_53": true) ->
  (("JC_48":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_49":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_50": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_51": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) > integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_19": (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(return)))) = integer_of_int32(query)))

goal find_array_ensures_not_exists_po_1:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ((not mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   ("JC_11":
   (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
    (("JC_8": (integer_of_int32(length_1) >= 0)) and
     (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
      ("JC_10": (offset_max(intP_arr_3_alloc_table,
      arr_1) >= (integer_of_int32(length_1) - 1)))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_61": true) ->
  (("JC_56":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_57":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_58": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_59": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(low0) + integer_of_int32(result2))) ->
  forall mean:int32.
  (mean = result3) ->
  forall result4:int32.
  (result4 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result4) = integer_of_int32(query)) ->
  forall __retres:int32.
  (__retres = mean) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_21": (integer_of_int32(return) = (-1)))

goal find_array_ensures_not_exists_po_2:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ((not mem(query, arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   ("JC_11":
   (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
    (("JC_8": (integer_of_int32(length_1) >= 0)) and
     (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
      ("JC_10": (offset_max(intP_arr_3_alloc_table,
      arr_1) >= (integer_of_int32(length_1) - 1)))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_61": true) ->
  (("JC_56":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_57":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_58": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_59": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) > integer_of_int32(high0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_21": (integer_of_int32(return) = (-1)))

goal find_array_safety_po_1:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  ((-2147483648) <= (integer_of_int32(length_1) - 1))

goal find_array_safety_po_2:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  ((integer_of_int32(length_1) - 1) <= 2147483647)

goal find_array_safety_po_3:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  ((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0)))

goal find_array_safety_po_4:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)

goal find_array_safety_po_5:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0)

goal find_array_safety_po_6:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  ((-2147483648) <= result2)

goal find_array_safety_po_7:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (result2 <= 2147483647)

goal find_array_safety_po_8:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  ((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3)))

goal find_array_safety_po_9:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)

goal find_array_safety_po_10:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  (offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean))

goal find_array_safety_po_11:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))

goal find_array_safety_po_12:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) < integer_of_int32(query)) ->
  ((-2147483648) <= (integer_of_int32(mean) + 1))

goal find_array_safety_po_13:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) < integer_of_int32(query)) ->
  ((integer_of_int32(mean) + 1) <= 2147483647)

goal find_array_safety_po_14:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) < integer_of_int32(query)) ->
  (((-2147483648) <= (integer_of_int32(mean) + 1)) and
   ((integer_of_int32(mean) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result7) ->
  (0 <= ("JC_39": (integer_of_int32(high0) - integer_of_int32(low0))))

goal find_array_safety_po_15:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) < integer_of_int32(query)) ->
  (((-2147483648) <= (integer_of_int32(mean) + 1)) and
   ((integer_of_int32(mean) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(mean) + 1)) ->
  forall low1:int32.
  (low1 = result7) ->
  (("JC_39": (integer_of_int32(high0) - integer_of_int32(low1))) < ("JC_39":
                                                                   (integer_of_int32(high0) - integer_of_int32(low0))))

goal find_array_safety_po_16:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) >= integer_of_int32(query)) ->
  ((-2147483648) <= (integer_of_int32(mean) - 1))

goal find_array_safety_po_17:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) >= integer_of_int32(query)) ->
  ((integer_of_int32(mean) - 1) <= 2147483647)

goal find_array_safety_po_18:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) >= integer_of_int32(query)) ->
  (((-2147483648) <= (integer_of_int32(mean) - 1)) and
   ((integer_of_int32(mean) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result7) ->
  (0 <= ("JC_39": (integer_of_int32(high0) - integer_of_int32(low0))))

goal find_array_safety_po_19:
  forall arr_1:intP pointer.
  forall length_1:int32.
  forall query:int32.
  forall intP_arr_3_alloc_table:intP alloc_table.
  forall intP_intM_arr_3:(intP,
  int32) memory.
  ("JC_11":
  (("JC_7": sorted(arr_1, integer_of_int32(length_1), intP_intM_arr_3)) and
   (("JC_8": (integer_of_int32(length_1) >= 0)) and
    (("JC_9": (offset_min(intP_arr_3_alloc_table, arr_1) <= 0)) and
     ("JC_10": (offset_max(intP_arr_3_alloc_table,
     arr_1) >= (integer_of_int32(length_1) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall low:int32.
  (low = result) ->
  (((-2147483648) <= (integer_of_int32(length_1) - 1)) and
   ((integer_of_int32(length_1) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(length_1) - 1)) ->
  forall high:int32.
  (high = result0) ->
  forall high0:int32.
  forall low0:int32.
  ("JC_29": true) ->
  (("JC_24":
   (forall i_4:int.
     (((integer_of_int32(high0) < i_4) and (i_4 < integer_of_int32(length_1))) ->
      (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
      i_4))) > integer_of_int32(query))))) and
   (("JC_25":
    (forall i_3:int.
      (((0 <= i_3) and (i_3 < integer_of_int32(low0))) ->
       (integer_of_int32(select(intP_intM_arr_3, shift(arr_1,
       i_3))) < integer_of_int32(query))))) and
    (("JC_26": (integer_of_int32(high0) < integer_of_int32(length_1))) and
     ("JC_27": (0 <= integer_of_int32(low0)))))) ->
  (integer_of_int32(low0) <= integer_of_int32(high0)) ->
  (((-2147483648) <= (integer_of_int32(high0) - integer_of_int32(low0))) and
   ((integer_of_int32(high0) - integer_of_int32(low0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(high0) - integer_of_int32(low0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  (((-2147483648) <= (integer_of_int32(low0) + integer_of_int32(result3))) and
   ((integer_of_int32(low0) + integer_of_int32(result3)) <= 2147483647)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(low0) + integer_of_int32(result3))) ->
  forall mean:int32.
  (mean = result4) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result5:int32.
  (result5 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result5) <> integer_of_int32(query)) ->
  ((offset_min(intP_arr_3_alloc_table, arr_1) <= integer_of_int32(mean)) and
   (integer_of_int32(mean) <= offset_max(intP_arr_3_alloc_table, arr_1))) ->
  forall result6:int32.
  (result6 = select(intP_intM_arr_3, shift(arr_1,
  integer_of_int32(mean)))) ->
  (integer_of_int32(result6) >= integer_of_int32(query)) ->
  (((-2147483648) <= (integer_of_int32(mean) - 1)) and
   ((integer_of_int32(mean) - 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(mean) - 1)) ->
  forall high1:int32.
  (high1 = result7) ->
  (("JC_39": (integer_of_int32(high1) - integer_of_int32(low0))) < ("JC_39":
                                                                   (integer_of_int32(high0) - integer_of_int32(low0))))

