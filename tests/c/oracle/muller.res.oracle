========== file tests/c/muller.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

/*@ axiomatic NumOfPos {
  @  logic integer num_of_pos{L}(integer i,integer j,int *t);
  @  axiom num_of_pos_empty{L} :
  @   \forall integer i, j, int *t;
  @    i >= j ==> num_of_pos(i,j,t) == 0;
  @  axiom num_of_pos_true_case{L} :
  @   \forall integer i, j, k, int *t;
  @       i < j && t[j-1] > 0 ==>
  @         num_of_pos(i,j,t) == num_of_pos(i,j-1,t) + 1;
  @  axiom num_of_pos_false_case{L} :
  @   \forall integer i, j, k, int *t;
  @       i < j && ! (t[j-1] > 0) ==>
  @         num_of_pos(i,j,t) == num_of_pos(i,j-1,t);
  @ }
  @*/


/*@ lemma num_of_pos_non_negative{L} :
  @   \forall integer i, j, int *t; 0 <= num_of_pos(i,j,t);
  @*/

/*@ lemma num_of_pos_additive{L} :
  @   \forall integer i, j, k, int *t; i <= j <= k ==>
  @       num_of_pos(i,k,t) == num_of_pos(i,j,t) + num_of_pos(j,k,t);
  @*/

/*@ lemma num_of_pos_increasing{L} :
  @   \forall integer i, j, k, int *t;
  @       j <= k ==> num_of_pos(i,j,t) <= num_of_pos(i,k,t);
  @*/

/*@ lemma num_of_pos_strictly_increasing{L} :
  @   \forall integer i, n, int *t;
  @       0 <= i < n && t[i] > 0 ==>
  @       num_of_pos(0,i,t) < num_of_pos(0,n,t);
  @*/

/*@ requires l >= 0 && \valid_range(t,0,l-1);
  @*/
int* m(int *t, int l) {
  int i, count = 0;
  int *u;

  /*@ loop invariant
    @    0 <= i <= l &&
    @    0 <= count <= i &&
    @    count == num_of_pos(0,i,t) ;
    @ loop variant l - i;
    @*/
  for (i=0 ; i < l; i++) if (t[i] > 0) count++;

  u = (int*)calloc(count,sizeof(int));
  count = 0;

  /*@ loop invariant
    @    0 <= i <= l &&
    @    0 <= count <= i &&
    @    count == num_of_pos(0,i,t);
    @ loop variant l - i;
    @*/
  for (int i=0 ; i < l; i++) {
    if (t[i] > 0) u[count++] = t[i];
  }
  return u;
}


/*
Local Variables:
compile-command: "make muller.why3ml"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/muller.c"
[jessie] Starting Jessie translation
[kernel] warning: No code for function calloc, default assigns generated for default behavior
[jessie] Producing Jessie files in subdir tests/c/muller.jessie
[jessie] File tests/c/muller.jessie/muller.jc written.
[jessie] File tests/c/muller.jessie/muller.cloc written.
========== file tests/c/muller.jessie/muller.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag intP = {
  int32 intM: 32;
}

type intP = [intP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

axiomatic NumOfPos {

  logic integer num_of_pos{L}(integer i, integer j, intP[..] t)
   
  axiom num_of_pos_empty{L} :
  (\forall integer i_0;
    (\forall integer j_0;
      (\forall intP[..] t_0;
        ((i_0 >= j_0) ==> (num_of_pos{L}(i_0, j_0, t_0) == 0)))))
   
  axiom num_of_pos_true_case{L} :
  (\forall integer i_1;
    (\forall integer j_1;
      (\forall integer k;
        (\forall intP[..] t_1;
          (((i_1 < j_1) && ((t_1 + (j_1 - 1)).intM > 0)) ==>
            (num_of_pos{L}(i_1, j_1, t_1) ==
              (num_of_pos{L}(i_1, (j_1 - 1), t_1) + 1)))))))
   
  axiom num_of_pos_false_case{L} :
  (\forall integer i_2;
    (\forall integer j_2;
      (\forall integer k_0;
        (\forall intP[..] t_2;
          (((i_2 < j_2) && (! ((t_2 + (j_2 - 1)).intM > 0))) ==>
            (num_of_pos{L}(i_2, j_2, t_2) ==
              num_of_pos{L}(i_2, (j_2 - 1), t_2)))))))
  
}

lemma num_of_pos_non_negative{L} :
(\forall integer i_3;
  (\forall integer j_3;
    (\forall intP[..] t_3;
      (0 <= num_of_pos{L}(i_3, j_3, t_3)))))

lemma num_of_pos_additive{L} :
(\forall integer i_4;
  (\forall integer j_4;
    (\forall integer k_1;
      (\forall intP[..] t_4;
        (((i_4 <= j_4) && (j_4 <= k_1)) ==>
          (num_of_pos{L}(i_4, k_1, t_4) ==
            (num_of_pos{L}(i_4, j_4, t_4) + num_of_pos{L}(j_4, k_1, t_4))))))))

lemma num_of_pos_increasing{L} :
(\forall integer i_5;
  (\forall integer j_5;
    (\forall integer k_2;
      (\forall intP[..] t_5;
        ((j_5 <= k_2) ==>
          (num_of_pos{L}(i_5, j_5, t_5) <= num_of_pos{L}(i_5, k_2, t_5)))))))

lemma num_of_pos_strictly_increasing{L} :
(\forall integer i_6;
  (\forall integer n;
    (\forall intP[..] t_6;
      ((((0 <= i_6) && (i_6 < n)) && ((t_6 + i_6).intM > 0)) ==>
        (num_of_pos{L}(0, i_6, t_6) < num_of_pos{L}(0, n, t_6))))))

int32 calloc()
behavior default:
  assigns \nothing;
  ensures (C_1 : true);
;

intP[..] m(intP[..] t, int32 l)
  requires (C_51 : ((C_52 : (l >= 0)) &&
                     ((C_54 : (\offset_min(t) <= 0)) &&
                       (C_55 : (\offset_max(t) >= (l - 1))))));
behavior default:
  ensures (C_50 : true);
{  
   (var int32 i);
   
   (var int32 count);
   
   (var intP[..] u);
   
   (var int32 i_0);
   
   (var int32 tmp_0);
   
   {  (C_2 : (count = 0));
      (C_3 : (i = 0));
      
      loop 
      behavior default:
        invariant (C_5 : ((((C_8 : (0 <= i)) && (C_9 : (i <= l))) &&
                            ((C_11 : (0 <= count)) && (C_12 : (count <= i)))) &&
                           (C_13 : (count == num_of_pos{Here}(0, i, t)))));
      variant (C_4 : (l - i));
      while (true)
      {  
         {  (if (i < l) then () else 
            (goto while_0_break));
            (if ((C_18 : (C_17 : (t + i)).intM) > 0) then (C_16 : (count = 
                                                          (C_15 : ((C_14 : 
                                                                   (count +
                                                                    1)) :> int32)))) else ());
            (C_21 : (i = (C_20 : ((C_19 : (i + 1)) :> int32))))
         }
      };
      (while_0_break : ());
      (C_23 : (u = (C_22 : (new intP[count]))));
      (C_24 : (count = 0));
      
      {  (C_25 : (i_0 = 0));
         
         loop 
         behavior default:
           invariant (C_27 : ((((C_30 : (0 <= i_0)) && (C_31 : (i_0 <= l))) &&
                                ((C_33 : (0 <= count)) &&
                                  (C_34 : (count <= i_0)))) &&
                               (C_35 : (count == num_of_pos{Here}(0, i_0, t)))));
         variant (C_26 : (l - i_0));
         while (true)
         {  
            {  (if (i_0 < l) then () else 
               (goto while_1_break));
               
               {  (if ((C_46 : (C_45 : (t + i_0)).intM) > 0) then 
                  {  (C_36 : (tmp_0 = count));
                     (C_39 : (count = (C_38 : ((C_37 : (count + 1)) :> int32))));
                     (C_44 : ((C_43 : (C_42 : (u + tmp_0)).intM) = (C_41 : 
                                                                   (C_40 : 
                                                                   (t +
                                                                    i_0)).intM)))
                  } else ())
               };
               (C_49 : (i_0 = (C_48 : ((C_47 : (i_0 + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return u)
   }
}
========== file tests/c/muller.jessie/muller.cloc ==========
[C_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_51]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 44

[C_52]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 19

[m]
name = "Function m"
file = "HOME/tests/c/muller.c"
line = 71
begin = 3
end = 4

[C_53]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[C_54]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[C_55]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[num_of_pos_non_negative]
name = "Lemma num_of_pos_non_negative"
file = "HOME/tests/c/muller.c"
line = 49
begin = 4
end = 98

[C_10]
file = "HOME/tests/c/muller.c"
line = 77
begin = 9
end = 24

[C_11]
file = "HOME/tests/c/muller.c"
line = 77
begin = 9
end = 19

[C_12]
file = "HOME/tests/c/muller.c"
line = 77
begin = 14
end = 24

[C_13]
file = "HOME/tests/c/muller.c"
line = 78
begin = 9
end = 35

[C_14]
file = "HOME/tests/c/muller.c"
line = 81
begin = 39
end = 46

[C_15]
file = "HOME/tests/c/muller.c"
line = 81
begin = 39
end = 46

[C_16]
file = "HOME/tests/c/muller.c"
line = 81
begin = 39
end = 46

[C_17]
file = "HOME/tests/c/muller.c"
line = 81
begin = 29
end = 30

[C_18]
file = "HOME/tests/c/muller.c"
line = 81
begin = 29
end = 33

[C_19]
file = "HOME/tests/c/muller.c"
line = 81
begin = 20
end = 23

[C_1]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_2]
file = "HOME/tests/c/muller.c"
line = 72
begin = 2
end = 5

[C_3]
file = "HOME/tests/c/muller.c"
line = 81
begin = 9
end = 10

[C_4]
file = "HOME/tests/c/muller.c"
line = 79
begin = 19
end = 24

[C_20]
file = "HOME/tests/c/muller.c"
line = 81
begin = 20
end = 23

[C_5]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 87

[C_21]
file = "HOME/tests/c/muller.c"
line = 81
begin = 20
end = 23

[C_6]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 48

[C_22]
file = "HOME/tests/c/muller.c"
line = 83
begin = 12
end = 37

[C_7]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 20

[C_23]
file = "HOME/tests/c/muller.c"
line = 83
begin = 12
end = 37

[C_8]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 15

[C_24]
file = "HOME/tests/c/muller.c"
line = 84
begin = 10
end = 11

[C_9]
file = "HOME/tests/c/muller.c"
line = 76
begin = 14
end = 20

[C_25]
file = "HOME/tests/c/muller.c"
line = 92
begin = 7
end = 10

[C_26]
file = "HOME/tests/c/muller.c"
line = 90
begin = 19
end = 24

[C_27]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 87

[C_28]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 48

[C_29]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 20

[num_of_pos_empty]
name = "Lemma num_of_pos_empty"
file = "HOME/tests/c/muller.c"
line = 34
begin = 5
end = 110

[C_30]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 15

[C_31]
file = "HOME/tests/c/muller.c"
line = 87
begin = 14
end = 20

[C_32]
file = "HOME/tests/c/muller.c"
line = 88
begin = 9
end = 24

[num_of_pos_true_case]
name = "Lemma num_of_pos_true_case"
file = "HOME/tests/c/muller.c"
line = 37
begin = 5
end = 167

[C_33]
file = "HOME/tests/c/muller.c"
line = 88
begin = 9
end = 19

[C_34]
file = "HOME/tests/c/muller.c"
line = 88
begin = 14
end = 24

[C_35]
file = "HOME/tests/c/muller.c"
line = 89
begin = 9
end = 35

[C_36]
file = "HOME/tests/c/muller.c"
line = 93
begin = 20
end = 27

[num_of_pos_additive]
name = "Lemma num_of_pos_additive"
file = "HOME/tests/c/muller.c"
line = 53
begin = 4
end = 159

[C_37]
file = "HOME/tests/c/muller.c"
line = 93
begin = 20
end = 27

[C_38]
file = "HOME/tests/c/muller.c"
line = 93
begin = 20
end = 27

[C_39]
file = "HOME/tests/c/muller.c"
line = 93
begin = 20
end = 27

[num_of_pos_strictly_increasing]
name = "Lemma num_of_pos_strictly_increasing"
file = "HOME/tests/c/muller.c"
line = 63
begin = 4
end = 167

[C_40]
file = "HOME/tests/c/muller.c"
line = 93
begin = 31
end = 32

[C_41]
file = "HOME/tests/c/muller.c"
line = 93
begin = 31
end = 35

[C_42]
file = "HOME/tests/c/muller.c"
line = 93
begin = 18
end = 19

[C_43]
file = "HOME/tests/c/muller.c"
line = 93
begin = 31
end = 35

[num_of_pos_increasing]
name = "Lemma num_of_pos_increasing"
file = "HOME/tests/c/muller.c"
line = 58
begin = 4
end = 136

[C_44]
file = "HOME/tests/c/muller.c"
line = 93
begin = 31
end = 35

[C_45]
file = "HOME/tests/c/muller.c"
line = 93
begin = 8
end = 9

[C_46]
file = "HOME/tests/c/muller.c"
line = 93
begin = 8
end = 12

[C_47]
file = "HOME/tests/c/muller.c"
line = 92
begin = 24
end = 27

[C_48]
file = "HOME/tests/c/muller.c"
line = 92
begin = 24
end = 27

[C_49]
file = "HOME/tests/c/muller.c"
line = 92
begin = 24
end = 27

[num_of_pos_false_case]
name = "Lemma num_of_pos_false_case"
file = "HOME/tests/c/muller.c"
line = 41
begin = 5
end = 168

========== jessie execution ==========
Generating Why function m
========== file tests/c/muller.jessie/muller.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs muller.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs muller.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/muller_why.sx

project: why/muller.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/muller_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/muller_why.vo

coq/muller_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/muller_why.v: why/muller.why
	@echo 'why -coq [...] why/muller.why' && $(WHY) $(JESSIELIBFILES) why/muller.why && rm -f coq/jessie_why.v

coq-goals: goals coq/muller_ctx_why.vo
	for f in why/*_po*.why; do make -f muller.makefile coq/`basename $$f .why`_why.v ; done

coq/muller_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/muller_ctx_why.v: why/muller_ctx.why
	@echo 'why -coq [...] why/muller_ctx.why' && $(WHY) why/muller_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export muller_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/muller_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/muller_ctx_why.vo

pvs: pvs/muller_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/muller_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/muller_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/muller_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/muller_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/muller_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/muller_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/muller_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/muller_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/muller_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/muller_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/muller_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/muller_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/muller_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/muller_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: muller.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/muller_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/muller_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: muller.mlw
	@echo 'why3ml [...] $<' && why3ide --extra-config $(JESSIE3CONF) $<

-include muller.depend

depend: coq/muller_why.v
	-$(COQDEP) -I coq coq/muller*_why.v > muller.depend

clean:
	rm -f coq/*.vo

========== file tests/c/muller.jessie/muller.loc ==========
[m_safety]
name = "Function m"
behavior = "Safety"
file = "HOME/tests/c/muller.c"
line = 71
begin = 3
end = 4

[JC_40]
file = "HOME/tests/c/muller.c"
line = 87
begin = 14
end = 20

[JC_41]
file = "HOME/tests/c/muller.c"
line = 88
begin = 9
end = 19

[JC_42]
file = "HOME/tests/c/muller.c"
line = 88
begin = 14
end = 24

[JC_43]
file = "HOME/tests/c/muller.c"
line = 89
begin = 9
end = 35

[JC_44]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 87

[JC_45]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_46]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 143
begin = 9
end = 1137

[JC_1]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 94
begin = 6
end = 12

[JC_47]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 143
begin = 9
end = 1137

[JC_2]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_48]
kind = PointerDeref
file = "HOME/tests/c/muller.c"
line = 93
begin = 8
end = 12

[JC_3]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 94
begin = 6
end = 12

[JC_49]
kind = ArithOverflow
file = "HOME/tests/c/muller.c"
line = 93
begin = 20
end = 27

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 96
begin = 10
end = 18

[JC_7]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 96
begin = 10
end = 18

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[num_of_pos_non_negative]
name = "Lemma num_of_pos_non_negative"
behavior = "lemma"
file = "HOME/tests/c/muller.c"
line = 49
begin = 4
end = 98

[JC_50]
kind = PointerDeref
file = "HOME/tests/c/muller.c"
line = 93
begin = 31
end = 35

[JC_51]
kind = PointerDeref
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 158
begin = 30
end = 303

[JC_52]
kind = ArithOverflow
file = "HOME/tests/c/muller.c"
line = 92
begin = 24
end = 27

[JC_53]
file = "HOME/tests/c/muller.c"
line = 90
begin = 19
end = 24

[JC_54]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 15

[JC_55]
file = "HOME/tests/c/muller.c"
line = 76
begin = 14
end = 20

[JC_56]
file = "HOME/tests/c/muller.c"
line = 77
begin = 9
end = 19

[JC_57]
file = "HOME/tests/c/muller.c"
line = 77
begin = 14
end = 24

[JC_58]
file = "HOME/tests/c/muller.c"
line = 78
begin = 9
end = 35

[JC_59]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 87

[JC_60]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_61]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 120
begin = 6
end = 800

[JC_62]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 120
begin = 6
end = 800

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
kind = AllocSize
file = "HOME/tests/c/muller.c"
line = 83
begin = 12
end = 37

[JC_11]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 19

[JC_64]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 15

[JC_12]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[JC_65]
file = "HOME/tests/c/muller.c"
line = 87
begin = 14
end = 20

[JC_13]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[JC_66]
file = "HOME/tests/c/muller.c"
line = 88
begin = 9
end = 19

[JC_14]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 44

[JC_67]
file = "HOME/tests/c/muller.c"
line = 88
begin = 14
end = 24

[JC_15]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_68]
file = "HOME/tests/c/muller.c"
line = 89
begin = 9
end = 35

[JC_16]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 19

[JC_69]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 87

[JC_17]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[JC_18]
file = "HOME/tests/c/muller.c"
line = 69
begin = 23
end = 44

[JC_19]
file = "HOME/tests/c/muller.c"
line = 69
begin = 13
end = 44

[JC_70]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_71]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 143
begin = 9
end = 1137

[JC_72]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 143
begin = 9
end = 1137

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_24]
file = "HOME/"
line = 0
begin = -1
end = -1

[num_of_pos_empty]
name = "Lemma num_of_pos_empty"
behavior = "axiom"
file = "HOME/tests/c/muller.c"
line = 34
begin = 5
end = 110

[JC_25]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 15

[JC_26]
file = "HOME/tests/c/muller.c"
line = 76
begin = 14
end = 20

[JC_27]
file = "HOME/tests/c/muller.c"
line = 77
begin = 9
end = 19

[num_of_pos_true_case]
name = "Lemma num_of_pos_true_case"
behavior = "axiom"
file = "HOME/tests/c/muller.c"
line = 37
begin = 5
end = 167

[JC_28]
file = "HOME/tests/c/muller.c"
line = 77
begin = 14
end = 24

[JC_29]
file = "HOME/tests/c/muller.c"
line = 78
begin = 9
end = 35

[num_of_pos_additive]
name = "Lemma num_of_pos_additive"
behavior = "lemma"
file = "HOME/tests/c/muller.c"
line = 53
begin = 4
end = 159

[JC_30]
file = "HOME/tests/c/muller.c"
line = 76
begin = 9
end = 87

[m_ensures_default]
name = "Function m"
behavior = "default behavior"
file = "HOME/tests/c/muller.c"
line = 71
begin = 3
end = 4

[JC_31]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_32]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 120
begin = 6
end = 800

[num_of_pos_strictly_increasing]
name = "Lemma num_of_pos_strictly_increasing"
behavior = "lemma"
file = "HOME/tests/c/muller.c"
line = 63
begin = 4
end = 167

[JC_33]
file = "HOME/tests/c/muller.jessie/muller.jc"
line = 120
begin = 6
end = 800

[JC_34]
kind = PointerDeref
file = "HOME/tests/c/muller.c"
line = 81
begin = 29
end = 33

[JC_35]
kind = ArithOverflow
file = "HOME/tests/c/muller.c"
line = 81
begin = 39
end = 46

[JC_36]
kind = ArithOverflow
file = "HOME/tests/c/muller.c"
line = 81
begin = 20
end = 23

[JC_37]
file = "HOME/tests/c/muller.c"
line = 79
begin = 19
end = 24

[JC_38]
kind = AllocSize
file = "HOME/tests/c/muller.c"
line = 83
begin = 12
end = 37

[num_of_pos_increasing]
name = "Lemma num_of_pos_increasing"
behavior = "lemma"
file = "HOME/tests/c/muller.c"
line = 58
begin = 4
end = 136

[JC_39]
file = "HOME/tests/c/muller.c"
line = 87
begin = 9
end = 15

[num_of_pos_false_case]
name = "Lemma num_of_pos_false_case"
behavior = "axiom"
file = "HOME/tests/c/muller.c"
line = 41
begin = 5
end = 168

========== file tests/c/muller.jessie/why/muller.why ==========
type charP

type int32

type int8

type intP

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32[eq_int(integer_of_int32(x), integer_of_int32(y))].
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

logic num_of_pos: int, int, intP pointer, (intP, int32) memory -> int

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

axiom num_of_pos_empty :
 (forall intP_intM_t_1_at_L:(intP, int32) memory.
  (forall i_0:int.
   (forall j_0:int.
    (forall t_0_0:intP pointer.
     (ge_int(i_0, j_0) ->
      (num_of_pos(i_0, j_0, t_0_0, intP_intM_t_1_at_L) = (0)))))))

axiom num_of_pos_true_case :
 (forall intP_intM_t_1_at_L:(intP, int32) memory.
  (forall i_1:int.
   (forall j_1:int.
    (forall k:int.
     (forall t_1:intP pointer.
      ((lt_int(i_1, j_1)
       and gt_int(integer_of_int32(select(intP_intM_t_1_at_L,
                                   shift(t_1, sub_int(j_1, (1))))),
           (0))) ->
       (num_of_pos(i_1, j_1, t_1, intP_intM_t_1_at_L) = add_int(num_of_pos(i_1,
                                                                sub_int(j_1,
                                                                (1)), t_1,
                                                                intP_intM_t_1_at_L),
                                                        (1)))))))))

axiom num_of_pos_false_case :
 (forall intP_intM_t_1_at_L:(intP, int32) memory.
  (forall i_2:int.
   (forall j_2:int.
    (forall k_0:int.
     (forall t_2:intP pointer.
      ((lt_int(i_2, j_2)
       and (not gt_int(integer_of_int32(select(intP_intM_t_1_at_L,
                                        shift(t_2, sub_int(j_2, (1))))),
                (0)))) ->
       (num_of_pos(i_2, j_2, t_2, intP_intM_t_1_at_L) = num_of_pos(i_2,
                                                        sub_int(j_2, (1)),
                                                        t_2,
                                                        intP_intM_t_1_at_L))))))))

lemma num_of_pos_non_negative :
 (forall intP_intM_t_3_8_at_L:(intP, int32) memory.
  (forall i_3:int.
   (forall j_3:int.
    (forall t_3:intP pointer.
     le_int((0), num_of_pos(i_3, j_3, t_3, intP_intM_t_3_8_at_L))))))

lemma num_of_pos_additive :
 (forall intP_intM_t_4_9_at_L:(intP, int32) memory.
  (forall i_4:int.
   (forall j_4:int.
    (forall k_1:int.
     (forall t_4:intP pointer.
      ((le_int(i_4, j_4) and le_int(j_4, k_1)) ->
       (num_of_pos(i_4, k_1, t_4, intP_intM_t_4_9_at_L) = add_int(num_of_pos(i_4,
                                                                  j_4, t_4,
                                                                  intP_intM_t_4_9_at_L),
                                                          num_of_pos(j_4,
                                                          k_1, t_4,
                                                          intP_intM_t_4_9_at_L)))))))))

lemma num_of_pos_increasing :
 (forall intP_intM_t_5_10_at_L:(intP, int32) memory.
  (forall i_5:int.
   (forall j_5:int.
    (forall k_2:int.
     (forall t_5:intP pointer.
      (le_int(j_5, k_2) ->
       le_int(num_of_pos(i_5, j_5, t_5, intP_intM_t_5_10_at_L),
       num_of_pos(i_5, k_2, t_5, intP_intM_t_5_10_at_L))))))))

lemma num_of_pos_strictly_increasing :
 (forall intP_intM_t_6_11_at_L:(intP, int32) memory.
  (forall i_6:int.
   (forall n:int.
    (forall t_6:intP pointer.
     ((le_int((0), i_6)
      and (lt_int(i_6, n)
          and gt_int(integer_of_int32(select(intP_intM_t_6_11_at_L,
                                      shift(t_6, i_6))),
              (0)))) ->
      lt_int(num_of_pos((0), i_6, t_6, intP_intM_t_6_11_at_L),
      num_of_pos((0), n, t_6, intP_intM_t_6_11_at_L)))))))

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter calloc : tt:unit -> { } int32 { true }

parameter calloc_requires : tt:unit -> { } int32 { true }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter m :
 t_0:intP pointer ->
  l:int32 ->
   intP_m_4_alloc_table:intP alloc_table ref ->
    intP_m_4_tag_table:intP tag_table ref ->
     intP_intM_m_4:(intP, int32) memory ref ->
      intP_t_2_alloc_table:intP alloc_table ->
       intP_intM_t_2:(intP, int32) memory ->
        { } intP pointer reads intP_m_4_alloc_table
        writes intP_intM_m_4,intP_m_4_alloc_table,intP_m_4_tag_table 
        { true }

parameter m_requires :
 t_0:intP pointer ->
  l:int32 ->
   intP_m_4_alloc_table:intP alloc_table ref ->
    intP_m_4_tag_table:intP tag_table ref ->
     intP_intM_m_4:(intP, int32) memory ref ->
      intP_t_2_alloc_table:intP alloc_table ->
       intP_intM_t_2:(intP, int32) memory ->
        { (JC_14:
          ((JC_11: ge_int(integer_of_int32(l), (0)))
          and ((JC_12: le_int(offset_min(intP_t_2_alloc_table, t_0), (0)))
              and (JC_13:
                  ge_int(offset_max(intP_t_2_alloc_table, t_0),
                  sub_int(integer_of_int32(l), (1)))))))}
        intP pointer reads intP_m_4_alloc_table
        writes intP_intM_m_4,intP_m_4_alloc_table,intP_m_4_tag_table 
        { true }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let m_ensures_default =
 fun (t_0 : intP pointer) (l : int32) (intP_m_4_alloc_table : intP alloc_table ref) (intP_m_4_tag_table : intP tag_table ref) (intP_intM_m_4 : (intP, int32) memory ref) (intP_t_2_alloc_table : intP alloc_table) (intP_intM_t_2 : (intP, int32) memory) ->
  { (JC_19:
    ((JC_16: ge_int(integer_of_int32(l), (0)))
    and ((JC_17: le_int(offset_min(intP_t_2_alloc_table, t_0), (0)))
        and (JC_18:
            ge_int(offset_max(intP_t_2_alloc_table, t_0),
            sub_int(integer_of_int32(l), (1))))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let i_7 = ref (any_int32 void) in
     (let count = ref (any_int32 void) in
     (let u = ref (any_pointer void) in
     (let i_0_0 = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     try
      (C_2:
      (C_3:
      begin
        (let jessie_<num> = (count := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<num> = (i_7 := (safe_int32_of_integer_ (0))) in void);
       (loop_3:
       while true do
       { invariant
           (JC_59:
           ((JC_54: le_int((0), integer_of_int32(i_7)))
           and ((JC_55: le_int(integer_of_int32(i_7), integer_of_int32(l)))
               and ((JC_56: le_int((0), integer_of_int32(count)))
                   and ((JC_57:
                        le_int(integer_of_int32(count),
                        integer_of_int32(i_7)))
                       and (JC_58:
                           (integer_of_int32(count) = num_of_pos((0),
                                                      integer_of_int32(i_7),
                                                      t_0, intP_intM_t_2))))))))
          }
        begin
          [ { } unit { true } ];
         try
          begin
            (let jessie_<num> =
            (C_21:
            begin
              (if ((lt_int_ (integer_of_int32 !i_7)) (integer_of_int32 l))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((gt_int_ (integer_of_int32 (C_18:
                                             ((safe_acc_ intP_intM_t_2) 
                                              (C_17:
                                              ((shift t_0) (integer_of_int32 !i_7))))))) (0))
             then
              (let jessie_<num> =
              (C_16:
              (count := (C_15:
                        (safe_int32_of_integer_ (C_14:
                                                ((add_int (integer_of_int32 !count)) (1))))))) in
              void) else void);
             (i_7 := (C_20:
                     (safe_int32_of_integer_ (C_19:
                                             ((add_int (integer_of_int32 !i_7)) (1))))));
             !i_7 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break:
      (C_23:
      (C_24:
      begin
        void;
       (let jessie_<num> =
       (u := (C_22:
             (JC_63:
             (((alloc_struct_intP (integer_of_int32 !count)) intP_m_4_alloc_table) intP_m_4_tag_table)))) in
       void);
       (let jessie_<num> = (count := (safe_int32_of_integer_ (0))) in void);
       try
        (C_25:
        begin
          (let jessie_<num> = (i_0_0 := (safe_int32_of_integer_ (0))) in void);
         (loop_4:
         while true do
         { invariant
             (JC_69:
             ((JC_64: le_int((0), integer_of_int32(i_0_0)))
             and ((JC_65:
                  le_int(integer_of_int32(i_0_0), integer_of_int32(l)))
                 and ((JC_66: le_int((0), integer_of_int32(count)))
                     and ((JC_67:
                          le_int(integer_of_int32(count),
                          integer_of_int32(i_0_0)))
                         and (JC_68:
                             (integer_of_int32(count) = num_of_pos((0),
                                                        integer_of_int32(i_0_0),
                                                        t_0, intP_intM_t_2))))))))
            }
          begin
            [ { } unit { true } ];
           try
            begin
              (let jessie_<num> =
              (C_49:
              begin
                (if ((lt_int_ (integer_of_int32 !i_0_0)) (integer_of_int32 l))
                then void else (raise (Goto_while_1_break_exc void)));
               (if ((gt_int_ (integer_of_int32 (C_46:
                                               ((safe_acc_ intP_intM_t_2) 
                                                (C_45:
                                                ((shift t_0) (integer_of_int32 !i_0_0))))))) (0))
               then
                (let jessie_<num> =
                (C_36:
                (C_39:
                begin
                  (let jessie_<num> = (tmp_0 := !count) in void);
                 (let jessie_<num> =
                 (count := (C_38:
                           (safe_int32_of_integer_ (C_37:
                                                   ((add_int (integer_of_int32 !count)) (1)))))) in
                 void);
                 (C_44:
                 (let jessie_<num> =
                 (C_41:
                 ((safe_acc_ intP_intM_t_2) (C_40:
                                            ((shift t_0) (integer_of_int32 !i_0_0))))) in
                 (let jessie_<num> = !u in
                 (let jessie_<num> = (integer_of_int32 !tmp_0) in
                 (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                 begin
                   (((safe_upd_ intP_intM_m_4) jessie_<num>) jessie_<num>);
                  jessie_<num> end))))) end)) in void) else void);
               (i_0_0 := (C_48:
                         (safe_int32_of_integer_ (C_47:
                                                 ((add_int (integer_of_int32 !i_0_0)) (1))))));
               !i_0_0 end) in void); (raise (Loop_continue_exc void)) end
            with Loop_continue_exc jessie_<num> -> void end end done);
         (raise (Goto_while_1_break_exc void)) end) with
        Goto_while_1_break_exc jessie_<num> -> (while_1_break: void) end;
       (return := !u); (raise Return) end))) end))))); absurd  end with
   Return -> !return end)) { (JC_21: true) }

let m_safety =
 fun (t_0 : intP pointer) (l : int32) (intP_m_4_alloc_table : intP alloc_table ref) (intP_m_4_tag_table : intP tag_table ref) (intP_intM_m_4 : (intP, int32) memory ref) (intP_t_2_alloc_table : intP alloc_table) (intP_intM_t_2 : (intP, int32) memory) ->
  { (JC_19:
    ((JC_16: ge_int(integer_of_int32(l), (0)))
    and ((JC_17: le_int(offset_min(intP_t_2_alloc_table, t_0), (0)))
        and (JC_18:
            ge_int(offset_max(intP_t_2_alloc_table, t_0),
            sub_int(integer_of_int32(l), (1))))))) }
  (init:
  (let return = ref (any_pointer void) in
  try
   begin
     (let i_7 = ref (any_int32 void) in
     (let count = ref (any_int32 void) in
     (let u = ref (any_pointer void) in
     (let i_0_0 = ref (any_int32 void) in
     (let tmp_0 = ref (any_int32 void) in
     try
      (C_2:
      (C_3:
      begin
        (let jessie_<num> = (count := (safe_int32_of_integer_ (0))) in void);
       (let jessie_<num> = (i_7 := (safe_int32_of_integer_ (0))) in void);
       (loop_1:
       while true do
       { invariant (JC_32: true)
         variant (JC_37 : sub_int(integer_of_int32(l), integer_of_int32(i_7))) }
        begin
          [ { } unit reads count,i_7
            { (JC_30:
              ((JC_25: le_int((0), integer_of_int32(i_7)))
              and ((JC_26:
                   le_int(integer_of_int32(i_7), integer_of_int32(l)))
                  and ((JC_27: le_int((0), integer_of_int32(count)))
                      and ((JC_28:
                           le_int(integer_of_int32(count),
                           integer_of_int32(i_7)))
                          and (JC_29:
                              (integer_of_int32(count) = num_of_pos((0),
                                                         integer_of_int32(i_7),
                                                         t_0, intP_intM_t_2)))))))) } ];
         try
          begin
            (let jessie_<num> =
            (C_21:
            begin
              (if ((lt_int_ (integer_of_int32 !i_7)) (integer_of_int32 l))
              then void else (raise (Goto_while_0_break_exc void)));
             (if ((gt_int_ (integer_of_int32 (C_18:
                                             (JC_34:
                                             ((((offset_acc_ intP_t_2_alloc_table) intP_intM_t_2) t_0) 
                                              (integer_of_int32 !i_7)))))) (0))
             then
              (let jessie_<num> =
              (C_16:
              (count := (C_15:
                        (JC_35:
                        (int32_of_integer_ (C_14:
                                           ((add_int (integer_of_int32 !count)) (1)))))))) in
              void) else void);
             (i_7 := (C_20:
                     (JC_36:
                     (int32_of_integer_ (C_19:
                                        ((add_int (integer_of_int32 !i_7)) (1)))))));
             !i_7 end) in void); (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end)) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break:
      (C_23:
      (C_24:
      begin
        void;
       (let jessie_<num> =
       (u := (C_22:
             (JC_38:
             (((alloc_struct_intP_requires (integer_of_int32 !count)) intP_m_4_alloc_table) intP_m_4_tag_table)))) in
       void);
       (let jessie_<num> = (count := (safe_int32_of_integer_ (0))) in void);
       try
        (C_25:
        begin
          (let jessie_<num> = (i_0_0 := (safe_int32_of_integer_ (0))) in void);
         (loop_2:
         while true do
         { invariant (JC_46: true)
           variant (JC_53 : sub_int(integer_of_int32(l),
                            integer_of_int32(i_0_0))) }
          begin
            [ { } unit reads count,i_0_0
              { (JC_44:
                ((JC_39: le_int((0), integer_of_int32(i_0_0)))
                and ((JC_40:
                     le_int(integer_of_int32(i_0_0), integer_of_int32(l)))
                    and ((JC_41: le_int((0), integer_of_int32(count)))
                        and ((JC_42:
                             le_int(integer_of_int32(count),
                             integer_of_int32(i_0_0)))
                            and (JC_43:
                                (integer_of_int32(count) = num_of_pos((0),
                                                           integer_of_int32(i_0_0),
                                                           t_0,
                                                           intP_intM_t_2)))))))) } ];
           try
            begin
              (let jessie_<num> =
              (C_49:
              begin
                (if ((lt_int_ (integer_of_int32 !i_0_0)) (integer_of_int32 l))
                then void else (raise (Goto_while_1_break_exc void)));
               (if ((gt_int_ (integer_of_int32 (C_46:
                                               (JC_48:
                                               ((((offset_acc_ intP_t_2_alloc_table) intP_intM_t_2) t_0) 
                                                (integer_of_int32 !i_0_0)))))) (0))
               then
                (let jessie_<num> =
                (C_36:
                (C_39:
                begin
                  (let jessie_<num> = (tmp_0 := !count) in void);
                 (let jessie_<num> =
                 (count := (C_38:
                           (JC_49:
                           (int32_of_integer_ (C_37:
                                              ((add_int (integer_of_int32 !count)) (1))))))) in
                 void);
                 (C_44:
                 (let jessie_<num> =
                 (C_41:
                 (JC_50:
                 ((((offset_acc_ intP_t_2_alloc_table) intP_intM_t_2) t_0) 
                  (integer_of_int32 !i_0_0)))) in
                 (let jessie_<num> = !u in
                 (let jessie_<num> = (integer_of_int32 !tmp_0) in
                 (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
                 begin
                   (JC_51:
                   (((((offset_upd_ !intP_m_4_alloc_table) intP_intM_m_4) jessie_<num>) jessie_<num>) jessie_<num>));
                  jessie_<num> end))))) end)) in void) else void);
               (i_0_0 := (C_48:
                         (JC_52:
                         (int32_of_integer_ (C_47:
                                            ((add_int (integer_of_int32 !i_0_0)) (1)))))));
               !i_0_0 end) in void); (raise (Loop_continue_exc void)) end
            with Loop_continue_exc jessie_<num> -> void end end done);
         (raise (Goto_while_1_break_exc void)) end) with
        Goto_while_1_break_exc jessie_<num> -> (while_1_break: void) end;
       (return := !u); (raise Return) end))) end))))); absurd  end with
   Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/muller.why
========== file tests/c/muller.jessie/why/muller_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type intP

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

logic num_of_pos : int, int, intP pointer, (intP, int32) memory -> int

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

axiom num_of_pos_empty:
  (forall intP_intM_t_1_at_L:(intP, int32) memory.
    (forall i_0:int.
      (forall j_0:int.
        (forall t_0_0:intP pointer.
          ((i_0 >= j_0) -> (num_of_pos(i_0, j_0, t_0_0,
           intP_intM_t_1_at_L) = 0))))))

axiom num_of_pos_true_case:
  (forall intP_intM_t_1_at_L:(intP, int32) memory.
    (forall i_1:int.
      (forall j_1:int.
        (forall k:int.
          (forall t_1:intP pointer.
            (((i_1 < j_1) and (integer_of_int32(select(intP_intM_t_1_at_L,
              shift(t_1, (j_1 - 1)))) > 0)) ->
             (num_of_pos(i_1, j_1, t_1,
             intP_intM_t_1_at_L) = (num_of_pos(i_1, (j_1 - 1), t_1,
             intP_intM_t_1_at_L) + 1))))))))

axiom num_of_pos_false_case:
  (forall intP_intM_t_1_at_L:(intP, int32) memory.
    (forall i_2:int.
      (forall j_2:int.
        (forall k_0:int.
          (forall t_2:intP pointer.
            (((i_2 < j_2) and
              (not (integer_of_int32(select(intP_intM_t_1_at_L, shift(t_2,
              (j_2 - 1)))) > 0))) ->
             (num_of_pos(i_2, j_2, t_2, intP_intM_t_1_at_L) = num_of_pos(i_2,
             (j_2 - 1), t_2, intP_intM_t_1_at_L))))))))

goal num_of_pos_non_negative:
  (forall intP_intM_t_3_8_at_L:(intP, int32) memory.
    (forall i_3:int.
      (forall j_3:int.
        (forall t_3:intP pointer. (0 <= num_of_pos(i_3, j_3, t_3,
          intP_intM_t_3_8_at_L))))))

axiom num_of_pos_non_negative_as_axiom:
  (forall intP_intM_t_3_8_at_L:(intP, int32) memory.
    (forall i_3:int.
      (forall j_3:int.
        (forall t_3:intP pointer. (0 <= num_of_pos(i_3, j_3, t_3,
          intP_intM_t_3_8_at_L))))))

goal num_of_pos_additive:
  (forall intP_intM_t_4_9_at_L:(intP, int32) memory.
    (forall i_4:int.
      (forall j_4:int.
        (forall k_1:int.
          (forall t_4:intP pointer.
            (((i_4 <= j_4) and (j_4 <= k_1)) -> (num_of_pos(i_4, k_1, t_4,
             intP_intM_t_4_9_at_L) = (num_of_pos(i_4, j_4, t_4,
             intP_intM_t_4_9_at_L) + num_of_pos(j_4, k_1, t_4,
             intP_intM_t_4_9_at_L)))))))))

axiom num_of_pos_additive_as_axiom:
  (forall intP_intM_t_4_9_at_L:(intP, int32) memory.
    (forall i_4:int.
      (forall j_4:int.
        (forall k_1:int.
          (forall t_4:intP pointer.
            (((i_4 <= j_4) and (j_4 <= k_1)) -> (num_of_pos(i_4, k_1, t_4,
             intP_intM_t_4_9_at_L) = (num_of_pos(i_4, j_4, t_4,
             intP_intM_t_4_9_at_L) + num_of_pos(j_4, k_1, t_4,
             intP_intM_t_4_9_at_L)))))))))

goal num_of_pos_increasing:
  (forall intP_intM_t_5_10_at_L:(intP, int32) memory.
    (forall i_5:int.
      (forall j_5:int.
        (forall k_2:int.
          (forall t_5:intP pointer.
            ((j_5 <= k_2) -> (num_of_pos(i_5, j_5, t_5,
             intP_intM_t_5_10_at_L) <= num_of_pos(i_5, k_2, t_5,
             intP_intM_t_5_10_at_L))))))))

axiom num_of_pos_increasing_as_axiom:
  (forall intP_intM_t_5_10_at_L:(intP, int32) memory.
    (forall i_5:int.
      (forall j_5:int.
        (forall k_2:int.
          (forall t_5:intP pointer.
            ((j_5 <= k_2) -> (num_of_pos(i_5, j_5, t_5,
             intP_intM_t_5_10_at_L) <= num_of_pos(i_5, k_2, t_5,
             intP_intM_t_5_10_at_L))))))))

goal num_of_pos_strictly_increasing:
  (forall intP_intM_t_6_11_at_L:(intP, int32) memory.
    (forall i_6:int.
      (forall n:int.
        (forall t_6:intP pointer.
          (((0 <= i_6) and
            ((i_6 < n) and (integer_of_int32(select(intP_intM_t_6_11_at_L,
             shift(t_6, i_6))) > 0))) ->
           (num_of_pos(0, i_6, t_6, intP_intM_t_6_11_at_L) < num_of_pos(0, n,
           t_6, intP_intM_t_6_11_at_L)))))))

axiom num_of_pos_strictly_increasing_as_axiom:
  (forall intP_intM_t_6_11_at_L:(intP, int32) memory.
    (forall i_6:int.
      (forall n:int.
        (forall t_6:intP pointer.
          (((0 <= i_6) and
            ((i_6 < n) and (integer_of_int32(select(intP_intM_t_6_11_at_L,
             shift(t_6, i_6))) > 0))) ->
           (num_of_pos(0, i_6, t_6, intP_intM_t_6_11_at_L) < num_of_pos(0, n,
           t_6, intP_intM_t_6_11_at_L)))))))

goal m_ensures_default_po_1:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  ("JC_59": ("JC_54": (0 <= integer_of_int32(i_7))))

goal m_ensures_default_po_2:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  ("JC_59": ("JC_55": (integer_of_int32(i_7) <= integer_of_int32(l))))

goal m_ensures_default_po_3:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  ("JC_59": ("JC_56": (0 <= integer_of_int32(count))))

goal m_ensures_default_po_4:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  ("JC_59": ("JC_57": (integer_of_int32(count) <= integer_of_int32(i_7))))

goal m_ensures_default_po_5:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  ("JC_59":
  ("JC_58": (integer_of_int32(count) = num_of_pos(0, integer_of_int32(i_7),
  t_0, intP_intM_t_2))))

goal m_ensures_default_po_6:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  ("JC_59": ("JC_54": (0 <= integer_of_int32(i_7_1))))

goal m_ensures_default_po_7:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  ("JC_59": ("JC_55": (integer_of_int32(i_7_1) <= integer_of_int32(l))))

goal m_ensures_default_po_8:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  ("JC_59": ("JC_56": (0 <= integer_of_int32(count1))))

goal m_ensures_default_po_9:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  ("JC_59": ("JC_57": (integer_of_int32(count1) <= integer_of_int32(i_7_1))))

goal m_ensures_default_po_10:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  ("JC_59":
  ("JC_58": (integer_of_int32(count1) = num_of_pos(0,
  integer_of_int32(i_7_1), t_0, intP_intM_t_2))))

goal m_ensures_default_po_11:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  ("JC_59": ("JC_54": (0 <= integer_of_int32(i_7_1))))

goal m_ensures_default_po_12:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  ("JC_59": ("JC_55": (integer_of_int32(i_7_1) <= integer_of_int32(l))))

goal m_ensures_default_po_13:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  ("JC_59": ("JC_56": (0 <= integer_of_int32(count0))))

goal m_ensures_default_po_14:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  ("JC_59": ("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_1))))

goal m_ensures_default_po_15:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  ("JC_59":
  ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
  integer_of_int32(i_7_1), t_0, intP_intM_t_2))))

goal m_ensures_default_po_16:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  ("JC_69": ("JC_64": (0 <= integer_of_int32(i_0_0))))

goal m_ensures_default_po_17:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  ("JC_69": ("JC_65": (integer_of_int32(i_0_0) <= integer_of_int32(l))))

goal m_ensures_default_po_18:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  ("JC_69": ("JC_66": (0 <= integer_of_int32(count1))))

goal m_ensures_default_po_19:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  ("JC_69": ("JC_67": (integer_of_int32(count1) <= integer_of_int32(i_0_0))))

goal m_ensures_default_po_20:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  ("JC_69":
  ("JC_68": (integer_of_int32(count1) = num_of_pos(0,
  integer_of_int32(i_0_0), t_0, intP_intM_t_2))))

goal m_ensures_default_po_21:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  ("JC_69": ("JC_64": (0 <= integer_of_int32(i_0_0_1))))

goal m_ensures_default_po_22:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  ("JC_69": ("JC_65": (integer_of_int32(i_0_0_1) <= integer_of_int32(l))))

goal m_ensures_default_po_23:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  ("JC_69": ("JC_66": (0 <= integer_of_int32(count3))))

goal m_ensures_default_po_24:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  ("JC_69":
  ("JC_67": (integer_of_int32(count3) <= integer_of_int32(i_0_0_1))))

goal m_ensures_default_po_25:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  ("JC_69":
  ("JC_68": (integer_of_int32(count3) = num_of_pos(0,
  integer_of_int32(i_0_0_1), t_0, intP_intM_t_2))))

goal m_ensures_default_po_26:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  ("JC_69": ("JC_64": (0 <= integer_of_int32(i_0_0_1))))

goal m_ensures_default_po_27:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  ("JC_69": ("JC_65": (integer_of_int32(i_0_0_1) <= integer_of_int32(l))))

goal m_ensures_default_po_28:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  ("JC_69": ("JC_66": (0 <= integer_of_int32(count2))))

goal m_ensures_default_po_29:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  ("JC_69":
  ("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_1))))

goal m_ensures_default_po_30:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_59":
  (("JC_54": (0 <= integer_of_int32(i_7_0))) and
   (("JC_55": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_56": (0 <= integer_of_int32(count0))) and
     (("JC_57": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_58": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_69":
  (("JC_64": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_65": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_66": (0 <= integer_of_int32(count2))) and
     (("JC_67": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  ("JC_69":
  ("JC_68": (integer_of_int32(count2) = num_of_pos(0,
  integer_of_int32(i_0_0_1), t_0, intP_intM_t_2))))

goal m_safety_po_1:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  (offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0))

goal m_safety_po_2:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))

goal m_safety_po_3:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  ((-2147483648) <= (integer_of_int32(count0) + 1))

goal m_safety_po_4:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  ((integer_of_int32(count0) + 1) <= 2147483647)

goal m_safety_po_5:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  (((-2147483648) <= (integer_of_int32(count0) + 1)) and
   ((integer_of_int32(count0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  ((-2147483648) <= (integer_of_int32(i_7_0) + 1))

goal m_safety_po_6:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  (((-2147483648) <= (integer_of_int32(count0) + 1)) and
   ((integer_of_int32(count0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  ((integer_of_int32(i_7_0) + 1) <= 2147483647)

goal m_safety_po_7:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  (((-2147483648) <= (integer_of_int32(count0) + 1)) and
   ((integer_of_int32(count0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  (((-2147483648) <= (integer_of_int32(i_7_0) + 1)) and
   ((integer_of_int32(i_7_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  (0 <= ("JC_37": (integer_of_int32(l) - integer_of_int32(i_7_0))))

goal m_safety_po_8:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) > 0) ->
  (((-2147483648) <= (integer_of_int32(count0) + 1)) and
   ((integer_of_int32(count0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(count0) + 1)) ->
  forall count1:int32.
  (count1 = result2) ->
  (((-2147483648) <= (integer_of_int32(i_7_0) + 1)) and
   ((integer_of_int32(i_7_0) + 1) <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result3) ->
  (("JC_37": (integer_of_int32(l) - integer_of_int32(i_7_1))) < ("JC_37":
                                                                (integer_of_int32(l) - integer_of_int32(i_7_0))))

goal m_safety_po_9:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  ((-2147483648) <= (integer_of_int32(i_7_0) + 1))

goal m_safety_po_10:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  ((integer_of_int32(i_7_0) + 1) <= 2147483647)

goal m_safety_po_11:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  (((-2147483648) <= (integer_of_int32(i_7_0) + 1)) and
   ((integer_of_int32(i_7_0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  (0 <= ("JC_37": (integer_of_int32(l) - integer_of_int32(i_7_0))))

goal m_safety_po_12:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_7_0)) and
   (integer_of_int32(i_7_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result1:int32.
  (result1 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_7_0)))) ->
  (integer_of_int32(result1) <= 0) ->
  (((-2147483648) <= (integer_of_int32(i_7_0) + 1)) and
   ((integer_of_int32(i_7_0) + 1) <= 2147483647)) ->
  forall result2:int32.
  (integer_of_int32(result2) = (integer_of_int32(i_7_0) + 1)) ->
  forall i_7_1:int32.
  (i_7_1 = result2) ->
  (("JC_37": (integer_of_int32(l) - integer_of_int32(i_7_1))) < ("JC_37":
                                                                (integer_of_int32(l) - integer_of_int32(i_7_0))))

goal m_safety_po_13:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0)

goal m_safety_po_14:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  (offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0))

goal m_safety_po_15:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))

goal m_safety_po_16:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  ((-2147483648) <= (integer_of_int32(count2) + 1))

goal m_safety_po_17:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  ((integer_of_int32(count2) + 1) <= 2147483647)

goal m_safety_po_18:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (offset_min(intP_m_4_alloc_table0, u) <= integer_of_int32(tmp_0))

goal m_safety_po_19:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(tmp_0) <= offset_max(intP_m_4_alloc_table0, u))

goal m_safety_po_20:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  ((offset_min(intP_m_4_alloc_table0, u) <= integer_of_int32(tmp_0)) and
   (integer_of_int32(tmp_0) <= offset_max(intP_m_4_alloc_table0, u))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  ((-2147483648) <= (integer_of_int32(i_0_0_0) + 1))

goal m_safety_po_21:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  ((offset_min(intP_m_4_alloc_table0, u) <= integer_of_int32(tmp_0)) and
   (integer_of_int32(tmp_0) <= offset_max(intP_m_4_alloc_table0, u))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)

goal m_safety_po_22:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  ((offset_min(intP_m_4_alloc_table0, u) <= integer_of_int32(tmp_0)) and
   (integer_of_int32(tmp_0) <= offset_max(intP_m_4_alloc_table0, u))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  (((-2147483648) <= (integer_of_int32(i_0_0_0) + 1)) and
   ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  (0 <= ("JC_53": (integer_of_int32(l) - integer_of_int32(i_0_0_0))))

goal m_safety_po_23:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  forall intP_intM_m_4:(intP,
  int32) memory.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) > 0) ->
  forall tmp_0:int32.
  (tmp_0 = count2) ->
  (((-2147483648) <= (integer_of_int32(count2) + 1)) and
   ((integer_of_int32(count2) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(count2) + 1)) ->
  forall count3:int32.
  (count3 = result5) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result6:int32.
  (result6 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  ((offset_min(intP_m_4_alloc_table0, u) <= integer_of_int32(tmp_0)) and
   (integer_of_int32(tmp_0) <= offset_max(intP_m_4_alloc_table0, u))) ->
  forall intP_intM_m_4_0:(intP,
  int32) memory.
  (intP_intM_m_4_0 = store(intP_intM_m_4, shift(u, integer_of_int32(tmp_0)),
  result6)) ->
  (((-2147483648) <= (integer_of_int32(i_0_0_0) + 1)) and
   ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)) ->
  forall result7:int32.
  (integer_of_int32(result7) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result7) ->
  (("JC_53": (integer_of_int32(l) - integer_of_int32(i_0_0_1))) < ("JC_53":
                                                                  (integer_of_int32(l) - integer_of_int32(i_0_0_0))))

goal m_safety_po_24:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  ((-2147483648) <= (integer_of_int32(i_0_0_0) + 1))

goal m_safety_po_25:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)

goal m_safety_po_26:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  (((-2147483648) <= (integer_of_int32(i_0_0_0) + 1)) and
   ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  (0 <= ("JC_53": (integer_of_int32(l) - integer_of_int32(i_0_0_0))))

goal m_safety_po_27:
  forall t_0:intP pointer.
  forall l:int32.
  forall intP_t_2_alloc_table:intP alloc_table.
  forall intP_intM_t_2:(intP,
  int32) memory.
  forall intP_m_4_alloc_table:intP alloc_table.
  ("JC_19":
  (("JC_16": (integer_of_int32(l) >= 0)) and
   (("JC_17": (offset_min(intP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_18": (offset_max(intP_t_2_alloc_table,
    t_0) >= (integer_of_int32(l) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall count:int32.
  (count = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = 0) ->
  forall i_7:int32.
  (i_7 = result0) ->
  forall count0:int32.
  forall i_7_0:int32.
  ("JC_32": true) ->
  ("JC_30":
  (("JC_25": (0 <= integer_of_int32(i_7_0))) and
   (("JC_26": (integer_of_int32(i_7_0) <= integer_of_int32(l))) and
    (("JC_27": (0 <= integer_of_int32(count0))) and
     (("JC_28": (integer_of_int32(count0) <= integer_of_int32(i_7_0))) and
      ("JC_29": (integer_of_int32(count0) = num_of_pos(0,
      integer_of_int32(i_7_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_7_0) >= integer_of_int32(l)) ->
  (integer_of_int32(count0) >= 0) ->
  forall result1:intP pointer.
  forall intP_m_4_alloc_table0:intP alloc_table.
  forall intP_m_4_tag_table:intP tag_table.
  (strict_valid_struct_intP(result1, 0, (integer_of_int32(count0) - 1),
   intP_m_4_alloc_table0) and
   (alloc_extends(intP_m_4_alloc_table, intP_m_4_alloc_table0) and
    (alloc_fresh(intP_m_4_alloc_table, result1, integer_of_int32(count0)) and
     instanceof(intP_m_4_tag_table, result1, intP_tag)))) ->
  forall u:intP pointer.
  (u = result1) ->
  forall result2:int32.
  (integer_of_int32(result2) = 0) ->
  forall count1:int32.
  (count1 = result2) ->
  forall result3:int32.
  (integer_of_int32(result3) = 0) ->
  forall i_0_0:int32.
  (i_0_0 = result3) ->
  forall count2:int32.
  forall i_0_0_0:int32.
  ("JC_46": true) ->
  ("JC_44":
  (("JC_39": (0 <= integer_of_int32(i_0_0_0))) and
   (("JC_40": (integer_of_int32(i_0_0_0) <= integer_of_int32(l))) and
    (("JC_41": (0 <= integer_of_int32(count2))) and
     (("JC_42": (integer_of_int32(count2) <= integer_of_int32(i_0_0_0))) and
      ("JC_43": (integer_of_int32(count2) = num_of_pos(0,
      integer_of_int32(i_0_0_0), t_0, intP_intM_t_2)))))))) ->
  (integer_of_int32(i_0_0_0) < integer_of_int32(l)) ->
  ((offset_min(intP_t_2_alloc_table, t_0) <= integer_of_int32(i_0_0_0)) and
   (integer_of_int32(i_0_0_0) <= offset_max(intP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(intP_intM_t_2, shift(t_0, integer_of_int32(i_0_0_0)))) ->
  (integer_of_int32(result4) <= 0) ->
  (((-2147483648) <= (integer_of_int32(i_0_0_0) + 1)) and
   ((integer_of_int32(i_0_0_0) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(i_0_0_0) + 1)) ->
  forall i_0_0_1:int32.
  (i_0_0_1 = result5) ->
  (("JC_53": (integer_of_int32(l) - integer_of_int32(i_0_0_1))) < ("JC_53":
                                                                  (integer_of_int32(l) - integer_of_int32(i_0_0_0))))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/muller_why.why            : ####....#....#....#....#....#....#.....#..........###.#...#.. (45/0/0/16/0)
total   :  61
valid   :  45 ( 74%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :  16 ( 26%)
failure :   0 (  0%)
