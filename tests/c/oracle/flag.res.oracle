========== file tests/c/flag.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

/* Dijkstra's dutch flag */

#pragma JessieIntegerModel(math)

typedef char color;

#define BLUE (color)1
#define WHITE (color)2
#define RED (color)3

/*@ predicate is_color(color c) =
  @   c == BLUE || c == WHITE || c == RED ;
  @*/

/*@ predicate is_color_array{L}(color *t, integer l) =
  @   \valid_range(t,0,l-1) &&
  @   \forall integer i; 0 <= i < l ==> is_color(t[i]) ;
  @*/

/*@ predicate is_monochrome{L}(color *t,integer i, integer j, color c) =
  @   \forall integer k; i <= k < j ==> t[k] == c ;
  @*/


/*@ requires \valid_range(t,i,j);
  @ behavior decides_monochromatic:
  @   ensures \result <==> is_monochrome(t,i,j,c);
  @*/
int isMonochrome(color t[], int i, int j, color c) {
  /*@ loop invariant i <= k &&
    @   \forall integer l; i <= l < k ==> t[l] == c;
    @ loop variant j - k;
    @*/
  for (int k = i; k < j; k++) if (t[k] != c) return 0;
  return 1;
}

/*@ requires \valid_index(t,i);
  @ requires \valid_index(t,j);
  @ behavior i_j_swapped:
  @   assigns t[i],t[j];
  @   ensures t[i] == \old(t[j]) && t[j] == \old(t[i]);
  @*/
void swap(color t[], int i, int j) {
  color z = t[i];
  t[i] = t[j];
  t[j] = z;
}

/*@ requires l >= 0 && is_color_array(t, l);
  @ behavior sorts:
  @   ensures
  @     (\exists integer b,r;
  @        is_monochrome(t,0,b,BLUE) &&
  @        is_monochrome(t,b,r,WHITE) &&
  @        is_monochrome(t,r,l,RED));
  @*/
void flag(color t[], int l) {
  int b = 0;
  int i = 0;
  int r = l;
  /*@ loop invariant
    @   is_color_array(t,l) &&
    @   0 <= b <= i <= r <= l &&
    @   is_monochrome(t,0,b,BLUE) &&
    @   is_monochrome(t,b,i,WHITE) &&
    @   is_monochrome(t,r,l,RED);
    @ loop variant r - i;
    @*/
  while (i < r) {
    switch (t[i]) {
    case BLUE:
      swap(t,b++, i++);
      break;
    case WHITE:
      i++;
      break;
    case RED:
      swap(t,--r, i);
      break;
    }
  }
}



/*
Local Variables:
compile-command: "make flag.why3ml"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/flag.c"
tests/c/flag.c:47:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
tests/c/flag.c:56:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
tests/c/flag.c:69:[kernel] warning: parsing obsolete ACSL construct '\valid_index(addr,idx)'. '\valid(addr+idx)' should be used instead.
tests/c/flag.c:70:[kernel] warning: parsing obsolete ACSL construct '\valid_index(addr,idx)'. '\valid(addr+idx)' should be used instead.
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/flag.jessie
[jessie] File tests/c/flag.jessie/flag.jc written.
[jessie] File tests/c/flag.jessie/flag.cloc written.
========== file tests/c/flag.jessie/flag.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag unsigned_charP = {
  integer unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate is_color(integer c) =
(((c == 1) || (c == 2)) || (c == 3))

predicate is_color_array{L}(charP[..] t, integer l) =
(((\offset_min(t) <= 0) && (\offset_max(t) >= (l - 1))) &&
  (\forall integer i_1;
    (((0 <= i_1) && (i_1 < l)) ==> is_color((t + i_1).charM))))

predicate is_monochrome{L}(charP[..] t_0, integer i_2, integer j_0,
                           integer c_0) =
(\forall integer k;
  (((i_2 <= k) && (k < j_0)) ==> ((t_0 + k).charM == c_0)))

integer isMonochrome(charP[..] t_0, integer i, integer j, integer c)
  requires (C_14 : ((C_15 : (\offset_min(t_0) <= i)) &&
                     (C_16 : (\offset_max(t_0) >= j))));
behavior default:
  ensures (C_12 : true);
behavior decides_monochromatic:
  ensures (C_13 : ((\result != 0) <==>
                    is_monochrome{Here}(\at(t_0,Old), \at(i,Old), \at(j,Old),
                                        \at(c,Old))));
{  
   (var integer k);
   
   (var integer __retres);
   
   {  
      {  (C_1 : (k = i));
         
         loop 
         behavior default:
           invariant (C_3 : ((C_4 : (i <= k)) &&
                              (C_5 : (\forall integer l_0;
                                       (((i <= l_0) && (l_0 < k)) ==>
                                         ((t_0 + l_0).charM == c))))));
         variant (C_2 : (j - k));
         while (true)
         {  
            {  (if (k < j) then () else 
               (goto while_0_break));
               (if ((C_8 : (C_7 : (t_0 + k)).charM) != c) then 
               {  (C_6 : (__retres = 0));
                  
                  (goto return_label)
               } else ());
               (C_10 : (k = (C_9 : (k + 1))))
            }
         };
         (while_0_break : ())
      };
      (C_11 : (__retres = 1));
      (return_label : 
      (return __retres))
   }
}

unit swap(charP[..] t_1, integer i_0, integer j_0)
  requires (C_35 : ((C_36 : (\offset_min(t_1) <= i_0)) &&
                     (C_37 : (\offset_max(t_1) >= i_0))));
  requires (C_32 : ((C_33 : (\offset_min(t_1) <= j_0)) &&
                     (C_34 : (\offset_max(t_1) >= j_0))));
behavior default:
  ensures (C_28 : true);
behavior i_j_swapped:
  assigns (t_1 + i_0).charM,
  (t_1 + j_0).charM;
  ensures (C_29 : ((C_30 : ((\at(t_1,Old) + \at(i_0,Old)).charM ==
                             \at((t_1 + j_0).charM,Old))) &&
                    (C_31 : ((\at(t_1,Old) + \at(j_0,Old)).charM ==
                              \at((t_1 + i_0).charM,Old)))));
{  
   (var integer z);
   
   {  (C_19 : (z = (C_18 : (C_17 : (t_1 + i_0)).charM)));
      (C_24 : ((C_23 : (C_22 : (t_1 + i_0)).charM) = (C_21 : (C_20 : 
                                                             (t_1 +
                                                               j_0)).charM)));
      (C_27 : ((C_26 : (C_25 : (t_1 + j_0)).charM) = z));
      
      (return ())
   }
}

unit flag(charP[..] t, integer l)
  requires (C_73 : ((C_74 : (l >= 0)) && (C_75 : is_color_array{Here}(t, l))));
behavior default:
  ensures (C_71 : true);
behavior sorts:
  ensures (C_72 : (\exists integer b;
                    (\exists integer r;
                      ((is_monochrome{Here}(\at(t,Old), 0, b, 1) &&
                         is_monochrome{Here}(\at(t,Old), b, r, 2)) &&
                        is_monochrome{Here}(\at(t,Old), r, \at(l,Old), 3)))));
{  
   (var integer b);
   
   (var integer i_1);
   
   (var integer r);
   
   (var integer tmp);
   
   (var integer tmp_0);
   
   {  (C_38 : (b = 0));
      (C_39 : (i_1 = 0));
      (C_40 : (r = l));
      
      loop 
      behavior default:
        invariant (C_42 : (((((C_46 : is_color_array{Here}(t, l)) &&
                               ((C_48 : (0 <= b)) &&
                                 ((C_50 : (b <= i_1)) &&
                                   ((C_52 : (i_1 <= r)) && (C_53 : (r <= l)))))) &&
                              (C_54 : is_monochrome{Here}(t, 0, b, 1))) &&
                             (C_55 : is_monochrome{Here}(t, b, i_1, 2))) &&
                            (C_56 : is_monochrome{Here}(t, r, l, 3))));
      variant (C_41 : (r - i_1));
      while (true)
      {  
         {  (if (i_1 < r) then () else 
            (goto while_0_break));
            
            {  
               switch ((C_70 : (C_69 : (t + i_1)).charM)) {
                 case 1:
                 {  
                    {  (C_57 : (tmp = i_1));
                       (C_59 : (i_1 = (C_58 : (i_1 + 1))));
                       ();
                       (C_60 : (tmp_0 = b));
                       (C_62 : (b = (C_61 : (b + 1))));
                       ();
                       ()
                    };
                    (C_63 : swap(t, tmp_0, tmp));
                    
                    (goto switch_1_break)
                 }
                 case 2:
                 {  (C_65 : (i_1 = (C_64 : (i_1 + 1))));
                    
                    (goto switch_1_break)
                 }
                 case 3:
                 {  
                    {  ();
                       (C_67 : (r = (C_66 : (r - 1))));
                       ()
                    };
                    (C_68 : swap(t, r, i_1));
                    
                    (goto switch_1_break)
                 }
               };
               (switch_1_break : ())
            }
         }
      };
      (while_0_break : ());
      
      (return ())
   }
}
========== file tests/c/flag.jessie/flag.cloc ==========
[C_50]
file = "HOME/tests/c/flag.c"
line = 95
begin = 13
end = 19

[C_51]
file = "HOME/tests/c/flag.c"
line = 95
begin = 18
end = 29

[C_52]
file = "HOME/tests/c/flag.c"
line = 95
begin = 18
end = 24

[C_53]
file = "HOME/tests/c/flag.c"
line = 95
begin = 23
end = 29

[C_54]
file = "HOME/tests/c/flag.c"
line = 96
begin = 8
end = 37

[C_55]
file = "HOME/tests/c/flag.c"
line = 97
begin = 8
end = 37

[C_56]
file = "HOME/tests/c/flag.c"
line = 98
begin = 8
end = 37

[C_57]
file = "HOME/tests/c/flag.c"
line = 104
begin = 18
end = 21

[C_58]
file = "HOME/tests/c/flag.c"
line = 104
begin = 18
end = 21

[C_59]
file = "HOME/tests/c/flag.c"
line = 104
begin = 18
end = 21

[C_60]
file = "HOME/tests/c/flag.c"
line = 104
begin = 13
end = 16

[C_61]
file = "HOME/tests/c/flag.c"
line = 104
begin = 13
end = 16

[C_62]
file = "HOME/tests/c/flag.c"
line = 104
begin = 13
end = 16

[C_10]
file = "HOME/tests/c/flag.c"
line = 65
begin = 25
end = 28

[C_63]
file = "HOME/tests/c/flag.c"
line = 104
begin = 6
end = 22

[C_11]
file = "HOME/tests/c/flag.c"
line = 66
begin = 2
end = 11

[C_64]
file = "HOME/tests/c/flag.c"
line = 107
begin = 6
end = 9

[C_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_65]
file = "HOME/tests/c/flag.c"
line = 107
begin = 6
end = 9

[C_13]
file = "HOME/tests/c/flag.c"
line = 58
begin = 14
end = 49

[C_66]
file = "HOME/tests/c/flag.c"
line = 110
begin = 13
end = 16

[C_14]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[C_67]
file = "HOME/tests/c/flag.c"
line = 110
begin = 13
end = 16

[C_15]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[C_68]
file = "HOME/tests/c/flag.c"
line = 110
begin = 6
end = 20

[C_16]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[C_69]
file = "HOME/tests/c/flag.c"
line = 102
begin = 12
end = 13

[C_17]
file = "HOME/tests/c/flag.c"
line = 76
begin = 12
end = 13

[C_18]
file = "HOME/tests/c/flag.c"
line = 76
begin = 12
end = 16

[C_19]
file = "HOME/tests/c/flag.c"
line = 76
begin = 2
end = 7

[isMonochrome]
name = "Function isMonochrome"
file = "HOME/tests/c/flag.c"
line = 60
begin = 4
end = 16

[C_1]
file = "HOME/tests/c/flag.c"
line = 65
begin = 7
end = 10

[C_2]
file = "HOME/tests/c/flag.c"
line = 63
begin = 19
end = 24

[C_70]
file = "HOME/tests/c/flag.c"
line = 102
begin = 12
end = 16

[C_3]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 82

[C_71]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_4]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 27

[C_72]
file = "HOME/tests/c/flag.c"
line = 84
begin = 8
end = 159

[C_20]
file = "HOME/tests/c/flag.c"
line = 77
begin = 9
end = 10

[C_5]
file = "HOME/tests/c/flag.c"
line = 62
begin = 8
end = 51

[C_73]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 43

[C_21]
file = "HOME/tests/c/flag.c"
line = 77
begin = 9
end = 13

[C_6]
file = "HOME/tests/c/flag.c"
line = 65
begin = 45
end = 54

[C_74]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 19

[C_22]
file = "HOME/tests/c/flag.c"
line = 77
begin = 2
end = 3

[C_7]
file = "HOME/tests/c/flag.c"
line = 65
begin = 34
end = 35

[C_75]
file = "HOME/tests/c/flag.c"
line = 81
begin = 23
end = 43

[C_23]
file = "HOME/tests/c/flag.c"
line = 77
begin = 9
end = 13

[C_8]
file = "HOME/tests/c/flag.c"
line = 65
begin = 34
end = 38

[C_24]
file = "HOME/tests/c/flag.c"
line = 77
begin = 9
end = 13

[C_9]
file = "HOME/tests/c/flag.c"
line = 65
begin = 25
end = 28

[flag]
name = "Function flag"
file = "HOME/tests/c/flag.c"
line = 89
begin = 5
end = 9

[C_25]
file = "HOME/tests/c/flag.c"
line = 78
begin = 2
end = 3

[C_26]
file = "HOME/tests/c/flag.c"
line = 78
begin = 9
end = 10

[C_27]
file = "HOME/tests/c/flag.c"
line = 78
begin = 9
end = 10

[C_28]
file = "HOME/"
line = 0
begin = -1
end = -1

[C_29]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 54

[C_30]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 32

[C_31]
file = "HOME/tests/c/flag.c"
line = 73
begin = 36
end = 54

[C_32]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[C_33]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[C_34]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[C_35]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[C_36]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[C_37]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[C_38]
file = "HOME/tests/c/flag.c"
line = 90
begin = 2
end = 5

[C_39]
file = "HOME/tests/c/flag.c"
line = 91
begin = 2
end = 5

[swap]
name = "Function swap"
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[C_40]
file = "HOME/tests/c/flag.c"
line = 92
begin = 2
end = 5

[C_41]
file = "HOME/tests/c/flag.c"
line = 99
begin = 19
end = 24

[C_42]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 183

[C_43]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 142

[C_44]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 101

[C_45]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 60

[C_46]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 27

[C_47]
file = "HOME/tests/c/flag.c"
line = 95
begin = 8
end = 29

[C_48]
file = "HOME/tests/c/flag.c"
line = 95
begin = 8
end = 14

[C_49]
file = "HOME/tests/c/flag.c"
line = 95
begin = 13
end = 29

========== jessie execution ==========
Generating Why function isMonochrome
Generating Why function swap
Generating Why function flag
========== file tests/c/flag.jessie/flag.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs flag.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs flag.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/flag_why.sx

project: why/flag.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/flag_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/flag_why.vo

coq/flag_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/flag_why.v: why/flag.why
	@echo 'why -coq [...] why/flag.why' && $(WHY) $(JESSIELIBFILES) why/flag.why && rm -f coq/jessie_why.v

coq-goals: goals coq/flag_ctx_why.vo
	for f in why/*_po*.why; do make -f flag.makefile coq/`basename $$f .why`_why.v ; done

coq/flag_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/flag_ctx_why.v: why/flag_ctx.why
	@echo 'why -coq [...] why/flag_ctx.why' && $(WHY) why/flag_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export flag_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/flag_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/flag_ctx_why.vo

pvs: pvs/flag_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/flag_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/flag_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/flag_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/flag_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/flag_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/flag_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/flag_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/flag_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/flag_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/flag_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/flag_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/flag_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/flag_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/flag_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: flag.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/flag_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: flag.mlw
	 why3 --extra-config $(JESSIE3CONF) $<

why3ide: flag.mlw
	 why3ide --extra-config $(JESSIE3CONF) $<

why3replay: flag.mlw
	 why3replayer --extra-config $(JESSIE3CONF) $<

-include flag.depend

depend: coq/flag_why.v
	-$(COQDEP) -I coq coq/flag*_why.v > flag.depend

clean:
	rm -f coq/*.vo

========== file tests/c/flag.jessie/flag.loc ==========
[JC_90]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[isMonochrome_ensures_decides_monochromatic]
name = "Function isMonochrome"
behavior = "Behavior `decides_monochromatic'"
file = "HOME/tests/c/flag.c"
line = 60
begin = 4
end = 16

[JC_91]
kind = PointerDeref
file = "HOME/tests/c/flag.c"
line = 102
begin = 12
end = 16

[JC_92]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 165
begin = 28
end = 47

[JC_40]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_93]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 180
begin = 28
end = 43

[JC_41]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[JC_94]
file = "HOME/tests/c/flag.c"
line = 99
begin = 19
end = 24

[JC_42]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[JC_95]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 27

[JC_43]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[JC_96]
file = "HOME/tests/c/flag.c"
line = 95
begin = 8
end = 14

[JC_44]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[JC_97]
file = "HOME/tests/c/flag.c"
line = 95
begin = 13
end = 19

[JC_45]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_98]
file = "HOME/tests/c/flag.c"
line = 95
begin = 18
end = 24

[JC_46]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[JC_100]
file = "HOME/tests/c/flag.c"
line = 96
begin = 8
end = 37

[JC_99]
file = "HOME/tests/c/flag.c"
line = 95
begin = 23
end = 29

[JC_47]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_2]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[JC_101]
file = "HOME/tests/c/flag.c"
line = 97
begin = 8
end = 37

[JC_48]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[JC_102]
file = "HOME/tests/c/flag.c"
line = 98
begin = 8
end = 37

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_103]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 183

[JC_5]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[JC_104]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[JC_105]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[JC_7]
file = "HOME/tests/c/flag.c"
line = 56
begin = 13
end = 32

[flag_ensures_sorts]
name = "Function flag"
behavior = "Behavior `sorts'"
file = "HOME/tests/c/flag.c"
line = 89
begin = 5
end = 9

[JC_106]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[swap_ensures_i_j_swapped]
name = "Function swap"
behavior = "Behavior `i_j_swapped'"
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_107]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 165
begin = 28
end = 47

[JC_9]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_108]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 180
begin = 28
end = 43

[JC_109]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 27

[flag_ensures_default]
name = "Function flag"
behavior = "default behavior"
file = "HOME/tests/c/flag.c"
line = 89
begin = 5
end = 9

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_51]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 32

[JC_52]
file = "HOME/tests/c/flag.c"
line = 73
begin = 36
end = 54

[JC_53]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 54

[JC_54]
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[JC_55]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 93
begin = 9
end = 20

[JC_56]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 32

[JC_110]
file = "HOME/tests/c/flag.c"
line = 95
begin = 8
end = 14

[JC_57]
file = "HOME/tests/c/flag.c"
line = 73
begin = 36
end = 54

[JC_111]
file = "HOME/tests/c/flag.c"
line = 95
begin = 13
end = 19

[JC_58]
file = "HOME/tests/c/flag.c"
line = 73
begin = 14
end = 54

[JC_112]
file = "HOME/tests/c/flag.c"
line = 95
begin = 18
end = 24

[JC_59]
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[JC_113]
file = "HOME/tests/c/flag.c"
line = 95
begin = 23
end = 29

[JC_114]
file = "HOME/tests/c/flag.c"
line = 96
begin = 8
end = 37

[JC_115]
file = "HOME/tests/c/flag.c"
line = 97
begin = 8
end = 37

[JC_116]
file = "HOME/tests/c/flag.c"
line = 98
begin = 8
end = 37

[JC_117]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 183

[JC_118]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_119]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[swap_safety]
name = "Function swap"
behavior = "Safety"
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[JC_60]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 93
begin = 9
end = 20

[JC_61]
kind = PointerDeref
file = "HOME/tests/c/flag.c"
line = 76
begin = 12
end = 16

[JC_62]
kind = PointerDeref
file = "HOME/tests/c/flag.c"
line = 77
begin = 9
end = 13

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
kind = PointerDeref
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 104
begin = 15
end = 213

[JC_11]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_64]
kind = PointerDeref
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 107
begin = 15
end = 54

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 19

[JC_13]
file = "HOME/tests/c/flag.c"
line = 58
begin = 14
end = 49

[JC_66]
file = "HOME/tests/c/flag.c"
line = 81
begin = 23
end = 43

[isMonochrome_ensures_default]
name = "Function isMonochrome"
behavior = "default behavior"
file = "HOME/tests/c/flag.c"
line = 60
begin = 4
end = 16

[JC_14]
file = "HOME/tests/c/flag.c"
line = 58
begin = 14
end = 49

[JC_120]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[JC_67]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 43

[JC_15]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 27

[JC_121]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 165
begin = 28
end = 47

[JC_68]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_16]
file = "HOME/tests/c/flag.c"
line = 62
begin = 8
end = 51

[JC_122]
kind = UserCall
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 180
begin = 28
end = 43

[JC_69]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 19

[JC_17]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 82

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_70]
file = "HOME/tests/c/flag.c"
line = 81
begin = 23
end = 43

[JC_71]
file = "HOME/tests/c/flag.c"
line = 81
begin = 13
end = 43

[JC_72]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_20]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_73]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
kind = PointerDeref
file = "HOME/tests/c/flag.c"
line = 65
begin = 34
end = 38

[JC_74]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_22]
file = "HOME/tests/c/flag.c"
line = 63
begin = 19
end = 24

[JC_75]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 27

[JC_76]
file = "HOME/"
line = 0
begin = -1
end = -1

[swap_ensures_default]
name = "Function swap"
behavior = "default behavior"
file = "HOME/tests/c/flag.c"
line = 75
begin = 5
end = 9

[JC_24]
file = "HOME/tests/c/flag.c"
line = 62
begin = 8
end = 51

[flag_safety]
name = "Function flag"
behavior = "Safety"
file = "HOME/tests/c/flag.c"
line = 89
begin = 5
end = 9

[JC_77]
file = "HOME/tests/c/flag.c"
line = 84
begin = 8
end = 159

[JC_25]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 82

[JC_78]
file = "HOME/tests/c/flag.c"
line = 84
begin = 8
end = 159

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_79]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 27

[JC_27]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_28]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_29]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 27

[isMonochrome_safety]
name = "Function isMonochrome"
behavior = "Safety"
file = "HOME/tests/c/flag.c"
line = 60
begin = 4
end = 16

[JC_80]
file = "HOME/tests/c/flag.c"
line = 95
begin = 8
end = 14

[JC_81]
file = "HOME/tests/c/flag.c"
line = 95
begin = 13
end = 19

[JC_82]
file = "HOME/tests/c/flag.c"
line = 95
begin = 18
end = 24

[JC_30]
file = "HOME/tests/c/flag.c"
line = 62
begin = 8
end = 51

[JC_83]
file = "HOME/tests/c/flag.c"
line = 95
begin = 23
end = 29

[JC_31]
file = "HOME/tests/c/flag.c"
line = 61
begin = 21
end = 82

[JC_84]
file = "HOME/tests/c/flag.c"
line = 96
begin = 8
end = 37

[JC_32]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_85]
file = "HOME/tests/c/flag.c"
line = 97
begin = 8
end = 37

[JC_33]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_86]
file = "HOME/tests/c/flag.c"
line = 98
begin = 8
end = 37

[JC_34]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 59
begin = 9
end = 700

[JC_87]
file = "HOME/tests/c/flag.c"
line = 94
begin = 8
end = 183

[JC_35]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[JC_88]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_36]
file = "HOME/tests/c/flag.c"
line = 69
begin = 13
end = 30

[JC_89]
file = "HOME/tests/c/flag.jessie/flag.jc"
line = 138
begin = 6
end = 1793

[JC_37]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[JC_38]
file = "HOME/tests/c/flag.c"
line = 70
begin = 13
end = 30

[JC_39]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/c/flag.jessie/why/flag.why ==========
type charP

type padding

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate is_color(c:int) = ((c = (1)) or ((c = (2)) or (c = (3))))

predicate is_color_array(t:charP pointer, l:int,
 charP_t_1_alloc_table_at_L:charP alloc_table,
 charP_charM_t_1_at_L:(charP, int) memory) =
 (le_int(offset_min(charP_t_1_alloc_table_at_L, t), (0))
 and (ge_int(offset_max(charP_t_1_alloc_table_at_L, t), sub_int(l, (1)))
     and (forall i_1:int.
          ((le_int((0), i_1) and lt_int(i_1, l)) ->
           is_color(select(charP_charM_t_1_at_L, shift(t, i_1)))))))

predicate is_monochrome(t_0:charP pointer, i_2:int, j_0:int, c_0:int,
 charP_charM_t_0_2_at_L:(charP, int) memory) =
 (forall k:int.
  ((le_int(i_2, k) and lt_int(k, j_0)) ->
   (select(charP_charM_t_0_2_at_L, shift(t_0, k)) = c_0)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_switch_1_break_exc of unit

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter flag :
 t_2:charP pointer ->
  l_0:int ->
   charP_charM_t_5:(charP, int) memory ref ->
    charP_t_5_alloc_table:charP alloc_table ->
     { } unit reads charP_charM_t_5 writes charP_charM_t_5
     { (JC_78:
       (exists b:int.
        (exists r:int.
         (is_monochrome(t_2, (0), b, (1), charP_charM_t_5)
         and (is_monochrome(t_2, b, r, (2), charP_charM_t_5)
             and is_monochrome(t_2, r, l_0, (3), charP_charM_t_5)))))) }

parameter flag_requires :
 t_2:charP pointer ->
  l_0:int ->
   charP_charM_t_5:(charP, int) memory ref ->
    charP_t_5_alloc_table:charP alloc_table ->
     { (JC_67:
       ((JC_65: ge_int(l_0, (0)))
       and (JC_66:
           is_color_array(t_2, l_0, charP_t_5_alloc_table, charP_charM_t_5))))}
     unit reads charP_charM_t_5 writes charP_charM_t_5
     { (JC_78:
       (exists b:int.
        (exists r:int.
         (is_monochrome(t_2, (0), b, (1), charP_charM_t_5)
         and (is_monochrome(t_2, b, r, (2), charP_charM_t_5)
             and is_monochrome(t_2, r, l_0, (3), charP_charM_t_5)))))) }

parameter isMonochrome :
 t_0_0:charP pointer ->
  i:int ->
   j:int ->
    c_1:int ->
     charP_t_0_3_alloc_table:charP alloc_table ->
      charP_charM_t_0_3:(charP, int) memory ->
       { } int
       { (JC_14:
         ((result <> (0))
         <-> is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3))) }

parameter isMonochrome_requires :
 t_0_0:charP pointer ->
  i:int ->
   j:int ->
    c_1:int ->
     charP_t_0_3_alloc_table:charP alloc_table ->
      charP_charM_t_0_3:(charP, int) memory ->
       { (JC_3:
         ((JC_1: le_int(offset_min(charP_t_0_3_alloc_table, t_0_0), i))
         and (JC_2: ge_int(offset_max(charP_t_0_3_alloc_table, t_0_0), j))))}
       int
       { (JC_14:
         ((result <> (0))
         <-> is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3))) }

parameter swap :
 t_1:charP pointer ->
  i_0:int ->
   j_0_0:int ->
    charP_charM_t_1_4:(charP, int) memory ref ->
     charP_t_1_4_alloc_table:charP alloc_table ->
      { } unit reads charP_charM_t_1_4 writes charP_charM_t_1_4
      { (JC_60:
        ((JC_58:
         ((JC_56:
          (select(charP_charM_t_1_4, shift(t_1, i_0)) = select(charP_charM_t_1_4@,
                                                        shift(t_1, j_0_0))))
         and (JC_57:
             (select(charP_charM_t_1_4, shift(t_1, j_0_0)) = select(charP_charM_t_1_4@,
                                                             shift(t_1, i_0))))))
        and (JC_59:
            not_assigns(charP_t_1_4_alloc_table, charP_charM_t_1_4@,
            charP_charM_t_1_4,
            pset_union(pset_range(pset_singleton(t_1), j_0_0, j_0_0),
            pset_range(pset_singleton(t_1), i_0, i_0)))))) }

parameter swap_requires :
 t_1:charP pointer ->
  i_0:int ->
   j_0_0:int ->
    charP_charM_t_1_4:(charP, int) memory ref ->
     charP_t_1_4_alloc_table:charP alloc_table ->
      { (JC_39:
        ((JC_35: le_int(offset_min(charP_t_1_4_alloc_table, t_1), i_0))
        and ((JC_36: ge_int(offset_max(charP_t_1_4_alloc_table, t_1), i_0))
            and ((JC_37:
                 le_int(offset_min(charP_t_1_4_alloc_table, t_1), j_0_0))
                and (JC_38:
                    ge_int(offset_max(charP_t_1_4_alloc_table, t_1), j_0_0))))))}
      unit reads charP_charM_t_1_4 writes charP_charM_t_1_4
      { (JC_60:
        ((JC_58:
         ((JC_56:
          (select(charP_charM_t_1_4, shift(t_1, i_0)) = select(charP_charM_t_1_4@,
                                                        shift(t_1, j_0_0))))
         and (JC_57:
             (select(charP_charM_t_1_4, shift(t_1, j_0_0)) = select(charP_charM_t_1_4@,
                                                             shift(t_1, i_0))))))
        and (JC_59:
            not_assigns(charP_t_1_4_alloc_table, charP_charM_t_1_4@,
            charP_charM_t_1_4,
            pset_union(pset_range(pset_singleton(t_1), j_0_0, j_0_0),
            pset_range(pset_singleton(t_1), i_0, i_0)))))) }

let flag_ensures_default =
 fun (t_2 : charP pointer) (l_0 : int) (charP_charM_t_5 : (charP, int) memory ref) (charP_t_5_alloc_table : charP alloc_table) ->
  { (JC_71:
    ((JC_69: ge_int(l_0, (0)))
    and (JC_70:
        is_color_array(t_2, l_0, charP_t_5_alloc_table, charP_charM_t_5)))) }
  (init:
  try
   begin
     (let b_0 = ref (any_int void) in
     (let i_1_0 = ref (any_int void) in
     (let r_0 = ref (any_int void) in
     (let tmp = ref (any_int void) in
     (let tmp_0 = ref (any_int void) in
     try
      (C_38:
      (C_39:
      (C_40:
      begin
        (let jessie_<num> = (b_0 := (0)) in void);
       (let jessie_<num> = (i_1_0 := (0)) in void);
       (let jessie_<num> = (r_0 := l_0) in void);
       (loop_5:
       while true do
       { invariant
           (JC_103:
           ((JC_95:
            is_color_array(t_2, l_0, charP_t_5_alloc_table, charP_charM_t_5))
           and ((JC_96: le_int((0), b_0))
               and ((JC_97: le_int(b_0, i_1_0))
                   and ((JC_98: le_int(i_1_0, r_0))
                       and ((JC_99: le_int(r_0, l_0))
                           and ((JC_100:
                                is_monochrome(t_2, (0), b_0, (1),
                                charP_charM_t_5))
                               and ((JC_101:
                                    is_monochrome(t_2, b_0, i_1_0, (2),
                                    charP_charM_t_5))
                                   and (JC_102:
                                       is_monochrome(t_2, r_0, l_0, (3),
                                       charP_charM_t_5))))))))))  }
        begin
          [ { } unit { true } ];
         try
          begin
            (if ((lt_int_ !i_1_0) !r_0) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            begin
              (let jessie_<num> =
              (C_70:
              ((safe_acc_ !charP_charM_t_5) (C_69: ((shift t_2) !i_1_0)))) in
              begin
                (if ((eq_int_ jessie_<num>) (1))
                then
                 (C_57:
                 (C_59:
                 (C_60:
                 (C_62:
                 (C_63:
                 begin
                   (let jessie_<num> = (tmp := !i_1_0) in void);
                  (let jessie_<num> =
                  (i_1_0 := (C_58: ((add_int !i_1_0) (1)))) in void); void;
                  (let jessie_<num> = (tmp_0 := !b_0) in void);
                  (let jessie_<num> = (b_0 := (C_61: ((add_int !b_0) (1)))) in
                  void); void; void;
                  (let jessie_<num> = t_2 in
                  (let jessie_<num> = !tmp_0 in
                  (let jessie_<num> = !tmp in
                  (JC_107:
                  (((((swap jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                  (raise (Goto_switch_1_break_exc void)) end))))) else void);
               (if (((eq_int_ jessie_<num>) (2)) || ((eq_int_ jessie_<num>) (1)))
               then
                (C_65:
                begin
                  (let jessie_<num> =
                  (i_1_0 := (C_64: ((add_int !i_1_0) (1)))) in void);
                 (raise (Goto_switch_1_break_exc void)) end) else void);
               (if (((eq_int_ jessie_<num>) (3)) || (((eq_int_ jessie_<num>) (2)) || 
                                                ((eq_int_ jessie_<num>) (1))))
               then
                (C_67:
                (C_68:
                begin
                  void;
                 (let jessie_<num> = (r_0 := (C_66: ((sub_int !r_0) (1)))) in
                 void); void;
                 (let jessie_<num> = t_2 in
                 (let jessie_<num> = !r_0 in
                 (let jessie_<num> = !i_1_0 in
                 (JC_108:
                 (((((swap jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                 (raise (Goto_switch_1_break_exc void)) end)) else void) end);
             (raise (Goto_switch_1_break_exc void)) end with
            Goto_switch_1_break_exc jessie_<num> -> (switch_1_break: void) end;
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end)))));
    (raise Return) end with Return -> void end) { (JC_73: true) }

let flag_ensures_sorts =
 fun (t_2 : charP pointer) (l_0 : int) (charP_charM_t_5 : (charP, int) memory ref) (charP_t_5_alloc_table : charP alloc_table) ->
  { (JC_71:
    ((JC_69: ge_int(l_0, (0)))
    and (JC_70:
        is_color_array(t_2, l_0, charP_t_5_alloc_table, charP_charM_t_5)))) }
  (init:
  try
   begin
     (let b_0 = ref (any_int void) in
     (let i_1_0 = ref (any_int void) in
     (let r_0 = ref (any_int void) in
     (let tmp = ref (any_int void) in
     (let tmp_0 = ref (any_int void) in
     try
      (C_38:
      (C_39:
      (C_40:
      begin
        (let jessie_<num> = (b_0 := (0)) in void);
       (let jessie_<num> = (i_1_0 := (0)) in void);
       (let jessie_<num> = (r_0 := l_0) in void);
       (loop_6:
       while true do
       { invariant (JC_119: true)  }
        begin
          [ { } unit reads b_0,charP_charM_t_5,i_1_0,r_0
            { (JC_117:
              ((JC_109:
               is_color_array(t_2, l_0, charP_t_5_alloc_table,
               charP_charM_t_5))
              and ((JC_110: le_int((0), b_0))
                  and ((JC_111: le_int(b_0, i_1_0))
                      and ((JC_112: le_int(i_1_0, r_0))
                          and ((JC_113: le_int(r_0, l_0))
                              and ((JC_114:
                                   is_monochrome(t_2, (0), b_0, (1),
                                   charP_charM_t_5))
                                  and ((JC_115:
                                       is_monochrome(t_2, b_0, i_1_0, (2),
                                       charP_charM_t_5))
                                      and (JC_116:
                                          is_monochrome(t_2, r_0, l_0, (3),
                                          charP_charM_t_5)))))))))) } ];
         try
          begin
            (if ((lt_int_ !i_1_0) !r_0) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            begin
              (let jessie_<num> =
              (C_70:
              ((safe_acc_ !charP_charM_t_5) (C_69: ((shift t_2) !i_1_0)))) in
              begin
                (if ((eq_int_ jessie_<num>) (1))
                then
                 (C_57:
                 (C_59:
                 (C_60:
                 (C_62:
                 (C_63:
                 begin
                   (let jessie_<num> = (tmp := !i_1_0) in void);
                  (let jessie_<num> =
                  (i_1_0 := (C_58: ((add_int !i_1_0) (1)))) in void); void;
                  (let jessie_<num> = (tmp_0 := !b_0) in void);
                  (let jessie_<num> = (b_0 := (C_61: ((add_int !b_0) (1)))) in
                  void); void; void;
                  (let jessie_<num> = t_2 in
                  (let jessie_<num> = !tmp_0 in
                  (let jessie_<num> = !tmp in
                  (JC_121:
                  (((((swap jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                  (raise (Goto_switch_1_break_exc void)) end))))) else void);
               (if (((eq_int_ jessie_<num>) (2)) || ((eq_int_ jessie_<num>) (1)))
               then
                (C_65:
                begin
                  (let jessie_<num> =
                  (i_1_0 := (C_64: ((add_int !i_1_0) (1)))) in void);
                 (raise (Goto_switch_1_break_exc void)) end) else void);
               (if (((eq_int_ jessie_<num>) (3)) || (((eq_int_ jessie_<num>) (2)) || 
                                                ((eq_int_ jessie_<num>) (1))))
               then
                (C_67:
                (C_68:
                begin
                  void;
                 (let jessie_<num> = (r_0 := (C_66: ((sub_int !r_0) (1)))) in
                 void); void;
                 (let jessie_<num> = t_2 in
                 (let jessie_<num> = !r_0 in
                 (let jessie_<num> = !i_1_0 in
                 (JC_122:
                 (((((swap jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                 (raise (Goto_switch_1_break_exc void)) end)) else void) end);
             (raise (Goto_switch_1_break_exc void)) end with
            Goto_switch_1_break_exc jessie_<num> -> (switch_1_break: void) end;
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end)))));
    (raise Return) end with Return -> void end)
  { (JC_77:
    (exists b:int.
     (exists r:int.
      (is_monochrome(t_2, (0), b, (1), charP_charM_t_5)
      and (is_monochrome(t_2, b, r, (2), charP_charM_t_5)
          and is_monochrome(t_2, r, l_0, (3), charP_charM_t_5)))))) }

let flag_safety =
 fun (t_2 : charP pointer) (l_0 : int) (charP_charM_t_5 : (charP, int) memory ref) (charP_t_5_alloc_table : charP alloc_table) ->
  { (JC_71:
    ((JC_69: ge_int(l_0, (0)))
    and (JC_70:
        is_color_array(t_2, l_0, charP_t_5_alloc_table, charP_charM_t_5)))) }
  (init:
  try
   begin
     (let b_0 = ref (any_int void) in
     (let i_1_0 = ref (any_int void) in
     (let r_0 = ref (any_int void) in
     (let tmp = ref (any_int void) in
     (let tmp_0 = ref (any_int void) in
     try
      (C_38:
      (C_39:
      (C_40:
      begin
        (let jessie_<num> = (b_0 := (0)) in void);
       (let jessie_<num> = (i_1_0 := (0)) in void);
       (let jessie_<num> = (r_0 := l_0) in void);
       (loop_4:
       while true do
       { invariant (JC_89: true) variant (JC_94 : sub_int(r_0, i_1_0)) }
        begin
          [ { } unit reads b_0,charP_charM_t_5,i_1_0,r_0
            { (JC_87:
              ((JC_79:
               is_color_array(t_2, l_0, charP_t_5_alloc_table,
               charP_charM_t_5))
              and ((JC_80: le_int((0), b_0))
                  and ((JC_81: le_int(b_0, i_1_0))
                      and ((JC_82: le_int(i_1_0, r_0))
                          and ((JC_83: le_int(r_0, l_0))
                              and ((JC_84:
                                   is_monochrome(t_2, (0), b_0, (1),
                                   charP_charM_t_5))
                                  and ((JC_85:
                                       is_monochrome(t_2, b_0, i_1_0, (2),
                                       charP_charM_t_5))
                                      and (JC_86:
                                          is_monochrome(t_2, r_0, l_0, (3),
                                          charP_charM_t_5)))))))))) } ];
         try
          begin
            (if ((lt_int_ !i_1_0) !r_0) then void
            else (raise (Goto_while_0_break_exc void)));
           try
            begin
              (let jessie_<num> =
              (C_70:
              (JC_91:
              ((((offset_acc_ charP_t_5_alloc_table) !charP_charM_t_5) t_2) !i_1_0))) in
              begin
                (if ((eq_int_ jessie_<num>) (1))
                then
                 (C_57:
                 (C_59:
                 (C_60:
                 (C_62:
                 (C_63:
                 begin
                   (let jessie_<num> = (tmp := !i_1_0) in void);
                  (let jessie_<num> =
                  (i_1_0 := (C_58: ((add_int !i_1_0) (1)))) in void); void;
                  (let jessie_<num> = (tmp_0 := !b_0) in void);
                  (let jessie_<num> = (b_0 := (C_61: ((add_int !b_0) (1)))) in
                  void); void; void;
                  (let jessie_<num> = t_2 in
                  (let jessie_<num> = !tmp_0 in
                  (let jessie_<num> = !tmp in
                  (JC_92:
                  (((((swap_requires jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                  (raise (Goto_switch_1_break_exc void)) end))))) else void);
               (if (((eq_int_ jessie_<num>) (2)) || ((eq_int_ jessie_<num>) (1)))
               then
                (C_65:
                begin
                  (let jessie_<num> =
                  (i_1_0 := (C_64: ((add_int !i_1_0) (1)))) in void);
                 (raise (Goto_switch_1_break_exc void)) end) else void);
               (if (((eq_int_ jessie_<num>) (3)) || (((eq_int_ jessie_<num>) (2)) || 
                                                ((eq_int_ jessie_<num>) (1))))
               then
                (C_67:
                (C_68:
                begin
                  void;
                 (let jessie_<num> = (r_0 := (C_66: ((sub_int !r_0) (1)))) in
                 void); void;
                 (let jessie_<num> = t_2 in
                 (let jessie_<num> = !r_0 in
                 (let jessie_<num> = !i_1_0 in
                 (JC_93:
                 (((((swap_requires jessie_<num>) jessie_<num>) jessie_<num>) charP_charM_t_5) charP_t_5_alloc_table)))));
                 (raise (Goto_switch_1_break_exc void)) end)) else void) end);
             (raise (Goto_switch_1_break_exc void)) end with
            Goto_switch_1_break_exc jessie_<num> -> (switch_1_break: void) end;
           (raise (Loop_continue_exc void)) end with
          Loop_continue_exc jessie_<num> -> void end end done);
       (raise (Goto_while_0_break_exc void)) end))) with
      Goto_while_0_break_exc jessie_<num> ->
      (while_0_break: begin   void; (raise Return) end) end)))));
    (raise Return) end with Return -> void end) { true }

let isMonochrome_ensures_decides_monochromatic =
 fun (t_0_0 : charP pointer) (i : int) (j : int) (c_1 : int) (charP_t_0_3_alloc_table : charP alloc_table) (charP_charM_t_0_3 : (charP, int) memory) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(charP_t_0_3_alloc_table, t_0_0), i))
    and (JC_6: ge_int(offset_max(charP_t_0_3_alloc_table, t_0_0), j)))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let k_0 = ref (any_int void) in
     (let __retres = ref (any_int void) in
     try
      (C_11:
      begin
        try
         (C_1:
         begin
           (let jessie_<num> = (k_0 := i) in void);
          (loop_3:
          while true do
          { invariant (JC_33: true)  }
           begin
             [ { } unit reads k_0
               { (JC_31:
                 ((JC_29: le_int(i, k_0))
                 and (JC_30:
                     (forall l_0_0:int.
                      ((le_int(i, l_0_0) and lt_int(l_0_0, k_0)) ->
                       (select(charP_charM_t_0_3, shift(t_0_0, l_0_0)) = c_1)))))) } ];
            try
             begin
               (let jessie_<num> =
               (C_10:
               begin
                 (if ((lt_int_ !k_0) j) then void
                 else (raise (Goto_while_0_break_exc void)));
                (if ((neq_int_ (C_8:
                               ((safe_acc_ charP_charM_t_0_3) (C_7:
                                                              ((shift t_0_0) !k_0))))) c_1)
                then
                 (C_6:
                 begin
                   (let jessie_<num> = (__retres := (0)) in void);
                  (raise (Return_label_exc void)) end) else void);
                (k_0 := (C_9: ((add_int !k_0) (1)))); !k_0 end) in void);
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end) with
         Goto_while_0_break_exc jessie_<num> -> (while_0_break: void) end;
       (let jessie_<num> = (__retres := (1)) in void);
       (raise (Return_label_exc void)) end) with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end));
    absurd  end with Return -> !return end))
  { (JC_13:
    ((result <> (0)) <-> is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3))) }

let isMonochrome_ensures_default =
 fun (t_0_0 : charP pointer) (i : int) (j : int) (c_1 : int) (charP_t_0_3_alloc_table : charP alloc_table) (charP_charM_t_0_3 : (charP, int) memory) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(charP_t_0_3_alloc_table, t_0_0), i))
    and (JC_6: ge_int(offset_max(charP_t_0_3_alloc_table, t_0_0), j)))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let k_0 = ref (any_int void) in
     (let __retres = ref (any_int void) in
     try
      (C_11:
      begin
        try
         (C_1:
         begin
           (let jessie_<num> = (k_0 := i) in void);
          (loop_2:
          while true do
          { invariant
              (JC_25:
              ((JC_23: le_int(i, k_0))
              and (JC_24:
                  (forall l_0_0:int.
                   ((le_int(i, l_0_0) and lt_int(l_0_0, k_0)) ->
                    (select(charP_charM_t_0_3, shift(t_0_0, l_0_0)) = c_1))))))
             }
           begin
             [ { } unit { true } ];
            try
             begin
               (let jessie_<num> =
               (C_10:
               begin
                 (if ((lt_int_ !k_0) j) then void
                 else (raise (Goto_while_0_break_exc void)));
                (if ((neq_int_ (C_8:
                               ((safe_acc_ charP_charM_t_0_3) (C_7:
                                                              ((shift t_0_0) !k_0))))) c_1)
                then
                 (C_6:
                 begin
                   (let jessie_<num> = (__retres := (0)) in void);
                  (raise (Return_label_exc void)) end) else void);
                (k_0 := (C_9: ((add_int !k_0) (1)))); !k_0 end) in void);
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end) with
         Goto_while_0_break_exc jessie_<num> -> (while_0_break: void) end;
       (let jessie_<num> = (__retres := (1)) in void);
       (raise (Return_label_exc void)) end) with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end));
    absurd  end with Return -> !return end)) { (JC_9: true) }

let isMonochrome_safety =
 fun (t_0_0 : charP pointer) (i : int) (j : int) (c_1 : int) (charP_t_0_3_alloc_table : charP alloc_table) (charP_charM_t_0_3 : (charP, int) memory) ->
  { (JC_7:
    ((JC_5: le_int(offset_min(charP_t_0_3_alloc_table, t_0_0), i))
    and (JC_6: ge_int(offset_max(charP_t_0_3_alloc_table, t_0_0), j)))) }
  (init:
  (let return = ref (any_int void) in
  try
   begin
     (let k_0 = ref (any_int void) in
     (let __retres = ref (any_int void) in
     try
      (C_11:
      begin
        try
         (C_1:
         begin
           (let jessie_<num> = (k_0 := i) in void);
          (loop_1:
          while true do
          { invariant (JC_19: true) variant (JC_22 : sub_int(j, k_0)) }
           begin
             [ { } unit reads k_0
               { (JC_17:
                 ((JC_15: le_int(i, k_0))
                 and (JC_16:
                     (forall l_0_0:int.
                      ((le_int(i, l_0_0) and lt_int(l_0_0, k_0)) ->
                       (select(charP_charM_t_0_3, shift(t_0_0, l_0_0)) = c_1)))))) } ];
            try
             begin
               (let jessie_<num> =
               (C_10:
               begin
                 (if ((lt_int_ !k_0) j) then void
                 else (raise (Goto_while_0_break_exc void)));
                (if ((neq_int_ (C_8:
                               (JC_21:
                               ((((offset_acc_ charP_t_0_3_alloc_table) charP_charM_t_0_3) t_0_0) !k_0)))) c_1)
                then
                 (C_6:
                 begin
                   (let jessie_<num> = (__retres := (0)) in void);
                  (raise (Return_label_exc void)) end) else void);
                (k_0 := (C_9: ((add_int !k_0) (1)))); !k_0 end) in void);
              (raise (Loop_continue_exc void)) end with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end) with
         Goto_while_0_break_exc jessie_<num> -> (while_0_break: void) end;
       (let jessie_<num> = (__retres := (1)) in void);
       (raise (Return_label_exc void)) end) with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end));
    absurd  end with Return -> !return end)) { true }

let swap_ensures_default =
 fun (t_1 : charP pointer) (i_0 : int) (j_0_0 : int) (charP_charM_t_1_4 : (charP, int) memory ref) (charP_t_1_4_alloc_table : charP alloc_table) ->
  { (JC_45:
    ((JC_41: le_int(offset_min(charP_t_1_4_alloc_table, t_1), i_0))
    and ((JC_42: ge_int(offset_max(charP_t_1_4_alloc_table, t_1), i_0))
        and ((JC_43: le_int(offset_min(charP_t_1_4_alloc_table, t_1), j_0_0))
            and (JC_44:
                ge_int(offset_max(charP_t_1_4_alloc_table, t_1), j_0_0)))))) }
  (init:
  try
   begin
     (let z = ref (any_int void) in
     (C_19:
     (C_24:
     (C_27:
     begin
       (let jessie_<num> =
       (z := (C_18:
             ((safe_acc_ !charP_charM_t_1_4) (C_17: ((shift t_1) i_0))))) in
       void);
      (let jessie_<num> =
      (let jessie_<num> =
      (C_21: ((safe_acc_ !charP_charM_t_1_4) (C_20: ((shift t_1) j_0_0)))) in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = i_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (((safe_upd_ charP_charM_t_1_4) jessie_<num>) jessie_<num>))))) in void);
      (let jessie_<num> =
      (let jessie_<num> = !z in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = j_0_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (((safe_upd_ charP_charM_t_1_4) jessie_<num>) jessie_<num>))))) in void);
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_47: true) }

let swap_ensures_i_j_swapped =
 fun (t_1 : charP pointer) (i_0 : int) (j_0_0 : int) (charP_charM_t_1_4 : (charP, int) memory ref) (charP_t_1_4_alloc_table : charP alloc_table) ->
  { (JC_45:
    ((JC_41: le_int(offset_min(charP_t_1_4_alloc_table, t_1), i_0))
    and ((JC_42: ge_int(offset_max(charP_t_1_4_alloc_table, t_1), i_0))
        and ((JC_43: le_int(offset_min(charP_t_1_4_alloc_table, t_1), j_0_0))
            and (JC_44:
                ge_int(offset_max(charP_t_1_4_alloc_table, t_1), j_0_0)))))) }
  (init:
  try
   begin
     (let z = ref (any_int void) in
     (C_19:
     (C_24:
     (C_27:
     begin
       (let jessie_<num> =
       (z := (C_18:
             ((safe_acc_ !charP_charM_t_1_4) (C_17: ((shift t_1) i_0))))) in
       void);
      (let jessie_<num> =
      (let jessie_<num> =
      (C_21: ((safe_acc_ !charP_charM_t_1_4) (C_20: ((shift t_1) j_0_0)))) in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = i_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (((safe_upd_ charP_charM_t_1_4) jessie_<num>) jessie_<num>))))) in void);
      (let jessie_<num> =
      (let jessie_<num> = !z in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = j_0_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (((safe_upd_ charP_charM_t_1_4) jessie_<num>) jessie_<num>))))) in void);
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_55:
    ((JC_53:
     ((JC_51:
      (select(charP_charM_t_1_4, shift(t_1, i_0)) = select(charP_charM_t_1_4@,
                                                    shift(t_1, j_0_0))))
     and (JC_52:
         (select(charP_charM_t_1_4, shift(t_1, j_0_0)) = select(charP_charM_t_1_4@,
                                                         shift(t_1, i_0))))))
    and (JC_54:
        not_assigns(charP_t_1_4_alloc_table, charP_charM_t_1_4@,
        charP_charM_t_1_4,
        pset_union(pset_range(pset_singleton(t_1), j_0_0, j_0_0),
        pset_range(pset_singleton(t_1), i_0, i_0)))))) }

let swap_safety =
 fun (t_1 : charP pointer) (i_0 : int) (j_0_0 : int) (charP_charM_t_1_4 : (charP, int) memory ref) (charP_t_1_4_alloc_table : charP alloc_table) ->
  { (JC_45:
    ((JC_41: le_int(offset_min(charP_t_1_4_alloc_table, t_1), i_0))
    and ((JC_42: ge_int(offset_max(charP_t_1_4_alloc_table, t_1), i_0))
        and ((JC_43: le_int(offset_min(charP_t_1_4_alloc_table, t_1), j_0_0))
            and (JC_44:
                ge_int(offset_max(charP_t_1_4_alloc_table, t_1), j_0_0)))))) }
  (init:
  try
   begin
     (let z = ref (any_int void) in
     (C_19:
     (C_24:
     (C_27:
     begin
       (let jessie_<num> =
       (z := (C_18:
             (JC_61:
             ((((offset_acc_ charP_t_1_4_alloc_table) !charP_charM_t_1_4) t_1) i_0)))) in
       void);
      (let jessie_<num> =
      (let jessie_<num> =
      (C_21:
      (JC_62:
      ((((offset_acc_ charP_t_1_4_alloc_table) !charP_charM_t_1_4) t_1) j_0_0))) in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = i_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (JC_63:
      (((((offset_upd_ charP_t_1_4_alloc_table) charP_charM_t_1_4) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
      void);
      (let jessie_<num> =
      (let jessie_<num> = !z in
      (let jessie_<num> = t_1 in
      (let jessie_<num> = j_0_0 in
      (let jessie_<num> = ((shift jessie_<num>) jessie_<num>) in
      (JC_64:
      (((((offset_upd_ charP_t_1_4_alloc_table) charP_charM_t_1_4) jessie_<num>) jessie_<num>) jessie_<num>)))))) in
      void); (raise Return) end)))); (raise Return) end with Return ->
   void end) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/flag.why
========== file tests/c/flag.jessie/why/flag_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type padding

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate is_color(c: int) = ((c = 1) or ((c = 2) or (c = 3)))

predicate is_color_array(t: charP pointer, l: int,
  charP_t_1_alloc_table_at_L: charP alloc_table,
  charP_charM_t_1_at_L: (charP, int) memory) =
  ((offset_min(charP_t_1_alloc_table_at_L, t) <= 0) and
   ((offset_max(charP_t_1_alloc_table_at_L, t) >= (l - 1)) and
    (forall i_1:int.
      (((0 <= i_1) and (i_1 < l)) -> is_color(select(charP_charM_t_1_at_L,
       shift(t, i_1)))))))

predicate is_monochrome(t_0: charP pointer, i_2: int, j_0: int, c_0: int,
  charP_charM_t_0_2_at_L: (charP, int) memory) =
  (forall k:int.
    (((i_2 <= k) and (k < j_0)) -> (select(charP_charM_t_0_2_at_L, shift(t_0,
     k)) = c_0)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal flag_ensures_default_po_1:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_96": (0 <= b_0)))

goal flag_ensures_default_po_2:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_97": (b_0 <= i_1_0)))

goal flag_ensures_default_po_3:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_98": (i_1_0 <= r_0)))

goal flag_ensures_default_po_4:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_99": (r_0 <= l_0)))

goal flag_ensures_default_po_5:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_100": is_monochrome(t_2, 0, b_0, 1, charP_charM_t_5)))

goal flag_ensures_default_po_6:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_101": is_monochrome(t_2, b_0, i_1_0, 2, charP_charM_t_5)))

goal flag_ensures_default_po_7:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  ("JC_103": ("JC_102": is_monochrome(t_2, r_0, l_0, 3, charP_charM_t_5)))

goal flag_ensures_default_po_8:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103":
  ("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
  charP_charM_t_5_1)))

goal flag_ensures_default_po_9:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103": ("JC_96": (0 <= b_0_1)))

goal flag_ensures_default_po_10:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103": ("JC_97": (b_0_1 <= i_1_0_1)))

goal flag_ensures_default_po_11:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103": ("JC_98": (i_1_0_1 <= r_0_0)))

goal flag_ensures_default_po_12:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103": ("JC_99": (r_0_0 <= l_0)))

goal flag_ensures_default_po_13:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103": ("JC_100": is_monochrome(t_2, 0, b_0_1, 1, charP_charM_t_5_1)))

goal flag_ensures_default_po_14:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103":
  ("JC_101": is_monochrome(t_2, b_0_1, i_1_0_1, 2, charP_charM_t_5_1)))

goal flag_ensures_default_po_15:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  ("JC_103":
  ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_1)))

goal flag_ensures_default_po_16:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103": ("JC_96": (0 <= b_0_0)))

goal flag_ensures_default_po_17:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103": ("JC_97": (b_0_0 <= i_1_0_1)))

goal flag_ensures_default_po_18:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103": ("JC_98": (i_1_0_1 <= r_0_0)))

goal flag_ensures_default_po_19:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103": ("JC_99": (r_0_0 <= l_0)))

goal flag_ensures_default_po_20:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103": ("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)))

goal flag_ensures_default_po_21:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103":
  ("JC_101": is_monochrome(t_2, b_0_0, i_1_0_1, 2, charP_charM_t_5_0)))

goal flag_ensures_default_po_22:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  ("JC_103":
  ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))

goal flag_ensures_default_po_23:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103":
  ("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
  charP_charM_t_5_1)))

goal flag_ensures_default_po_24:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103": ("JC_96": (0 <= b_0_0)))

goal flag_ensures_default_po_25:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103": ("JC_97": (b_0_0 <= i_1_0_0)))

goal flag_ensures_default_po_26:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103": ("JC_98": (i_1_0_0 <= r_0_1)))

goal flag_ensures_default_po_27:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103": ("JC_99": (r_0_1 <= l_0)))

goal flag_ensures_default_po_28:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103": ("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_1)))

goal flag_ensures_default_po_29:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103":
  ("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_1)))

goal flag_ensures_default_po_30:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  ("JC_103":
  ("JC_102": is_monochrome(t_2, r_0_1, l_0, 3, charP_charM_t_5_1)))

goal flag_ensures_default_po_31:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103": ("JC_96": (0 <= b_0_0)))

goal flag_ensures_default_po_32:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103": ("JC_97": (b_0_0 <= i_1_0_0)))

goal flag_ensures_default_po_33:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103": ("JC_98": (i_1_0_0 <= r_0_0)))

goal flag_ensures_default_po_34:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103": ("JC_99": (r_0_0 <= l_0)))

goal flag_ensures_default_po_35:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103": ("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)))

goal flag_ensures_default_po_36:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103":
  ("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)))

goal flag_ensures_default_po_37:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_103":
  (("JC_95": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_96": (0 <= b_0_0)) and
    (("JC_97": (b_0_0 <= i_1_0_0)) and
     (("JC_98": (i_1_0_0 <= r_0_0)) and
      (("JC_99": (r_0_0 <= l_0)) and
       (("JC_100": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_101": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  ("JC_103":
  ("JC_102": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))

goal flag_ensures_sorts_po_1:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_119": true) ->
  ("JC_117":
  (("JC_109": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_110": (0 <= b_0_0)) and
    (("JC_111": (b_0_0 <= i_1_0_0)) and
     (("JC_112": (i_1_0_0 <= r_0_0)) and
      (("JC_113": (r_0_0 <= l_0)) and
       (("JC_114": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_115": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_116": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 >= r_0_0) ->
  ("JC_77":
  (exists b:int.
    (exists r:int.
      (is_monochrome(t_2, 0, b, 1, charP_charM_t_5_0) and
       (is_monochrome(t_2, b, r, 2, charP_charM_t_5_0) and is_monochrome(t_2,
        r, l_0, 3, charP_charM_t_5_0))))))

goal flag_safety_po_1:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  (offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0)

goal flag_safety_po_2:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))

goal flag_safety_po_3:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39": ("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= tmp_0)))

goal flag_safety_po_4:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39": ("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= tmp_0)))

goal flag_safety_po_5:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39": ("JC_37": (offset_min(charP_t_5_alloc_table, t_2) <= tmp)))

goal flag_safety_po_6:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39": ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= tmp)))

goal flag_safety_po_7:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39":
  (("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= tmp_0)) and
   (("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= tmp_0)) and
    (("JC_37": (offset_min(charP_t_5_alloc_table, t_2) <= tmp)) and
     ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= tmp)))))) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  (0 <= ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_8:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result = 1) ->
  forall tmp:int.
  (tmp = i_1_0_0) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  forall tmp_0:int.
  (tmp_0 = b_0_0) ->
  forall b_0_1:int.
  (b_0_1 = (b_0_0 + 1)) ->
  ("JC_39":
  (("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= tmp_0)) and
   (("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= tmp_0)) and
    (("JC_37": (offset_min(charP_t_5_alloc_table, t_2) <= tmp)) and
     ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= tmp)))))) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    tmp_0)) = select(charP_charM_t_5_0, shift(t_2, tmp)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    tmp)) = select(charP_charM_t_5_0, shift(t_2, tmp_0)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), tmp, tmp),
   pset_range(pset_singleton(t_2), tmp_0, tmp_0)))))) ->
  (("JC_94": (r_0_0 - i_1_0_1)) < ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_9:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  (0 <= ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_10:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result = 2) or ((result <> 2) and (result = 1))) ->
  forall i_1_0_1:int.
  (i_1_0_1 = (i_1_0_0 + 1)) ->
  (("JC_94": (r_0_0 - i_1_0_1)) < ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_11:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  ("JC_39": ("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= r_0_1)))

goal flag_safety_po_12:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  ("JC_39": ("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= r_0_1)))

goal flag_safety_po_13:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  ("JC_39": ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= i_1_0_0)))

goal flag_safety_po_14:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  ("JC_39":
  (("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= r_0_1)) and
   (("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= r_0_1)) and
    (("JC_37": (offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0)) and
     ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= i_1_0_0)))))) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  (0 <= ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_15:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result = 3) or
   ((result <> 3) and ((result = 2) or ((result <> 2) and (result = 1))))) ->
  forall r_0_1:int.
  (r_0_1 = (r_0_0 - 1)) ->
  ("JC_39":
  (("JC_35": (offset_min(charP_t_5_alloc_table, t_2) <= r_0_1)) and
   (("JC_36": (offset_max(charP_t_5_alloc_table, t_2) >= r_0_1)) and
    (("JC_37": (offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0)) and
     ("JC_38": (offset_max(charP_t_5_alloc_table, t_2) >= i_1_0_0)))))) ->
  forall charP_charM_t_5_1:(charP,
  int) memory.
  ("JC_60":
  (("JC_58":
   (("JC_56": (select(charP_charM_t_5_1, shift(t_2,
    r_0_1)) = select(charP_charM_t_5_0, shift(t_2, i_1_0_0)))) and
    ("JC_57": (select(charP_charM_t_5_1, shift(t_2,
    i_1_0_0)) = select(charP_charM_t_5_0, shift(t_2, r_0_1)))))) and
   ("JC_59": not_assigns(charP_t_5_alloc_table, charP_charM_t_5_0,
   charP_charM_t_5_1, pset_union(pset_range(pset_singleton(t_2), i_1_0_0,
   i_1_0_0), pset_range(pset_singleton(t_2), r_0_1, r_0_1)))))) ->
  (("JC_94": (r_0_1 - i_1_0_0)) < ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_16:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  (0 <= ("JC_94": (r_0_0 - i_1_0_0)))

goal flag_safety_po_17:
  forall t_2:charP pointer.
  forall l_0:int.
  forall charP_t_5_alloc_table:charP alloc_table.
  forall charP_charM_t_5:(charP,
  int) memory.
  ("JC_71":
  (("JC_69": (l_0 >= 0)) and
   ("JC_70": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5)))) ->
  forall b_0:int.
  (b_0 = 0) ->
  forall i_1_0:int.
  (i_1_0 = 0) ->
  forall r_0:int.
  (r_0 = l_0) ->
  forall b_0_0:int.
  forall charP_charM_t_5_0:(charP,
  int) memory.
  forall i_1_0_0:int.
  forall r_0_0:int.
  ("JC_89": true) ->
  ("JC_87":
  (("JC_79": is_color_array(t_2, l_0, charP_t_5_alloc_table,
   charP_charM_t_5_0)) and
   (("JC_80": (0 <= b_0_0)) and
    (("JC_81": (b_0_0 <= i_1_0_0)) and
     (("JC_82": (i_1_0_0 <= r_0_0)) and
      (("JC_83": (r_0_0 <= l_0)) and
       (("JC_84": is_monochrome(t_2, 0, b_0_0, 1, charP_charM_t_5_0)) and
        (("JC_85": is_monochrome(t_2, b_0_0, i_1_0_0, 2, charP_charM_t_5_0)) and
         ("JC_86": is_monochrome(t_2, r_0_0, l_0, 3, charP_charM_t_5_0)))))))))) ->
  (i_1_0_0 < r_0_0) ->
  ((offset_min(charP_t_5_alloc_table, t_2) <= i_1_0_0) and
   (i_1_0_0 <= offset_max(charP_t_5_alloc_table, t_2))) ->
  forall result:int.
  (result = select(charP_charM_t_5_0, shift(t_2, i_1_0_0))) ->
  (result <> 1) ->
  ((result <> 2) and (result <> 1)) ->
  ((result <> 3) and ((result <> 2) and (result <> 1))) ->
  (("JC_94": (r_0_0 - i_1_0_0)) < ("JC_94": (r_0_0 - i_1_0_0)))

goal isMonochrome_ensures_decides_monochromatic_po_1:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_33": true) ->
  ("JC_31":
  (("JC_29": (i <= k_0_0)) and
   ("JC_30":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result <> c_1) ->
  forall __retres:int.
  (__retres = 0) ->
  forall return:int.
  (return = __retres) ->
  (return <> 0) ->
  ("JC_13": is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3))

goal isMonochrome_ensures_decides_monochromatic_po_2:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_33": true) ->
  ("JC_31":
  (("JC_29": (i <= k_0_0)) and
   ("JC_30":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result <> c_1) ->
  forall __retres:int.
  (__retres = 0) ->
  forall return:int.
  (return = __retres) ->
  is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3) ->
  ("JC_13": (return <> 0))

goal isMonochrome_ensures_decides_monochromatic_po_3:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_33": true) ->
  ("JC_31":
  (("JC_29": (i <= k_0_0)) and
   ("JC_30":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 >= j) ->
  forall __retres:int.
  (__retres = 1) ->
  forall return:int.
  (return = __retres) ->
  (return <> 0) ->
  ("JC_13": is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3))

goal isMonochrome_ensures_decides_monochromatic_po_4:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_33": true) ->
  ("JC_31":
  (("JC_29": (i <= k_0_0)) and
   ("JC_30":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 >= j) ->
  forall __retres:int.
  (__retres = 1) ->
  forall return:int.
  (return = __retres) ->
  is_monochrome(t_0_0, i, j, c_1, charP_charM_t_0_3) ->
  ("JC_13": (return <> 0))

goal isMonochrome_ensures_default_po_1:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  ("JC_25": ("JC_23": (i <= k_0)))

goal isMonochrome_ensures_default_po_2:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall l_0_0:int.
  ((i <= l_0_0) and (l_0_0 < k_0)) ->
  ("JC_25":
  ("JC_24": (select(charP_charM_t_0_3, shift(t_0_0, l_0_0)) = c_1)))

goal isMonochrome_ensures_default_po_3:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_25":
  (("JC_23": (i <= k_0_0)) and
   ("JC_24":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result = c_1) ->
  forall k_0_1:int.
  (k_0_1 = (k_0_0 + 1)) ->
  ("JC_25": ("JC_23": (i <= k_0_1)))

goal isMonochrome_ensures_default_po_4:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_25":
  (("JC_23": (i <= k_0_0)) and
   ("JC_24":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result = c_1) ->
  forall k_0_1:int.
  (k_0_1 = (k_0_0 + 1)) ->
  forall l_0_0:int.
  ((i <= l_0_0) and (l_0_0 < k_0_1)) ->
  ("JC_25":
  ("JC_24": (select(charP_charM_t_0_3, shift(t_0_0, l_0_0)) = c_1)))

goal isMonochrome_safety_po_1:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_19": true) ->
  ("JC_17":
  (("JC_15": (i <= k_0_0)) and
   ("JC_16":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  (offset_min(charP_t_0_3_alloc_table, t_0_0) <= k_0_0)

goal isMonochrome_safety_po_2:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_19": true) ->
  ("JC_17":
  (("JC_15": (i <= k_0_0)) and
   ("JC_16":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  (k_0_0 <= offset_max(charP_t_0_3_alloc_table, t_0_0))

goal isMonochrome_safety_po_3:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_19": true) ->
  ("JC_17":
  (("JC_15": (i <= k_0_0)) and
   ("JC_16":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  ((offset_min(charP_t_0_3_alloc_table, t_0_0) <= k_0_0) and
   (k_0_0 <= offset_max(charP_t_0_3_alloc_table, t_0_0))) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result = c_1) ->
  forall k_0_1:int.
  (k_0_1 = (k_0_0 + 1)) ->
  (0 <= ("JC_22": (j - k_0_0)))

goal isMonochrome_safety_po_4:
  forall t_0_0:charP pointer.
  forall i:int.
  forall j:int.
  forall c_1:int.
  forall charP_t_0_3_alloc_table:charP alloc_table.
  forall charP_charM_t_0_3:(charP,
  int) memory.
  ("JC_7":
  (("JC_5": (offset_min(charP_t_0_3_alloc_table, t_0_0) <= i)) and
   ("JC_6": (offset_max(charP_t_0_3_alloc_table, t_0_0) >= j)))) ->
  forall k_0:int.
  (k_0 = i) ->
  forall k_0_0:int.
  ("JC_19": true) ->
  ("JC_17":
  (("JC_15": (i <= k_0_0)) and
   ("JC_16":
   (forall l_0_0:int.
     (((i <= l_0_0) and (l_0_0 < k_0_0)) -> (select(charP_charM_t_0_3,
      shift(t_0_0, l_0_0)) = c_1)))))) ->
  (k_0_0 < j) ->
  ((offset_min(charP_t_0_3_alloc_table, t_0_0) <= k_0_0) and
   (k_0_0 <= offset_max(charP_t_0_3_alloc_table, t_0_0))) ->
  forall result:int.
  (result = select(charP_charM_t_0_3, shift(t_0_0, k_0_0))) ->
  (result = c_1) ->
  forall k_0_1:int.
  (k_0_1 = (k_0_0 + 1)) ->
  (("JC_22": (j - k_0_1)) < ("JC_22": (j - k_0_0)))

goal swap_ensures_i_j_swapped_po_1:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  forall charP_charM_t_1_4:(charP,
  int) memory.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  forall result:int.
  (result = select(charP_charM_t_1_4, shift(t_1, i_0))) ->
  forall z:int.
  (z = result) ->
  forall result0:int.
  (result0 = select(charP_charM_t_1_4, shift(t_1, j_0_0))) ->
  forall charP_charM_t_1_4_0:(charP,
  int) memory.
  (charP_charM_t_1_4_0 = store(charP_charM_t_1_4, shift(t_1, i_0),
  result0)) ->
  forall charP_charM_t_1_4_1:(charP,
  int) memory.
  (charP_charM_t_1_4_1 = store(charP_charM_t_1_4_0, shift(t_1, j_0_0), z)) ->
  ("JC_55":
  ("JC_53":
  ("JC_51": (select(charP_charM_t_1_4_1, shift(t_1,
  i_0)) = select(charP_charM_t_1_4, shift(t_1, j_0_0))))))

goal swap_ensures_i_j_swapped_po_2:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  forall charP_charM_t_1_4:(charP,
  int) memory.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  forall result:int.
  (result = select(charP_charM_t_1_4, shift(t_1, i_0))) ->
  forall z:int.
  (z = result) ->
  forall result0:int.
  (result0 = select(charP_charM_t_1_4, shift(t_1, j_0_0))) ->
  forall charP_charM_t_1_4_0:(charP,
  int) memory.
  (charP_charM_t_1_4_0 = store(charP_charM_t_1_4, shift(t_1, i_0),
  result0)) ->
  forall charP_charM_t_1_4_1:(charP,
  int) memory.
  (charP_charM_t_1_4_1 = store(charP_charM_t_1_4_0, shift(t_1, j_0_0), z)) ->
  ("JC_55":
  ("JC_53":
  ("JC_52": (select(charP_charM_t_1_4_1, shift(t_1,
  j_0_0)) = select(charP_charM_t_1_4, shift(t_1, i_0))))))

goal swap_ensures_i_j_swapped_po_3:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  forall charP_charM_t_1_4:(charP,
  int) memory.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  forall result:int.
  (result = select(charP_charM_t_1_4, shift(t_1, i_0))) ->
  forall z:int.
  (z = result) ->
  forall result0:int.
  (result0 = select(charP_charM_t_1_4, shift(t_1, j_0_0))) ->
  forall charP_charM_t_1_4_0:(charP,
  int) memory.
  (charP_charM_t_1_4_0 = store(charP_charM_t_1_4, shift(t_1, i_0),
  result0)) ->
  forall charP_charM_t_1_4_1:(charP,
  int) memory.
  (charP_charM_t_1_4_1 = store(charP_charM_t_1_4_0, shift(t_1, j_0_0), z)) ->
  ("JC_55":
  ("JC_54": not_assigns(charP_t_1_4_alloc_table, charP_charM_t_1_4,
  charP_charM_t_1_4_1, pset_union(pset_range(pset_singleton(t_1), j_0_0,
  j_0_0), pset_range(pset_singleton(t_1), i_0, i_0)))))

goal swap_safety_po_1:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  (i_0 <= offset_max(charP_t_1_4_alloc_table, t_1))

goal swap_safety_po_2:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  forall charP_charM_t_1_4:(charP,
  int) memory.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  ((offset_min(charP_t_1_4_alloc_table, t_1) <= i_0) and
   (i_0 <= offset_max(charP_t_1_4_alloc_table, t_1))) ->
  forall result:int.
  (result = select(charP_charM_t_1_4, shift(t_1, i_0))) ->
  forall z:int.
  (z = result) ->
  (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)

goal swap_safety_po_3:
  forall t_1:charP pointer.
  forall i_0:int.
  forall j_0_0:int.
  forall charP_t_1_4_alloc_table:charP alloc_table.
  forall charP_charM_t_1_4:(charP,
  int) memory.
  ("JC_45":
  (("JC_41": (offset_min(charP_t_1_4_alloc_table, t_1) <= i_0)) and
   (("JC_42": (offset_max(charP_t_1_4_alloc_table, t_1) >= i_0)) and
    (("JC_43": (offset_min(charP_t_1_4_alloc_table, t_1) <= j_0_0)) and
     ("JC_44": (offset_max(charP_t_1_4_alloc_table, t_1) >= j_0_0)))))) ->
  ((offset_min(charP_t_1_4_alloc_table, t_1) <= i_0) and
   (i_0 <= offset_max(charP_t_1_4_alloc_table, t_1))) ->
  forall result:int.
  (result = select(charP_charM_t_1_4, shift(t_1, i_0))) ->
  forall z:int.
  (z = result) ->
  (j_0_0 <= offset_max(charP_t_1_4_alloc_table, t_1))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/flag_why.why              : .......#....###.......#....###.......................................#... (64/0/0/9/0)
total   :  73
valid   :  64 ( 88%)
invalid :   0 (  0%)
unknown :   0 (  0%)
timeout :   9 ( 12%)
failure :   0 (  0%)
