========== file tests/c/interval_arith.c ==========
#pragma JessieFloatModel(full)
#pragma JessieFloatRoundingMode(down)


/*@ requires !\is_NaN(x) && !\is_NaN(y);
  @ ensures \le_float(\result,x) && \le_float(\result,y);
  @ ensures \eq_float(\result,x) || \eq_float(\result,y);
  @*/
double min(double x, double y)
{
  return x < y ? x : y;
}


/*@ requires !\is_NaN(x) && !\is_NaN(y);
  @ ensures \le_float(x,\result) && \le_float(y,\result);
  @ ensures \eq_float(\result,x) || \eq_float(\result,y);
  @*/
double max(double x, double y)
{
  return x > y ? x : y;
}


//@ predicate dif_sign(double x, double y) = \sign(x) != \sign(y);
//@ predicate sam_sign(double x, double y) = \sign(x) == \sign(y);

/*@ predicate double_le_real(double x,real y) =
  @           (\is_finite(x) && x <= y) || \is_minus_infinity(x);
  @*/

/*@ predicate real_le_double(real x,double y) =
  @           (\is_finite(y) && x <= y) || \is_plus_infinity(y);
  @*/

/*@ predicate in_interval(real a,double l,double u) =
  @           double_le_real(l,a) && real_le_double(a,u);
  @*/



/*@ requires ! \is_NaN(x) && ! \is_NaN(y);
  @ requires \is_infinite(x) || \is_infinite(y) ==> dif_sign(x,y);
  @ requires \is_infinite(x) && \is_finite(y) ==> y != 0.0;
  @ requires \is_finite(x) && \is_infinite(y) ==> x != 0.0;
  @ assigns \nothing;
  @ ensures double_le_real(\result,x*y);
  @*/
double mul_dn(double x, double y)
{
  double z = x*y;
  /* @ assert \is_finite(x) && \is_finite(y)
    @     && \no_overflow_double(\Down,x*y) ==> double_le_real(z,x*y);
    @*/
  /* @ assert \is_finite(x) && \is_finite(y)
    @     && ! \no_overflow_double(\Down,x*y) && \sign(x) == \sign(y) ==> double_le_real(z,x*y);
    @*/
  /* @ assert \is_finite(x) && \is_finite(y)
    @     && ! \no_overflow_double(\Down,x*y) && \sign(x) != \sign(y)  ==> double_le_real(z,x*y);
    @*/
  /* @ assert \is_infinite(x) || \is_infinite(y) ==> double_le_real(z,x*y);
    @*/
  return z;
}



/*@ requires !\is_NaN(x) && !\is_NaN(y);
  @ requires \is_infinite(x) || \is_infinite(y) ==> sam_sign(x,y);
  @ requires \is_infinite(x) && \is_finite(y) ==> y != 0.0;
  @ requires \is_infinite(y) && \is_finite(x) ==> x != 0.0;
  @ requires \is_finite(x) && \is_finite(y) &&
  @          !\no_overflow_double(\Down,-y) && \sign(y) == \Positive
  @          ==> x > 0.0 ;
  @ ensures  real_le_double(x * y,\result);
  @*/
double mul_up(double x, double y) {
  double a=-y;
  double b=x*a;
  double z=-b;
  /*  double z = -(x * -y);*/

  /*@ assert \is_infinite(x) || \is_infinite(y) ==> real_le_double(x * y,z);
    @*/


  /*@ assert \is_finite(x) && \is_infinite(y) ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_infinite(x) && \is_finite(y) &&
    @    \no_overflow_double(\Down,-y) ==> real_le_double(x * y,z);
    @*/
  /*@ assert \is_infinite(x) && \is_finite(y) &&
    @    ! \no_overflow_double(\Down,-y) ==> real_le_double(x * y,z);
    @*/
  /*@ assert \is_infinite(x) && \is_infinite(y) ==> real_le_double(x * y,z);
    @*/



  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     \no_overflow_double(\Down,-y) &&
    @     \no_overflow_double(\Down,x*a) &&
    @     !\no_overflow_double(\Down,-b) ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     \no_overflow_double(\Down,-y) &&
    @     !\no_overflow_double(\Down,x*a) ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     !\no_overflow_double(\Down,-y) && \sign(y) == \Positive
    @                                     ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     !\no_overflow_double(\Down,-y) && \sign(y) == \Negative &&
    @     !\no_overflow_double(\Down,x*a) ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     !\no_overflow_double(\Down,-y) && \sign(y) == \Negative &&
    @     \no_overflow_double(\Down,x*a) &&
    @     !\no_overflow_double(\Down,-b)  ==> real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     !\no_overflow_double(\Down,-y) && \sign(y) == \Negative &&
    @     \no_overflow_double(\Down,x*a) &&
    @     \no_overflow_double(\Down,-b) ==> real_le_double(x * y,z);
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     \no_overflow_double(\Down,-y) &&
    @     \no_overflow_double(\Down,x*a) &&
    @     \no_overflow_double(\Down,-b) && x > 0.0 ==> \is_finite(z) && real_le_double(x * y,z) ;
    @*/
  /*@ assert \is_finite(x) && \is_finite(y) &&
    @     \no_overflow_double(\Down,-y) &&
    @     \no_overflow_double(\Down,x*a) &&
    @     \no_overflow_double(\Down,-b) && x < 0.0 ==> \is_finite(z) && real_le_double(x * y,z) ;
    @*/

   return z;
}


double zl, zu;

/*@ predicate is_interval(double xl, double xu) =
  @       (\is_finite(xl) || \is_minus_infinity(xl))
  @       &&
  @       (\is_finite(xu) || \is_plus_infinity(xu));
  @*/

/*@ requires is_interval(xl,xu) && is_interval(yl,yu);
  @ ensures is_interval(zl,zu);
  @ ensures \forall real a,b;
  @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
  @    in_interval(a+b,zl,zu);
  @*/
void add(double xl, double xu, double yl, double yu)
{
  zl = xl + yl;
  /* @ assert
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      double_le_real(zl,a+b)  ;
    @*/
  zu = -((-xu) - yu);
  /* @ assert caseuii: \is_infinite(xu) && \is_infinite(yu) ==>
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      real_le_double(a+b,zu)  ;
    @*/
  /* @ assert caseuif: \is_infinite(xu) && \is_finite(yu) ==>
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      real_le_double(a+b,zu)  ;
    @*/
  /* @ assert caseufi: \is_finite(xu) && \is_infinite(yu) ==>
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      real_le_double(a+b,zu)  ;
    @*/
  /* @ assert caseufff: \is_finite(xu) && \is_finite(yu) && \is_infinite(zu) ==>
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      real_le_double(a+b,zu)  ;
    @*/
  /* @ assert caseufff: \is_finite(xu) && \is_finite(yu) && \is_finite(zu) ==>
    @  \forall real a,b;
    @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
    @      real_le_double(a+b,zu)  ;
    @*/
}





/*@ requires is_interval(xl,xu) && is_interval(yl,yu);
  @ ensures is_interval(zl,zu);
  @ ensures \forall real a,b;
  @    in_interval(a,xl,xu) && in_interval(b,yl,yu) ==>
  @    in_interval(a*b,zl,zu);
  @*/
void mul(double xl, double xu, double yl, double yu)
{
  if (xl < 0.0)
    if (xu > 0.0)
      if (yl < 0.0)
        if (yu > 0.0) // M * M
          { zl = min(mul_dn(xl, yu), mul_dn(xu, yl));
            zu = max(mul_up(xl, yl), mul_up(xu, yu)); }
        else           // M * Neg
          { zl = mul_dn(xu, yl);
            zu = mul_up(xl, yl); }
      else
        if (yu > 0.0) // M * Pos
          { zl = mul_dn(xl, yu);
            zu = mul_up(xu, yu); }
        else           // M * Zero
          { zl = 0.0;
            zu = 0.0; }
    else
      if (yl < 0.0)
        if (yu > 0.0) // Neg * M
          { zl = mul_dn(xl, yu);
            zu = mul_up(xl, yl); }
        else           // Neg * Neg
          { zl = mul_dn(xu, yu);
            zu = mul_up(xl, yl); }
      else
        if (yu > 0.0) // Neg * Pos
          { zl = mul_dn(xl, yu);
            zu = mul_up(xu, yl); }
        else           // Neg * Zero
          { zl = 0.0;
            zu = 0.0; }
  else
    if (xu > 0.0)
      if (yl < 0.0)
        if (yu > 0.0) // Pos * M
          { zl = mul_dn(xu, yl);
            zu = mul_up(xu, yu); }
        else           // Pos * Neg
          { zl = mul_dn(xu, yl);
            zu = mul_up(xl, yu); }
      else
        if (yu > 0.0) // Pos * Pos
          { zl = mul_dn(xl, yl);
            zu = mul_up(xu, yu); }
        else           // Pos * Zero
          { zl = 0.0;
            zu = 0.0; }
    else               // Zero * M
      { zl = 0.0;
        zu = 0.0; }
}




/*
Local Variables:
compile-command: "LC_ALL=C make interval_arith.why3ide"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/interval_arith.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/interval_arith.jessie
[jessie] File tests/c/interval_arith.jessie/interval_arith.jc written.
[jessie] File tests/c/interval_arith.jessie/interval_arith.cloc written.
========== file tests/c/interval_arith.jessie/interval_arith.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = full
# FloatRoundingMode = down

axiomatic Padding {

  logic type padding
  
}

type uint8 = 0..255

type int8 = -128..127

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

double min(double x_0, double y_0)
  requires (_C_8 : ((_C_9 : (! \double_is_NaN(x_0))) &&
                     (_C_10 : (! \double_is_NaN(y_0)))));
behavior default:
  ensures (_C_3 : (((_C_5 : \le_double(\result, \at(x_0,Old))) &&
                     (_C_6 : \le_double(\result, \at(y_0,Old)))) &&
                    (_C_7 : (\eq_double(\result, \at(x_0,Old)) ||
                              \eq_double(\result, \at(y_0,Old))))));
{  
   (var double tmp);
   
   {  (if (x_0 < y_0) then (_C_2 : (tmp = x_0)) else (_C_1 : (tmp = y_0)));
      
      (return tmp)
   }
}

double max(double x, double y)
  requires (_C_18 : ((_C_19 : (! \double_is_NaN(x))) &&
                      (_C_20 : (! \double_is_NaN(y)))));
behavior default:
  ensures (_C_13 : (((_C_15 : \le_double(\at(x,Old), \result)) &&
                      (_C_16 : \le_double(\at(y,Old), \result))) &&
                     (_C_17 : (\eq_double(\result, \at(x,Old)) ||
                                \eq_double(\result, \at(y,Old))))));
{  
   (var double tmp_0);
   
   {  (if (x > y) then (_C_12 : (tmp_0 = x)) else (_C_11 : (tmp_0 = y)));
      
      (return tmp_0)
   }
}

predicate dif_sign(double x, double y) =
(\double_sign(x) != \double_sign(y))

predicate sam_sign(double x_0, double y_0) =
(\double_sign(x_0) == \double_sign(y_0))

predicate double_le_real(double x_1, real y_1) =
((\double_is_finite(x_1) && ((x_1 :> real) <= y_1)) ||
  \double_is_minus_infinity(x_1))

predicate real_le_double(real x_2, double y_2) =
((\double_is_finite(y_2) && (x_2 <= (y_2 :> real))) ||
  \double_is_plus_infinity(y_2))

predicate in_interval(real a, double l, double u) =
(double_le_real(l, a) && real_le_double(a, u))

double mul_dn(double x_1, double y_1)
  requires (_C_27 : ((_C_28 : (! \double_is_NaN(x_1))) &&
                      (_C_29 : (! \double_is_NaN(y_1)))));
  requires (_C_26 : ((\double_is_infinite(x_1) || \double_is_infinite(y_1)) ==>
                      dif_sign(x_1, y_1)));
  requires (_C_25 : ((\double_is_infinite(x_1) && \double_is_finite(y_1)) ==>
                      ((y_1 :> real) != 0.0)));
  requires (_C_24 : ((\double_is_finite(x_1) && \double_is_infinite(y_1)) ==>
                      ((x_1 :> real) != 0.0)));
behavior default:
  assigns \nothing;
  ensures (_C_23 : double_le_real(\result,
                                  ((\at(x_1,Old) :> real) *
                                    (\at(y_1,Old) :> real))));
{  
   (var double z);
   
   {  (_C_22 : (z = (_C_21 : (x_1 * y_1))));
      
      (return z)
   }
}

double mul_up(double x_2, double y_2)
  requires (_C_54 : ((_C_55 : (! \double_is_NaN(x_2))) &&
                      (_C_56 : (! \double_is_NaN(y_2)))));
  requires (_C_53 : ((\double_is_infinite(x_2) || \double_is_infinite(y_2)) ==>
                      sam_sign(x_2, y_2)));
  requires (_C_52 : ((\double_is_infinite(x_2) && \double_is_finite(y_2)) ==>
                      ((y_2 :> real) != 0.0)));
  requires (_C_51 : ((\double_is_infinite(y_2) && \double_is_finite(x_2)) ==>
                      ((x_2 :> real) != 0.0)));
  requires (_C_50 : ((((\double_is_finite(x_2) && \double_is_finite(y_2)) &&
                        (! \no_overflow_double(\Down(), (- (y_2 :> real))))) &&
                       (\double_sign(y_2) == \Positive())) ==>
                      ((x_2 :> real) > 0.0)));
behavior default:
  ensures (_C_49 : real_le_double(((\at(x_2,Old) :> real) *
                                    (\at(y_2,Old) :> real)),
                                  \result));
{  
   (var double a);
   
   (var double b);
   
   (var double z_0);
   
   {  (_C_31 : (a = (_C_30 : (- y_2))));
      (_C_33 : (b = (_C_32 : (x_2 * a))));
      (_C_35 : (z_0 = (_C_34 : (- b))));
      
      {  
         (assert for default: (_C_36 : (jessie : ((\double_is_infinite(
                                                    x_2) ||
                                                    \double_is_infinite(
                                                    y_2)) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_37 : (jessie : ((\double_is_finite(
                                                    x_2) &&
                                                    \double_is_infinite(
                                                    y_2)) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_38 : (jessie : (((\double_is_infinite(
                                                     x_2) &&
                                                     \double_is_finite(
                                                     y_2)) &&
                                                    \no_overflow_double(
                                                    \Down(),
                                                    (- (y_2 :> real)))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_39 : (jessie : (((\double_is_infinite(
                                                     x_2) &&
                                                     \double_is_finite(
                                                     y_2)) &&
                                                    (! \no_overflow_double(
                                                    \Down(),
                                                    (- (y_2 :> real))))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_40 : (jessie : ((\double_is_infinite(
                                                    x_2) &&
                                                    \double_is_infinite(
                                                    y_2)) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_41 : (jessie : (((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real)))) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     ((x_2 :> real) *
                                                       (a :> real)))) &&
                                                    (! \no_overflow_double(
                                                    \Down(), (- (b :> real))))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_42 : (jessie : ((((\double_is_finite(
                                                      x_2) &&
                                                      \double_is_finite(
                                                      y_2)) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     (- (y_2 :> real)))) &&
                                                    (! \no_overflow_double(
                                                    \Down(),
                                                    ((x_2 :> real) *
                                                      (a :> real))))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_43 : (jessie : ((((\double_is_finite(
                                                      x_2) &&
                                                      \double_is_finite(
                                                      y_2)) &&
                                                     (! \no_overflow_double(
                                                     \Down(),
                                                     (- (y_2 :> real))))) &&
                                                    (\double_sign(y_2) ==
                                                      \Positive())) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_44 : (jessie : (((((\double_is_finite(
                                                       x_2) &&
                                                       \double_is_finite(
                                                       y_2)) &&
                                                      (! \no_overflow_double(
                                                      \Down(),
                                                      (- (y_2 :> real))))) &&
                                                     (\double_sign(y_2) ==
                                                       \Negative())) &&
                                                    (! \no_overflow_double(
                                                    \Down(),
                                                    ((x_2 :> real) *
                                                      (a :> real))))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_45 : (jessie : ((((((\double_is_finite(
                                                        x_2) &&
                                                        \double_is_finite(
                                                        y_2)) &&
                                                       (! \no_overflow_double(
                                                       \Down(),
                                                       (- (y_2 :> real))))) &&
                                                      (\double_sign(y_2) ==
                                                        \Negative())) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     ((x_2 :> real) *
                                                       (a :> real)))) &&
                                                    (! \no_overflow_double(
                                                    \Down(), (- (b :> real))))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_46 : (jessie : ((((((\double_is_finite(
                                                        x_2) &&
                                                        \double_is_finite(
                                                        y_2)) &&
                                                       (! \no_overflow_double(
                                                       \Down(),
                                                       (- (y_2 :> real))))) &&
                                                      (\double_sign(y_2) ==
                                                        \Negative())) &&
                                                     \no_overflow_double(
                                                     \Down(),
                                                     ((x_2 :> real) *
                                                       (a :> real)))) &&
                                                    \no_overflow_double(
                                                    \Down(), (- (b :> real)))) ==>
                                                   real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                  z_0)))));
         ()
      };
      
      {  
         (assert for default: (_C_47 : (jessie : ((((((\double_is_finite(
                                                        x_2) &&
                                                        \double_is_finite(
                                                        y_2)) &&
                                                       \no_overflow_double(
                                                       \Down(),
                                                       (- (y_2 :> real)))) &&
                                                      \no_overflow_double(
                                                      \Down(),
                                                      ((x_2 :> real) *
                                                        (a :> real)))) &&
                                                     \no_overflow_double(
                                                     \Down(), (- (b :> real)))) &&
                                                    ((x_2 :> real) > 0.0)) ==>
                                                   (\double_is_finite(
                                                     z_0) &&
                                                     real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                    z_0))))));
         ()
      };
      
      {  
         (assert for default: (_C_48 : (jessie : ((((((\double_is_finite(
                                                        x_2) &&
                                                        \double_is_finite(
                                                        y_2)) &&
                                                       \no_overflow_double(
                                                       \Down(),
                                                       (- (y_2 :> real)))) &&
                                                      \no_overflow_double(
                                                      \Down(),
                                                      ((x_2 :> real) *
                                                        (a :> real)))) &&
                                                     \no_overflow_double(
                                                     \Down(), (- (b :> real)))) &&
                                                    ((x_2 :> real) < 0.0)) ==>
                                                   (\double_is_finite(
                                                     z_0) &&
                                                     real_le_double(((x_2 :> real) *
                                                                    (y_2 :> real)),
                                                                    z_0))))));
         ()
      };
      
      {  
         (return z_0)
      }
   }
}

double zl;

double zu;

predicate is_interval(double xl, double xu) =
((\double_is_finite(xl) || \double_is_minus_infinity(xl)) &&
  (\double_is_finite(xu) || \double_is_plus_infinity(xu)))

unit add(double xl, double xu, double yl, double yu)
  requires (_C_66 : ((_C_67 : is_interval(xl, xu)) &&
                      (_C_68 : is_interval(yl, yu))));
behavior default:
  ensures (_C_63 : ((_C_64 : is_interval(zl, zu)) &&
                     (_C_65 : (\forall real a_0;
                                (\forall real b;
                                  ((in_interval(a_0, \at(xl,Old), \at(xu,Old)) &&
                                     in_interval(b, \at(yl,Old), \at(yu,Old))) ==>
                                    in_interval((a_0 + b), zl, zu)))))));
{  
   {  (_C_58 : (zl = (_C_57 : (xl + yl))));
      (_C_62 : (zu = (_C_61 : (- (_C_60 : ((_C_59 : (- xu)) - yu))))));
      
      (return ())
   }
}

unit mul(double xl_0, double xu_0, double yl_0, double yu_0)
  requires (_C_124 : ((_C_125 : is_interval(xl_0, xu_0)) &&
                       (_C_126 : is_interval(yl_0, yu_0))));
behavior default:
  ensures (_C_121 : ((_C_122 : is_interval(zl, zu)) &&
                      (_C_123 : (\forall real a_1;
                                  (\forall real b_0;
                                    ((in_interval(a_1, \at(xl_0,Old),
                                                  \at(xu_0,Old)) &&
                                       in_interval(b_0, \at(yl_0,Old),
                                                   \at(yu_0,Old))) ==>
                                      in_interval((a_1 * b_0), zl, zu)))))));
{  
   (var double tmp_1);
   
   (var double tmp_0_0);
   
   (var double tmp_1_0);
   
   (var double tmp_2);
   
   {  (if (xl_0 < (0.0 :> double)) then (if (xu_0 > (0.0 :> double)) then 
                                        (if (yl_0 < (0.0 :> double)) then 
                                        (if (yu_0 > (0.0 :> double)) then 
                                        {  
                                           {  (_C_110 : (tmp_1 = (_C_109 : mul_dn(
                                                                 xu_0, yl_0))));
                                              (_C_112 : (tmp_0_0 = (_C_111 : mul_dn(
                                                                   xl_0, yu_0))))
                                           };
                                           (_C_114 : (zl = (_C_113 : min(
                                                           tmp_0_0, tmp_1))));
                                           
                                           {  (_C_116 : (tmp_1_0 = (_C_115 : mul_up(
                                                                   xu_0, yu_0))));
                                              (_C_118 : (tmp_2 = (_C_117 : mul_up(
                                                                 xl_0, yl_0))))
                                           };
                                           (_C_120 : (zu = (_C_119 : max(
                                                           tmp_2, tmp_1_0))))
                                        } else 
                                        {  (_C_106 : (zl = (_C_105 : mul_dn(
                                                           xu_0, yl_0))));
                                           (_C_108 : (zu = (_C_107 : mul_up(
                                                           xl_0, yl_0))))
                                        }) else (if (yu_0 > (0.0 :> double)) then 
                                                {  (_C_102 : (zl = (_C_101 : mul_dn(
                                                                   xl_0, yu_0))));
                                                   (_C_104 : (zu = (_C_103 : mul_up(
                                                                   xu_0, yu_0))))
                                                } else 
                                                {  (_C_99 : (zl = (0.0 :> double)));
                                                   (_C_100 : (zu = (0.0 :> double)))
                                                })) else (if (yl_0 <
                                                               (0.0 :> double)) then 
                                                         (if (yu_0 >
                                                               (0.0 :> double)) then 
                                                         {  (_C_96 : (zl = 
                                                            (_C_95 : mul_dn(
                                                            xl_0, yu_0))));
                                                            (_C_98 : (zu = 
                                                            (_C_97 : mul_up(
                                                            xl_0, yl_0))))
                                                         } else 
                                                         {  (_C_92 : (zl = 
                                                            (_C_91 : mul_dn(
                                                            xu_0, yu_0))));
                                                            (_C_94 : (zu = 
                                                            (_C_93 : mul_up(
                                                            xl_0, yl_0))))
                                                         }) else (if 
                                                                 (yu_0 >
                                                                   (0.0 :> double)) then 
                                                                 {  (_C_88 : (zl = 
                                                                    (_C_87 : mul_dn(
                                                                    xl_0,
                                                                    yu_0))));
                                                                    (_C_90 : (zu = 
                                                                    (_C_89 : mul_up(
                                                                    xu_0,
                                                                    yl_0))))
                                                                 } else 
                                                                 {  (_C_85 : (zl = (0.0 :> double)));
                                                                    (_C_86 : (zu = (0.0 :> double)))
                                                                 }))) else 
      (if (xu_0 > (0.0 :> double)) then (if (yl_0 < (0.0 :> double)) then 
                                        (if (yu_0 > (0.0 :> double)) then 
                                        {  (_C_82 : (zl = (_C_81 : mul_dn(
                                                          xu_0, yl_0))));
                                           (_C_84 : (zu = (_C_83 : mul_up(
                                                          xu_0, yu_0))))
                                        } else 
                                        {  (_C_78 : (zl = (_C_77 : mul_dn(
                                                          xu_0, yl_0))));
                                           (_C_80 : (zu = (_C_79 : mul_up(
                                                          xl_0, yu_0))))
                                        }) else (if (yu_0 > (0.0 :> double)) then 
                                                {  (_C_74 : (zl = (_C_73 : mul_dn(
                                                                  xl_0, yl_0))));
                                                   (_C_76 : (zu = (_C_75 : mul_up(
                                                                  xu_0, yu_0))))
                                                } else 
                                                {  (_C_71 : (zl = (0.0 :> double)));
                                                   (_C_72 : (zu = (0.0 :> double)))
                                                })) else 
      {  (_C_69 : (zl = (0.0 :> double)));
         (_C_70 : (zu = (0.0 :> double)))
      }));
      
      (return ())
   }
}
========== file tests/c/interval_arith.jessie/interval_arith.cloc ==========
[_C_115]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 37
end = 51

[_C_52]
file = "HOME/tests/c/interval_arith.c"
line = 70
begin = 13
end = 58

[_C_121]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_35]
file = "HOME/tests/c/interval_arith.c"
line = 80
begin = 2
end = 8

[_C_117]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 21
end = 35

[_C_120]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 17
end = 52

[mul]
name = "Function mul"
file = "HOME/tests/c/interval_arith.c"
line = 202
begin = 5
end = 8

[_C_56]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 28
end = 39

[_C_28]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 13
end = 25

[_C_72]
file = "HOME/tests/c/interval_arith.c"
line = 250
begin = 17
end = 20

[_C_59]
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 11
end = 13

[_C_48]
file = "HOME/tests/c/interval_arith.c"
line = 132
begin = 13
end = 229

[_C_116]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 37
end = 51

[_C_51]
file = "HOME/tests/c/interval_arith.c"
line = 71
begin = 13
end = 58

[_C_103]
file = "HOME/tests/c/interval_arith.c"
line = 216
begin = 17
end = 31

[_C_31]
file = "HOME/tests/c/interval_arith.c"
line = 78
begin = 2
end = 8

[_C_108]
file = "HOME/tests/c/interval_arith.c"
line = 212
begin = 17
end = 31

[_C_77]
file = "HOME/tests/c/interval_arith.c"
line = 242
begin = 17
end = 31

[_C_83]
file = "HOME/tests/c/interval_arith.c"
line = 240
begin = 17
end = 31

[max]
name = "Function max"
file = "HOME/tests/c/interval_arith.c"
line = 19
begin = 7
end = 10

[_C_41]
file = "HOME/tests/c/interval_arith.c"
line = 100
begin = 13
end = 202

[_C_4]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 12
end = 56

[_C_101]
file = "HOME/tests/c/interval_arith.c"
line = 215
begin = 17
end = 31

[_C_71]
file = "HOME/tests/c/interval_arith.c"
line = 249
begin = 17
end = 20

[_C_70]
file = "HOME/tests/c/interval_arith.c"
line = 253
begin = 13
end = 16

[_C_89]
file = "HOME/tests/c/interval_arith.c"
line = 231
begin = 17
end = 31

[mul_dn]
name = "Function mul_dn"
file = "HOME/tests/c/interval_arith.c"
line = 49
begin = 7
end = 13

[_C_90]
file = "HOME/tests/c/interval_arith.c"
line = 231
begin = 17
end = 31

[_C_61]
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[_C_69]
file = "HOME/tests/c/interval_arith.c"
line = 252
begin = 13
end = 16

[_C_32]
file = "HOME/tests/c/interval_arith.c"
line = 79
begin = 11
end = 14

[_C_23]
file = "HOME/tests/c/interval_arith.c"
line = 47
begin = 12
end = 39

[_C_19]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 24

[_C_42]
file = "HOME/tests/c/interval_arith.c"
line = 105
begin = 13
end = 159

[_C_82]
file = "HOME/tests/c/interval_arith.c"
line = 239
begin = 17
end = 31

[_C_110]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 37
end = 51

[mul_up]
name = "Function mul_up"
file = "HOME/tests/c/interval_arith.c"
line = 77
begin = 7
end = 13

[_C_94]
file = "HOME/tests/c/interval_arith.c"
line = 227
begin = 17
end = 31

[_C_84]
file = "HOME/tests/c/interval_arith.c"
line = 240
begin = 17
end = 31

[_C_13]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_5]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 12
end = 32

[_C_91]
file = "HOME/tests/c/interval_arith.c"
line = 226
begin = 17
end = 31

[_C_36]
file = "HOME/tests/c/interval_arith.c"
line = 83
begin = 13
end = 75

[_C_12]
file = "HOME/tests/c/interval_arith.c"
line = 21
begin = 13
end = 14

[_C_33]
file = "HOME/tests/c/interval_arith.c"
line = 79
begin = 2
end = 8

[_C_111]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 21
end = 35

[_C_79]
file = "HOME/tests/c/interval_arith.c"
line = 243
begin = 17
end = 31

[_C_104]
file = "HOME/tests/c/interval_arith.c"
line = 216
begin = 17
end = 31

[_C_85]
file = "HOME/tests/c/interval_arith.c"
line = 233
begin = 17
end = 20

[_C_22]
file = "HOME/tests/c/interval_arith.c"
line = 51
begin = 2
end = 8

[_C_65]
file = "HOME/tests/c/interval_arith.c"
line = 152
begin = 12
end = 115

[_C_9]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 24

[_C_57]
file = "HOME/tests/c/interval_arith.c"
line = 158
begin = 7
end = 14

[_C_54]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 13
end = 39

[_C_30]
file = "HOME/tests/c/interval_arith.c"
line = 78
begin = 12
end = 13

[_C_63]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_6]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 36
end = 56

[_C_64]
file = "HOME/tests/c/interval_arith.c"
line = 151
begin = 12
end = 30

[_C_122]
file = "HOME/tests/c/interval_arith.c"
line = 197
begin = 12
end = 30

[_C_95]
file = "HOME/tests/c/interval_arith.c"
line = 223
begin = 17
end = 31

[_C_93]
file = "HOME/tests/c/interval_arith.c"
line = 227
begin = 17
end = 31

[_C_102]
file = "HOME/tests/c/interval_arith.c"
line = 215
begin = 17
end = 31

[_C_49]
file = "HOME/tests/c/interval_arith.c"
line = 75
begin = 12
end = 41

[_C_24]
file = "HOME/tests/c/interval_arith.c"
line = 45
begin = 13
end = 58

[_C_45]
file = "HOME/tests/c/interval_arith.c"
line = 117
begin = 13
end = 228

[_C_97]
file = "HOME/tests/c/interval_arith.c"
line = 224
begin = 17
end = 31

[_C_20]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 28
end = 39

[_C_73]
file = "HOME/tests/c/interval_arith.c"
line = 246
begin = 17
end = 31

[_C_96]
file = "HOME/tests/c/interval_arith.c"
line = 223
begin = 17
end = 31

[_C_38]
file = "HOME/tests/c/interval_arith.c"
line = 89
begin = 13
end = 115

[min]
name = "Function min"
file = "HOME/tests/c/interval_arith.c"
line = 9
begin = 7
end = 10

[_C_3]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_98]
file = "HOME/tests/c/interval_arith.c"
line = 224
begin = 17
end = 31

[_C_109]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 37
end = 51

[_C_124]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 53

[_C_114]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 17
end = 52

[_C_92]
file = "HOME/tests/c/interval_arith.c"
line = 226
begin = 17
end = 31

[_C_81]
file = "HOME/tests/c/interval_arith.c"
line = 239
begin = 17
end = 31

[_C_17]
file = "HOME/tests/c/interval_arith.c"
line = 17
begin = 12
end = 56

[_C_112]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 21
end = 35

[_C_7]
file = "HOME/tests/c/interval_arith.c"
line = 7
begin = 12
end = 56

[_C_86]
file = "HOME/tests/c/interval_arith.c"
line = 234
begin = 17
end = 20

[_C_62]
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 7
end = 20

[_C_55]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 13
end = 24

[_C_27]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 13
end = 41

[_C_105]
file = "HOME/tests/c/interval_arith.c"
line = 211
begin = 17
end = 31

[_C_87]
file = "HOME/tests/c/interval_arith.c"
line = 230
begin = 17
end = 31

[add]
name = "Function add"
file = "HOME/tests/c/interval_arith.c"
line = 156
begin = 5
end = 8

[_C_46]
file = "HOME/tests/c/interval_arith.c"
line = 122
begin = 13
end = 227

[_C_44]
file = "HOME/tests/c/interval_arith.c"
line = 113
begin = 13
end = 185

[_C_15]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 12
end = 32

[_C_99]
file = "HOME/tests/c/interval_arith.c"
line = 218
begin = 17
end = 20

[_C_26]
file = "HOME/tests/c/interval_arith.c"
line = 43
begin = 13
end = 65

[_C_47]
file = "HOME/tests/c/interval_arith.c"
line = 127
begin = 13
end = 229

[_C_10]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 28
end = 39

[_C_68]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 35
end = 53

[_C_60]
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[_C_53]
file = "HOME/tests/c/interval_arith.c"
line = 69
begin = 13
end = 65

[_C_40]
file = "HOME/tests/c/interval_arith.c"
line = 95
begin = 13
end = 75

[_C_58]
file = "HOME/tests/c/interval_arith.c"
line = 158
begin = 7
end = 14

[_C_8]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 39

[_C_119]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 17
end = 52

[_C_66]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 53

[_C_18]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 39

[_C_29]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 29
end = 41

[_C_75]
file = "HOME/tests/c/interval_arith.c"
line = 247
begin = 17
end = 31

[_C_14]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 12
end = 56

[_C_123]
file = "HOME/tests/c/interval_arith.c"
line = 198
begin = 12
end = 115

[_C_106]
file = "HOME/tests/c/interval_arith.c"
line = 211
begin = 17
end = 31

[_C_50]
file = "HOME/tests/c/interval_arith.c"
line = 72
begin = 13
end = 140

[_C_37]
file = "HOME/tests/c/interval_arith.c"
line = 87
begin = 13
end = 73

[_C_43]
file = "HOME/tests/c/interval_arith.c"
line = 109
begin = 13
end = 182

[_C_107]
file = "HOME/tests/c/interval_arith.c"
line = 212
begin = 17
end = 31

[_C_88]
file = "HOME/tests/c/interval_arith.c"
line = 230
begin = 17
end = 31

[_C_100]
file = "HOME/tests/c/interval_arith.c"
line = 219
begin = 17
end = 20

[_C_2]
file = "HOME/tests/c/interval_arith.c"
line = 11
begin = 13
end = 14

[_C_34]
file = "HOME/tests/c/interval_arith.c"
line = 80
begin = 12
end = 13

[_C_67]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 31

[_C_16]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 36
end = 56

[_C_125]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 31

[_C_113]
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 17
end = 52

[_C_126]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 35
end = 53

[_C_1]
file = "HOME/tests/c/interval_arith.c"
line = 11
begin = 13
end = 14

[_C_76]
file = "HOME/tests/c/interval_arith.c"
line = 247
begin = 17
end = 31

[_C_25]
file = "HOME/tests/c/interval_arith.c"
line = 44
begin = 13
end = 58

[_C_39]
file = "HOME/tests/c/interval_arith.c"
line = 92
begin = 13
end = 117

[_C_80]
file = "HOME/tests/c/interval_arith.c"
line = 243
begin = 17
end = 31

[_C_74]
file = "HOME/tests/c/interval_arith.c"
line = 246
begin = 17
end = 31

[_C_78]
file = "HOME/tests/c/interval_arith.c"
line = 242
begin = 17
end = 31

[_C_11]
file = "HOME/tests/c/interval_arith.c"
line = 21
begin = 13
end = 14

[_C_21]
file = "HOME/tests/c/interval_arith.c"
line = 51
begin = 13
end = 16

[_C_118]
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 21
end = 35

========== jessie execution ==========
Generating Why function min
Generating Why function max
Generating Why function mul_dn
Generating Why function mul_up
Generating Why function add
Generating Why function mul
========== file tests/c/interval_arith.jessie/interval_arith.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

USERWHYTWOOPT= -split-user-conj
USERWHYTHREEOPT=
WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs interval_arith.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs interval_arith.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why $(WHYLIB)/why/floats_full.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/interval_arith_why.sx

project: why/interval_arith.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/interval_arith_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/interval_arith_why.vo

coq/interval_arith_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/interval_arith_why.v: why/interval_arith.why
	@echo 'why -coq [...] why/interval_arith.why' && $(WHY) $(JESSIELIBFILES) why/interval_arith.why && rm -f coq/jessie_why.v

coq-goals: goals coq/interval_arith_ctx_why.vo
	for f in why/*_po*.why; do make -f interval_arith.makefile coq/`basename $$f .why`_why.v ; done

coq/interval_arith_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/interval_arith_ctx_why.v: why/interval_arith_ctx.why
	@echo 'why -coq [...] why/interval_arith_ctx.why' && $(WHY) why/interval_arith_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export interval_arith_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/interval_arith_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/interval_arith_ctx_why.vo

pvs: pvs/interval_arith_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/interval_arith_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/interval_arith_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/interval_arith_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/interval_arith_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/interval_arith_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/interval_arith_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/interval_arith_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/interval_arith_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/interval_arith_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/interval_arith_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/interval_arith_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/interval_arith_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/interval_arith_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/interval_arith_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: interval_arith.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/interval_arith_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: interval_arith.mlw
	 why3 $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3ide: interval_arith.mlw
	 why3ide $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3replay: interval_arith.mlw
	 why3replayer $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

-include interval_arith.depend

depend: coq/interval_arith_why.v
	-$(COQDEP) -I coq coq/interval_arith*_why.v > interval_arith.depend

clean:
	rm -f coq/*.vo

========== file tests/c/interval_arith.jessie/interval_arith.loc ==========
[add_ensures_default]
name = "Function add"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 156
begin = 5
end = 8

[JC_176]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 37
end = 51

[JC_177]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 21
end = 35

[JC_94]
file = "HOME/tests/c/interval_arith.c"
line = 132
begin = 13
end = 229

[JC_73]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_158]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 212
begin = 17
end = 31

[JC_63]
file = "HOME/tests/c/interval_arith.c"
line = 71
begin = 13
end = 58

[JC_80]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 79
begin = 11
end = 14

[JC_51]
file = "HOME/tests/c/interval_arith.c"
line = 47
begin = 12
end = 39

[JC_71]
file = "HOME/tests/c/interval_arith.c"
line = 71
begin = 13
end = 58

[JC_147]
file = "HOME/tests/c/interval_arith.c"
line = 198
begin = 12
end = 115

[JC_151]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 37
end = 51

[JC_45]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 29
end = 41

[JC_123]
file = "HOME/tests/c/interval_arith.c"
line = 152
begin = 12
end = 115

[JC_106]
file = "HOME/tests/c/interval_arith.c"
line = 113
begin = 13
end = 185

[JC_143]
file = "HOME/tests/c/interval_arith.c"
line = 197
begin = 12
end = 30

[JC_113]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 53

[JC_116]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 35
end = 53

[JC_64]
file = "HOME/tests/c/interval_arith.c"
line = 72
begin = 13
end = 140

[JC_133]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[JC_188]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 231
begin = 17
end = 31

[JC_180]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 212
begin = 17
end = 31

[JC_99]
file = "HOME/tests/c/interval_arith.c"
line = 87
begin = 13
end = 73

[JC_85]
file = "HOME/tests/c/interval_arith.c"
line = 92
begin = 13
end = 117

[JC_126]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_170]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 243
begin = 17
end = 31

[JC_31]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 12
end = 32

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_194]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 247
begin = 17
end = 31

[JC_122]
file = "HOME/tests/c/interval_arith.c"
line = 151
begin = 12
end = 30

[JC_81]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 80
begin = 12
end = 13

[JC_55]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_138]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_134]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[JC_148]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_137]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 53

[mul_dn_safety]
name = "Function mul_dn"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 49
begin = 7
end = 13

[JC_48]
file = "HOME/tests/c/interval_arith.c"
line = 45
begin = 13
end = 58

[JC_23]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 24

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_172]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 247
begin = 17
end = 31

[JC_121]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 24

[JC_125]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 13
end = 24

[JC_9]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 12
end = 32

[mul_ensures_default]
name = "Function mul"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 202
begin = 5
end = 8

[mul_up_ensures_default]
name = "Function mul_up"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 77
begin = 7
end = 13

[JC_75]
file = "HOME/tests/c/interval_arith.c"
line = 75
begin = 12
end = 41

[JC_24]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 28
end = 39

[JC_193]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 246
begin = 17
end = 31

[JC_25]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 39

[JC_189]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 239
begin = 17
end = 31

[JC_186]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 227
begin = 17
end = 31

[JC_78]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_175]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 17
end = 52

[JC_41]
file = "HOME/tests/c/interval_arith.c"
line = 45
begin = 13
end = 58

[add_safety]
name = "Function add"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 156
begin = 5
end = 8

[JC_74]
file = "HOME/"
line = 0
begin = -1
end = -1

[min_ensures_default]
name = "Function min"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 9
begin = 7
end = 10

[JC_47]
file = "HOME/tests/c/interval_arith.c"
line = 44
begin = 13
end = 58

[JC_52]
file = "HOME/tests/c/interval_arith.jessie/interval_arith.jc"
line = 97
begin = 10
end = 18

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_154]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 37
end = 51

[JC_54]
file = "HOME/tests/c/interval_arith.jessie/interval_arith.jc"
line = 97
begin = 10
end = 18

[JC_79]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 78
begin = 12
end = 13

[JC_13]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 12
end = 32

[JC_130]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[JC_82]
file = "HOME/tests/c/interval_arith.c"
line = 83
begin = 13
end = 75

[JC_174]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 21
end = 35

[JC_163]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 226
begin = 17
end = 31

[JC_153]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 17
end = 52

[JC_87]
file = "HOME/tests/c/interval_arith.c"
line = 100
begin = 13
end = 202

[JC_11]
file = "HOME/tests/c/interval_arith.c"
line = 7
begin = 12
end = 56

[JC_185]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 226
begin = 17
end = 31

[JC_184]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 224
begin = 17
end = 31

[JC_167]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 239
begin = 17
end = 31

[JC_98]
file = "HOME/tests/c/interval_arith.c"
line = 83
begin = 13
end = 75

[JC_70]
file = "HOME/tests/c/interval_arith.c"
line = 70
begin = 13
end = 58

[JC_15]
file = "HOME/tests/c/interval_arith.c"
line = 7
begin = 12
end = 56

[JC_36]
file = "HOME/"
line = 0
begin = -1
end = -1

[min_safety]
name = "Function min"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 9
begin = 7
end = 10

[JC_182]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 216
begin = 17
end = 31

[JC_168]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 240
begin = 17
end = 31

[JC_104]
file = "HOME/tests/c/interval_arith.c"
line = 105
begin = 13
end = 159

[JC_91]
file = "HOME/tests/c/interval_arith.c"
line = 117
begin = 13
end = 228

[JC_39]
file = "HOME/tests/c/interval_arith.c"
line = 43
begin = 13
end = 65

[JC_112]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 35
end = 53

[JC_40]
file = "HOME/tests/c/interval_arith.c"
line = 44
begin = 13
end = 58

[JC_162]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 224
begin = 17
end = 31

[JC_135]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 31

[JC_169]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 242
begin = 17
end = 31

[JC_83]
file = "HOME/tests/c/interval_arith.c"
line = 87
begin = 13
end = 73

[JC_35]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_132]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 11
end = 13

[JC_27]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 12
end = 32

[JC_115]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 31

[JC_109]
file = "HOME/tests/c/interval_arith.c"
line = 127
begin = 13
end = 229

[JC_107]
file = "HOME/tests/c/interval_arith.c"
line = 117
begin = 13
end = 228

[JC_69]
file = "HOME/tests/c/interval_arith.c"
line = 69
begin = 13
end = 65

[JC_179]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 211
begin = 17
end = 31

[JC_124]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_38]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 29
end = 41

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 28
end = 39

[JC_156]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 17
end = 52

[JC_127]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 158
begin = 7
end = 14

[JC_171]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 246
begin = 17
end = 31

[JC_164]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 227
begin = 17
end = 31

[JC_44]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 13
end = 25

[JC_155]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 21
end = 35

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_191]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 242
begin = 17
end = 31

[JC_62]
file = "HOME/tests/c/interval_arith.c"
line = 70
begin = 13
end = 58

[JC_101]
file = "HOME/tests/c/interval_arith.c"
line = 92
begin = 13
end = 117

[JC_88]
file = "HOME/tests/c/interval_arith.c"
line = 105
begin = 13
end = 159

[JC_129]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 9
end = 19

[mul_up_safety]
name = "Function mul_up"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 77
begin = 7
end = 13

[JC_42]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_190]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 240
begin = 17
end = 31

[max_safety]
name = "Function max"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 19
begin = 7
end = 10

[JC_178]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 209
begin = 17
end = 52

[JC_110]
file = "HOME/tests/c/interval_arith.c"
line = 132
begin = 13
end = 229

[JC_166]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 231
begin = 17
end = 31

[JC_103]
file = "HOME/tests/c/interval_arith.c"
line = 100
begin = 13
end = 202

[JC_46]
file = "HOME/tests/c/interval_arith.c"
line = 43
begin = 13
end = 65

[JC_141]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 53

[JC_61]
file = "HOME/tests/c/interval_arith.c"
line = 69
begin = 13
end = 65

[JC_32]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 36
end = 56

[JC_56]
file = "HOME/"
line = 0
begin = -1
end = -1

[mul_dn_ensures_default]
name = "Function mul_dn"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 49
begin = 7
end = 13

[JC_33]
file = "HOME/tests/c/interval_arith.c"
line = 17
begin = 12
end = 56

[JC_65]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_118]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_173]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 37
end = 51

[JC_105]
file = "HOME/tests/c/interval_arith.c"
line = 109
begin = 13
end = 182

[JC_140]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 35
end = 53

[JC_29]
file = "HOME/tests/c/interval_arith.c"
line = 17
begin = 12
end = 56

[JC_144]
file = "HOME/tests/c/interval_arith.c"
line = 198
begin = 12
end = 115

[JC_159]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 215
begin = 17
end = 31

[JC_68]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 28
end = 39

[JC_7]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 39

[JC_16]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_96]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 79
begin = 11
end = 14

[JC_43]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_2]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 28
end = 39

[JC_95]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 78
begin = 12
end = 13

[JC_93]
file = "HOME/tests/c/interval_arith.c"
line = 127
begin = 13
end = 229

[JC_97]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 80
begin = 12
end = 13

[JC_84]
file = "HOME/tests/c/interval_arith.c"
line = 89
begin = 13
end = 115

[JC_160]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 216
begin = 17
end = 31

[JC_128]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 164
begin = 11
end = 13

[JC_34]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_114]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_14]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 36
end = 56

[JC_150]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_117]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 53

[JC_90]
file = "HOME/tests/c/interval_arith.c"
line = 113
begin = 13
end = 185

[JC_53]
file = "HOME/tests/c/interval_arith.c"
line = 47
begin = 12
end = 39

[JC_157]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 211
begin = 17
end = 31

[JC_145]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_21]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 39

[JC_149]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_111]
file = "HOME/tests/c/interval_arith.c"
line = 150
begin = 13
end = 31

[JC_77]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_49]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_1]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 24

[JC_131]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 158
begin = 7
end = 14

[JC_102]
file = "HOME/tests/c/interval_arith.c"
line = 95
begin = 13
end = 75

[JC_37]
file = "HOME/tests/c/interval_arith.c"
line = 42
begin = 13
end = 25

[JC_181]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 215
begin = 17
end = 31

[JC_142]
file = "HOME/"
line = 0
begin = -1
end = -1

[max_ensures_default]
name = "Function max"
behavior = "default behavior"
file = "HOME/tests/c/interval_arith.c"
line = 19
begin = 7
end = 10

[JC_10]
file = "HOME/tests/c/interval_arith.c"
line = 6
begin = 36
end = 56

[JC_108]
file = "HOME/tests/c/interval_arith.c"
line = 122
begin = 13
end = 227

[JC_57]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 51
begin = 13
end = 16

[JC_161]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 223
begin = 17
end = 31

[JC_146]
file = "HOME/tests/c/interval_arith.c"
line = 197
begin = 12
end = 30

[JC_89]
file = "HOME/tests/c/interval_arith.c"
line = 109
begin = 13
end = 182

[JC_136]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 35
end = 53

[JC_66]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_59]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 13
end = 24

[JC_20]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 28
end = 39

[JC_165]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 230
begin = 17
end = 31

[JC_192]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 243
begin = 17
end = 31

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_3]
file = "HOME/tests/c/interval_arith.c"
line = 5
begin = 13
end = 39

[JC_92]
file = "HOME/tests/c/interval_arith.c"
line = 122
begin = 13
end = 227

[JC_152]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 208
begin = 21
end = 35

[JC_86]
file = "HOME/tests/c/interval_arith.c"
line = 95
begin = 13
end = 75

[JC_60]
file = "HOME/tests/c/interval_arith.c"
line = 68
begin = 28
end = 39

[JC_183]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 223
begin = 17
end = 31

[JC_139]
file = "HOME/tests/c/interval_arith.c"
line = 196
begin = 13
end = 31

[JC_72]
file = "HOME/tests/c/interval_arith.c"
line = 72
begin = 13
end = 140

[JC_19]
file = "HOME/tests/c/interval_arith.c"
line = 15
begin = 13
end = 24

[JC_119]
file = "HOME/tests/c/interval_arith.c"
line = 151
begin = 12
end = 30

[JC_187]
kind = UserCall
file = "HOME/tests/c/interval_arith.c"
line = 230
begin = 17
end = 31

[JC_76]
file = "HOME/tests/c/interval_arith.c"
line = 75
begin = 12
end = 41

[JC_50]
file = "HOME/"
line = 0
begin = -1
end = -1

[mul_safety]
name = "Function mul"
behavior = "Safety"
file = "HOME/tests/c/interval_arith.c"
line = 202
begin = 5
end = 8

[JC_30]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_120]
file = "HOME/tests/c/interval_arith.c"
line = 152
begin = 12
end = 115

[JC_58]
kind = FPOverflow
file = "HOME/tests/c/interval_arith.c"
line = 51
begin = 13
end = 16

[JC_100]
file = "HOME/tests/c/interval_arith.c"
line = 89
begin = 13
end = 115

[JC_28]
file = "HOME/tests/c/interval_arith.c"
line = 16
begin = 36
end = 56

========== file tests/c/interval_arith.jessie/why/interval_arith.why ==========
type charP

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate dif_sign(x_2:double, y_1:double) =
 (double_sign(x_2) <> double_sign(y_1))

predicate double_le_real(x_1_0:double, y_1_0:real) =
 ((double_is_finite(x_1_0) and le_real(double_value(x_1_0), y_1_0))
 or double_is_minus_infinity(x_1_0))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8, y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

predicate real_le_double(x_2_0:real, y_2:double) =
 ((double_is_finite(y_2) and le_real(x_2_0, double_value(y_2)))
 or double_is_plus_infinity(y_2))

predicate in_interval(a:real, l:double, u:double) =
 (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate is_interval(xl:double, xu:double) =
 ((double_is_finite(xl) or double_is_minus_infinity(xl))
 and (double_is_finite(xu) or double_is_plus_infinity(xu)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate sam_sign(x_0_0:double, y_0_0:double) =
 (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_extensionality :
 (forall x:uint8.
  (forall y:uint8[eq_int(integer_of_uint8(x), integer_of_uint8(y))].
   (eq_int(integer_of_uint8(x), integer_of_uint8(y)) -> (x = y))))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter zu : double ref

parameter zl : double ref

parameter add :
 xl_0:double ->
  xu_0:double ->
   yl:double ->
    yu:double ->
     { } unit reads zl,zu writes zl,zu
     { (JC_124:
       ((JC_122: is_interval(zl, zu))
       and (JC_123:
           (forall a_0_0:real.
            (forall b_0:real.
             ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
              in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

parameter add_requires :
 xl_0:double ->
  xu_0:double ->
   yl:double ->
    yu:double ->
     { (JC_113:
       ((JC_111: is_interval(xl_0, xu_0)) and (JC_112: is_interval(yl, yu))))}
     unit reads zl,zu writes zl,zu
     { (JC_124:
       ((JC_122: is_interval(zl, zu))
       and (JC_123:
           (forall a_0_0:real.
            (forall b_0:real.
             ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
              in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 x_1:double ->
  y:double ->
   { } double
   { (JC_34:
     ((JC_31: le_double_full(x_1, result))
     and ((JC_32: le_double_full(y, result))
         and (JC_33:
             (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

parameter max_requires :
 x_1:double ->
  y:double ->
   { (JC_21:
     ((JC_19: (not double_is_NaN(x_1))) and (JC_20: (not double_is_NaN(y)))))}
   double
   { (JC_34:
     ((JC_31: le_double_full(x_1, result))
     and ((JC_32: le_double_full(y, result))
         and (JC_33:
             (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

parameter min :
 x_0:double ->
  y_0:double ->
   { } double
   { (JC_16:
     ((JC_13: le_double_full(result, x_0))
     and ((JC_14: le_double_full(result, y_0))
         and (JC_15:
             (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

parameter min_requires :
 x_0:double ->
  y_0:double ->
   { (JC_3:
     ((JC_1: (not double_is_NaN(x_0))) and (JC_2: (not double_is_NaN(y_0)))))}
   double
   { (JC_16:
     ((JC_13: le_double_full(result, x_0))
     and ((JC_14: le_double_full(result, y_0))
         and (JC_15:
             (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

parameter mul :
 xl_0_0:double ->
  xu_0_0:double ->
   yl_0:double ->
    yu_0:double ->
     { } unit reads zl,zu writes zl,zu
     { (JC_148:
       ((JC_146: is_interval(zl, zu))
       and (JC_147:
           (forall a_1:real.
            (forall b_0_0:real.
             ((in_interval(a_1, xl_0_0, xu_0_0)
              and in_interval(b_0_0, yl_0, yu_0)) ->
              in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

parameter mul_dn :
 x_1_1:double ->
  y_1_1:double ->
   { } double
   { (JC_53:
     double_le_real(result,
     mul_real(double_value(x_1_1), double_value(y_1_1)))) }

parameter mul_dn_requires :
 x_1_1:double ->
  y_1_1:double ->
   { (JC_42:
     ((JC_37: (not double_is_NaN(x_1_1)))
     and ((JC_38: (not double_is_NaN(y_1_1)))
         and ((JC_39:
              ((double_is_infinite(x_1_1) or double_is_infinite(y_1_1)) ->
               dif_sign(x_1_1, y_1_1)))
             and ((JC_40:
                  ((double_is_infinite(x_1_1) and double_is_finite(y_1_1)) ->
                   (double_value(y_1_1) <> 0.0)))
                 and (JC_41:
                     ((double_is_finite(x_1_1) and double_is_infinite(y_1_1)) ->
                      (double_value(x_1_1) <> 0.0))))))))}
   double
   { (JC_53:
     double_le_real(result,
     mul_real(double_value(x_1_1), double_value(y_1_1)))) }

parameter mul_requires :
 xl_0_0:double ->
  xu_0_0:double ->
   yl_0:double ->
    yu_0:double ->
     { (JC_137:
       ((JC_135: is_interval(xl_0_0, xu_0_0))
       and (JC_136: is_interval(yl_0, yu_0))))}
     unit reads zl,zu writes zl,zu
     { (JC_148:
       ((JC_146: is_interval(zl, zu))
       and (JC_147:
           (forall a_1:real.
            (forall b_0_0:real.
             ((in_interval(a_1, xl_0_0, xu_0_0)
              and in_interval(b_0_0, yl_0, yu_0)) ->
              in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

parameter mul_up :
 x_2_1:double ->
  y_2_0:double ->
   { } double
   { (JC_76:
     real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
     result)) }

parameter mul_up_requires :
 x_2_1:double ->
  y_2_0:double ->
   { (JC_65:
     ((JC_59: (not double_is_NaN(x_2_1)))
     and ((JC_60: (not double_is_NaN(y_2_0)))
         and ((JC_61:
              ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
               sam_sign(x_2_1, y_2_0)))
             and ((JC_62:
                  ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                   (double_value(y_2_0) <> 0.0)))
                 and ((JC_63:
                      ((double_is_infinite(y_2_0)
                       and double_is_finite(x_2_1)) ->
                       (double_value(x_2_1) <> 0.0)))
                     and (JC_64:
                         ((double_is_finite(x_2_1)
                          and (double_is_finite(y_2_0)
                              and ((not no_overflow_double(down,
                                        neg_real(double_value(y_2_0))))
                                  and (double_sign(y_2_0) = Positive)))) ->
                          gt_real(double_value(x_2_1), 0.0)))))))))}
   double
   { (JC_76:
     real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
     result)) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let add_ensures_default =
 fun (xl_0 : double) (xu_0 : double) (yl : double) (yu : double) ->
  { (JC_117:
    ((JC_115: is_interval(xl_0, xu_0)) and (JC_116: is_interval(yl, yu)))) }
  (init:
  try
   begin
     (let _jessie_<num> = (zl := (JC_131: (((add_double down) xl_0) yl))) in
     void);
    (let _jessie_<num> =
    (zu := (JC_134:
           (neg_double (JC_133:
                       (((sub_double down) (JC_132: (neg_double xu_0))) yu))))) in
    void); (raise Return); (raise Return) end with Return -> void end)
  { (JC_121:
    ((JC_119: is_interval(zl, zu))
    and (JC_120:
        (forall a_0_0:real.
         (forall b_0:real.
          ((in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
           in_interval(add_real(a_0_0, b_0), zl, zu))))))) }

let add_safety =
 fun (xl_0 : double) (xu_0 : double) (yl : double) (yu : double) ->
  { (JC_117:
    ((JC_115: is_interval(xl_0, xu_0)) and (JC_116: is_interval(yl, yu)))) }
  (init:
  try
   begin
     (let _jessie_<num> = (zl := (JC_127: (((add_double down) xl_0) yl))) in
     void);
    (let _jessie_<num> =
    (zu := (JC_130:
           (neg_double (JC_129:
                       (((sub_double down) (JC_128: (neg_double xu_0))) yu))))) in
    void); (raise Return); (raise Return) end with Return -> void end)
  { true }

let max_ensures_default =
 fun (x_1 : double) (y : double) ->
  { (JC_25:
    ((JC_23: (not double_is_NaN(x_1))) and (JC_24: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((gt_double_ x_1) y) then begin   (tmp_0 := x_1); !tmp_0 end
       else begin   (tmp_0 := y); !tmp_0 end) in void); (return := !tmp_0);
      (raise Return) end); absurd  end with Return -> !return end))
  { (JC_30:
    ((JC_27: le_double_full(x_1, result))
    and ((JC_28: le_double_full(y, result))
        and (JC_29:
            (eq_double_full(result, x_1) or eq_double_full(result, y)))))) }

let max_safety =
 fun (x_1 : double) (y : double) ->
  { (JC_25:
    ((JC_23: (not double_is_NaN(x_1))) and (JC_24: (not double_is_NaN(y))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp_0 = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((gt_double_ x_1) y) then begin   (tmp_0 := x_1); !tmp_0 end
       else begin   (tmp_0 := y); !tmp_0 end) in void); (return := !tmp_0);
      (raise Return) end); absurd  end with Return -> !return end)) { true }

let min_ensures_default =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_7:
    ((JC_5: (not double_is_NaN(x_0))) and (JC_6: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((lt_double_ x_0) y_0) then begin   (tmp := x_0); !tmp end
       else begin   (tmp := y_0); !tmp end) in void); (return := !tmp);
      (raise Return) end); absurd  end with Return -> !return end))
  { (JC_12:
    ((JC_9: le_double_full(result, x_0))
    and ((JC_10: le_double_full(result, y_0))
        and (JC_11:
            (eq_double_full(result, x_0) or eq_double_full(result, y_0)))))) }

let min_safety =
 fun (x_0 : double) (y_0 : double) ->
  { (JC_7:
    ((JC_5: (not double_is_NaN(x_0))) and (JC_6: (not double_is_NaN(y_0))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let tmp = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((lt_double_ x_0) y_0) then begin   (tmp := x_0); !tmp end
       else begin   (tmp := y_0); !tmp end) in void); (return := !tmp);
      (raise Return) end); absurd  end with Return -> !return end)) { true }

let mul_dn_ensures_default =
 fun (x_1_1 : double) (y_1_1 : double) ->
  { (JC_49:
    ((JC_44: (not double_is_NaN(x_1_1)))
    and ((JC_45: (not double_is_NaN(y_1_1)))
        and ((JC_46:
             ((double_is_infinite(x_1_1) or double_is_infinite(y_1_1)) ->
              dif_sign(x_1_1, y_1_1)))
            and ((JC_47:
                 ((double_is_infinite(x_1_1) and double_is_finite(y_1_1)) ->
                  (double_value(y_1_1) <> 0.0)))
                and (JC_48:
                    ((double_is_finite(x_1_1) and double_is_infinite(y_1_1)) ->
                     (double_value(x_1_1) <> 0.0)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let z = ref (any_double void) in
     begin
       (let _jessie_<num> = (z := (JC_58: (((mul_double down) x_1_1) y_1_1))) in
       void); (return := !z); (raise Return) end); absurd  end with Return ->
   !return end))
  { (JC_51:
    double_le_real(result,
    mul_real(double_value(x_1_1), double_value(y_1_1)))) }

let mul_dn_safety =
 fun (x_1_1 : double) (y_1_1 : double) ->
  { (JC_49:
    ((JC_44: (not double_is_NaN(x_1_1)))
    and ((JC_45: (not double_is_NaN(y_1_1)))
        and ((JC_46:
             ((double_is_infinite(x_1_1) or double_is_infinite(y_1_1)) ->
              dif_sign(x_1_1, y_1_1)))
            and ((JC_47:
                 ((double_is_infinite(x_1_1) and double_is_finite(y_1_1)) ->
                  (double_value(y_1_1) <> 0.0)))
                and (JC_48:
                    ((double_is_finite(x_1_1) and double_is_infinite(y_1_1)) ->
                     (double_value(x_1_1) <> 0.0)))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let z = ref (any_double void) in
     begin
       (let _jessie_<num> = (z := (JC_57: (((mul_double down) x_1_1) y_1_1))) in
       void); (return := !z); (raise Return) end); absurd  end with Return ->
   !return end)) { true }

let mul_ensures_default =
 fun (xl_0_0 : double) (xu_0_0 : double) (yl_0 : double) (yu_0 : double) ->
  { (JC_141:
    ((JC_139: is_interval(xl_0_0, xu_0_0))
    and (JC_140: is_interval(yl_0, yu_0)))) }
  (init:
  try
   begin
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((lt_double_ xl_0_0) (double_of_real_exact 0.0))
       then
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             begin
               (let _jessie_<num> =
               (tmp_1 := (let _jessie_<num> = xu_0_0 in
                         (let _jessie_<num> = yl_0 in
                         (JC_173: ((mul_dn _jessie_<num>) _jessie_<num>))))) in
               void);
              (tmp_0_0 := (let _jessie_<num> = xl_0_0 in
                          (let _jessie_<num> = yu_0 in
                          (JC_174: ((mul_dn _jessie_<num>) _jessie_<num>)))));
              !tmp_0_0 end in void);
            (let _jessie_<num> =
            (zl := (let _jessie_<num> = !tmp_0_0 in
                   (let _jessie_<num> = !tmp_1 in
                   (JC_175: ((min _jessie_<num>) _jessie_<num>))))) in void);
            (let _jessie_<num> =
            begin
              (let _jessie_<num> =
              (tmp_1_0 := (let _jessie_<num> = xu_0_0 in
                          (let _jessie_<num> = yu_0 in
                          (JC_176: ((mul_up _jessie_<num>) _jessie_<num>))))) in
              void);
             (tmp_2 := (let _jessie_<num> = xl_0_0 in
                       (let _jessie_<num> = yl_0 in
                       (JC_177: ((mul_up _jessie_<num>) _jessie_<num>)))));
             !tmp_2 end in void);
            (zu := (let _jessie_<num> = !tmp_2 in
                   (let _jessie_<num> = !tmp_1_0 in
                   (JC_178: ((max _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_179: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_180: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_181: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_182: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end))
        else
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_183: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_184: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_185: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_186: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_187: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_188: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end)))
       else
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_189: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_190: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_191: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_192: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_193: ((mul_dn _jessie_<num>) _jessie_<num>))))) in void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_194: ((mul_up _jessie_<num>) _jessie_<num>))))); !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end))
        else
         begin
           (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
          (zu := (double_of_real_exact 0.0)); !zu end)) in void);
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { (JC_145:
    ((JC_143: is_interval(zl, zu))
    and (JC_144:
        (forall a_1:real.
         (forall b_0_0:real.
          ((in_interval(a_1, xl_0_0, xu_0_0)
           and in_interval(b_0_0, yl_0, yu_0)) ->
           in_interval(mul_real(a_1, b_0_0), zl, zu))))))) }

let mul_safety =
 fun (xl_0_0 : double) (xu_0_0 : double) (yl_0 : double) (yu_0 : double) ->
  { (JC_141:
    ((JC_139: is_interval(xl_0_0, xu_0_0))
    and (JC_140: is_interval(yl_0, yu_0)))) }
  (init:
  try
   begin
     (let tmp_1 = ref (any_double void) in
     (let tmp_0_0 = ref (any_double void) in
     (let tmp_1_0 = ref (any_double void) in
     (let tmp_2 = ref (any_double void) in
     begin
       (let _jessie_<num> =
       (if ((lt_double_ xl_0_0) (double_of_real_exact 0.0))
       then
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             begin
               (let _jessie_<num> =
               (tmp_1 := (let _jessie_<num> = xu_0_0 in
                         (let _jessie_<num> = yl_0 in
                         (JC_151: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
               void);
              (tmp_0_0 := (let _jessie_<num> = xl_0_0 in
                          (let _jessie_<num> = yu_0 in
                          (JC_152: ((mul_dn_requires _jessie_<num>) _jessie_<num>)))));
              !tmp_0_0 end in void);
            (let _jessie_<num> =
            (zl := (let _jessie_<num> = !tmp_0_0 in
                   (let _jessie_<num> = !tmp_1 in
                   (JC_153: ((min_requires _jessie_<num>) _jessie_<num>))))) in
            void);
            (let _jessie_<num> =
            begin
              (let _jessie_<num> =
              (tmp_1_0 := (let _jessie_<num> = xu_0_0 in
                          (let _jessie_<num> = yu_0 in
                          (JC_154: ((mul_up_requires _jessie_<num>) _jessie_<num>))))) in
              void);
             (tmp_2 := (let _jessie_<num> = xl_0_0 in
                       (let _jessie_<num> = yl_0 in
                       (JC_155: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
             !tmp_2 end in void);
            (zu := (let _jessie_<num> = !tmp_2 in
                   (let _jessie_<num> = !tmp_1_0 in
                   (JC_156: ((max_requires _jessie_<num>) _jessie_<num>))))); !zu
           end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_157: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_158: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_159: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_160: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end))
        else
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_161: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_162: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_163: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_164: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yu_0 in
                    (JC_165: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yl_0 in
                   (JC_166: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end)))
       else
        (if ((gt_double_ xu_0_0) (double_of_real_exact 0.0))
        then
         (if ((lt_double_ yl_0) (double_of_real_exact 0.0))
         then
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_167: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_168: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end
          else
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xu_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_169: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xl_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_170: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end)
         else
          (if ((gt_double_ yu_0) (double_of_real_exact 0.0))
          then
           begin
             (let _jessie_<num> =
             (zl := (let _jessie_<num> = xl_0_0 in
                    (let _jessie_<num> = yl_0 in
                    (JC_171: ((mul_dn_requires _jessie_<num>) _jessie_<num>))))) in
             void);
            (zu := (let _jessie_<num> = xu_0_0 in
                   (let _jessie_<num> = yu_0 in
                   (JC_172: ((mul_up_requires _jessie_<num>) _jessie_<num>)))));
            !zu end
          else
           begin
             (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
            (zu := (double_of_real_exact 0.0)); !zu end))
        else
         begin
           (let _jessie_<num> = (zl := (double_of_real_exact 0.0)) in void);
          (zu := (double_of_real_exact 0.0)); !zu end)) in void);
      (raise Return) end)))); (raise Return) end with Return -> void end)
  { true }

let mul_up_ensures_default =
 fun (x_2_1 : double) (y_2_0 : double) ->
  { (JC_73:
    ((JC_67: (not double_is_NaN(x_2_1)))
    and ((JC_68: (not double_is_NaN(y_2_0)))
        and ((JC_69:
             ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
              sam_sign(x_2_1, y_2_0)))
            and ((JC_70:
                 ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                  (double_value(y_2_0) <> 0.0)))
                and ((JC_71:
                     ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
                      (double_value(x_2_1) <> 0.0)))
                    and (JC_72:
                        ((double_is_finite(x_2_1)
                         and (double_is_finite(y_2_0)
                             and ((not no_overflow_double(down,
                                       neg_real(double_value(y_2_0))))
                                 and (double_sign(y_2_0) = Positive)))) ->
                         gt_real(double_value(x_2_1), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let a_0 = ref (any_double void) in
     (let b = ref (any_double void) in
     (let z_0 = ref (any_double void) in
     begin
       (let _jessie_<num> = (a_0 := (JC_95: (neg_double y_2_0))) in void);
      (let _jessie_<num> = (b := (JC_96: (((mul_double down) x_2_1) !a_0))) in
      void); (let _jessie_<num> = (z_0 := (JC_97: (neg_double !b))) in void);
      (assert
      { (JC_98:
        ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_99:
        ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_100:
        ((double_is_infinite(x_2_1)
         and (double_is_finite(y_2_0)
             and no_overflow_double(down, neg_real(double_value(y_2_0))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_101:
        ((double_is_infinite(x_2_1)
         and (double_is_finite(y_2_0)
             and (not no_overflow_double(down, neg_real(double_value(y_2_0)))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_102:
        ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_103:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                 and (no_overflow_double(down,
                      mul_real(double_value(x_2_1), double_value(a_0)))
                     and (not no_overflow_double(down,
                              neg_real(double_value(b)))))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_104:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                 and (not no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0))))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_105:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and ((not no_overflow_double(down,
                       neg_real(double_value(y_2_0))))
                 and (double_sign(y_2_0) = Positive)))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_106:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and ((not no_overflow_double(down,
                       neg_real(double_value(y_2_0))))
                 and ((double_sign(y_2_0) = Negative)
                     and (not no_overflow_double(down,
                              mul_real(double_value(x_2_1),
                              double_value(a_0)))))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_107:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and ((not no_overflow_double(down,
                       neg_real(double_value(y_2_0))))
                 and ((double_sign(y_2_0) = Negative)
                     and (no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0)))
                         and (not no_overflow_double(down,
                                  neg_real(double_value(b))))))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_108:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and ((not no_overflow_double(down,
                       neg_real(double_value(y_2_0))))
                 and ((double_sign(y_2_0) = Negative)
                     and (no_overflow_double(down,
                          mul_real(double_value(x_2_1), double_value(a_0)))
                         and no_overflow_double(down,
                             neg_real(double_value(b)))))))) ->
         real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
         z_0))) }; void); void;
      (assert
      { (JC_109:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                 and (no_overflow_double(down,
                      mul_real(double_value(x_2_1), double_value(a_0)))
                     and (no_overflow_double(down, neg_real(double_value(b)))
                         and gt_real(double_value(x_2_1), 0.0)))))) ->
         (double_is_finite(z_0)
         and real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0)))) }; void); void;
      (assert
      { (JC_110:
        ((double_is_finite(x_2_1)
         and (double_is_finite(y_2_0)
             and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                 and (no_overflow_double(down,
                      mul_real(double_value(x_2_1), double_value(a_0)))
                     and (no_overflow_double(down, neg_real(double_value(b)))
                         and lt_real(double_value(x_2_1), 0.0)))))) ->
         (double_is_finite(z_0)
         and real_le_double(mul_real(double_value(x_2_1),
                            double_value(y_2_0)),
             z_0)))) }; void); void; (return := !z_0); (raise Return) end)));
    absurd  end with Return -> !return end))
  { (JC_75:
    real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
    result)) }

let mul_up_safety =
 fun (x_2_1 : double) (y_2_0 : double) ->
  { (JC_73:
    ((JC_67: (not double_is_NaN(x_2_1)))
    and ((JC_68: (not double_is_NaN(y_2_0)))
        and ((JC_69:
             ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
              sam_sign(x_2_1, y_2_0)))
            and ((JC_70:
                 ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
                  (double_value(y_2_0) <> 0.0)))
                and ((JC_71:
                     ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
                      (double_value(x_2_1) <> 0.0)))
                    and (JC_72:
                        ((double_is_finite(x_2_1)
                         and (double_is_finite(y_2_0)
                             and ((not no_overflow_double(down,
                                       neg_real(double_value(y_2_0))))
                                 and (double_sign(y_2_0) = Positive)))) ->
                         gt_real(double_value(x_2_1), 0.0))))))))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let a_0 = ref (any_double void) in
     (let b = ref (any_double void) in
     (let z_0 = ref (any_double void) in
     begin
       (let _jessie_<num> = (a_0 := (JC_79: (neg_double y_2_0))) in void);
      (let _jessie_<num> = (b := (JC_80: (((mul_double down) x_2_1) !a_0))) in
      void); (let _jessie_<num> = (z_0 := (JC_81: (neg_double !b))) in void);
      [ { } unit reads z_0
        { (JC_82:
          ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads z_0
        { (JC_83:
          ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads z_0
        { (JC_84:
          ((double_is_infinite(x_2_1)
           and (double_is_finite(y_2_0)
               and no_overflow_double(down, neg_real(double_value(y_2_0))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads z_0
        { (JC_85:
          ((double_is_infinite(x_2_1)
           and (double_is_finite(y_2_0)
               and (not no_overflow_double(down,
                        neg_real(double_value(y_2_0)))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads z_0
        { (JC_86:
          ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,b,z_0
        { (JC_87:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (not no_overflow_double(down,
                                neg_real(double_value(b)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,z_0
        { (JC_88:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (not no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads z_0
        { (JC_89:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and (double_sign(y_2_0) = Positive)))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,z_0
        { (JC_90:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (not no_overflow_double(down,
                                mul_real(double_value(x_2_1),
                                double_value(a_0)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,b,z_0
        { (JC_91:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0)))
                           and (not no_overflow_double(down,
                                    neg_real(double_value(b))))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,b,z_0
        { (JC_92:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and ((not no_overflow_double(down,
                         neg_real(double_value(y_2_0))))
                   and ((double_sign(y_2_0) = Negative)
                       and (no_overflow_double(down,
                            mul_real(double_value(x_2_1), double_value(a_0)))
                           and no_overflow_double(down,
                               neg_real(double_value(b)))))))) ->
           real_le_double(mul_real(double_value(x_2_1), double_value(y_2_0)),
           z_0))) } ]; void;
      [ { } unit reads a_0,b,z_0
        { (JC_93:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (no_overflow_double(down,
                            neg_real(double_value(b)))
                           and gt_real(double_value(x_2_1), 0.0)))))) ->
           (double_is_finite(z_0)
           and real_le_double(mul_real(double_value(x_2_1),
                              double_value(y_2_0)),
               z_0)))) } ]; void;
      [ { } unit reads a_0,b,z_0
        { (JC_94:
          ((double_is_finite(x_2_1)
           and (double_is_finite(y_2_0)
               and (no_overflow_double(down, neg_real(double_value(y_2_0)))
                   and (no_overflow_double(down,
                        mul_real(double_value(x_2_1), double_value(a_0)))
                       and (no_overflow_double(down,
                            neg_real(double_value(b)))
                           and lt_real(double_value(x_2_1), 0.0)))))) ->
           (double_is_finite(z_0)
           and real_le_double(mul_real(double_value(x_2_1),
                              double_value(y_2_0)),
               z_0)))) } ]; void; (return := !z_0); (raise Return) end)));
    absurd  end with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/interval_arith.why
========== file tests/c/interval_arith.jessie/why/interval_arith_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode

logic nearest_even : mode

logic to_zero : mode

logic up : mode

logic down : mode

logic nearest_away : mode

logic mode_match : mode, 'a1, 'a1, 'a1, 'a1, 'a1 -> 'a1

axiom mode_match_nearest_even:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_2))))))

axiom mode_match_to_zero:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_3))))))

axiom mode_match_up:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_4))))))

axiom mode_match_down:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_5))))))

axiom mode_match_nearest_away:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_6))))))

axiom mode_inversion:
  (forall aux_1:mode.
    (((((aux_1 = nearest_even) or (aux_1 = to_zero)) or (aux_1 = up)) or
      (aux_1 = down)) or
     (aux_1 = nearest_away)))

logic mode_to_int : mode -> int

axiom mode_to_int_nearest_even: (mode_to_int(nearest_even) = 0)

axiom mode_to_int_to_zero: (mode_to_int(to_zero) = 1)

axiom mode_to_int_up: (mode_to_int(up) = 2)

axiom mode_to_int_down: (mode_to_int(down) = 3)

axiom mode_to_int_nearest_away: (mode_to_int(nearest_away) = 4)

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

function min_single() : real = 0x1.p-149

function min_double() : real = 0x1.p-1074

type Float_class

logic Finite : Float_class

logic Infinite : Float_class

logic NaN : Float_class

logic Float_class_match : Float_class, 'a1, 'a1, 'a1 -> 'a1

axiom Float_class_match_Finite:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(Finite, aux_8, aux_9, aux_10)].
        (Float_class_match(Finite, aux_8, aux_9, aux_10) = aux_8))))

axiom Float_class_match_Infinite:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(Infinite, aux_8, aux_9, aux_10)].
        (Float_class_match(Infinite, aux_8, aux_9, aux_10) = aux_9))))

axiom Float_class_match_NaN:
  (forall aux_8:'a1.
    (forall aux_9:'a1.
      (forall aux_10:'a1 [Float_class_match(NaN, aux_8, aux_9, aux_10)].
        (Float_class_match(NaN, aux_8, aux_9, aux_10) = aux_10))))

axiom Float_class_inversion:
  (forall aux_7:Float_class.
    (((aux_7 = Finite) or (aux_7 = Infinite)) or (aux_7 = NaN)))

logic Float_class_to_int : Float_class -> int

axiom Float_class_to_int_Finite: (Float_class_to_int(Finite) = 0)

axiom Float_class_to_int_Infinite: (Float_class_to_int(Infinite) = 1)

axiom Float_class_to_int_NaN: (Float_class_to_int(NaN) = 2)

type sign

logic Negative : sign

logic Positive : sign

logic sign_match : sign, 'a1, 'a1 -> 'a1

axiom sign_match_Negative:
  (forall aux_12:'a1.
    (forall aux_13:'a1 [sign_match(Negative, aux_12, aux_13)].
      (sign_match(Negative, aux_12, aux_13) = aux_12)))

axiom sign_match_Positive:
  (forall aux_12:'a1.
    (forall aux_13:'a1 [sign_match(Positive, aux_12, aux_13)].
      (sign_match(Positive, aux_12, aux_13) = aux_13)))

axiom sign_inversion:
  (forall aux_11:sign. ((aux_11 = Negative) or (aux_11 = Positive)))

logic sign_to_int : sign -> int

axiom sign_to_int_Negative: (sign_to_int(Negative) = 0)

axiom sign_to_int_Positive: (sign_to_int(Positive) = 1)

logic single_class : single -> Float_class

logic double_class : double -> Float_class

logic single_sign : single -> sign

logic double_sign : double -> sign

logic same_sign_real_bool : sign, real -> prop

axiom same_sign_real_bool_inversion:
  (forall aux_14:sign.
    (forall aux_15:real [same_sign_real_bool(aux_14, aux_15)].
      (same_sign_real_bool(aux_14, aux_15) ->
       ((exists x:real.
          ((x < 0.0) and ((aux_14 = Negative) and (aux_15 = x)))) or
        (exists x:real.
          ((x > 0.0) and ((aux_14 = Positive) and (aux_15 = x))))))))

axiom neg_case:
  (forall x:real. ((x < 0.0) -> same_sign_real_bool(Negative, x)))

axiom pos_case:
  (forall x:real. ((x > 0.0) -> same_sign_real_bool(Positive, x)))

axiom same_sign_real_bool_zero1:
  (forall b:sign. (not same_sign_real_bool(b, 0.0)))

axiom same_sign_real_bool_zero2:
  (forall x:real.
    ((same_sign_real_bool(Negative, x) and same_sign_real_bool(Positive, x)) ->
     false))

axiom same_sign_real_bool_zero3:
  (forall b:sign. (forall x:real. (same_sign_real_bool(b, x) -> (x <> 0.0))))

axiom same_sign_real_bool_correct2:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x < 0.0) <-> (b = Negative)))))

axiom same_sign_real_bool_correct3:
  (forall b:sign.
    (forall x:real.
      (same_sign_real_bool(b, x) -> ((x > 0.0) <-> (b = Positive)))))

predicate single_same_sign_real(x: single, y: real) =
  same_sign_real_bool(single_sign(x), y)

predicate single_same_sign(x: single, y: single) =
  (single_sign(x) = single_sign(y))

predicate single_diff_sign(x: single, y: single) =
  (single_sign(x) <> single_sign(y))

predicate single_product_sign(z: single, x: single, y: single) =
  ((single_same_sign(x, y) -> (single_sign(z) = Positive)) and
   (single_diff_sign(x, y) -> (single_sign(z) = Negative)))

predicate double_same_sign_real(x: double, y: real) =
  same_sign_real_bool(double_sign(x), y)

predicate double_same_sign(x: double, y: double) =
  (double_sign(x) = double_sign(y))

predicate double_diff_sign(x: double, y: double) =
  (double_sign(x) <> double_sign(y))

predicate double_product_sign(z: double, x: double, y: double) =
  ((double_same_sign(x, y) -> (double_sign(z) = Positive)) and
   (double_diff_sign(x, y) -> (double_sign(z) = Negative)))

predicate single_same_class(x: single, y: single) =
  (single_class(x) = single_class(y))

predicate singlediff_class(x: single, y: single) =
  (single_class(x) <> single_class(y))

predicate double_same_class(x: double, y: double) =
  (double_class(x) = double_class(y))

predicate doublediff_class(x: double, y: double) =
  (double_class(x) <> double_class(y))

axiom single_finite_sign:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) <> 0.0)) ->
     single_same_sign_real(x, single_value(x))))

axiom single_finite_sign_neg1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) < 0.0)) ->
     (single_sign(x) = Negative)))

axiom single_finite_sign_neg2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Negative))) ->
     (single_value(x) < 0.0)))

axiom single_finite_sign_pos1:
  (forall x:single.
    (((single_class(x) = Finite) and (single_value(x) > 0.0)) ->
     (single_sign(x) = Positive)))

axiom single_finite_sign_pos2:
  (forall x:single.
    (((single_class(x) = Finite) and
      ((single_value(x) <> 0.0) and (single_sign(x) = Positive))) ->
     (single_value(x) > 0.0)))

axiom single_diff_sign_trans:
  (forall x:single.
    (forall y:single.
      (forall z:single.
        ((single_diff_sign(x, y) and single_diff_sign(y, z)) ->
         single_same_sign(x, z)))))

axiom single_same_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and single_same_sign(x, y))) ->
       ((single_value(x) * single_value(y)) >= 0.0))))

axiom single_diff_sign_product:
  (forall x:single.
    (forall y:single.
      (((single_class(x) = Finite) and
        ((single_class(y) = Finite) and
         ((single_value(x) * single_value(y)) < 0.0))) ->
       single_diff_sign(x, y))))

axiom double_finite_sign:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) <> 0.0)) ->
     double_same_sign_real(x, double_value(x))))

axiom double_finite_sign_neg1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) < 0.0)) ->
     (double_sign(x) = Negative)))

axiom double_finite_sign_neg2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Negative))) ->
     (double_value(x) < 0.0)))

axiom double_finite_sign_pos1:
  (forall x:double.
    (((double_class(x) = Finite) and (double_value(x) > 0.0)) ->
     (double_sign(x) = Positive)))

axiom double_finite_sign_pos2:
  (forall x:double.
    (((double_class(x) = Finite) and
      ((double_value(x) <> 0.0) and (double_sign(x) = Positive))) ->
     (double_value(x) > 0.0)))

axiom double_diff_sign_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((double_diff_sign(x, y) and double_diff_sign(y, z)) ->
         double_same_sign(x, z)))))

axiom double_same_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and double_same_sign(x, y))) ->
       ((double_value(x) * double_value(y)) >= 0.0))))

axiom double_diff_sign_product:
  (forall x:double.
    (forall y:double.
      (((double_class(x) = Finite) and
        ((double_class(y) = Finite) and
         ((double_value(x) * double_value(y)) < 0.0))) ->
       double_diff_sign(x, y))))

predicate single_is_finite(x: single) = (single_class(x) = Finite)

predicate single_is_infinite(x: single) = (single_class(x) = Infinite)

predicate single_is_NaN(x: single) = (single_class(x) = NaN)

predicate single_is_not_NaN(x: single) =
  (single_is_finite(x) or single_is_infinite(x))

predicate single_is_minus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Negative))

predicate single_is_plus_infinity(x: single) =
  (single_is_infinite(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero(x: single) =
  (single_is_finite(x) and (single_value(x) = 0.0))

predicate single_is_gen_zero_plus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Positive))

predicate single_is_gen_zero_minus(x: single) =
  (single_is_gen_zero(x) and (single_sign(x) = Negative))

predicate double_is_finite(x: double) = (double_class(x) = Finite)

predicate double_is_infinite(x: double) = (double_class(x) = Infinite)

predicate double_is_NaN(x: double) = (double_class(x) = NaN)

predicate double_is_not_NaN(x: double) =
  (double_is_finite(x) or double_is_infinite(x))

predicate double_is_minus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Negative))

predicate double_is_plus_infinity(x: double) =
  (double_is_infinite(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero(x: double) =
  (double_is_finite(x) and (double_value(x) = 0.0))

predicate double_is_gen_zero_plus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Positive))

predicate double_is_gen_zero_minus(x: double) =
  (double_is_gen_zero(x) and (double_sign(x) = Negative))

predicate single_overflow_value(m: mode, x: single) =
  (((m = down) ->
    (((single_sign(x) = Negative) -> single_is_infinite(x)) and
     ((single_sign(x) = Positive) ->
      (single_is_finite(x) and (single_value(x) = max_single))))) and
   (((m = up) ->
     (((single_sign(x) = Negative) ->
       (single_is_finite(x) and (single_value(x) = (-max_single)))) and
      ((single_sign(x) = Positive) -> single_is_infinite(x)))) and
    (((m = to_zero) ->
      (single_is_finite(x) and
       (((single_sign(x) = Negative) -> (single_value(x) = (-max_single))) and
        ((single_sign(x) = Positive) -> (single_value(x) = max_single))))) and
     (((m = nearest_away) or (m = nearest_even)) -> single_is_infinite(x)))))

predicate double_overflow_value(m: mode, x: double) =
  (((m = down) ->
    (((double_sign(x) = Negative) -> double_is_infinite(x)) and
     ((double_sign(x) = Positive) ->
      (double_is_finite(x) and (double_value(x) = max_double))))) and
   (((m = up) ->
     (((double_sign(x) = Negative) ->
       (double_is_finite(x) and (double_value(x) = (-max_double)))) and
      ((double_sign(x) = Positive) -> double_is_infinite(x)))) and
    (((m = to_zero) ->
      (double_is_finite(x) and
       (((double_sign(x) = Negative) -> (double_value(x) = (-max_double))) and
        ((double_sign(x) = Positive) -> (double_value(x) = max_double))))) and
     (((m = nearest_away) or (m = nearest_even)) -> double_is_infinite(x)))))

predicate single_underflow_value(m: mode, x: single) =
  (single_is_finite(x) and
   (((single_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = up) -> (single_value(x) = min_single)))) and
    ((single_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (single_value(x) = 0.0)) and
      ((m = down) -> (single_value(x) = (-min_single)))))))

predicate double_underflow_value(m: mode, x: double) =
  (double_is_finite(x) and
   (((double_sign(x) = Positive) ->
     ((((m = down) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = up) -> (double_value(x) = min_double)))) and
    ((double_sign(x) = Negative) ->
     ((((m = up) or
        ((m = to_zero) or ((m = nearest_even) or (m = nearest_away)))) ->
       (double_value(x) = 0.0)) and
      ((m = down) -> (double_value(x) = (-min_double)))))))

predicate single_sign_zero_result(m: mode, x: single) =
  ((single_value(x) = 0.0) ->
   (((m = down) -> (single_sign(x) = Negative)) and
    ((m <> down) -> (single_sign(x) = Positive))))

predicate double_sign_zero_result(m: mode, x: double) =
  ((double_value(x) = 0.0) ->
   (((m = down) -> (double_sign(x) = Negative)) and
    ((m <> down) -> (double_sign(x) = Positive))))

predicate le_single_full(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) <= single_value(y)))) or
   ((single_is_minus_infinity(x) and single_is_not_NaN(y)) or
    (single_is_not_NaN(x) and single_is_plus_infinity(y))))

predicate lt_single_full(x: single, y: single) =
  ((single_is_finite(x) and
    (single_is_finite(y) and (single_value(x) < single_value(y)))) or
   ((single_is_minus_infinity(x) and
     (single_is_not_NaN(y) and (not single_is_minus_infinity(y)))) or
    (single_is_not_NaN(x) and
     ((not single_is_plus_infinity(x)) and single_is_plus_infinity(y)))))

predicate ge_single_full(x: single, y: single) = le_single_full(y, x)

predicate gt_single_full(x: single, y: single) = lt_single_full(y, x)

predicate eq_single_full(x: single, y: single) =
  (single_is_not_NaN(x) and
   (single_is_not_NaN(y) and
    ((single_is_finite(x) and
      (single_is_finite(y) and (single_value(x) = single_value(y)))) or
     (single_is_infinite(x) and
      (single_is_infinite(y) and single_same_sign(x, y))))))

predicate ne_single_full(x: single, y: single) = (not eq_single_full(x, y))

predicate le_double_full(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) <= double_value(y)))) or
   ((double_is_minus_infinity(x) and double_is_not_NaN(y)) or
    (double_is_not_NaN(x) and double_is_plus_infinity(y))))

predicate lt_double_full(x: double, y: double) =
  ((double_is_finite(x) and
    (double_is_finite(y) and (double_value(x) < double_value(y)))) or
   ((double_is_minus_infinity(x) and
     (double_is_not_NaN(y) and (not double_is_minus_infinity(y)))) or
    (double_is_not_NaN(x) and
     ((not double_is_plus_infinity(x)) and double_is_plus_infinity(y)))))

predicate ge_double_full(x: double, y: double) = le_double_full(y, x)

predicate gt_double_full(x: double, y: double) = lt_double_full(y, x)

predicate eq_double_full(x: double, y: double) =
  (double_is_not_NaN(x) and
   (double_is_not_NaN(y) and
    ((double_is_finite(x) and
      (double_is_finite(y) and (double_value(x) = double_value(y)))) or
     (double_is_infinite(x) and
      (double_is_infinite(y) and double_same_sign(x, y))))))

predicate ne_double_full(x: double, y: double) = (not eq_double_full(x, y))

axiom le_lt_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((le_double_full(x, y) and lt_double_full(y, z)) -> lt_double_full(x,
         z)))))

axiom lt_le_double_trans:
  (forall x:double.
    (forall y:double.
      (forall z:double.
        ((lt_double_full(x, y) and le_double_full(y, z)) -> lt_double_full(x,
         z)))))

axiom round_single1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_single(m, x) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom round_single2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_single(m, x)) ->
       (single_same_sign_real(round_single_logic(m, x), x) and
        single_overflow_value(m, round_single_logic(m, x))))))

axiom round_single3:
  (forall m:mode.
    (forall x:real. (single_exact(round_single_logic(m, x)) = x)))

axiom round_single4:
  (forall m:mode.
    (forall x:real. (single_model(round_single_logic(m, x)) = x)))

axiom single_of_zero:
  (forall m:mode. single_is_gen_zero(round_single_logic(m, 0.0)))

axiom round_single_logic_le:
  (forall m:mode.
    (forall x:real.
      (single_is_finite(round_single_logic(m, x)) ->
       (abs_real(single_value(round_single_logic(m, x))) <= max_single))))

axiom round_single_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) ->
       (single_is_finite(round_single_logic(m, x)) and
        (single_value(round_single_logic(m, x)) = round_single(m, x))))))

axiom single_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_single <= x) and (x <= max_single)) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) > 0.0) and
         (single_sign(round_single_logic(m, x)) = Positive))))))

axiom single_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_single) <= x) and (x <= (-min_single))) ->
       (single_is_finite(round_single_logic(m, x)) and
        ((single_value(round_single_logic(m, x)) < 0.0) and
         (single_sign(round_single_logic(m, x)) = Negative))))))

axiom round_double1:
  (forall m:mode.
    (forall x:real.
      (no_overflow_double(m, x) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom round_double2:
  (forall m:mode.
    (forall x:real.
      ((not no_overflow_double(m, x)) ->
       (double_same_sign_real(round_double_logic(m, x), x) and
        double_overflow_value(m, round_double_logic(m, x))))))

axiom round_double3:
  (forall m:mode.
    (forall x:real. (double_exact(round_double_logic(m, x)) = x)))

axiom round_double4:
  (forall m:mode.
    (forall x:real. (double_model(round_double_logic(m, x)) = x)))

axiom double_of_zero:
  (forall m:mode. double_is_gen_zero(round_double_logic(m, 0.0)))

axiom round_double_logic_le:
  (forall m:mode.
    (forall x:real.
      (double_is_finite(round_double_logic(m, x)) ->
       (abs_real(double_value(round_double_logic(m, x))) <= max_double))))

axiom round_double_no_overflow:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) ->
       (double_is_finite(round_double_logic(m, x)) and
        (double_value(round_double_logic(m, x)) = round_double(m, x))))))

axiom double_positive_constant:
  (forall m:mode.
    (forall x:real.
      (((min_double <= x) and (x <= max_double)) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) > 0.0) and
         (double_sign(round_double_logic(m, x)) = Positive))))))

axiom double_negative_constant:
  (forall m:mode.
    (forall x:real.
      ((((-max_double) <= x) and (x <= (-min_double))) ->
       (double_is_finite(round_double_logic(m, x)) and
        ((double_value(round_double_logic(m, x)) < 0.0) and
         (double_sign(round_double_logic(m, x)) = Negative))))))

axiom single_is_gen_zero_comp1:
  (forall x:single.
    (forall y:single.
      ((single_is_gen_zero(x) and
        ((single_value(x) = single_value(y)) and single_is_finite(y))) ->
       single_is_gen_zero(y))))

axiom single_is_gen_zero_comp2:
  (forall x:single.
    (forall y:single.
      ((single_is_finite(x) and
        ((not single_is_gen_zero(x)) and (single_value(x) = single_value(y)))) ->
       (not single_is_gen_zero(y)))))

axiom double_is_gen_zero_comp1:
  (forall x:double.
    (forall y:double.
      ((double_is_gen_zero(x) and
        ((double_value(x) = double_value(y)) and double_is_finite(y))) ->
       double_is_gen_zero(y))))

axiom double_is_gen_zero_comp2:
  (forall x:double.
    (forall y:double.
      ((double_is_finite(x) and
        ((not double_is_gen_zero(x)) and (double_value(x) = double_value(y)))) ->
       (not double_is_gen_zero(y)))))

type charP

type int8

type padding

type uint8

type unsigned_charP

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate dif_sign(x_2: double, y_1: double) =
  (double_sign(x_2) <> double_sign(y_1))

predicate double_le_real(x_1_0: double, y_1_0: real) =
  ((double_is_finite(x_1_0) and (double_value(x_1_0) <= y_1_0)) or
   double_is_minus_infinity(x_1_0))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic integer_of_uint8 : uint8 -> int

predicate eq_uint8(x: uint8, y: uint8) =
  (integer_of_uint8(x) = integer_of_uint8(y))

predicate real_le_double(x_2_0: real, y_2: double) =
  ((double_is_finite(y_2) and (x_2_0 <= double_value(y_2))) or
   double_is_plus_infinity(y_2))

predicate in_interval(a: real, l: double, u: double) =
  (double_le_real(l, a) and real_le_double(a, u))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate is_interval(xl: double, xu: double) =
  ((double_is_finite(xl) or double_is_minus_infinity(xl)) and
   (double_is_finite(xu) or double_is_plus_infinity(xu)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate sam_sign(x_0_0: double, y_0_0: double) =
  (double_sign(x_0_0) = double_sign(y_0_0))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic uint8_of_integer : int -> uint8

axiom uint8_coerce:
  (forall x:int.
    (((0 <= x) and (x <= 255)) -> (integer_of_uint8(uint8_of_integer(x)) = x)))

axiom uint8_extensionality:
  (forall x:uint8.
    (forall y:uint8.
      ((integer_of_uint8(x) = integer_of_uint8(y)) -> (x = y))))

axiom uint8_range:
  (forall x:uint8.
    ((0 <= integer_of_uint8(x)) and (integer_of_uint8(x) <= 255)))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal add_ensures_default_po_1:
  forall xl_0:double.
  forall xu_0:double.
  forall yl:double.
  forall yu:double.
  ("JC_117":
  (("JC_115": is_interval(xl_0, xu_0)) and ("JC_116": is_interval(yl, yu)))) ->
  forall result:double.
  (((double_is_NaN(xl_0) or double_is_NaN(yl)) -> double_is_NaN(result)) and
   (((double_is_finite(xl_0) and double_is_infinite(yl)) ->
     (double_is_infinite(result) and double_same_sign(result, yl))) and
    (((double_is_infinite(xl_0) and double_is_finite(yl)) ->
      (double_is_infinite(result) and double_same_sign(result, xl_0))) and
     (((double_is_infinite(xl_0) and
        (double_is_infinite(yl) and double_same_sign(xl_0, yl))) ->
       (double_is_infinite(result) and double_same_sign(result, xl_0))) and
      (((double_is_infinite(xl_0) and
         (double_is_infinite(yl) and double_diff_sign(xl_0, yl))) ->
        double_is_NaN(result)) and
       (((double_is_finite(xl_0) and
          (double_is_finite(yl) and no_overflow_double(down,
           (double_value(xl_0) + double_value(yl))))) ->
         (double_is_finite(result) and
          ((double_value(result) = round_double(down,
           (double_value(xl_0) + double_value(yl)))) and
           double_sign_zero_result(down, result)))) and
        (((double_is_finite(xl_0) and
           (double_is_finite(yl) and (not no_overflow_double(down,
            (double_value(xl_0) + double_value(yl)))))) ->
          (double_same_sign_real(result,
           (double_value(xl_0) + double_value(yl))) and
           double_overflow_value(down, result))) and
         ((double_exact(result) = (double_exact(xl_0) + double_exact(yl))) and
          (double_model(result) = (double_model(xl_0) + double_model(yl))))))))))) ->
  forall zl:double.
  (zl = result) ->
  forall result0:double.
  ((double_is_NaN(xu_0) -> double_is_NaN(result0)) and
   ((double_is_infinite(xu_0) -> double_is_infinite(result0)) and
    ((double_is_finite(xu_0) ->
      (double_is_finite(result0) and
       (double_value(result0) = (-double_value(xu_0))))) and
     (double_diff_sign(result0, xu_0) and
      ((double_exact(result0) = (-double_exact(xu_0))) and
       (double_model(result0) = (-double_model(xu_0)))))))) ->
  forall result1:double.
  (((double_is_NaN(result0) or double_is_NaN(yu)) -> double_is_NaN(result1)) and
   (((double_is_finite(result0) and double_is_infinite(yu)) ->
     (double_is_infinite(result1) and double_diff_sign(result1, yu))) and
    (((double_is_infinite(result0) and double_is_finite(yu)) ->
      (double_is_infinite(result1) and double_same_sign(result1, result0))) and
     (((double_is_infinite(result0) and
        (double_is_infinite(yu) and double_same_sign(result0, yu))) ->
       double_is_NaN(result1)) and
      (((double_is_infinite(result0) and
         (double_is_infinite(yu) and double_diff_sign(result0, yu))) ->
        (double_is_infinite(result1) and double_same_sign(result1, result0))) and
       (((double_is_finite(result0) and
          (double_is_finite(yu) and no_overflow_double(down,
           (double_value(result0) - double_value(yu))))) ->
         (double_is_finite(result1) and
          ((double_value(result1) = round_double(down,
           (double_value(result0) - double_value(yu)))) and
           double_sign_zero_result(down, result1)))) and
        (((double_is_finite(result0) and
           (double_is_finite(yu) and (not no_overflow_double(down,
            (double_value(result0) - double_value(yu)))))) ->
          (double_same_sign_real(result1,
           (double_value(result0) - double_value(yu))) and
           double_overflow_value(down, result1))) and
         ((double_exact(result1) = (double_exact(result0) - double_exact(yu))) and
          (double_model(result1) = (double_model(result0) - double_model(yu))))))))))) ->
  forall result2:double.
  ((double_is_NaN(result1) -> double_is_NaN(result2)) and
   ((double_is_infinite(result1) -> double_is_infinite(result2)) and
    ((double_is_finite(result1) ->
      (double_is_finite(result2) and
       (double_value(result2) = (-double_value(result1))))) and
     (double_diff_sign(result2, result1) and
      ((double_exact(result2) = (-double_exact(result1))) and
       (double_model(result2) = (-double_model(result1)))))))) ->
  forall zu:double.
  (zu = result2) ->
  ("JC_121": ("JC_119": is_interval(zl, zu)))

goal add_ensures_default_po_2:
  forall xl_0:double.
  forall xu_0:double.
  forall yl:double.
  forall yu:double.
  ("JC_117":
  (("JC_115": is_interval(xl_0, xu_0)) and ("JC_116": is_interval(yl, yu)))) ->
  forall result:double.
  (((double_is_NaN(xl_0) or double_is_NaN(yl)) -> double_is_NaN(result)) and
   (((double_is_finite(xl_0) and double_is_infinite(yl)) ->
     (double_is_infinite(result) and double_same_sign(result, yl))) and
    (((double_is_infinite(xl_0) and double_is_finite(yl)) ->
      (double_is_infinite(result) and double_same_sign(result, xl_0))) and
     (((double_is_infinite(xl_0) and
        (double_is_infinite(yl) and double_same_sign(xl_0, yl))) ->
       (double_is_infinite(result) and double_same_sign(result, xl_0))) and
      (((double_is_infinite(xl_0) and
         (double_is_infinite(yl) and double_diff_sign(xl_0, yl))) ->
        double_is_NaN(result)) and
       (((double_is_finite(xl_0) and
          (double_is_finite(yl) and no_overflow_double(down,
           (double_value(xl_0) + double_value(yl))))) ->
         (double_is_finite(result) and
          ((double_value(result) = round_double(down,
           (double_value(xl_0) + double_value(yl)))) and
           double_sign_zero_result(down, result)))) and
        (((double_is_finite(xl_0) and
           (double_is_finite(yl) and (not no_overflow_double(down,
            (double_value(xl_0) + double_value(yl)))))) ->
          (double_same_sign_real(result,
           (double_value(xl_0) + double_value(yl))) and
           double_overflow_value(down, result))) and
         ((double_exact(result) = (double_exact(xl_0) + double_exact(yl))) and
          (double_model(result) = (double_model(xl_0) + double_model(yl))))))))))) ->
  forall zl:double.
  (zl = result) ->
  forall result0:double.
  ((double_is_NaN(xu_0) -> double_is_NaN(result0)) and
   ((double_is_infinite(xu_0) -> double_is_infinite(result0)) and
    ((double_is_finite(xu_0) ->
      (double_is_finite(result0) and
       (double_value(result0) = (-double_value(xu_0))))) and
     (double_diff_sign(result0, xu_0) and
      ((double_exact(result0) = (-double_exact(xu_0))) and
       (double_model(result0) = (-double_model(xu_0)))))))) ->
  forall result1:double.
  (((double_is_NaN(result0) or double_is_NaN(yu)) -> double_is_NaN(result1)) and
   (((double_is_finite(result0) and double_is_infinite(yu)) ->
     (double_is_infinite(result1) and double_diff_sign(result1, yu))) and
    (((double_is_infinite(result0) and double_is_finite(yu)) ->
      (double_is_infinite(result1) and double_same_sign(result1, result0))) and
     (((double_is_infinite(result0) and
        (double_is_infinite(yu) and double_same_sign(result0, yu))) ->
       double_is_NaN(result1)) and
      (((double_is_infinite(result0) and
         (double_is_infinite(yu) and double_diff_sign(result0, yu))) ->
        (double_is_infinite(result1) and double_same_sign(result1, result0))) and
       (((double_is_finite(result0) and
          (double_is_finite(yu) and no_overflow_double(down,
           (double_value(result0) - double_value(yu))))) ->
         (double_is_finite(result1) and
          ((double_value(result1) = round_double(down,
           (double_value(result0) - double_value(yu)))) and
           double_sign_zero_result(down, result1)))) and
        (((double_is_finite(result0) and
           (double_is_finite(yu) and (not no_overflow_double(down,
            (double_value(result0) - double_value(yu)))))) ->
          (double_same_sign_real(result1,
           (double_value(result0) - double_value(yu))) and
           double_overflow_value(down, result1))) and
         ((double_exact(result1) = (double_exact(result0) - double_exact(yu))) and
          (double_model(result1) = (double_model(result0) - double_model(yu))))))))))) ->
  forall result2:double.
  ((double_is_NaN(result1) -> double_is_NaN(result2)) and
   ((double_is_infinite(result1) -> double_is_infinite(result2)) and
    ((double_is_finite(result1) ->
      (double_is_finite(result2) and
       (double_value(result2) = (-double_value(result1))))) and
     (double_diff_sign(result2, result1) and
      ((double_exact(result2) = (-double_exact(result1))) and
       (double_model(result2) = (-double_model(result1)))))))) ->
  forall zu:double.
  (zu = result2) ->
  forall a_0_0:real.
  forall b_0:real.
  (in_interval(a_0_0, xl_0, xu_0) and in_interval(b_0, yl, yu)) ->
  ("JC_121": ("JC_120": in_interval((a_0_0 + b_0), zl, zu)))

goal max_ensures_default_po_1:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  gt_double_full(x_1, y) ->
  forall tmp_0:double.
  (tmp_0 = x_1) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30": ("JC_27": le_double_full(x_1, return)))

goal max_ensures_default_po_2:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  gt_double_full(x_1, y) ->
  forall tmp_0:double.
  (tmp_0 = x_1) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30": ("JC_28": le_double_full(y, return)))

goal max_ensures_default_po_3:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  gt_double_full(x_1, y) ->
  forall tmp_0:double.
  (tmp_0 = x_1) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30":
  ("JC_29": (eq_double_full(return, x_1) or eq_double_full(return, y))))

goal max_ensures_default_po_4:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  (not gt_double_full(x_1, y)) ->
  forall tmp_0:double.
  (tmp_0 = y) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30": ("JC_27": le_double_full(x_1, return)))

goal max_ensures_default_po_5:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  (not gt_double_full(x_1, y)) ->
  forall tmp_0:double.
  (tmp_0 = y) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30": ("JC_28": le_double_full(y, return)))

goal max_ensures_default_po_6:
  forall x_1:double.
  forall y:double.
  ("JC_25":
  (("JC_23": (not double_is_NaN(x_1))) and ("JC_24": (not double_is_NaN(y))))) ->
  (not gt_double_full(x_1, y)) ->
  forall tmp_0:double.
  (tmp_0 = y) ->
  forall return:double.
  (return = tmp_0) ->
  ("JC_30":
  ("JC_29": (eq_double_full(return, x_1) or eq_double_full(return, y))))

goal min_ensures_default_po_1:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  lt_double_full(x_0, y_0) ->
  forall tmp:double.
  (tmp = x_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12": ("JC_9": le_double_full(return, x_0)))

goal min_ensures_default_po_2:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  lt_double_full(x_0, y_0) ->
  forall tmp:double.
  (tmp = x_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12": ("JC_10": le_double_full(return, y_0)))

goal min_ensures_default_po_3:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  lt_double_full(x_0, y_0) ->
  forall tmp:double.
  (tmp = x_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12":
  ("JC_11": (eq_double_full(return, x_0) or eq_double_full(return, y_0))))

goal min_ensures_default_po_4:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  (not lt_double_full(x_0, y_0)) ->
  forall tmp:double.
  (tmp = y_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12": ("JC_9": le_double_full(return, x_0)))

goal min_ensures_default_po_5:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  (not lt_double_full(x_0, y_0)) ->
  forall tmp:double.
  (tmp = y_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12": ("JC_10": le_double_full(return, y_0)))

goal min_ensures_default_po_6:
  forall x_0:double.
  forall y_0:double.
  ("JC_7":
  (("JC_5": (not double_is_NaN(x_0))) and ("JC_6": (not double_is_NaN(y_0))))) ->
  (not lt_double_full(x_0, y_0)) ->
  forall tmp:double.
  (tmp = y_0) ->
  forall return:double.
  (return = tmp) ->
  ("JC_12":
  ("JC_11": (eq_double_full(return, x_0) or eq_double_full(return, y_0))))

goal mul_dn_ensures_default_po_1:
  forall x_1_1:double.
  forall y_1_1:double.
  ("JC_49":
  (("JC_44": (not double_is_NaN(x_1_1))) and
   (("JC_45": (not double_is_NaN(y_1_1))) and
    (("JC_46":
     ((double_is_infinite(x_1_1) or double_is_infinite(y_1_1)) ->
      dif_sign(x_1_1, y_1_1))) and
     (("JC_47":
      ((double_is_infinite(x_1_1) and double_is_finite(y_1_1)) ->
       (double_value(y_1_1) <> 0.0))) and
      ("JC_48":
      ((double_is_finite(x_1_1) and double_is_infinite(y_1_1)) ->
       (double_value(x_1_1) <> 0.0)))))))) ->
  forall result:double.
  (((double_is_NaN(x_1_1) or double_is_NaN(y_1_1)) -> double_is_NaN(result)) and
   (((double_is_gen_zero(x_1_1) and double_is_infinite(y_1_1)) ->
     double_is_NaN(result)) and
    (((double_is_finite(x_1_1) and
       (double_is_infinite(y_1_1) and (double_value(x_1_1) <> 0.0))) ->
      double_is_infinite(result)) and
     (((double_is_infinite(x_1_1) and double_is_gen_zero(y_1_1)) ->
       double_is_NaN(result)) and
      (((double_is_infinite(x_1_1) and
         (double_is_finite(y_1_1) and (double_value(y_1_1) <> 0.0))) ->
        double_is_infinite(result)) and
       (((double_is_infinite(x_1_1) and double_is_infinite(y_1_1)) ->
         double_is_infinite(result)) and
        (((double_is_finite(x_1_1) and
           (double_is_finite(y_1_1) and no_overflow_double(down,
            (double_value(x_1_1) * double_value(y_1_1))))) ->
          (double_is_finite(result) and
           (double_value(result) = round_double(down,
           (double_value(x_1_1) * double_value(y_1_1)))))) and
         (((double_is_finite(x_1_1) and
            (double_is_finite(y_1_1) and (not no_overflow_double(down,
             (double_value(x_1_1) * double_value(y_1_1)))))) ->
           double_overflow_value(down, result)) and
          (double_product_sign(result, x_1_1, y_1_1) and
           ((double_exact(result) = (double_exact(x_1_1) * double_exact(y_1_1))) and
            (double_model(result) = (double_model(x_1_1) * double_model(y_1_1))))))))))))) ->
  forall z:double.
  (z = result) ->
  forall return:double.
  (return = z) ->
  ("JC_51": double_le_real(return,
  (double_value(x_1_1) * double_value(y_1_1))))

goal mul_ensures_default_po_1:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  forall result7:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result7)) ->
  forall tmp_2:double.
  (tmp_2 = result7) ->
  forall result8:double.
  ("JC_34":
  (("JC_31": le_double_full(tmp_2, result8)) and
   (("JC_32": le_double_full(tmp_1_0, result8)) and
    ("JC_33":
    (eq_double_full(result8, tmp_2) or eq_double_full(result8, tmp_1_0)))))) ->
  forall zu:double.
  (zu = result8) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_2:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  forall result7:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result7)) ->
  forall tmp_2:double.
  (tmp_2 = result7) ->
  forall result8:double.
  ("JC_34":
  (("JC_31": le_double_full(tmp_2, result8)) and
   (("JC_32": le_double_full(tmp_1_0, result8)) and
    ("JC_33":
    (eq_double_full(result8, tmp_2) or eq_double_full(result8, tmp_1_0)))))) ->
  forall zu:double.
  (zu = result8) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_3:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_4:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_5:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_6:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_7:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_8:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_9:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_10:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_11:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_12:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_13:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_14:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yl_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_15:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_16:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_17:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_18:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_19:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_20:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_21:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_22:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result4)) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_23:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_24:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  forall result3:double.
  (double_is_finite(result3) and
   ((double_value(result3) = 0.0) and
    ((double_exact(result3) = 0.0) and (double_model(result3) = 0.0)))) ->
  forall zl:double.
  (zl = result3) ->
  forall result4:double.
  (double_is_finite(result4) and
   ((double_value(result4) = 0.0) and
    ((double_exact(result4) = 0.0) and (double_model(result4) = 0.0)))) ->
  forall zu:double.
  (zu = result4) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_ensures_default_po_25:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  forall zl:double.
  (zl = result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  forall zu:double.
  (zu = result2) ->
  ("JC_145": ("JC_143": is_interval(zl, zu)))

goal mul_ensures_default_po_26:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  forall zl:double.
  (zl = result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  forall zu:double.
  (zu = result2) ->
  forall a_1:real.
  forall b_0_0:real.
  (in_interval(a_1, xl_0_0, xu_0_0) and in_interval(b_0_0, yl_0, yu_0)) ->
  ("JC_145": ("JC_144": in_interval((a_1 * b_0_0), zl, zu)))

goal mul_safety_po_1:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_2:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yl_0))))

goal mul_safety_po_3:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_39": dif_sign(xu_0_0, yl_0)))

goal mul_safety_po_4:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
  ("JC_42": ("JC_40": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_5:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_41": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_6:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_7:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yu_0))))

goal mul_safety_po_8:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_39": dif_sign(xl_0_0, yu_0)))

goal mul_safety_po_9:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
  ("JC_42": ("JC_40": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_10:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  (double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_41": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_11:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3": ("JC_1": (not double_is_NaN(tmp_0_0))))

goal mul_safety_po_12:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3": ("JC_2": (not double_is_NaN(tmp_1))))

goal mul_safety_po_13:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yu_0))))

goal mul_safety_po_14:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
  ("JC_65": ("JC_61": sam_sign(xu_0_0, yu_0)))

goal mul_safety_po_15:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
  ("JC_65": ("JC_62": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_16:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  (double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_17:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  (double_is_finite(xu_0_0) and
   (double_is_finite(yu_0) and
    ((not no_overflow_double(down, (-double_value(yu_0)))) and
     (double_sign(yu_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xu_0_0) > 0.0)))

goal mul_safety_po_18:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yl_0))))

goal mul_safety_po_19:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
  ("JC_65": ("JC_61": sam_sign(xl_0_0, yl_0)))

goal mul_safety_po_20:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
  ("JC_65": ("JC_62": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_21:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  (double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_22:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  (double_is_finite(xl_0_0) and
   (double_is_finite(yl_0) and
    ((not no_overflow_double(down, (-double_value(yl_0)))) and
     (double_sign(yl_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xl_0_0) > 0.0)))

goal mul_safety_po_23:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xl_0_0))) and
   (("JC_60": (not double_is_NaN(yl_0))) and
    (("JC_61":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      sam_sign(xl_0_0, yl_0))) and
     (("JC_62":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
        (double_value(xl_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xl_0_0) and
         (double_is_finite(yl_0) and
          ((not no_overflow_double(down, (-double_value(yl_0)))) and
           (double_sign(yl_0) = Positive)))) ->
        (double_value(xl_0_0) > 0.0))))))))) ->
  forall result7:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result7)) ->
  forall tmp_2:double.
  (tmp_2 = result7) ->
  ("JC_21": ("JC_19": (not double_is_NaN(tmp_2))))

goal mul_safety_po_24:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall tmp_1:double.
  (tmp_1 = result3) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result4:double.
  ("JC_53": double_le_real(result4,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall tmp_0_0:double.
  (tmp_0_0 = result4) ->
  ("JC_3":
  (("JC_1": (not double_is_NaN(tmp_0_0))) and
   ("JC_2": (not double_is_NaN(tmp_1))))) ->
  forall result5:double.
  ("JC_16":
  (("JC_13": le_double_full(result5, tmp_0_0)) and
   (("JC_14": le_double_full(result5, tmp_1)) and
    ("JC_15":
    (eq_double_full(result5, tmp_0_0) or eq_double_full(result5, tmp_1)))))) ->
  forall zl:double.
  (zl = result5) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xu_0_0))) and
   (("JC_60": (not double_is_NaN(yu_0))) and
    (("JC_61":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      sam_sign(xu_0_0, yu_0))) and
     (("JC_62":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
        (double_value(xu_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xu_0_0) and
         (double_is_finite(yu_0) and
          ((not no_overflow_double(down, (-double_value(yu_0)))) and
           (double_sign(yu_0) = Positive)))) ->
        (double_value(xu_0_0) > 0.0))))))))) ->
  forall result6:double.
  ("JC_76": real_le_double((double_value(xu_0_0) * double_value(yu_0)),
  result6)) ->
  forall tmp_1_0:double.
  (tmp_1_0 = result6) ->
  ("JC_65":
  (("JC_59": (not double_is_NaN(xl_0_0))) and
   (("JC_60": (not double_is_NaN(yl_0))) and
    (("JC_61":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      sam_sign(xl_0_0, yl_0))) and
     (("JC_62":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      (("JC_63":
       ((double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
        (double_value(xl_0_0) <> 0.0))) and
       ("JC_64":
       ((double_is_finite(xl_0_0) and
         (double_is_finite(yl_0) and
          ((not no_overflow_double(down, (-double_value(yl_0)))) and
           (double_sign(yl_0) = Positive)))) ->
        (double_value(xl_0_0) > 0.0))))))))) ->
  forall result7:double.
  ("JC_76": real_le_double((double_value(xl_0_0) * double_value(yl_0)),
  result7)) ->
  forall tmp_2:double.
  (tmp_2 = result7) ->
  ("JC_21": ("JC_20": (not double_is_NaN(tmp_1_0))))

goal mul_safety_po_25:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_26:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yl_0))))

goal mul_safety_po_27:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_39": dif_sign(xu_0_0, yl_0)))

goal mul_safety_po_28:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
  ("JC_42": ("JC_40": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_29:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_41": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_30:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_31:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yl_0))))

goal mul_safety_po_32:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
  ("JC_65": ("JC_61": sam_sign(xl_0_0, yl_0)))

goal mul_safety_po_33:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
  ("JC_65": ("JC_62": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_34:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_35:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xl_0_0) and
   (double_is_finite(yl_0) and
    ((not no_overflow_double(down, (-double_value(yl_0)))) and
     (double_sign(yl_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xl_0_0) > 0.0)))

goal mul_safety_po_36:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_37:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yu_0))))

goal mul_safety_po_38:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_39": dif_sign(xl_0_0, yu_0)))

goal mul_safety_po_39:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
  ("JC_42": ("JC_40": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_40:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_41": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_41:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_42:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yu_0))))

goal mul_safety_po_43:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
  ("JC_65": ("JC_61": sam_sign(xu_0_0, yu_0)))

goal mul_safety_po_44:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
  ("JC_65": ("JC_62": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_45:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_46:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xu_0_0) and
   (double_is_finite(yu_0) and
    ((not no_overflow_double(down, (-double_value(yu_0)))) and
     (double_sign(yu_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xu_0_0) > 0.0)))

goal mul_safety_po_47:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_48:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yu_0))))

goal mul_safety_po_49:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_39": dif_sign(xl_0_0, yu_0)))

goal mul_safety_po_50:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
  ("JC_42": ("JC_40": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_51:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_41": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_52:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yl_0))))

goal mul_safety_po_53:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
  ("JC_65": ("JC_61": sam_sign(xl_0_0, yl_0)))

goal mul_safety_po_54:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
  ("JC_65": ("JC_62": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_55:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_56:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xl_0_0) and
   (double_is_finite(yl_0) and
    ((not no_overflow_double(down, (-double_value(yl_0)))) and
     (double_sign(yl_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xl_0_0) > 0.0)))

goal mul_safety_po_57:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_58:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yu_0))))

goal mul_safety_po_59:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_39": dif_sign(xu_0_0, yu_0)))

goal mul_safety_po_60:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
  ("JC_42": ("JC_40": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_61:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_41": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_62:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_63:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yl_0))))

goal mul_safety_po_64:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
  ("JC_65": ("JC_61": sam_sign(xl_0_0, yl_0)))

goal mul_safety_po_65:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
  ("JC_65": ("JC_62": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_66:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yl_0) and double_is_finite(xl_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_67:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xu_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xl_0_0) and
   (double_is_finite(yl_0) and
    ((not no_overflow_double(down, (-double_value(yl_0)))) and
     (double_sign(yl_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xl_0_0) > 0.0)))

goal mul_safety_po_68:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_69:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yu_0))))

goal mul_safety_po_70:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_39": dif_sign(xl_0_0, yu_0)))

goal mul_safety_po_71:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
  ("JC_42": ("JC_40": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_72:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
  ("JC_42": ("JC_41": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_73:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_74:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yl_0))))

goal mul_safety_po_75:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
  ("JC_65": ("JC_61": sam_sign(xu_0_0, yl_0)))

goal mul_safety_po_76:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
  ("JC_65": ("JC_62": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_77:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yl_0) and double_is_finite(xu_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_78:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  lt_double_full(xl_0_0, result) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  (not gt_double_full(xu_0_0, result0)) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yu_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
      dif_sign(xl_0_0, yu_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
       (double_value(yu_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yu_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yu_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xu_0_0) and
   (double_is_finite(yl_0) and
    ((not no_overflow_double(down, (-double_value(yl_0)))) and
     (double_sign(yl_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xu_0_0) > 0.0)))

goal mul_safety_po_79:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_80:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yl_0))))

goal mul_safety_po_81:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_39": dif_sign(xu_0_0, yl_0)))

goal mul_safety_po_82:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
  ("JC_42": ("JC_40": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_83:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_41": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_84:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yu_0))))

goal mul_safety_po_85:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
  ("JC_65": ("JC_61": sam_sign(xu_0_0, yu_0)))

goal mul_safety_po_86:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
  ("JC_65": ("JC_62": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_87:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_88:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xu_0_0) and
   (double_is_finite(yu_0) and
    ((not no_overflow_double(down, (-double_value(yu_0)))) and
     (double_sign(yu_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xu_0_0) > 0.0)))

goal mul_safety_po_89:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_90:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yl_0))))

goal mul_safety_po_91:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_39": dif_sign(xu_0_0, yl_0)))

goal mul_safety_po_92:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
  ("JC_42": ("JC_40": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_93:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  (double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_41": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_94:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_95:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yu_0))))

goal mul_safety_po_96:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yu_0)) ->
  ("JC_65": ("JC_61": sam_sign(xl_0_0, yu_0)))

goal mul_safety_po_97:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yu_0)) ->
  ("JC_65": ("JC_62": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_98:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yu_0) and double_is_finite(xl_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_99:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  lt_double_full(yl_0, result1) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  (not gt_double_full(yu_0, result2)) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xu_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xu_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xu_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xu_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xu_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xu_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xu_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xl_0_0) and
   (double_is_finite(yu_0) and
    ((not no_overflow_double(down, (-double_value(yu_0)))) and
     (double_sign(yu_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xl_0_0) > 0.0)))

goal mul_safety_po_100:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_37": (not double_is_NaN(xl_0_0))))

goal mul_safety_po_101:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42": ("JC_38": (not double_is_NaN(yl_0))))

goal mul_safety_po_102:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_39": dif_sign(xl_0_0, yl_0)))

goal mul_safety_po_103:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
  ("JC_42": ("JC_40": (double_value(yl_0) <> 0.0)))

goal mul_safety_po_104:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  (double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
  ("JC_42": ("JC_41": (double_value(xl_0_0) <> 0.0)))

goal mul_safety_po_105:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_59": (not double_is_NaN(xu_0_0))))

goal mul_safety_po_106:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  ("JC_65": ("JC_60": (not double_is_NaN(yu_0))))

goal mul_safety_po_107:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) or double_is_infinite(yu_0)) ->
  ("JC_65": ("JC_61": sam_sign(xu_0_0, yu_0)))

goal mul_safety_po_108:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(xu_0_0) and double_is_finite(yu_0)) ->
  ("JC_65": ("JC_62": (double_value(yu_0) <> 0.0)))

goal mul_safety_po_109:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_infinite(yu_0) and double_is_finite(xu_0_0)) ->
  ("JC_65": ("JC_63": (double_value(xu_0_0) <> 0.0)))

goal mul_safety_po_110:
  forall xl_0_0:double.
  forall xu_0_0:double.
  forall yl_0:double.
  forall yu_0:double.
  ("JC_141":
  (("JC_139": is_interval(xl_0_0, xu_0_0)) and
   ("JC_140": is_interval(yl_0, yu_0)))) ->
  forall result:double.
  (double_is_finite(result) and
   ((double_value(result) = 0.0) and
    ((double_exact(result) = 0.0) and (double_model(result) = 0.0)))) ->
  (not lt_double_full(xl_0_0, result)) ->
  forall result0:double.
  (double_is_finite(result0) and
   ((double_value(result0) = 0.0) and
    ((double_exact(result0) = 0.0) and (double_model(result0) = 0.0)))) ->
  gt_double_full(xu_0_0, result0) ->
  forall result1:double.
  (double_is_finite(result1) and
   ((double_value(result1) = 0.0) and
    ((double_exact(result1) = 0.0) and (double_model(result1) = 0.0)))) ->
  (not lt_double_full(yl_0, result1)) ->
  forall result2:double.
  (double_is_finite(result2) and
   ((double_value(result2) = 0.0) and
    ((double_exact(result2) = 0.0) and (double_model(result2) = 0.0)))) ->
  gt_double_full(yu_0, result2) ->
  ("JC_42":
  (("JC_37": (not double_is_NaN(xl_0_0))) and
   (("JC_38": (not double_is_NaN(yl_0))) and
    (("JC_39":
     ((double_is_infinite(xl_0_0) or double_is_infinite(yl_0)) ->
      dif_sign(xl_0_0, yl_0))) and
     (("JC_40":
      ((double_is_infinite(xl_0_0) and double_is_finite(yl_0)) ->
       (double_value(yl_0) <> 0.0))) and
      ("JC_41":
      ((double_is_finite(xl_0_0) and double_is_infinite(yl_0)) ->
       (double_value(xl_0_0) <> 0.0)))))))) ->
  forall result3:double.
  ("JC_53": double_le_real(result3,
  (double_value(xl_0_0) * double_value(yl_0)))) ->
  forall zl:double.
  (zl = result3) ->
  (double_is_finite(xu_0_0) and
   (double_is_finite(yu_0) and
    ((not no_overflow_double(down, (-double_value(yu_0)))) and
     (double_sign(yu_0) = Positive)))) ->
  ("JC_65": ("JC_64": (double_value(xu_0_0) > 0.0)))

goal mul_up_ensures_default_po_1:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  (double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
  ("JC_98": real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))

goal mul_up_ensures_default_po_2:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
  ("JC_99": real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))

goal mul_up_ensures_default_po_3:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_infinite(x_2_1) and
   (double_is_finite(y_2_0) and no_overflow_double(down,
    (-double_value(y_2_0))))) ->
  ("JC_100": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_4:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_infinite(x_2_1) and
   (double_is_finite(y_2_0) and (not no_overflow_double(down,
    (-double_value(y_2_0)))))) ->
  ("JC_101": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_5:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
  ("JC_102": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_6:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (no_overflow_double(down, (double_value(x_2_1) * double_value(a_0))) and
      (not no_overflow_double(down, (-double_value(b)))))))) ->
  ("JC_103": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_7:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (not no_overflow_double(down,
     (double_value(x_2_1) * double_value(a_0))))))) ->
  ("JC_104": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_8:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    ((not no_overflow_double(down, (-double_value(y_2_0)))) and
     (double_sign(y_2_0) = Positive)))) ->
  ("JC_105": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_9:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    ((not no_overflow_double(down, (-double_value(y_2_0)))) and
     ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0)))))))) ->
  ("JC_106": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_10:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    ((not no_overflow_double(down, (-double_value(y_2_0)))) and
     ((double_sign(y_2_0) = Negative) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b))))))))) ->
  ("JC_107": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_11:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    ((not no_overflow_double(down, (-double_value(y_2_0)))) and
     ((double_sign(y_2_0) = Negative) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       no_overflow_double(down, (-double_value(b)))))))) ->
  ("JC_108": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_12:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_108":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (no_overflow_double(down, (double_value(x_2_1) * double_value(a_0))) and
      (no_overflow_double(down, (-double_value(b))) and
       (double_value(x_2_1) > 0.0)))))) ->
  ("JC_109": double_is_finite(z_0))

goal mul_up_ensures_default_po_13:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_108":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (no_overflow_double(down, (double_value(x_2_1) * double_value(a_0))) and
      (no_overflow_double(down, (-double_value(b))) and
       (double_value(x_2_1) > 0.0)))))) ->
  ("JC_109": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_14:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_108":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_109":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (no_overflow_double(down, (-double_value(b))) and
        (double_value(x_2_1) > 0.0)))))) ->
   (double_is_finite(z_0) and
    real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0)))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (no_overflow_double(down, (double_value(x_2_1) * double_value(a_0))) and
      (no_overflow_double(down, (-double_value(b))) and
       (double_value(x_2_1) < 0.0)))))) ->
  ("JC_110": double_is_finite(z_0))

goal mul_up_ensures_default_po_15:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_108":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_109":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (no_overflow_double(down, (-double_value(b))) and
        (double_value(x_2_1) > 0.0)))))) ->
   (double_is_finite(z_0) and
    real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0)))) ->
  (double_is_finite(x_2_1) and
   (double_is_finite(y_2_0) and
    (no_overflow_double(down, (-double_value(y_2_0))) and
     (no_overflow_double(down, (double_value(x_2_1) * double_value(a_0))) and
      (no_overflow_double(down, (-double_value(b))) and
       (double_value(x_2_1) < 0.0)))))) ->
  ("JC_110": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  z_0))

goal mul_up_ensures_default_po_16:
  forall x_2_1:double.
  forall y_2_0:double.
  ("JC_73":
  (("JC_67": (not double_is_NaN(x_2_1))) and
   (("JC_68": (not double_is_NaN(y_2_0))) and
    (("JC_69":
     ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
      sam_sign(x_2_1, y_2_0))) and
     (("JC_70":
      ((double_is_infinite(x_2_1) and double_is_finite(y_2_0)) ->
       (double_value(y_2_0) <> 0.0))) and
      (("JC_71":
       ((double_is_infinite(y_2_0) and double_is_finite(x_2_1)) ->
        (double_value(x_2_1) <> 0.0))) and
       ("JC_72":
       ((double_is_finite(x_2_1) and
         (double_is_finite(y_2_0) and
          ((not no_overflow_double(down, (-double_value(y_2_0)))) and
           (double_sign(y_2_0) = Positive)))) ->
        (double_value(x_2_1) > 0.0))))))))) ->
  forall result:double.
  ((double_is_NaN(y_2_0) -> double_is_NaN(result)) and
   ((double_is_infinite(y_2_0) -> double_is_infinite(result)) and
    ((double_is_finite(y_2_0) ->
      (double_is_finite(result) and
       (double_value(result) = (-double_value(y_2_0))))) and
     (double_diff_sign(result, y_2_0) and
      ((double_exact(result) = (-double_exact(y_2_0))) and
       (double_model(result) = (-double_model(y_2_0)))))))) ->
  forall a_0:double.
  (a_0 = result) ->
  forall result0:double.
  (((double_is_NaN(x_2_1) or double_is_NaN(a_0)) -> double_is_NaN(result0)) and
   (((double_is_gen_zero(x_2_1) and double_is_infinite(a_0)) ->
     double_is_NaN(result0)) and
    (((double_is_finite(x_2_1) and
       (double_is_infinite(a_0) and (double_value(x_2_1) <> 0.0))) ->
      double_is_infinite(result0)) and
     (((double_is_infinite(x_2_1) and double_is_gen_zero(a_0)) ->
       double_is_NaN(result0)) and
      (((double_is_infinite(x_2_1) and
         (double_is_finite(a_0) and (double_value(a_0) <> 0.0))) ->
        double_is_infinite(result0)) and
       (((double_is_infinite(x_2_1) and double_is_infinite(a_0)) ->
         double_is_infinite(result0)) and
        (((double_is_finite(x_2_1) and
           (double_is_finite(a_0) and no_overflow_double(down,
            (double_value(x_2_1) * double_value(a_0))))) ->
          (double_is_finite(result0) and
           (double_value(result0) = round_double(down,
           (double_value(x_2_1) * double_value(a_0)))))) and
         (((double_is_finite(x_2_1) and
            (double_is_finite(a_0) and (not no_overflow_double(down,
             (double_value(x_2_1) * double_value(a_0)))))) ->
           double_overflow_value(down, result0)) and
          (double_product_sign(result0, x_2_1, a_0) and
           ((double_exact(result0) = (double_exact(x_2_1) * double_exact(a_0))) and
            (double_model(result0) = (double_model(x_2_1) * double_model(a_0))))))))))))) ->
  forall b:double.
  (b = result0) ->
  forall result1:double.
  ((double_is_NaN(b) -> double_is_NaN(result1)) and
   ((double_is_infinite(b) -> double_is_infinite(result1)) and
    ((double_is_finite(b) ->
      (double_is_finite(result1) and
       (double_value(result1) = (-double_value(b))))) and
     (double_diff_sign(result1, b) and
      ((double_exact(result1) = (-double_exact(b))) and
       (double_model(result1) = (-double_model(b)))))))) ->
  forall z_0:double.
  (z_0 = result1) ->
  ("JC_98":
  ((double_is_infinite(x_2_1) or double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_99":
  ((double_is_finite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_100":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and no_overflow_double(down,
     (-double_value(y_2_0))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_101":
  ((double_is_infinite(x_2_1) and
    (double_is_finite(y_2_0) and (not no_overflow_double(down,
     (-double_value(y_2_0)))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_102":
  ((double_is_infinite(x_2_1) and double_is_infinite(y_2_0)) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_103":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (not no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_104":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (not no_overflow_double(down,
      (double_value(x_2_1) * double_value(a_0))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_105":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      (double_sign(y_2_0) = Positive)))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_106":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and (not no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_107":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        (not no_overflow_double(down, (-double_value(b))))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_108":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     ((not no_overflow_double(down, (-double_value(y_2_0)))) and
      ((double_sign(y_2_0) = Negative) and
       (no_overflow_double(down,
        (double_value(x_2_1) * double_value(a_0))) and
        no_overflow_double(down, (-double_value(b)))))))) ->
   real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0))) ->
  ("JC_109":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (no_overflow_double(down, (-double_value(b))) and
        (double_value(x_2_1) > 0.0)))))) ->
   (double_is_finite(z_0) and
    real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0)))) ->
  ("JC_110":
  ((double_is_finite(x_2_1) and
    (double_is_finite(y_2_0) and
     (no_overflow_double(down, (-double_value(y_2_0))) and
      (no_overflow_double(down,
       (double_value(x_2_1) * double_value(a_0))) and
       (no_overflow_double(down, (-double_value(b))) and
        (double_value(x_2_1) < 0.0)))))) ->
   (double_is_finite(z_0) and
    real_le_double((double_value(x_2_1) * double_value(y_2_0)), z_0)))) ->
  forall return:double.
  (return = z_0) ->
  ("JC_75": real_le_double((double_value(x_2_1) * double_value(y_2_0)),
  return))

