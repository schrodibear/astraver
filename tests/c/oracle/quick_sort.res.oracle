========== file tests/c/quick_sort.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

// RUNSIMPLIFY: will ask regtests to run Simplify on this program

#pragma JessieIntegerModel(math)

#include "sorting.h"

/*@ requires \valid(t+i) && \valid(t+j);
  @ assigns t[i],t[j];
  @ ensures Swap{Old,Here}(t,i,j);
  @*/
void swap(int t[], int i, int j) {
  int tmp = t[i];
  t[i] = t[j];
  t[j] = tmp;
}

// quick_rec sorts t[l..r]
/*@ requires \valid_range(t,l,r);
  @ decreases r-l;
  @ assigns t[l..r];
  @ behavior sorted:
  @   ensures Sorted(t,l,r+1);
  @ behavior permutation:
  @   ensures Permut{Old,Here}(t,l,r);
  @*/
void quick_rec(int t[], int l, int r) {
  int v,m,i;
  if (l >= r) return;
  v = t[l];
  m = l; 
  /*@ loop invariant 
    @   \forall integer j; l < j <= m ==> t[j] < v;
    @ loop invariant
    @   \forall integer j; m < j <  i ==> t[j] >= v;
    @ loop invariant  
    @   Permut{Pre,Here}(t,l,r);
    @ loop invariant t[l] == v && l <= m < i <= r+1;
    @ loop variant r-i;
    @*/
  for (i = l + 1; i <= r; i++) {
    if (t[i] < v) {
    L1:
      swap(t,i,++m);
      //@ assert Permut{L1,Here}(t,l,r);
    }
  }
  //@ assert l <= m <= r;
 L: swap(t,l,m);
  //@ assert Permut{L,Here}(t,l,r);
  quick_rec(t,l,m-1);
  quick_rec(t,m+1,r);
}

/*@ requires \valid_range(t,0,n-1);
  @ behavior sorted:
  @   ensures Sorted(t,0,n);
  @ behavior permutation:
  @   ensures Permut{Old,Here}(t,0,n-1);
  @*/
void quick_sort(int t[], int n) {
  quick_rec(t,0,n-1);
}


/*
Local Variables:
compile-command: "make quick_sort.why3ide"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/quick_sort.c"
tests/c/quick_sort.c:49:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
tests/c/quick_sort.c:85:[kernel] warning: parsing obsolete ACSL construct '\valid_range(addr,min,max)'. '\valid(addr+(min..max))' should be used instead.
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/quick_sort.jessie
[jessie] File tests/c/quick_sort.jessie/quick_sort.jc written.
[jessie] File tests/c/quick_sort.jessie/quick_sort.cloc written.
========== file tests/c/quick_sort.jessie/quick_sort.jc ==========
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

tag intP = {
  integer intM: 32;
}

type intP = [intP]

tag unsigned_charP = {
  integer unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag charP = {
  integer charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate Swap{L1, L2}(intP[..] a, integer i_1, integer j_0) =
(((\at((a + i_1).intM,L1) == \at((a + j_0).intM,L2)) &&
   (\at((a + j_0).intM,L1) == \at((a + i_1).intM,L2))) &&
  (\forall integer k;
    (((k != i_1) && (k != j_0)) ==>
      (\at((a + k).intM,L1) == \at((a + k).intM,L2)))))

predicate Permut{L1, L2}(intP[..] a_0, integer l, integer h) {
case Permut_refl{L}: \at((\forall intP[..] a_1;
                           (\forall integer l_0;
                             (\forall integer h_0;
                               Permut{L,
                               L}(a_1, l_0, h_0)))),L);
  
  case Permut_sym{L1, L2}: (\forall intP[..] a_2;
                             (\forall integer l_1;
                               (\forall integer h_1;
                                 (Permut{L1,
                                   L2}(a_2, l_1, h_1) ==>
                                   Permut{L2,
                                   L1}(a_2, l_1, h_1)))));
  
  case Permut_trans{L1, L2, L3}: (\forall intP[..] a_3;
                                   (\forall integer l_2;
                                     (\forall integer h_2;
                                       ((Permut{L1,
                                          L2}(a_3, l_2, h_2) &&
                                          Permut{L2,
                                          L3}(a_3, l_2, h_2)) ==>
                                         Permut{L1,
                                         L3}(a_3, l_2, h_2)))));
  
  case Permut_swap{L1, L2}: (\forall intP[..] a_4;
                              (\forall integer l_3;
                                (\forall integer h_3;
                                  (\forall integer i_2;
                                    (\forall integer j_1;
                                      (((((l_3 <= i_2) && (i_2 <= h_3)) &&
                                          ((l_3 <= j_1) && (j_1 <= h_3))) &&
                                         Swap{L1,
                                         L2}(a_4, i_2, j_1)) ==>
                                        Permut{L1,
                                        L2}(a_4, l_3, h_3)))))));
  
}

predicate Sorted{L}(intP[..] a_5, integer l_4, integer h_4) =
(\forall integer i_3;
  (\forall integer j_2;
    (((l_4 <= i_3) && ((i_3 <= j_2) && (j_2 < h_4))) ==>
      ((a_5 + i_3).intM <= (a_5 + j_2).intM))))

unit swap(intP[..] t_1, integer i, integer j)
  requires (_C_13 : (((_C_15 : (\offset_min(t_1) <= i)) &&
                       (_C_16 : (\offset_max(t_1) >= i))) &&
                      ((_C_18 : (\offset_min(t_1) <= j)) &&
                        (_C_19 : (\offset_max(t_1) >= j)))));
behavior default:
  assigns (t_1 + i).intM,
  (t_1 + j).intM;
  ensures (_C_12 : Swap{Old, Here}(\at(t_1,Old), \at(i,Old), \at(j,Old)));
{  
   (var integer tmp);
   
   {  (_C_3 : (tmp = (_C_2 : (_C_1 : (t_1 + i)).intM)));
      (_C_8 : ((_C_7 : (_C_6 : (t_1 + i)).intM) = (_C_5 : (_C_4 : (t_1 + j)).intM)));
      (_C_11 : ((_C_10 : (_C_9 : (t_1 + j)).intM) = tmp));
      
      (return ())
   }
}

unit quick_rec(intP[..] t, integer l, integer r)
  requires (_C_55 : ((_C_56 : (\offset_min(t) <= l)) &&
                      (_C_57 : (\offset_max(t) >= r))));
  decreases (_C_58 : (r - l));
behavior default:
  assigns (t + [l..r]).intM;
  ensures (_C_52 : true);
behavior sorted:
  ensures (_C_53 : Sorted{Here}(\at(t,Old), \at(l,Old), (\at(r,Old) + 1)));
behavior permutation:
  ensures (_C_54 : Permut{Old, Here}(\at(t,Old), \at(l,Old), \at(r,Old)));
{  
   (var integer v);
   
   (var integer m);
   
   (var integer i_0);
   
   {  (if (l >= r) then 
      (goto return_label) else ());
      (_C_22 : (v = (_C_21 : (_C_20 : (t + l)).intM)));
      (_C_23 : (m = l));
      (_C_25 : (i_0 = (_C_24 : (l + 1))));
      
      loop 
      behavior default:
        invariant (_C_36 : (\forall integer j_3;
                             (((l < j_3) && (j_3 <= m)) ==>
                               ((t + j_3).intM < v))));
      behavior default:
        invariant (_C_35 : (\forall integer j_4;
                             (((m < j_4) && (j_4 < i_0)) ==>
                               ((t + j_4).intM >= v))));
      behavior default:
        invariant (_C_34 : Permut{Pre, Here}(t, l, r));
      behavior default:
        invariant (_C_27 : ((_C_28 : ((t + l).intM == v)) &&
                             ((_C_30 : (l <= m)) &&
                               ((_C_32 : (m < i_0)) &&
                                 (_C_33 : (i_0 <= (r + 1)))))));
      variant (_C_26 : (r - i_0));
      while (true)
      {  
         {  (if (i_0 <= r) then () else 
            (goto while_0_break));
            
            {  (if ((_C_42 : (_C_41 : (t + i_0)).intM) < v) then 
               {  (L1 : 
                  {  (_C_38 : (m = (_C_37 : (m + 1))));
                     ();
                     ()
                  });
                  (_C_39 : swap(t, i_0, m));
                  
                  {  
                     (assert for default: (_C_40 : (jessie : Permut{L1,
                                                   Here}(t, l, r))));
                     ()
                  }
               } else ())
            };
            (_C_44 : (i_0 = (_C_43 : (i_0 + 1))))
         }
      };
      (while_0_break : ());
      
      {  
         (assert for default: (_C_45 : (jessie : ((l <= m) && (m <= r)))));
         ()
      };
      (L : (_C_46 : swap(t, l, m)));
      
      {  
         (assert for default: (_C_47 : (jessie : Permut{L, Here}(t, l, r))));
         ()
      };
      (_C_49 : quick_rec(t, l, (_C_48 : (m - 1))));
      (_C_51 : quick_rec(t, (_C_50 : (m + 1)), r));
      (return_label : 
      (return ()))
   }
}

unit quick_sort(intP[..] t_0, integer n_1)
  requires (_C_64 : ((_C_65 : (\offset_min(t_0) <= 0)) &&
                      (_C_66 : (\offset_max(t_0) >= (n_1 - 1)))));
behavior default:
  ensures (_C_61 : true);
behavior sorted:
  ensures (_C_62 : Sorted{Here}(\at(t_0,Old), 0, \at(n_1,Old)));
behavior permutation:
  ensures (_C_63 : Permut{Old, Here}(\at(t_0,Old), 0, (\at(n_1,Old) - 1)));
{  
   {  (_C_60 : quick_rec(t_0, 0, (_C_59 : (n_1 - 1))));
      
      (return ())
   }
}
========== file tests/c/quick_sort.jessie/quick_sort.cloc ==========
[quick_sort]
name = "Function quick_sort"
file = "HOME/tests/c/quick_sort.c"
line = 91
begin = 5
end = 15

[_C_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_35]
file = "HOME/tests/c/quick_sort.c"
line = 65
begin = 8
end = 50

[_C_56]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[_C_28]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 30

[_C_59]
file = "HOME/tests/c/quick_sort.c"
line = 92
begin = 16
end = 19

[_C_48]
file = "HOME/tests/c/quick_sort.c"
line = 81
begin = 16
end = 19

[_C_51]
file = "HOME/tests/c/quick_sort.c"
line = 82
begin = 2
end = 20

[_C_31]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 51

[quick_rec]
name = "Function quick_rec"
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[_C_41]
file = "HOME/tests/c/quick_sort.c"
line = 72
begin = 8
end = 9

[_C_4]
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 9
end = 10

[_C_61]
file = "HOME/"
line = 0
begin = -1
end = -1

[_C_32]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 44

[_C_23]
file = "HOME/tests/c/quick_sort.c"
line = 61
begin = 6
end = 7

[_C_19]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[_C_42]
file = "HOME/tests/c/quick_sort.c"
line = 72
begin = 8
end = 12

[_C_13]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 39

[_C_5]
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 9
end = 13

[_C_36]
file = "HOME/tests/c/quick_sort.c"
line = 63
begin = 8
end = 50

[_C_12]
file = "HOME/tests/c/quick_sort.c"
line = 40
begin = 12
end = 33

[_C_33]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 43
end = 51

[_C_22]
file = "HOME/tests/c/quick_sort.c"
line = 60
begin = 6
end = 10

[_C_65]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[_C_9]
file = "HOME/tests/c/quick_sort.c"
line = 45
begin = 2
end = 3

[_C_57]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[_C_54]
file = "HOME/tests/c/quick_sort.c"
line = 55
begin = 14
end = 37

[_C_30]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 40

[_C_63]
file = "HOME/tests/c/quick_sort.c"
line = 89
begin = 14
end = 39

[_C_6]
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 2
end = 3

[_C_64]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[_C_49]
file = "HOME/tests/c/quick_sort.c"
line = 81
begin = 2
end = 20

[_C_24]
file = "HOME/tests/c/quick_sort.c"
line = 71
begin = 11
end = 16

[_C_45]
file = "HOME/tests/c/quick_sort.c"
line = 78
begin = 13
end = 24

[_C_20]
file = "HOME/tests/c/quick_sort.c"
line = 60
begin = 6
end = 7

[_C_38]
file = "HOME/tests/c/quick_sort.c"
line = 74
begin = 15
end = 18

[_C_3]
file = "HOME/tests/c/quick_sort.c"
line = 43
begin = 2
end = 5

[_C_17]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[_C_7]
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 9
end = 13

[_C_62]
file = "HOME/tests/c/quick_sort.c"
line = 87
begin = 14
end = 27

[_C_55]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[_C_27]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 51

[_C_46]
file = "HOME/tests/c/quick_sort.c"
line = 79
begin = 4
end = 15

[_C_44]
file = "HOME/tests/c/quick_sort.c"
line = 71
begin = 26
end = 29

[_C_15]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[_C_26]
file = "HOME/tests/c/quick_sort.c"
line = 69
begin = 19
end = 22

[_C_47]
file = "HOME/tests/c/quick_sort.c"
line = 80
begin = 13
end = 34

[_C_10]
file = "HOME/tests/c/quick_sort.c"
line = 45
begin = 9
end = 12

[_C_60]
file = "HOME/tests/c/quick_sort.c"
line = 92
begin = 2
end = 20

[_C_53]
file = "HOME/tests/c/quick_sort.c"
line = 53
begin = 14
end = 29

[_C_40]
file = "HOME/tests/c/quick_sort.c"
line = 75
begin = 17
end = 39

[_C_58]
file = "HOME/tests/c/quick_sort.c"
line = 50
begin = 14
end = 17

[swap]
name = "Function swap"
file = "HOME/tests/c/quick_sort.c"
line = 42
begin = 5
end = 9

[_C_8]
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 9
end = 13

[_C_66]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[_C_18]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[_C_29]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 51

[_C_14]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[_C_50]
file = "HOME/tests/c/quick_sort.c"
line = 82
begin = 14
end = 17

[_C_37]
file = "HOME/tests/c/quick_sort.c"
line = 74
begin = 15
end = 18

[_C_43]
file = "HOME/tests/c/quick_sort.c"
line = 71
begin = 26
end = 29

[_C_2]
file = "HOME/tests/c/quick_sort.c"
line = 43
begin = 12
end = 16

[_C_34]
file = "HOME/tests/c/quick_sort.c"
line = 67
begin = 8
end = 31

[_C_16]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[_C_1]
file = "HOME/tests/c/quick_sort.c"
line = 43
begin = 12
end = 13

[_C_25]
file = "HOME/tests/c/quick_sort.c"
line = 71
begin = 11
end = 16

[_C_39]
file = "HOME/tests/c/quick_sort.c"
line = 74
begin = 6
end = 19

[_C_11]
file = "HOME/tests/c/quick_sort.c"
line = 45
begin = 9
end = 12

[_C_21]
file = "HOME/tests/c/quick_sort.c"
line = 60
begin = 6
end = 10

========== jessie execution ==========
Generating Why function swap
Generating Why function quick_rec
Generating Why function quick_sort
========== file tests/c/quick_sort.jessie/quick_sort.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

USERWHYTWOOPT= -split-user-conj
USERWHYTHREEOPT=
WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs quick_sort.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT) $(USERWHYTWOOPT) -explain -locs quick_sort.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3CONF ?= $(WHYLIB)/why3/why3.conf

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/quick_sort_why.sx

project: why/quick_sort.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/quick_sort_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/quick_sort_why.vo

coq/quick_sort_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/quick_sort_why.v: why/quick_sort.why
	@echo 'why -coq [...] why/quick_sort.why' && $(WHY) $(JESSIELIBFILES) why/quick_sort.why && rm -f coq/jessie_why.v

coq-goals: goals coq/quick_sort_ctx_why.vo
	for f in why/*_po*.why; do make -f quick_sort.makefile coq/`basename $$f .why`_why.v ; done

coq/quick_sort_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/quick_sort_ctx_why.v: why/quick_sort_ctx.why
	@echo 'why -coq [...] why/quick_sort_ctx.why' && $(WHY) why/quick_sort_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export quick_sort_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/quick_sort_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/quick_sort_ctx_why.vo

pvs: pvs/quick_sort_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/quick_sort_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/quick_sort_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/quick_sort_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/quick_sort_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/quick_sort_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/quick_sort_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/quick_sort_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/quick_sort_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/quick_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/quick_sort_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/quick_sort_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/quick_sort_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/quick_sort_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/quick_sort_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: quick_sort.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/quick_sort_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ml: quick_sort.mlw
	 why3 $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3ide: quick_sort.mlw
	 why3ide $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

why3replay: quick_sort.mlw
	 why3replayer $(USERWHYTHREEOPT) --extra-config $(JESSIE3CONF) $<

-include quick_sort.depend

depend: coq/quick_sort_why.v
	-$(COQDEP) -I coq coq/quick_sort*_why.v > quick_sort.depend

clean:
	rm -f coq/*.vo

========== file tests/c/quick_sort.jessie/quick_sort.loc ==========
[JC_94]
file = "HOME/tests/c/quick_sort.c"
line = 65
begin = 8
end = 50

[JC_73]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 43
end = 51

[JC_63]
file = "HOME/tests/c/quick_sort.c"
line = 50
begin = 14
end = 17

[JC_80]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_51]
file = "HOME/tests/c/quick_sort.c"
line = 63
begin = 8
end = 50

[JC_71]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 40

[JC_45]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 40

[JC_123]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 184
begin = 15
end = 49

[JC_106]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 30

[JC_143]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 200
begin = 15
end = 53

[JC_113]
file = "HOME/tests/c/quick_sort.c"
line = 63
begin = 8
end = 50

[JC_116]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_64]
file = "HOME/tests/c/quick_sort.c"
line = 50
begin = 14
end = 17

[JC_133]
file = "HOME/"
line = 0
begin = -1
end = -1

[quick_sort_ensures_default]
name = "Function quick_sort"
behavior = "default behavior"
file = "HOME/tests/c/quick_sort.c"
line = 91
begin = 5
end = 15

[quick_rec_ensures_sorted]
name = "Function quick_rec"
behavior = "Behavior `sorted'"
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[JC_99]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 159
begin = 27
end = 42

[JC_85]
file = "HOME/tests/c/quick_sort.c"
line = 80
begin = 13
end = 34

[JC_126]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_31]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_17]
file = "HOME/tests/c/quick_sort.c"
line = 42
begin = 5
end = 9

[JC_122]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 183
begin = 15
end = 49

[JC_81]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 159
begin = 27
end = 42

[JC_55]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.c"
line = 72
begin = 8
end = 12

[JC_138]
file = "HOME/tests/c/quick_sort.c"
line = 89
begin = 14
end = 39

[JC_134]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_137]
file = "HOME/tests/c/quick_sort.c"
line = 87
begin = 14
end = 27

[JC_48]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 51

[JC_23]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 100
begin = 15
end = 82

[JC_22]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.c"
line = 44
begin = 9
end = 13

[JC_121]
file = "HOME/tests/c/quick_sort.c"
line = 80
begin = 13
end = 34

[JC_5]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 39

[JC_125]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_67]
file = "HOME/tests/c/quick_sort.c"
line = 50
begin = 14
end = 17

[JC_9]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[JC_75]
file = "HOME/tests/c/quick_sort.c"
line = 67
begin = 8
end = 31

[JC_24]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 101
begin = 16
end = 55

[JC_25]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_78]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_41]
file = "HOME/tests/c/quick_sort.c"
line = 55
begin = 14
end = 37

[JC_74]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 51

[JC_47]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 43
end = 51

[JC_52]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_26]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_8]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[JC_54]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_79]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[quick_sort_ensures_sorted]
name = "Function quick_sort"
behavior = "Behavior `sorted'"
file = "HOME/tests/c/quick_sort.c"
line = 91
begin = 5
end = 15

[JC_13]
file = "HOME/tests/c/quick_sort.c"
line = 40
begin = 12
end = 33

[JC_130]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_82]
file = "HOME/tests/c/quick_sort.c"
line = 75
begin = 17
end = 39

[JC_87]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 184
begin = 15
end = 49

[JC_11]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 39

[JC_98]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_70]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 30

[quick_rec_safety]
name = "Function quick_rec"
behavior = "Safety"
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[quick_rec_ensures_default]
name = "Function quick_rec"
behavior = "default behavior"
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[JC_15]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 92
begin = 9
end = 16

[JC_36]
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[JC_104]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 183
begin = 15
end = 49

[JC_91]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 43
end = 51

[JC_39]
file = "HOME/tests/c/quick_sort.c"
line = 53
begin = 14
end = 29

[JC_112]
file = "HOME/tests/c/quick_sort.c"
line = 65
begin = 8
end = 50

[JC_40]
file = "HOME/tests/c/quick_sort.c"
line = 53
begin = 14
end = 29

[JC_135]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_83]
file = "HOME/tests/c/quick_sort.c"
line = 78
begin = 13
end = 24

[JC_35]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_132]
file = "HOME/"
line = 0
begin = -1
end = -1

[quick_rec_ensures_permutation]
name = "Function quick_rec"
behavior = "Behavior `permutation'"
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[JC_27]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_115]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_109]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 43
end = 51

[JC_107]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 40

[JC_69]
kind = VarDecr
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 184
begin = 15
end = 49

[JC_124]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_38]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_12]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_127]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_44]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 30

[JC_4]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[JC_62]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 183
begin = 15
end = 49

[JC_101]
file = "HOME/tests/c/quick_sort.c"
line = 78
begin = 13
end = 24

[JC_88]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 30

[JC_129]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_42]
file = "HOME/tests/c/quick_sort.c"
line = 55
begin = 14
end = 37

[swap_ensures_default]
name = "Function swap"
behavior = "default behavior"
file = "HOME/tests/c/quick_sort.c"
line = 42
begin = 5
end = 9

[JC_110]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 51

[JC_103]
file = "HOME/tests/c/quick_sort.c"
line = 80
begin = 13
end = 34

[JC_46]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 44

[swap_safety]
name = "Function swap"
behavior = "Safety"
file = "HOME/tests/c/quick_sort.c"
line = 42
begin = 5
end = 9

[JC_141]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 200
begin = 15
end = 53

[JC_61]
file = "HOME/tests/c/quick_sort.c"
line = 80
begin = 13
end = 34

[JC_32]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_56]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 159
begin = 27
end = 42

[JC_33]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_65]
kind = VarDecr
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 183
begin = 15
end = 49

[JC_118]
file = "HOME/tests/c/quick_sort.c"
line = 75
begin = 17
end = 39

[quick_sort_safety]
name = "Function quick_sort"
behavior = "Safety"
file = "HOME/tests/c/quick_sort.c"
line = 91
begin = 5
end = 15

[JC_105]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 184
begin = 15
end = 49

[JC_140]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 200
begin = 15
end = 53

[JC_29]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_68]
file = "HOME/tests/c/quick_sort.c"
line = 50
begin = 14
end = 17

[JC_7]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[JC_16]
file = "HOME/tests/c/quick_sort.c"
line = 40
begin = 12
end = 33

[JC_96]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_43]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.c"
line = 60
begin = 6
end = 10

[JC_2]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[quick_sort_ensures_permutation]
name = "Function quick_sort"
behavior = "Behavior `permutation'"
file = "HOME/tests/c/quick_sort.c"
line = 91
begin = 5
end = 15

[JC_95]
file = "HOME/tests/c/quick_sort.c"
line = 63
begin = 8
end = 50

[JC_93]
file = "HOME/tests/c/quick_sort.c"
line = 67
begin = 8
end = 31

[JC_97]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_84]
kind = UserCall
file = "HOME/tests/c/quick_sort.c"
line = 79
begin = 4
end = 15

[JC_128]
file = "HOME/tests/c/quick_sort.c"
line = 85
begin = 13
end = 34

[JC_34]
file = "HOME/tests/c/quick_sort.c"
line = 57
begin = 5
end = 14

[JC_114]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_14]
file = "HOME/tests/c/quick_sort.c"
line = 42
begin = 5
end = 9

[JC_117]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 159
begin = 27
end = 42

[JC_90]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 44

[JC_53]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 131
begin = 6
end = 1481

[JC_21]
kind = PointerDeref
file = "HOME/tests/c/quick_sort.c"
line = 43
begin = 12
end = 16

[JC_111]
file = "HOME/tests/c/quick_sort.c"
line = 67
begin = 8
end = 31

[JC_77]
file = "HOME/tests/c/quick_sort.c"
line = 63
begin = 8
end = 50

[JC_49]
file = "HOME/tests/c/quick_sort.c"
line = 67
begin = 8
end = 31

[JC_1]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 13
end = 24

[JC_131]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_102]
kind = UserCall
file = "HOME/tests/c/quick_sort.c"
line = 79
begin = 4
end = 15

[JC_37]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_142]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 200
begin = 15
end = 53

[JC_10]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[JC_108]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 44

[JC_57]
file = "HOME/tests/c/quick_sort.c"
line = 75
begin = 17
end = 39

[JC_89]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 34
end = 40

[JC_136]
file = "HOME/tests/c/quick_sort.c"
line = 87
begin = 14
end = 27

[JC_66]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 184
begin = 15
end = 49

[JC_59]
file = "HOME/tests/c/quick_sort.c"
line = 78
begin = 13
end = 24

[JC_20]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 92
begin = 9
end = 16

[JC_3]
file = "HOME/tests/c/quick_sort.c"
line = 38
begin = 28
end = 39

[JC_92]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 21
end = 51

[JC_86]
kind = UserCall
file = "HOME/tests/c/quick_sort.jessie/quick_sort.jc"
line = 183
begin = 15
end = 49

[JC_60]
kind = UserCall
file = "HOME/tests/c/quick_sort.c"
line = 79
begin = 4
end = 15

[JC_139]
file = "HOME/tests/c/quick_sort.c"
line = 89
begin = 14
end = 39

[JC_72]
file = "HOME/tests/c/quick_sort.c"
line = 68
begin = 39
end = 44

[JC_19]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_119]
file = "HOME/tests/c/quick_sort.c"
line = 78
begin = 13
end = 24

[JC_76]
file = "HOME/tests/c/quick_sort.c"
line = 65
begin = 8
end = 50

[JC_50]
file = "HOME/tests/c/quick_sort.c"
line = 65
begin = 8
end = 50

[JC_30]
file = "HOME/tests/c/quick_sort.c"
line = 49
begin = 13
end = 32

[JC_120]
kind = UserCall
file = "HOME/tests/c/quick_sort.c"
line = 79
begin = 4
end = 15

[JC_58]
file = "HOME/tests/c/quick_sort.c"
line = 69
begin = 19
end = 22

[JC_100]
file = "HOME/tests/c/quick_sort.c"
line = 75
begin = 17
end = 39

[JC_28]
file = "HOME/"
line = 0
begin = -1
end = -1

========== file tests/c/quick_sort.jessie/why/quick_sort.why ==========
type charP

type intP

type padding

type unsigned_charP

type voidP

predicate Swap(a:intP pointer, i_1:int, j_0:int,
 intP_intM_a_1_at_L2:(intP, int) memory,
 intP_intM_a_1_at_L1:(intP, int) memory) =
 ((select(intP_intM_a_1_at_L1, shift(a, i_1)) = select(intP_intM_a_1_at_L2,
                                                shift(a, j_0)))
 and ((select(intP_intM_a_1_at_L1, shift(a, j_0)) = select(intP_intM_a_1_at_L2,
                                                    shift(a, i_1)))
     and (forall k:int.
          (((k <> i_1) and (k <> j_0)) ->
           (select(intP_intM_a_1_at_L1, shift(a, k)) = select(intP_intM_a_1_at_L2,
                                                       shift(a, k)))))))

inductive Permut: intP pointer, int, int, (intP, int) memory,
                  (intP, int) memory -> prop =
 | Permut_refl: (forall intP_intM_a_0_2_at_L:(intP, int) memory.
                 (forall a_1:intP pointer.
                  (forall l_0_0:int.
                   (forall h_0:int.
                    Permut(a_1, l_0_0, h_0, intP_intM_a_0_2_at_L,
                    intP_intM_a_0_2_at_L)))))
 | Permut_sym: (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                 (forall a_2:intP pointer.
                  (forall l_1:int.
                   (forall h_1:int.
                    (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
                     intP_intM_a_0_2_at_L1) ->
                     Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L1,
                     intP_intM_a_0_2_at_L2)))))))
 | Permut_trans: (forall intP_intM_a_0_2_at_L3:(intP, int) memory.
                  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                   (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                    (forall a_3:intP pointer.
                     (forall l_2:int.
                      (forall h_2:int.
                       ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                         intP_intM_a_0_2_at_L1)
                        and Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
                            intP_intM_a_0_2_at_L2)) ->
                        Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
                        intP_intM_a_0_2_at_L1))))))))
 | Permut_swap: (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
                 (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
                  (forall a_4:intP pointer.
                   (forall l_3:int.
                    (forall h_3:int.
                     (forall i_2:int.
                      (forall j_1:int.
                       ((le_int(l_3, i_2)
                        and (le_int(i_2, h_3)
                            and (le_int(l_3, j_1)
                                and (le_int(j_1, h_3)
                                    and Swap(a_4, i_2, j_1,
                                        intP_intM_a_0_2_at_L2,
                                        intP_intM_a_0_2_at_L1))))) ->
                        Permut(a_4, l_3, h_3, intP_intM_a_0_2_at_L2,
                        intP_intM_a_0_2_at_L1)))))))))
 
predicate Sorted(a_5:intP pointer, l_4:int, h_4:int,
 intP_intM_a_5_3_at_L:(intP, int) memory) =
 (forall i_3:int.
  (forall j_2:int.
   ((le_int(l_4, i_3) and (le_int(i_3, j_2) and lt_int(j_2, h_4))) ->
    le_int(select(intP_intM_a_5_3_at_L, shift(a_5, i_3)),
    select(intP_intM_a_5_3_at_L, shift(a_5, j_2))))))

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic intP_tag:  -> intP tag_id

axiom intP_int : (int_of_tag(intP_tag) = (1))

logic intP_of_pointer_address: unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr :
 (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom : parenttag(intP_tag, bottom_tag)

axiom intP_tags :
 (forall x:intP pointer.
  (forall intP_tag_table:intP tag_table.
   instanceof(intP_tag_table, x, intP_tag)))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_intP(p:intP pointer, a:int,
 intP_alloc_table:intP alloc_table) = (offset_min(intP_alloc_table, p) <= a)

predicate left_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address: unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address :
 (forall p:unit pointer.
  (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_intP(p:intP pointer, b:int,
 intP_alloc_table:intP alloc_table) = (offset_max(intP_alloc_table, p) >= b)

predicate right_valid_struct_unsigned_charP(p:unsigned_charP pointer, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_root_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) = a)
 and (offset_max(intP_alloc_table, p) = b))

predicate strict_valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int,
 b:int, unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) = a)
 and (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

logic unsigned_charP_tag:  -> unsigned_charP tag_id

axiom unsigned_charP_int : (int_of_tag(unsigned_charP_tag) = (1))

axiom unsigned_charP_of_pointer_address_of_pointer_addr :
 (forall p:unsigned_charP pointer.
  (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom :
 parenttag(unsigned_charP_tag, bottom_tag)

axiom unsigned_charP_tags :
 (forall x:unsigned_charP pointer.
  (forall unsigned_charP_tag_table:unsigned_charP tag_table.
   instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_root_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_intP(p:intP pointer, a:int, b:int,
 intP_alloc_table:intP alloc_table) =
 ((offset_min(intP_alloc_table, p) <= a)
 and (offset_max(intP_alloc_table, p) >= b))

predicate valid_struct_unsigned_charP(p:unsigned_charP pointer, a:int, b:int,
 unsigned_charP_alloc_table:unsigned_charP alloc_table) =
 ((offset_min(unsigned_charP_alloc_table, p) <= a)
 and (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter intP_alloc_table : intP alloc_table ref

parameter intP_tag_table : intP tag_table ref

parameter alloc_struct_intP :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { } intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter alloc_struct_intP_requires :
 n:int ->
  intP_alloc_table:intP alloc_table ref ->
   intP_tag_table:intP tag_table ref ->
    { ge_int(n, (0))} intP pointer writes intP_alloc_table,intP_tag_table
    { (strict_valid_struct_intP(result, (0), sub_int(n, (1)),
       intP_alloc_table)
      and (alloc_extends(intP_alloc_table@, intP_alloc_table)
          and (alloc_fresh(intP_alloc_table@, result, n)
              and instanceof(intP_tag_table, result, intP_tag)))) }

parameter unsigned_charP_alloc_table : unsigned_charP alloc_table ref

parameter unsigned_charP_tag_table : unsigned_charP tag_table ref

parameter alloc_struct_unsigned_charP :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { } unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter alloc_struct_unsigned_charP_requires :
 n:int ->
  unsigned_charP_alloc_table:unsigned_charP alloc_table ref ->
   unsigned_charP_tag_table:unsigned_charP tag_table ref ->
    { ge_int(n, (0))} unsigned_charP pointer
    writes unsigned_charP_alloc_table,unsigned_charP_tag_table
    { (strict_valid_struct_unsigned_charP(result, (0), sub_int(n, (1)),
       unsigned_charP_alloc_table)
      and (alloc_extends(unsigned_charP_alloc_table@,
           unsigned_charP_alloc_table)
          and (alloc_fresh(unsigned_charP_alloc_table@, result, n)
              and instanceof(unsigned_charP_tag_table, result,
                  unsigned_charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter quick_rec :
 t:intP pointer ->
  l_0:int ->
   r:int ->
    intP_intM_t_5:(intP, int) memory ref ->
     intP_t_5_alloc_table:intP alloc_table ->
      { } unit reads intP_intM_t_5 writes intP_intM_t_5
      { ((JC_42: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@))
        and ((JC_40: Sorted(t, l_0, add_int(r, (1)), intP_intM_t_5))
            and (JC_36:
                not_assigns(intP_t_5_alloc_table, intP_intM_t_5@,
                intP_intM_t_5, pset_range(pset_singleton(t), l_0, r))))) }

parameter quick_rec_requires :
 t:intP pointer ->
  l_0:int ->
   r:int ->
    intP_intM_t_5:(intP, int) memory ref ->
     intP_t_5_alloc_table:intP alloc_table ->
      { (JC_27:
        ((JC_25: le_int(offset_min(intP_t_5_alloc_table, t), l_0))
        and (JC_26: ge_int(offset_max(intP_t_5_alloc_table, t), r))))}
      unit reads intP_intM_t_5 writes intP_intM_t_5
      { ((JC_42: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@))
        and ((JC_40: Sorted(t, l_0, add_int(r, (1)), intP_intM_t_5))
            and (JC_36:
                not_assigns(intP_t_5_alloc_table, intP_intM_t_5@,
                intP_intM_t_5, pset_range(pset_singleton(t), l_0, r))))) }

parameter quick_sort :
 t_0:intP pointer ->
  n_1:int ->
   intP_intM_t_0_6:(intP, int) memory ref ->
    intP_t_0_6_alloc_table:intP alloc_table ->
     { } unit reads intP_intM_t_0_6 writes intP_intM_t_0_6
     { ((JC_139:
        Permut(t_0, (0), sub_int(n_1, (1)), intP_intM_t_0_6,
        intP_intM_t_0_6@))
       and (JC_137: Sorted(t_0, (0), n_1, intP_intM_t_0_6))) }

parameter quick_sort_requires :
 t_0:intP pointer ->
  n_1:int ->
   intP_intM_t_0_6:(intP, int) memory ref ->
    intP_t_0_6_alloc_table:intP alloc_table ->
     { (JC_126:
       ((JC_124: le_int(offset_min(intP_t_0_6_alloc_table, t_0), (0)))
       and (JC_125:
           ge_int(offset_max(intP_t_0_6_alloc_table, t_0), sub_int(n_1, (1))))))}
     unit reads intP_intM_t_0_6 writes intP_intM_t_0_6
     { ((JC_139:
        Permut(t_0, (0), sub_int(n_1, (1)), intP_intM_t_0_6,
        intP_intM_t_0_6@))
       and (JC_137: Sorted(t_0, (0), n_1, intP_intM_t_0_6))) }

parameter swap :
 t_1:intP pointer ->
  i:int ->
   j:int ->
    intP_intM_t_1_4:(intP, int) memory ref ->
     intP_t_1_4_alloc_table:intP alloc_table ->
      { } unit reads intP_intM_t_1_4 writes intP_intM_t_1_4
      { (JC_18:
        ((JC_16: Swap(t_1, i, j, intP_intM_t_1_4, intP_intM_t_1_4@))
        and (JC_17:
            not_assigns(intP_t_1_4_alloc_table, intP_intM_t_1_4@,
            intP_intM_t_1_4,
            pset_union(pset_range(pset_singleton(t_1), j, j),
            pset_range(pset_singleton(t_1), i, i)))))) }

parameter swap_requires :
 t_1:intP pointer ->
  i:int ->
   j:int ->
    intP_intM_t_1_4:(intP, int) memory ref ->
     intP_t_1_4_alloc_table:intP alloc_table ->
      { (JC_5:
        ((JC_1: le_int(offset_min(intP_t_1_4_alloc_table, t_1), i))
        and ((JC_2: ge_int(offset_max(intP_t_1_4_alloc_table, t_1), i))
            and ((JC_3: le_int(offset_min(intP_t_1_4_alloc_table, t_1), j))
                and (JC_4:
                    ge_int(offset_max(intP_t_1_4_alloc_table, t_1), j))))))}
      unit reads intP_intM_t_1_4 writes intP_intM_t_1_4
      { (JC_18:
        ((JC_16: Swap(t_1, i, j, intP_intM_t_1_4, intP_intM_t_1_4@))
        and (JC_17:
            not_assigns(intP_t_1_4_alloc_table, intP_intM_t_1_4@,
            intP_intM_t_1_4,
            pset_union(pset_range(pset_singleton(t_1), j, j),
            pset_range(pset_singleton(t_1), i, i)))))) }

let quick_rec_ensures_default =
 fun (t : intP pointer) (l_0 : int) (r : int) (intP_intM_t_5 : (intP, int) memory ref) (intP_t_5_alloc_table : intP alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(intP_t_5_alloc_table, t), l_0))
    and (JC_30: ge_int(offset_max(intP_t_5_alloc_table, t), r)))) }
  (init:
  try
   begin
     (let v = ref (any_int void) in
     (let m = ref (any_int void) in
     (let i_0 = ref (any_int void) in
     try
      begin
        try
         begin
           (if ((ge_int_ l_0) r) then (raise (Return_label_exc void))
           else void);
          (let _jessie_<num> =
          (v := ((safe_acc_ !intP_intM_t_5) ((shift t) l_0))) in void);
          (let _jessie_<num> = (m := l_0) in void);
          (let _jessie_<num> = (i_0 := ((add_int l_0) (1))) in void);
          (loop_2:
          begin
            while true do
            { invariant
                (((JC_74:
                  ((JC_70: (select(intP_intM_t_5, shift(t, l_0)) = v))
                  and ((JC_71: le_int(l_0, m))
                      and ((JC_72: lt_int(m, i_0))
                          and (JC_73: le_int(i_0, add_int(r, (1))))))))
                 and ((JC_75:
                      Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@init))
                     and ((JC_76:
                          (forall j_4:int.
                           ((lt_int(m, j_4) and lt_int(j_4, i_0)) ->
                            ge_int(select(intP_intM_t_5, shift(t, j_4)), v))))
                         and (JC_77:
                             (forall j_3:int.
                              ((lt_int(l_0, j_3) and le_int(j_3, m)) ->
                               lt_int(select(intP_intM_t_5, shift(t, j_3)),
                               v)))))))
                and (JC_79:
                    not_assigns(intP_t_5_alloc_table, intP_intM_t_5@init,
                    intP_intM_t_5, pset_range(pset_singleton(t), l_0, r))))
               }
             begin
               [ { } unit { true } ];
              try
               begin
                 (let _jessie_<num> =
                 begin
                   (if ((le_int_ !i_0) r) then void
                   else (raise (Goto_while_0_break_exc void)));
                  (if ((lt_int_ ((safe_acc_ !intP_intM_t_5) ((shift t) !i_0))) !v)
                  then
                   (L1:
                   begin
                     (let _jessie_<num> = (m := ((add_int !m) (1))) in void);
                    void; void;
                    (let _jessie_<num> = t in
                    (let _jessie_<num> = !i_0 in
                    (let _jessie_<num> = !m in
                    (JC_81:
                    (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
                    (assert
                    { (JC_82:
                      Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L1)) };
                    void); void end) else void);
                  (i_0 := ((add_int !i_0) (1))); !i_0 end in void);
                (raise (Loop_continue_exc void)) end with
               Loop_continue_exc _jessie_<num> -> void end end done;
           (raise (Goto_while_0_break_exc void)) end) end with
         Goto_while_0_break_exc _jessie_<num> ->
         (while_0_break:
         begin
           void;
          (assert { (JC_83: (le_int(l_0, m) and le_int(m, r))) }; void);
          begin
            void;
           (L:
           begin
             (let _jessie_<num> = t in
             (let _jessie_<num> = l_0 in
             (let _jessie_<num> = !m in
             (JC_84:
             (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            (assert
            { (JC_85: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L)) };
            void); void;
            (let _jessie_<num> = t in
            (let _jessie_<num> = l_0 in
            (let _jessie_<num> = ((sub_int !m) (1)) in
            (JC_86:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            (let _jessie_<num> = t in
            (let _jessie_<num> = ((add_int !m) (1)) in
            (let _jessie_<num> = r in
            (JC_87:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))))
           end) end end) end; (raise (Return_label_exc void)) end with
      Return_label_exc _jessie_<num> -> (return_label: (raise Return)) end)));
    (raise Return) end with Return -> void end)
  { (JC_34:
    not_assigns(intP_t_5_alloc_table, intP_intM_t_5@, intP_intM_t_5,
    pset_range(pset_singleton(t), l_0, r))) }

let quick_rec_ensures_permutation =
 fun (t : intP pointer) (l_0 : int) (r : int) (intP_intM_t_5 : (intP, int) memory ref) (intP_t_5_alloc_table : intP alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(intP_t_5_alloc_table, t), l_0))
    and (JC_30: ge_int(offset_max(intP_t_5_alloc_table, t), r)))) }
  (init:
  try
   begin
     (let v = ref (any_int void) in
     (let m = ref (any_int void) in
     (let i_0 = ref (any_int void) in
     try
      begin
        try
         begin
           (if ((ge_int_ l_0) r) then (raise (Return_label_exc void))
           else void);
          (let _jessie_<num> =
          (v := ((safe_acc_ !intP_intM_t_5) ((shift t) l_0))) in void);
          (let _jessie_<num> = (m := l_0) in void);
          (let _jessie_<num> = (i_0 := ((add_int l_0) (1))) in void);
          (loop_4:
          begin
            while true do
            { invariant (JC_115: true)  }
             begin
               [ { } unit reads i_0,intP_intM_t_5,m,v
                 { ((JC_110:
                    ((JC_106: (select(intP_intM_t_5, shift(t, l_0)) = v))
                    and ((JC_107: le_int(l_0, m))
                        and ((JC_108: lt_int(m, i_0))
                            and (JC_109: le_int(i_0, add_int(r, (1))))))))
                   and ((JC_111:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@init))
                       and ((JC_112:
                            (forall j_4:int.
                             ((lt_int(m, j_4) and lt_int(j_4, i_0)) ->
                              ge_int(select(intP_intM_t_5, shift(t, j_4)), v))))
                           and (JC_113:
                               (forall j_3:int.
                                ((lt_int(l_0, j_3) and le_int(j_3, m)) ->
                                 lt_int(select(intP_intM_t_5, shift(t, j_3)),
                                 v))))))) } ];
              try
               begin
                 (let _jessie_<num> =
                 begin
                   (if ((le_int_ !i_0) r) then void
                   else (raise (Goto_while_0_break_exc void)));
                  (if ((lt_int_ ((safe_acc_ !intP_intM_t_5) ((shift t) !i_0))) !v)
                  then
                   (L1:
                   begin
                     (let _jessie_<num> = (m := ((add_int !m) (1))) in void);
                    void; void;
                    (let _jessie_<num> = t in
                    (let _jessie_<num> = !i_0 in
                    (let _jessie_<num> = !m in
                    (JC_117:
                    (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
                    [ { } unit reads intP_intM_t_5
                      { (JC_118:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L1)) } ];
                    void end) else void); (i_0 := ((add_int !i_0) (1))); !i_0
                 end in void); (raise (Loop_continue_exc void)) end with
               Loop_continue_exc _jessie_<num> -> void end end done;
           (raise (Goto_while_0_break_exc void)) end) end with
         Goto_while_0_break_exc _jessie_<num> ->
         (while_0_break:
         begin
           void;
          [ { } unit reads m { (JC_119: (le_int(l_0, m) and le_int(m, r))) } ];
          begin
            void;
           (L:
           begin
             (let _jessie_<num> = t in
             (let _jessie_<num> = l_0 in
             (let _jessie_<num> = !m in
             (JC_120:
             (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            [ { } unit reads intP_intM_t_5
              { (JC_121: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L)) } ];
            void;
            (let _jessie_<num> = t in
            (let _jessie_<num> = l_0 in
            (let _jessie_<num> = ((sub_int !m) (1)) in
            (JC_122:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            (let _jessie_<num> = t in
            (let _jessie_<num> = ((add_int !m) (1)) in
            (let _jessie_<num> = r in
            (JC_123:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))))
           end) end end) end; (raise (Return_label_exc void)) end with
      Return_label_exc _jessie_<num> -> (return_label: (raise Return)) end)));
    (raise Return) end with Return -> void end)
  { (JC_41: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@)) }

let quick_rec_ensures_sorted =
 fun (t : intP pointer) (l_0 : int) (r : int) (intP_intM_t_5 : (intP, int) memory ref) (intP_t_5_alloc_table : intP alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(intP_t_5_alloc_table, t), l_0))
    and (JC_30: ge_int(offset_max(intP_t_5_alloc_table, t), r)))) }
  (init:
  try
   begin
     (let v = ref (any_int void) in
     (let m = ref (any_int void) in
     (let i_0 = ref (any_int void) in
     try
      begin
        try
         begin
           (if ((ge_int_ l_0) r) then (raise (Return_label_exc void))
           else void);
          (let _jessie_<num> =
          (v := ((safe_acc_ !intP_intM_t_5) ((shift t) l_0))) in void);
          (let _jessie_<num> = (m := l_0) in void);
          (let _jessie_<num> = (i_0 := ((add_int l_0) (1))) in void);
          (loop_3:
          begin
            while true do
            { invariant (JC_97: true)  }
             begin
               [ { } unit reads i_0,intP_intM_t_5,m,v
                 { ((JC_92:
                    ((JC_88: (select(intP_intM_t_5, shift(t, l_0)) = v))
                    and ((JC_89: le_int(l_0, m))
                        and ((JC_90: lt_int(m, i_0))
                            and (JC_91: le_int(i_0, add_int(r, (1))))))))
                   and ((JC_93:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@init))
                       and ((JC_94:
                            (forall j_4:int.
                             ((lt_int(m, j_4) and lt_int(j_4, i_0)) ->
                              ge_int(select(intP_intM_t_5, shift(t, j_4)), v))))
                           and (JC_95:
                               (forall j_3:int.
                                ((lt_int(l_0, j_3) and le_int(j_3, m)) ->
                                 lt_int(select(intP_intM_t_5, shift(t, j_3)),
                                 v))))))) } ];
              try
               begin
                 (let _jessie_<num> =
                 begin
                   (if ((le_int_ !i_0) r) then void
                   else (raise (Goto_while_0_break_exc void)));
                  (if ((lt_int_ ((safe_acc_ !intP_intM_t_5) ((shift t) !i_0))) !v)
                  then
                   (L1:
                   begin
                     (let _jessie_<num> = (m := ((add_int !m) (1))) in void);
                    void; void;
                    (let _jessie_<num> = t in
                    (let _jessie_<num> = !i_0 in
                    (let _jessie_<num> = !m in
                    (JC_99:
                    (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
                    [ { } unit reads intP_intM_t_5
                      { (JC_100:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L1)) } ];
                    void end) else void); (i_0 := ((add_int !i_0) (1))); !i_0
                 end in void); (raise (Loop_continue_exc void)) end with
               Loop_continue_exc _jessie_<num> -> void end end done;
           (raise (Goto_while_0_break_exc void)) end) end with
         Goto_while_0_break_exc _jessie_<num> ->
         (while_0_break:
         begin
           void;
          [ { } unit reads m { (JC_101: (le_int(l_0, m) and le_int(m, r))) } ];
          begin
            void;
           (L:
           begin
             (let _jessie_<num> = t in
             (let _jessie_<num> = l_0 in
             (let _jessie_<num> = !m in
             (JC_102:
             (((((swap _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            [ { } unit reads intP_intM_t_5
              { (JC_103: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L)) } ];
            void;
            (let _jessie_<num> = t in
            (let _jessie_<num> = l_0 in
            (let _jessie_<num> = ((sub_int !m) (1)) in
            (JC_104:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            (let _jessie_<num> = t in
            (let _jessie_<num> = ((add_int !m) (1)) in
            (let _jessie_<num> = r in
            (JC_105:
            (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))))
           end) end end) end; (raise (Return_label_exc void)) end with
      Return_label_exc _jessie_<num> -> (return_label: (raise Return)) end)));
    (raise Return) end with Return -> void end)
  { (JC_39: Sorted(t, l_0, add_int(r, (1)), intP_intM_t_5)) }

let quick_rec_safety =
 fun (t : intP pointer) (l_0 : int) (r : int) (intP_intM_t_5 : (intP, int) memory ref) (intP_t_5_alloc_table : intP alloc_table) ->
  { (JC_31:
    ((JC_29: le_int(offset_min(intP_t_5_alloc_table, t), l_0))
    and (JC_30: ge_int(offset_max(intP_t_5_alloc_table, t), r)))) }
  (init:
  try
   begin
     (let v = ref (any_int void) in
     (let m = ref (any_int void) in
     (let i_0 = ref (any_int void) in
     try
      begin
        try
         begin
           (if ((ge_int_ l_0) r) then (raise (Return_label_exc void))
           else void);
          (let _jessie_<num> =
          (v := (JC_43:
                ((((offset_acc_ intP_t_5_alloc_table) !intP_intM_t_5) t) l_0))) in
          void); (let _jessie_<num> = (m := l_0) in void);
          (let _jessie_<num> = (i_0 := ((add_int l_0) (1))) in void);
          (loop_1:
          begin
            while true do
            { invariant (JC_53: true) variant (JC_58 : sub_int(r, i_0)) }
             begin
               [ { } unit reads i_0,intP_intM_t_5,m,v
                 { ((JC_48:
                    ((JC_44: (select(intP_intM_t_5, shift(t, l_0)) = v))
                    and ((JC_45: le_int(l_0, m))
                        and ((JC_46: lt_int(m, i_0))
                            and (JC_47: le_int(i_0, add_int(r, (1))))))))
                   and ((JC_49:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@init))
                       and ((JC_50:
                            (forall j_4:int.
                             ((lt_int(m, j_4) and lt_int(j_4, i_0)) ->
                              ge_int(select(intP_intM_t_5, shift(t, j_4)), v))))
                           and (JC_51:
                               (forall j_3:int.
                                ((lt_int(l_0, j_3) and le_int(j_3, m)) ->
                                 lt_int(select(intP_intM_t_5, shift(t, j_3)),
                                 v))))))) } ];
              try
               begin
                 (let _jessie_<num> =
                 begin
                   (if ((le_int_ !i_0) r) then void
                   else (raise (Goto_while_0_break_exc void)));
                  (if ((lt_int_ (JC_55:
                                ((((offset_acc_ intP_t_5_alloc_table) !intP_intM_t_5) t) !i_0))) !v)
                  then
                   (L1:
                   begin
                     (let _jessie_<num> = (m := ((add_int !m) (1))) in void);
                    void; void;
                    (let _jessie_<num> = t in
                    (let _jessie_<num> = !i_0 in
                    (let _jessie_<num> = !m in
                    (JC_56:
                    (((((swap_requires _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
                    [ { } unit reads intP_intM_t_5
                      { (JC_57:
                        Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L1)) } ];
                    void end) else void); (i_0 := ((add_int !i_0) (1))); !i_0
                 end in void); (raise (Loop_continue_exc void)) end with
               Loop_continue_exc _jessie_<num> -> void end end done;
           (raise (Goto_while_0_break_exc void)) end) end with
         Goto_while_0_break_exc _jessie_<num> ->
         (while_0_break:
         begin
           void;
          [ { } unit reads m { (JC_59: (le_int(l_0, m) and le_int(m, r))) } ];
          begin
            void;
           (L:
           begin
             (let _jessie_<num> = t in
             (let _jessie_<num> = l_0 in
             (let _jessie_<num> = !m in
             (JC_60:
             (((((swap_requires _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))));
            [ { } unit reads intP_intM_t_5
              { (JC_61: Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5@L)) } ];
            void;
            (let _jessie_<num> = t in
            (let _jessie_<num> = l_0 in
            (let _jessie_<num> = ((sub_int !m) (1)) in
            (JC_65:
            (check
            { zwf_zero((JC_64 : sub_int(_jessie_<num>, _jessie_<num>)),
              (JC_63 : sub_int(r, l_0))) };
            (JC_62:
            (((((quick_rec_requires _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))))));
            (let _jessie_<num> = t in
            (let _jessie_<num> = ((add_int !m) (1)) in
            (let _jessie_<num> = r in
            (JC_69:
            (check
            { zwf_zero((JC_68 : sub_int(_jessie_<num>, _jessie_<num>)),
              (JC_67 : sub_int(r, l_0))) };
            (JC_66:
            (((((quick_rec_requires _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_5) intP_t_5_alloc_table)))))))
           end) end end) end; (raise (Return_label_exc void)) end with
      Return_label_exc _jessie_<num> -> (return_label: (raise Return)) end)));
    (raise Return) end with Return -> void end) { true }

let quick_sort_ensures_default =
 fun (t_0 : intP pointer) (n_1 : int) (intP_intM_t_0_6 : (intP, int) memory ref) (intP_t_0_6_alloc_table : intP alloc_table) ->
  { (JC_130:
    ((JC_128: le_int(offset_min(intP_t_0_6_alloc_table, t_0), (0)))
    and (JC_129:
        ge_int(offset_max(intP_t_0_6_alloc_table, t_0), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let _jessie_<num> = t_0 in
     (let _jessie_<num> = (0) in
     (let _jessie_<num> = ((sub_int n_1) (1)) in
     (JC_141:
     (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_0_6) intP_t_0_6_alloc_table)))));
    (raise Return); (raise Return) end with Return -> void end)
  { (JC_132: true) }

let quick_sort_ensures_permutation =
 fun (t_0 : intP pointer) (n_1 : int) (intP_intM_t_0_6 : (intP, int) memory ref) (intP_t_0_6_alloc_table : intP alloc_table) ->
  { (JC_130:
    ((JC_128: le_int(offset_min(intP_t_0_6_alloc_table, t_0), (0)))
    and (JC_129:
        ge_int(offset_max(intP_t_0_6_alloc_table, t_0), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let _jessie_<num> = t_0 in
     (let _jessie_<num> = (0) in
     (let _jessie_<num> = ((sub_int n_1) (1)) in
     (JC_143:
     (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_0_6) intP_t_0_6_alloc_table)))));
    (raise Return); (raise Return) end with Return -> void end)
  { (JC_138:
    Permut(t_0, (0), sub_int(n_1, (1)), intP_intM_t_0_6, intP_intM_t_0_6@)) }

let quick_sort_ensures_sorted =
 fun (t_0 : intP pointer) (n_1 : int) (intP_intM_t_0_6 : (intP, int) memory ref) (intP_t_0_6_alloc_table : intP alloc_table) ->
  { (JC_130:
    ((JC_128: le_int(offset_min(intP_t_0_6_alloc_table, t_0), (0)))
    and (JC_129:
        ge_int(offset_max(intP_t_0_6_alloc_table, t_0), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let _jessie_<num> = t_0 in
     (let _jessie_<num> = (0) in
     (let _jessie_<num> = ((sub_int n_1) (1)) in
     (JC_142:
     (((((quick_rec _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_0_6) intP_t_0_6_alloc_table)))));
    (raise Return); (raise Return) end with Return -> void end)
  { (JC_136: Sorted(t_0, (0), n_1, intP_intM_t_0_6)) }

let quick_sort_safety =
 fun (t_0 : intP pointer) (n_1 : int) (intP_intM_t_0_6 : (intP, int) memory ref) (intP_t_0_6_alloc_table : intP alloc_table) ->
  { (JC_130:
    ((JC_128: le_int(offset_min(intP_t_0_6_alloc_table, t_0), (0)))
    and (JC_129:
        ge_int(offset_max(intP_t_0_6_alloc_table, t_0), sub_int(n_1, (1)))))) }
  (init:
  try
   begin
     (let _jessie_<num> = t_0 in
     (let _jessie_<num> = (0) in
     (let _jessie_<num> = ((sub_int n_1) (1)) in
     (JC_140:
     (((((quick_rec_requires _jessie_<num>) _jessie_<num>) _jessie_<num>) intP_intM_t_0_6) intP_t_0_6_alloc_table)))));
    (raise Return); (raise Return) end with Return -> void end) { true }

let swap_ensures_default =
 fun (t_1 : intP pointer) (i : int) (j : int) (intP_intM_t_1_4 : (intP, int) memory ref) (intP_t_1_4_alloc_table : intP alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(intP_t_1_4_alloc_table, t_1), i))
    and ((JC_8: ge_int(offset_max(intP_t_1_4_alloc_table, t_1), i))
        and ((JC_9: le_int(offset_min(intP_t_1_4_alloc_table, t_1), j))
            and (JC_10: ge_int(offset_max(intP_t_1_4_alloc_table, t_1), j)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int void) in
     begin
       (let _jessie_<num> =
       (tmp := ((safe_acc_ !intP_intM_t_1_4) ((shift t_1) i))) in void);
      (let _jessie_<num> =
      (let _jessie_<num> = ((safe_acc_ !intP_intM_t_1_4) ((shift t_1) j)) in
      (let _jessie_<num> = t_1 in
      (let _jessie_<num> = i in
      (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
      (((safe_upd_ intP_intM_t_1_4) _jessie_<num>) _jessie_<num>))))) in void);
      (let _jessie_<num> =
      (let _jessie_<num> = !tmp in
      (let _jessie_<num> = t_1 in
      (let _jessie_<num> = j in
      (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
      (((safe_upd_ intP_intM_t_1_4) _jessie_<num>) _jessie_<num>))))) in void);
      (raise Return) end); (raise Return) end with Return -> void end)
  { (JC_15:
    ((JC_13: Swap(t_1, i, j, intP_intM_t_1_4, intP_intM_t_1_4@))
    and (JC_14:
        not_assigns(intP_t_1_4_alloc_table, intP_intM_t_1_4@,
        intP_intM_t_1_4,
        pset_union(pset_range(pset_singleton(t_1), j, j),
        pset_range(pset_singleton(t_1), i, i)))))) }

let swap_safety =
 fun (t_1 : intP pointer) (i : int) (j : int) (intP_intM_t_1_4 : (intP, int) memory ref) (intP_t_1_4_alloc_table : intP alloc_table) ->
  { (JC_11:
    ((JC_7: le_int(offset_min(intP_t_1_4_alloc_table, t_1), i))
    and ((JC_8: ge_int(offset_max(intP_t_1_4_alloc_table, t_1), i))
        and ((JC_9: le_int(offset_min(intP_t_1_4_alloc_table, t_1), j))
            and (JC_10: ge_int(offset_max(intP_t_1_4_alloc_table, t_1), j)))))) }
  (init:
  try
   begin
     (let tmp = ref (any_int void) in
     begin
       (let _jessie_<num> =
       (tmp := (JC_21:
               ((((offset_acc_ intP_t_1_4_alloc_table) !intP_intM_t_1_4) t_1) i))) in
       void);
      (let _jessie_<num> =
      (let _jessie_<num> =
      (JC_22:
      ((((offset_acc_ intP_t_1_4_alloc_table) !intP_intM_t_1_4) t_1) j)) in
      (let _jessie_<num> = t_1 in
      (let _jessie_<num> = i in
      (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
      (JC_23:
      (((((offset_upd_ intP_t_1_4_alloc_table) intP_intM_t_1_4) _jessie_<num>) _jessie_<num>) _jessie_<num>)))))) in
      void);
      (let _jessie_<num> =
      (let _jessie_<num> = !tmp in
      (let _jessie_<num> = t_1 in
      (let _jessie_<num> = j in
      (let _jessie_<num> = ((shift _jessie_<num>) _jessie_<num>) in
      (JC_24:
      (((((offset_upd_ intP_t_1_4_alloc_table) intP_intM_t_1_4) _jessie_<num>) _jessie_<num>) _jessie_<num>)))))) in
      void); (raise Return) end); (raise Return) end with Return -> void end)
  { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/quick_sort.why
========== file tests/c/quick_sort.jessie/why/quick_sort_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic pow_real_int : real, int -> real

logic pow_real : real, real -> real

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type intP

type padding

type unsigned_charP

type voidP

predicate Swap(a: intP pointer, i_1: int, j_0: int,
  intP_intM_a_1_at_L2: (intP, int) memory, intP_intM_a_1_at_L1: (intP,
  int) memory) =
  ((select(intP_intM_a_1_at_L1, shift(a, i_1)) = select(intP_intM_a_1_at_L2,
   shift(a, j_0))) and
   ((select(intP_intM_a_1_at_L1, shift(a, j_0)) = select(intP_intM_a_1_at_L2,
    shift(a, i_1))) and
    (forall k:int.
      (((k <> i_1) and (k <> j_0)) -> (select(intP_intM_a_1_at_L1, shift(a,
       k)) = select(intP_intM_a_1_at_L2, shift(a, k)))))))

logic Permut : intP pointer, int, int, (intP, int) memory, (intP,
int) memory -> prop

axiom Permut_inversion:
  (forall aux_1:intP pointer.
    (forall aux_2:int.
      (forall aux_3:int.
        (forall aux_4:(intP, int) memory.
          (forall aux_5:(intP, int) memory [Permut(aux_1, aux_2, aux_3,
            aux_4, aux_5)].
            (Permut(aux_1, aux_2, aux_3, aux_4, aux_5) ->
             ((exists intP_intM_a_0_2_at_L:(intP, int) memory.
                (exists a_1:intP pointer.
                  (exists l_0_0:int.
                    (exists h_0:int.
                      ((aux_1 = a_1) and
                       ((aux_2 = l_0_0) and
                        ((aux_3 = h_0) and
                         ((aux_4 = intP_intM_a_0_2_at_L) and
                          (aux_5 = intP_intM_a_0_2_at_L))))))))) or
              ((exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                 (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                   (exists a_2:intP pointer.
                     (exists l_1:int.
                       (exists h_1:int.
                         (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
                          intP_intM_a_0_2_at_L1) and
                          ((aux_1 = a_2) and
                           ((aux_2 = l_1) and
                            ((aux_3 = h_1) and
                             ((aux_4 = intP_intM_a_0_2_at_L1) and
                              (aux_5 = intP_intM_a_0_2_at_L2))))))))))) or
               ((exists intP_intM_a_0_2_at_L3:(intP, int) memory.
                  (exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                    (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                      (exists a_3:intP pointer.
                        (exists l_2:int.
                          (exists h_2:int.
                            ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                              intP_intM_a_0_2_at_L1) and Permut(a_3, l_2,
                              h_2, intP_intM_a_0_2_at_L3,
                              intP_intM_a_0_2_at_L2)) and
                             ((aux_1 = a_3) and
                              ((aux_2 = l_2) and
                               ((aux_3 = h_2) and
                                ((aux_4 = intP_intM_a_0_2_at_L3) and
                                 (aux_5 = intP_intM_a_0_2_at_L1)))))))))))) or
                (exists intP_intM_a_0_2_at_L2:(intP, int) memory.
                  (exists intP_intM_a_0_2_at_L1:(intP, int) memory.
                    (exists a_4:intP pointer.
                      (exists l_3:int.
                        (exists h_3:int.
                          (exists i_2:int.
                            (exists j_1:int.
                              (((l_3 <= i_2) and
                                ((i_2 <= h_3) and
                                 ((l_3 <= j_1) and
                                  ((j_1 <= h_3) and Swap(a_4, i_2, j_1,
                                   intP_intM_a_0_2_at_L2,
                                   intP_intM_a_0_2_at_L1))))) and
                               ((aux_1 = a_4) and
                                ((aux_2 = l_3) and
                                 ((aux_3 = h_3) and
                                  ((aux_4 = intP_intM_a_0_2_at_L2) and
                                   (aux_5 = intP_intM_a_0_2_at_L1))))))))))))))))))))))

axiom Permut_refl:
  (forall intP_intM_a_0_2_at_L:(intP, int) memory.
    (forall a_1:intP pointer.
      (forall l_0_0:int.
        (forall h_0:int. Permut(a_1, l_0_0, h_0, intP_intM_a_0_2_at_L,
          intP_intM_a_0_2_at_L)))))

axiom Permut_sym:
  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
      (forall a_2:intP pointer.
        (forall l_1:int.
          (forall h_1:int.
            (Permut(a_2, l_1, h_1, intP_intM_a_0_2_at_L2,
             intP_intM_a_0_2_at_L1) -> Permut(a_2, l_1, h_1,
             intP_intM_a_0_2_at_L1, intP_intM_a_0_2_at_L2)))))))

axiom Permut_trans:
  (forall intP_intM_a_0_2_at_L3:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
      (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
        (forall a_3:intP pointer.
          (forall l_2:int.
            (forall h_2:int.
              ((Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L2,
                intP_intM_a_0_2_at_L1) and Permut(a_3, l_2, h_2,
                intP_intM_a_0_2_at_L3, intP_intM_a_0_2_at_L2)) ->
               Permut(a_3, l_2, h_2, intP_intM_a_0_2_at_L3,
               intP_intM_a_0_2_at_L1))))))))

axiom Permut_swap:
  (forall intP_intM_a_0_2_at_L2:(intP, int) memory.
    (forall intP_intM_a_0_2_at_L1:(intP, int) memory.
      (forall a_4:intP pointer.
        (forall l_3:int.
          (forall h_3:int.
            (forall i_2:int.
              (forall j_1:int.
                (((l_3 <= i_2) and
                  ((i_2 <= h_3) and
                   ((l_3 <= j_1) and
                    ((j_1 <= h_3) and Swap(a_4, i_2, j_1,
                     intP_intM_a_0_2_at_L2, intP_intM_a_0_2_at_L1))))) ->
                 Permut(a_4, l_3, h_3, intP_intM_a_0_2_at_L2,
                 intP_intM_a_0_2_at_L1)))))))))

predicate Sorted(a_5: intP pointer, l_4: int, h_4: int,
  intP_intM_a_5_3_at_L: (intP, int) memory) =
  (forall i_3:int.
    (forall j_2:int.
      (((l_4 <= i_3) and ((i_3 <= j_2) and (j_2 < h_4))) ->
       (select(intP_intM_a_5_3_at_L, shift(a_5,
       i_3)) <= select(intP_intM_a_5_3_at_L, shift(a_5, j_2))))))

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic intP_tag : intP tag_id

axiom intP_int: (int_of_tag(intP_tag) = 1)

logic intP_of_pointer_address : unit pointer -> intP pointer

axiom intP_of_pointer_address_of_pointer_addr:
  (forall p:intP pointer. (p = intP_of_pointer_address(pointer_address(p))))

axiom intP_parenttag_bottom: parenttag(intP_tag, bottom_tag)

axiom intP_tags:
  (forall x:intP pointer.
    (forall intP_tag_table:intP tag_table. instanceof(intP_tag_table, x,
      intP_tag)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_intP(p: intP pointer, a: int,
  intP_alloc_table: intP alloc_table) = (offset_min(intP_alloc_table,
  p) <= a)

predicate left_valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_min(unsigned_charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_intP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(intP_of_pointer_address(p))))

logic unsigned_charP_of_pointer_address : unit pointer -> unsigned_charP pointer

axiom pointer_addr_of_unsigned_charP_of_pointer_address:
  (forall p:unit pointer.
    (p = pointer_address(unsigned_charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_intP(p: intP pointer, b: int,
  intP_alloc_table: intP alloc_table) = (offset_max(intP_alloc_table,
  p) >= b)

predicate right_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  (offset_max(unsigned_charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) = a) and (offset_max(intP_alloc_table,
   p) = b))

predicate strict_valid_struct_unsigned_charP(p: unsigned_charP pointer,
  a: int, b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) = a) and
   (offset_max(unsigned_charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

logic unsigned_charP_tag : unsigned_charP tag_id

axiom unsigned_charP_int: (int_of_tag(unsigned_charP_tag) = 1)

axiom unsigned_charP_of_pointer_address_of_pointer_addr:
  (forall p:unsigned_charP pointer.
    (p = unsigned_charP_of_pointer_address(pointer_address(p))))

axiom unsigned_charP_parenttag_bottom: parenttag(unsigned_charP_tag,
  bottom_tag)

axiom unsigned_charP_tags:
  (forall x:unsigned_charP pointer.
    (forall unsigned_charP_tag_table:unsigned_charP tag_table.
      instanceof(unsigned_charP_tag_table, x, unsigned_charP_tag)))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_root_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_intP(p: intP pointer, a: int, b: int,
  intP_alloc_table: intP alloc_table) =
  ((offset_min(intP_alloc_table, p) <= a) and (offset_max(intP_alloc_table,
   p) >= b))

predicate valid_struct_unsigned_charP(p: unsigned_charP pointer, a: int,
  b: int, unsigned_charP_alloc_table: unsigned_charP alloc_table) =
  ((offset_min(unsigned_charP_alloc_table, p) <= a) and
   (offset_max(unsigned_charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal quick_rec_ensures_default_po_1:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 >= r) ->
  ("JC_34": not_assigns(intP_t_5_alloc_table, intP_intM_t_5, intP_intM_t_5,
  pset_range(pset_singleton(t), l_0, r)))

goal quick_rec_ensures_default_po_2:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_74": ("JC_70": (select(intP_intM_t_5, shift(t, l_0)) = v)))

goal quick_rec_ensures_default_po_3:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_74": ("JC_71": (l_0 <= m)))

goal quick_rec_ensures_default_po_4:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_74": ("JC_72": (m < i_0)))

goal quick_rec_ensures_default_po_5:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_74": ("JC_73": (i_0 <= (r + 1))))

goal quick_rec_ensures_default_po_6:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_75": Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5))

goal quick_rec_ensures_default_po_7:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall j_4:int.
  ((m < j_4) and (j_4 < i_0)) ->
  ("JC_76": (select(intP_intM_t_5, shift(t, j_4)) >= v))

goal quick_rec_ensures_default_po_8:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall j_3:int.
  ((l_0 < j_3) and (j_3 <= m)) ->
  ("JC_77": (select(intP_intM_t_5, shift(t, j_3)) < v))

goal quick_rec_ensures_default_po_9:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5, intP_intM_t_5,
  pset_range(pset_singleton(t), l_0, r)))

goal quick_rec_ensures_default_po_10:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0))

goal quick_rec_ensures_default_po_11:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_70": (select(intP_intM_t_5_1, shift(t, l_0)) = v)))

goal quick_rec_ensures_default_po_12:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_71": (l_0 <= m1)))

goal quick_rec_ensures_default_po_13:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_72": (m1 < i_0_1)))

goal quick_rec_ensures_default_po_14:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_73": (i_0_1 <= (r + 1))))

goal quick_rec_ensures_default_po_15:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_75": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5))

goal quick_rec_ensures_default_po_16:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  forall j_4:int.
  ((m1 < j_4) and (j_4 < i_0_1)) ->
  ("JC_76": (select(intP_intM_t_5_1, shift(t, j_4)) >= v))

goal quick_rec_ensures_default_po_17:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  forall j_3:int.
  ((l_0 < j_3) and (j_3 <= m1)) ->
  ("JC_77": (select(intP_intM_t_5_1, shift(t, j_3)) < v))

goal quick_rec_ensures_default_po_18:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_82": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5, intP_intM_t_5_1,
  pset_range(pset_singleton(t), l_0, r)))

goal quick_rec_ensures_default_po_19:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)))

goal quick_rec_ensures_default_po_20:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_71": (l_0 <= m0)))

goal quick_rec_ensures_default_po_21:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_72": (m0 < i_0_1)))

goal quick_rec_ensures_default_po_22:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_74": ("JC_73": (i_0_1 <= (r + 1))))

goal quick_rec_ensures_default_po_23:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  ("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5))

goal quick_rec_ensures_default_po_24:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  forall j_4:int.
  ((m0 < j_4) and (j_4 < i_0_1)) ->
  ("JC_76": (select(intP_intM_t_5_0, shift(t, j_4)) >= v))

goal quick_rec_ensures_default_po_25:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 <= r) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  forall j_3:int.
  ((l_0 < j_3) and (j_3 <= m0)) ->
  ("JC_77": (select(intP_intM_t_5_0, shift(t, j_3)) < v))

goal quick_rec_ensures_default_po_26:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 > r) ->
  ("JC_83": (l_0 <= m0))

goal quick_rec_ensures_default_po_27:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 > r) ->
  ("JC_83": (m0 <= r))

goal quick_rec_ensures_default_po_28:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 > r) ->
  ("JC_83": ((l_0 <= m0) and (m0 <= r))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_85": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0))

goal quick_rec_ensures_default_po_29:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ((("JC_74":
    (("JC_70": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
     (("JC_71": (l_0 <= m0)) and
      (("JC_72": (m0 < i_0_0)) and ("JC_73": (i_0_0 <= (r + 1))))))) and
    (("JC_75": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
     (("JC_76":
      (forall j_4:int.
        (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
         j_4)) >= v)))) and
      ("JC_77":
      (forall j_3:int.
        (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
         j_3)) < v))))))) and
   ("JC_79": not_assigns(intP_t_5_alloc_table, intP_intM_t_5,
   intP_intM_t_5_0, pset_range(pset_singleton(t), l_0, r)))) ->
  (i_0_0 > r) ->
  ("JC_83": ((l_0 <= m0) and (m0 <= r))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_85": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  forall intP_intM_t_5_3:(intP,
  int) memory.
  (("JC_42": Permut(t, (m0 + 1), r, intP_intM_t_5_3, intP_intM_t_5_2)) and
   (("JC_40": Sorted(t, (m0 + 1), (r + 1), intP_intM_t_5_3)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_2,
    intP_intM_t_5_3, pset_range(pset_singleton(t), (m0 + 1), r))))) ->
  ("JC_34": not_assigns(intP_t_5_alloc_table, intP_intM_t_5, intP_intM_t_5_3,
  pset_range(pset_singleton(t), l_0, r)))

goal quick_rec_ensures_permutation_po_1:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 >= r) ->
  ("JC_41": Permut(t, l_0, r, intP_intM_t_5, intP_intM_t_5))

goal quick_rec_ensures_permutation_po_2:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_115": true) ->
  (("JC_110":
   (("JC_106": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_107": (l_0 <= m0)) and
     (("JC_108": (m0 < i_0_0)) and ("JC_109": (i_0_0 <= (r + 1))))))) and
   (("JC_111": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_112":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_113":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_119": ((l_0 <= m0) and (m0 <= r))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_121": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  forall intP_intM_t_5_3:(intP,
  int) memory.
  (("JC_42": Permut(t, (m0 + 1), r, intP_intM_t_5_3, intP_intM_t_5_2)) and
   (("JC_40": Sorted(t, (m0 + 1), (r + 1), intP_intM_t_5_3)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_2,
    intP_intM_t_5_3, pset_range(pset_singleton(t), (m0 + 1), r))))) ->
  ("JC_41": Permut(t, l_0, r, intP_intM_t_5_3, intP_intM_t_5))

goal quick_rec_ensures_sorted_po_1:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 >= r) ->
  ("JC_39": Sorted(t, l_0, (r + 1), intP_intM_t_5))

goal quick_rec_ensures_sorted_po_2:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_97": true) ->
  (("JC_92":
   (("JC_88": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_89": (l_0 <= m0)) and
     (("JC_90": (m0 < i_0_0)) and ("JC_91": (i_0_0 <= (r + 1))))))) and
   (("JC_93": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_94":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_95":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_101": ((l_0 <= m0) and (m0 <= r))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_103": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  forall intP_intM_t_5_3:(intP,
  int) memory.
  (("JC_42": Permut(t, (m0 + 1), r, intP_intM_t_5_3, intP_intM_t_5_2)) and
   (("JC_40": Sorted(t, (m0 + 1), (r + 1), intP_intM_t_5_3)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_2,
    intP_intM_t_5_3, pset_range(pset_singleton(t), (m0 + 1), r))))) ->
  ("JC_39": Sorted(t, l_0, (r + 1), intP_intM_t_5_3))

goal quick_rec_safety_po_1:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  (l_0 <= offset_max(intP_t_5_alloc_table, t))

goal quick_rec_safety_po_2:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  (offset_min(intP_t_5_alloc_table, t) <= i_0_0)

goal quick_rec_safety_po_3:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  (i_0_0 <= offset_max(intP_t_5_alloc_table, t))

goal quick_rec_safety_po_4:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  ("JC_5": ("JC_2": (offset_max(intP_t_5_alloc_table, t) >= i_0_0)))

goal quick_rec_safety_po_5:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  ("JC_5": ("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m1)))

goal quick_rec_safety_po_6:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  ("JC_5": ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m1)))

goal quick_rec_safety_po_7:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= i_0_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= i_0_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m1)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m1)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_57": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  (0 <= ("JC_58": (r - i_0_0)))

goal quick_rec_safety_po_8:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 < v) ->
  forall m1:int.
  (m1 = (m0 + 1)) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= i_0_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= i_0_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m1)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m1)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, i_0_0, m1, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m1, m1),
   pset_range(pset_singleton(t), i_0_0, i_0_0)))))) ->
  ("JC_57": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  (("JC_58": (r - i_0_1)) < ("JC_58": (r - i_0_0)))

goal quick_rec_safety_po_9:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  (0 <= ("JC_58": (r - i_0_0)))

goal quick_rec_safety_po_10:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 <= r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= i_0_0) and
   (i_0_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result0:int.
  (result0 = select(intP_intM_t_5_0, shift(t, i_0_0))) ->
  (result0 >= v) ->
  forall i_0_1:int.
  (i_0_1 = (i_0_0 + 1)) ->
  (("JC_58": (r - i_0_1)) < ("JC_58": (r - i_0_0)))

goal quick_rec_safety_po_11:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5": ("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)))

goal quick_rec_safety_po_12:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5": ("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)))

goal quick_rec_safety_po_13:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5": ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))

goal quick_rec_safety_po_14:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  (0 <= ("JC_63": (r - l_0)))

goal quick_rec_safety_po_15:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  (("JC_64": ((m0 - 1) - l_0)) < ("JC_63": (r - l_0)))

goal quick_rec_safety_po_16:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  ("JC_27": ("JC_26": (offset_max(intP_t_5_alloc_table, t) >= (m0 - 1))))

goal quick_rec_safety_po_17:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  ("JC_27":
  (("JC_25": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_26": (offset_max(intP_t_5_alloc_table, t) >= (m0 - 1))))) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  (0 <= ("JC_67": (r - l_0)))

goal quick_rec_safety_po_18:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  ("JC_27":
  (("JC_25": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_26": (offset_max(intP_t_5_alloc_table, t) >= (m0 - 1))))) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  (("JC_68": (r - (m0 + 1))) < ("JC_67": (r - l_0)))

goal quick_rec_safety_po_19:
  forall t:intP pointer.
  forall l_0:int.
  forall r:int.
  forall intP_t_5_alloc_table:intP alloc_table.
  forall intP_intM_t_5:(intP,
  int) memory.
  ("JC_31":
  (("JC_29": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_30": (offset_max(intP_t_5_alloc_table, t) >= r)))) ->
  (l_0 < r) ->
  ((offset_min(intP_t_5_alloc_table, t) <= l_0) and
   (l_0 <= offset_max(intP_t_5_alloc_table, t))) ->
  forall result:int.
  (result = select(intP_intM_t_5, shift(t, l_0))) ->
  forall v:int.
  (v = result) ->
  forall m:int.
  (m = l_0) ->
  forall i_0:int.
  (i_0 = (l_0 + 1)) ->
  forall i_0_0:int.
  forall intP_intM_t_5_0:(intP,
  int) memory.
  forall m0:int.
  ("JC_53": true) ->
  (("JC_48":
   (("JC_44": (select(intP_intM_t_5_0, shift(t, l_0)) = v)) and
    (("JC_45": (l_0 <= m0)) and
     (("JC_46": (m0 < i_0_0)) and ("JC_47": (i_0_0 <= (r + 1))))))) and
   (("JC_49": Permut(t, l_0, r, intP_intM_t_5_0, intP_intM_t_5)) and
    (("JC_50":
     (forall j_4:int.
       (((m0 < j_4) and (j_4 < i_0_0)) -> (select(intP_intM_t_5_0, shift(t,
        j_4)) >= v)))) and
     ("JC_51":
     (forall j_3:int.
       (((l_0 < j_3) and (j_3 <= m0)) -> (select(intP_intM_t_5_0, shift(t,
        j_3)) < v))))))) ->
  (i_0_0 > r) ->
  ("JC_59": ((l_0 <= m0) and (m0 <= r))) ->
  ("JC_5":
  (("JC_1": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   (("JC_2": (offset_max(intP_t_5_alloc_table, t) >= l_0)) and
    (("JC_3": (offset_min(intP_t_5_alloc_table, t) <= m0)) and
     ("JC_4": (offset_max(intP_t_5_alloc_table, t) >= m0)))))) ->
  forall intP_intM_t_5_1:(intP,
  int) memory.
  ("JC_18":
  (("JC_16": Swap(t, l_0, m0, intP_intM_t_5_1, intP_intM_t_5_0)) and
   ("JC_17": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_0,
   intP_intM_t_5_1, pset_union(pset_range(pset_singleton(t), m0, m0),
   pset_range(pset_singleton(t), l_0, l_0)))))) ->
  ("JC_61": Permut(t, l_0, r, intP_intM_t_5_1, intP_intM_t_5_0)) ->
  ("JC_27":
  (("JC_25": (offset_min(intP_t_5_alloc_table, t) <= l_0)) and
   ("JC_26": (offset_max(intP_t_5_alloc_table, t) >= (m0 - 1))))) ->
  forall intP_intM_t_5_2:(intP,
  int) memory.
  (("JC_42": Permut(t, l_0, (m0 - 1), intP_intM_t_5_2, intP_intM_t_5_1)) and
   (("JC_40": Sorted(t, l_0, ((m0 - 1) + 1), intP_intM_t_5_2)) and
    ("JC_36": not_assigns(intP_t_5_alloc_table, intP_intM_t_5_1,
    intP_intM_t_5_2, pset_range(pset_singleton(t), l_0, (m0 - 1)))))) ->
  ("JC_27": ("JC_25": (offset_min(intP_t_5_alloc_table, t) <= (m0 + 1))))

goal quick_sort_ensures_sorted_po_1:
  forall t_0:intP pointer.
  forall n_1:int.
  forall intP_t_0_6_alloc_table:intP alloc_table.
  forall intP_intM_t_0_6:(intP,
  int) memory.
  ("JC_130":
  (("JC_128": (offset_min(intP_t_0_6_alloc_table, t_0) <= 0)) and
   ("JC_129": (offset_max(intP_t_0_6_alloc_table, t_0) >= (n_1 - 1))))) ->
  forall intP_intM_t_0_6_0:(intP,
  int) memory.
  (("JC_42": Permut(t_0, 0, (n_1 - 1), intP_intM_t_0_6_0, intP_intM_t_0_6)) and
   (("JC_40": Sorted(t_0, 0, ((n_1 - 1) + 1), intP_intM_t_0_6_0)) and
    ("JC_36": not_assigns(intP_t_0_6_alloc_table, intP_intM_t_0_6,
    intP_intM_t_0_6_0, pset_range(pset_singleton(t_0), 0, (n_1 - 1)))))) ->
  ("JC_136": Sorted(t_0, 0, n_1, intP_intM_t_0_6_0))

goal swap_ensures_default_po_1:
  forall t_1:intP pointer.
  forall i:int.
  forall j:int.
  forall intP_t_1_4_alloc_table:intP alloc_table.
  forall intP_intM_t_1_4:(intP,
  int) memory.
  ("JC_11":
  (("JC_7": (offset_min(intP_t_1_4_alloc_table, t_1) <= i)) and
   (("JC_8": (offset_max(intP_t_1_4_alloc_table, t_1) >= i)) and
    (("JC_9": (offset_min(intP_t_1_4_alloc_table, t_1) <= j)) and
     ("JC_10": (offset_max(intP_t_1_4_alloc_table, t_1) >= j)))))) ->
  forall result:int.
  (result = select(intP_intM_t_1_4, shift(t_1, i))) ->
  forall tmp:int.
  (tmp = result) ->
  forall result0:int.
  (result0 = select(intP_intM_t_1_4, shift(t_1, j))) ->
  forall intP_intM_t_1_4_0:(intP,
  int) memory.
  (intP_intM_t_1_4_0 = store(intP_intM_t_1_4, shift(t_1, i), result0)) ->
  forall intP_intM_t_1_4_1:(intP,
  int) memory.
  (intP_intM_t_1_4_1 = store(intP_intM_t_1_4_0, shift(t_1, j), tmp)) ->
  ("JC_15": ("JC_13": Swap(t_1, i, j, intP_intM_t_1_4_1, intP_intM_t_1_4)))

goal swap_ensures_default_po_2:
  forall t_1:intP pointer.
  forall i:int.
  forall j:int.
  forall intP_t_1_4_alloc_table:intP alloc_table.
  forall intP_intM_t_1_4:(intP,
  int) memory.
  ("JC_11":
  (("JC_7": (offset_min(intP_t_1_4_alloc_table, t_1) <= i)) and
   (("JC_8": (offset_max(intP_t_1_4_alloc_table, t_1) >= i)) and
    (("JC_9": (offset_min(intP_t_1_4_alloc_table, t_1) <= j)) and
     ("JC_10": (offset_max(intP_t_1_4_alloc_table, t_1) >= j)))))) ->
  forall result:int.
  (result = select(intP_intM_t_1_4, shift(t_1, i))) ->
  forall tmp:int.
  (tmp = result) ->
  forall result0:int.
  (result0 = select(intP_intM_t_1_4, shift(t_1, j))) ->
  forall intP_intM_t_1_4_0:(intP,
  int) memory.
  (intP_intM_t_1_4_0 = store(intP_intM_t_1_4, shift(t_1, i), result0)) ->
  forall intP_intM_t_1_4_1:(intP,
  int) memory.
  (intP_intM_t_1_4_1 = store(intP_intM_t_1_4_0, shift(t_1, j), tmp)) ->
  ("JC_15":
  ("JC_14": not_assigns(intP_t_1_4_alloc_table, intP_intM_t_1_4,
  intP_intM_t_1_4_1, pset_union(pset_range(pset_singleton(t_1), j, j),
  pset_range(pset_singleton(t_1), i, i)))))

goal swap_safety_po_1:
  forall t_1:intP pointer.
  forall i:int.
  forall j:int.
  forall intP_t_1_4_alloc_table:intP alloc_table.
  ("JC_11":
  (("JC_7": (offset_min(intP_t_1_4_alloc_table, t_1) <= i)) and
   (("JC_8": (offset_max(intP_t_1_4_alloc_table, t_1) >= i)) and
    (("JC_9": (offset_min(intP_t_1_4_alloc_table, t_1) <= j)) and
     ("JC_10": (offset_max(intP_t_1_4_alloc_table, t_1) >= j)))))) ->
  (i <= offset_max(intP_t_1_4_alloc_table, t_1))

goal swap_safety_po_2:
  forall t_1:intP pointer.
  forall i:int.
  forall j:int.
  forall intP_t_1_4_alloc_table:intP alloc_table.
  forall intP_intM_t_1_4:(intP,
  int) memory.
  ("JC_11":
  (("JC_7": (offset_min(intP_t_1_4_alloc_table, t_1) <= i)) and
   (("JC_8": (offset_max(intP_t_1_4_alloc_table, t_1) >= i)) and
    (("JC_9": (offset_min(intP_t_1_4_alloc_table, t_1) <= j)) and
     ("JC_10": (offset_max(intP_t_1_4_alloc_table, t_1) >= j)))))) ->
  ((offset_min(intP_t_1_4_alloc_table, t_1) <= i) and
   (i <= offset_max(intP_t_1_4_alloc_table, t_1))) ->
  forall result:int.
  (result = select(intP_intM_t_1_4, shift(t_1, i))) ->
  forall tmp:int.
  (tmp = result) ->
  (offset_min(intP_t_1_4_alloc_table, t_1) <= j)

goal swap_safety_po_3:
  forall t_1:intP pointer.
  forall i:int.
  forall j:int.
  forall intP_t_1_4_alloc_table:intP alloc_table.
  forall intP_intM_t_1_4:(intP,
  int) memory.
  ("JC_11":
  (("JC_7": (offset_min(intP_t_1_4_alloc_table, t_1) <= i)) and
   (("JC_8": (offset_max(intP_t_1_4_alloc_table, t_1) >= i)) and
    (("JC_9": (offset_min(intP_t_1_4_alloc_table, t_1) <= j)) and
     ("JC_10": (offset_max(intP_t_1_4_alloc_table, t_1) >= j)))))) ->
  ((offset_min(intP_t_1_4_alloc_table, t_1) <= i) and
   (i <= offset_max(intP_t_1_4_alloc_table, t_1))) ->
  forall result:int.
  (result = select(intP_intM_t_1_4, shift(t_1, i))) ->
  forall tmp:int.
  (tmp = result) ->
  (j <= offset_max(intP_t_1_4_alloc_table, t_1))

// RUNSIMPLIFY: will ask regtests to run Simplify on this program
========== generation of Simplify VC output ==========
why -simplify [...] why/quick_sort.why
========== file tests/c/quick_sort.jessie/simplify/quick_sort_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (ge_real (real_sqrt x) real_constant_0_0e) |@true|))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom sqr_sqrt
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (real_sqrt (real_mul x x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(BG_PUSH
 ;; Why axiom math_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))))

(BG_PUSH
 ;; Why axiom math_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0)
 (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))))

(BG_PUSH
 ;; Why axiom computer_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))))

(BG_PUSH
 ;; Why axiom computer_div_bound
 (FORALL (x y)
 (IMPLIES (AND (>= x 0) (> y 0))
 (AND (<= 0 (computer_div x y)) (<= (computer_div x y) x)))))

(BG_PUSH
 ;; Why axiom computer_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (< (abs_int (computer_mod x y)) (abs_int y))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (< (abs_int (computer_mod x y)) (abs_int y))))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_pos
 (FORALL (x y) (IMPLIES (AND (>= x 0) (NEQ y 0)) (>= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_neg
 (FORALL (x y) (IMPLIES (AND (<= x 0) (NEQ y 0)) (<= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_rounds_toward_zero
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom disj_sym
 (FORALL (s1 s2)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|) (EQ (disj_mybag s2 s1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_refl
 (FORALL (sa) (EQ (sub_mybag sa sa) |@true|)))

(BG_PUSH
 ;; Why axiom sub_disj
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))

 (FORALL (s1 s3)
 (IMPLIES (EQ (disj_mybag s1 s3) |@true|)
 (FORALL (s2)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s2) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_in
 (FORALL (s1 s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))

 (FORALL (s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (FORALL (s1)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))))

(BG_PUSH
 ;; Why axiom sub_sub
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))

 (FORALL (s1 s2)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|)
 (FORALL (s3)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (sub_mybag s1 s3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_refl
 (FORALL (sa m) (EQ (frame_between sa m m) |@true|)))

(BG_PUSH
 ;; Why axiom frame_between_gen
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (FORALL (v) (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|)))))))

(BG_PUSH
 ;; Why axiom frame_between_gen2
 (FORALL (sa m1 m2 m3)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub1
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 s13)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (FORALL (m2 m1)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s23 m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub2
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 m1 m2)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s13 s23)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_pointer
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (EQ (select m1 p) (select m2 p)))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (FORALL (v) (EQ (select m1 p) (select m2 p))))))))

(BG_PUSH
 ;; Why axiom frame_between_sub
 (FORALL (sa sb m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (sb)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))))

(DEFPRED (Swap a i_1 j_0 intP_intM_a_1_at_L2 intP_intM_a_1_at_L1)
  (AND
  (EQ (select intP_intM_a_1_at_L1 (shift a i_1))
  (select intP_intM_a_1_at_L2 (shift a j_0)))
  (AND
  (EQ (select intP_intM_a_1_at_L1 (shift a j_0))
  (select intP_intM_a_1_at_L2 (shift a i_1)))
  (FORALL (k)
  (IMPLIES (AND (NEQ k i_1) (NEQ k j_0))
  (EQ (select intP_intM_a_1_at_L1 (shift a k))
  (select intP_intM_a_1_at_L2 (shift a k))))))))

(BG_PUSH
 ;; Why axiom Permut_inversion
 (FORALL (aux_1 aux_2 aux_3 aux_4 aux_5)
 (IMPLIES (EQ (Permut aux_1 aux_2 aux_3 aux_4 aux_5) |@true|)
 (OR
 (EXISTS (intP_intM_a_0_2_at_L)
 (EXISTS (a_1)
 (EXISTS (l_0_0)
 (EXISTS (h_0)
 (AND (EQ aux_1 a_1)
 (AND (EQ aux_2 l_0_0)
 (AND (EQ aux_3 h_0)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L) (EQ aux_5 intP_intM_a_0_2_at_L)))))))))
 (OR
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_2)
 (EXISTS (l_1)
 (EXISTS (h_1)
 (AND
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (AND (EQ aux_1 a_2)
 (AND (EQ aux_2 l_1)
 (AND (EQ aux_3 h_1)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L1) (EQ aux_5 intP_intM_a_0_2_at_L2)))))))))))
 (OR
 (EXISTS (intP_intM_a_0_2_at_L3)
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_3)
 (EXISTS (l_2)
 (EXISTS (h_2)
 (AND
 (AND
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2) |@true|))
 (AND (EQ aux_1 a_3)
 (AND (EQ aux_2 l_2)
 (AND (EQ aux_3 h_2)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L3) (EQ aux_5 intP_intM_a_0_2_at_L1))))))))))))
 (EXISTS (intP_intM_a_0_2_at_L2)
 (EXISTS (intP_intM_a_0_2_at_L1)
 (EXISTS (a_4)
 (EXISTS (l_3)
 (EXISTS (h_3)
 (EXISTS (i_2)
 (EXISTS (j_1)
 (AND
 (AND (<= l_3 i_2)
 (AND (<= i_2 h_3)
 (AND (<= l_3 j_1)
 (AND (<= j_1 h_3)
 (Swap a_4 i_2 j_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1)))))
 (AND (EQ aux_1 a_4)
 (AND (EQ aux_2 l_3)
 (AND (EQ aux_3 h_3)
 (AND (EQ aux_4 intP_intM_a_0_2_at_L2) (EQ aux_5 intP_intM_a_0_2_at_L1)))))))))))))))))))

(BG_PUSH
 ;; Why axiom Permut_refl
 (FORALL (intP_intM_a_0_2_at_L a_1 l_0_0 h_0)
 (EQ (Permut
 a_1 l_0_0 h_0 intP_intM_a_0_2_at_L intP_intM_a_0_2_at_L) |@true|)))

(BG_PUSH
 ;; Why axiom Permut_sym
 (FORALL (intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_2 l_1 h_1)
 (IMPLIES
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_2 l_1 h_1 intP_intM_a_0_2_at_L1 intP_intM_a_0_2_at_L2) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_trans
 (FORALL (intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_3 l_2 h_2)
 (IMPLIES
 (AND
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|)
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L2) |@true|))
 (EQ (Permut
 a_3 l_2 h_2 intP_intM_a_0_2_at_L3 intP_intM_a_0_2_at_L1) |@true|))))

(BG_PUSH
 ;; Why axiom Permut_swap
 (FORALL (intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1 a_4 l_3 h_3 i_2 j_1)
 (IMPLIES
 (AND (<= l_3 i_2)
 (AND (<= i_2 h_3)
 (AND (<= l_3 j_1)
 (AND (<= j_1 h_3)
 (Swap a_4 i_2 j_1 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1)))))
 (EQ (Permut
 a_4 l_3 h_3 intP_intM_a_0_2_at_L2 intP_intM_a_0_2_at_L1) |@true|))))

(DEFPRED (Sorted a_5 l_4 h_4 intP_intM_a_5_3_at_L)
  (FORALL (i_3 j_2)
  (IMPLIES (AND (<= l_4 i_3) (AND (<= i_3 j_2) (< j_2 h_4)))
  (<= (select intP_intM_a_5_3_at_L (shift a_5 i_3)) (select
                                                    intP_intM_a_5_3_at_L 
                                                    (shift a_5 j_2))))))

(BG_PUSH
 ;; Why axiom charP_int
 (EQ (int_of_tag charP_tag) 1))

(BG_PUSH
 ;; Why axiom charP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (charP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom charP_parenttag_bottom
 (EQ (parenttag charP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom charP_tags
 (FORALL (x charP_tag_table) (instanceof charP_tag_table x charP_tag)))

(BG_PUSH
 ;; Why axiom intP_int
 (EQ (int_of_tag intP_tag) 1))

(BG_PUSH
 ;; Why axiom intP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (intP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom intP_parenttag_bottom
 (EQ (parenttag intP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom intP_tags
 (FORALL (x intP_tag_table) (instanceof intP_tag_table x intP_tag)))

(DEFPRED (left_valid_struct_charP p a charP_alloc_table)
  (<= (offset_min charP_alloc_table p) a))

(DEFPRED (left_valid_struct_intP p a intP_alloc_table)
  (<= (offset_min intP_alloc_table p) a))

(DEFPRED (left_valid_struct_unsigned_charP p a unsigned_charP_alloc_table)
  (<= (offset_min unsigned_charP_alloc_table p) a))

(DEFPRED (left_valid_struct_voidP p a voidP_alloc_table)
  (<= (offset_min voidP_alloc_table p) a))

(BG_PUSH
 ;; Why axiom pointer_addr_of_charP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (charP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_intP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (intP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_unsigned_charP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (unsigned_charP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_voidP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (voidP_of_pointer_address p)))))

(DEFPRED (right_valid_struct_charP p b charP_alloc_table)
  (>= (offset_max charP_alloc_table p) b))

(DEFPRED (right_valid_struct_intP p b intP_alloc_table)
  (>= (offset_max intP_alloc_table p) b))

(DEFPRED (right_valid_struct_unsigned_charP p b unsigned_charP_alloc_table)
  (>= (offset_max unsigned_charP_alloc_table p) b))

(DEFPRED (right_valid_struct_voidP p b voidP_alloc_table)
  (>= (offset_max voidP_alloc_table p) b))

(DEFPRED (strict_valid_root_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_root_intP p a b intP_alloc_table)
  (AND (EQ (offset_min intP_alloc_table p) a)
  (EQ (offset_max intP_alloc_table p) b)))

(DEFPRED (strict_valid_root_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (EQ (offset_min unsigned_charP_alloc_table p) a)
  (EQ (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (strict_valid_root_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_intP p a b intP_alloc_table)
  (AND (EQ (offset_min intP_alloc_table p) a)
  (EQ (offset_max intP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (EQ (offset_min unsigned_charP_alloc_table p) a)
  (EQ (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(BG_PUSH
 ;; Why axiom unsigned_charP_int
 (EQ (int_of_tag unsigned_charP_tag) 1))

(BG_PUSH
 ;; Why axiom unsigned_charP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (unsigned_charP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom unsigned_charP_parenttag_bottom
 (EQ (parenttag unsigned_charP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom unsigned_charP_tags
 (FORALL (x unsigned_charP_tag_table)
 (instanceof unsigned_charP_tag_table x unsigned_charP_tag)))

(DEFPRED (valid_root_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_root_intP p a b intP_alloc_table)
  (AND (<= (offset_min intP_alloc_table p) a)
  (>= (offset_max intP_alloc_table p) b)))

(DEFPRED (valid_root_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (<= (offset_min unsigned_charP_alloc_table p) a)
  (>= (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (valid_root_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(DEFPRED (valid_struct_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_struct_intP p a b intP_alloc_table)
  (AND (<= (offset_min intP_alloc_table p) a)
  (>= (offset_max intP_alloc_table p) b)))

(DEFPRED (valid_struct_unsigned_charP p a b unsigned_charP_alloc_table)
  (AND (<= (offset_min unsigned_charP_alloc_table p) a)
  (>= (offset_max unsigned_charP_alloc_table p) b)))

(DEFPRED (valid_struct_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(BG_PUSH
 ;; Why axiom voidP_int
 (EQ (int_of_tag voidP_tag) 1))

(BG_PUSH
 ;; Why axiom voidP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (voidP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom voidP_parenttag_bottom
 (EQ (parenttag voidP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom voidP_tags
 (FORALL (x voidP_tag_table) (instanceof voidP_tag_table x voidP_tag)))

;; quick_rec_ensures_default_po_1, File "HOME/tests/c/quick_sort.c", line 57, characters 5-14
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (>= l_0 r)
(not_assigns
intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5 (pset_range
                                                 (pset_singleton t) l_0 r)))))))))

;; quick_rec_ensures_default_po_2, File "HOME/tests/c/quick_sort.c", line 68, characters 21-30
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1)) (EQ (select intP_intM_t_5 (shift t l_0)) v))))))))))))))))

;; quick_rec_ensures_default_po_3, File "HOME/tests/c/quick_sort.c", line 68, characters 34-40
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0) (FORALL (i_0) (IMPLIES (EQ i_0 (+ l_0 1)) (<= l_0 m))))))))))))))))

;; quick_rec_ensures_default_po_4, File "HOME/tests/c/quick_sort.c", line 68, characters 39-44
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0) (FORALL (i_0) (IMPLIES (EQ i_0 (+ l_0 1)) (< m i_0))))))))))))))))

;; quick_rec_ensures_default_po_5, File "HOME/tests/c/quick_sort.c", line 68, characters 43-51
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0) (IMPLIES (EQ i_0 (+ l_0 1)) (<= i_0 (+ r 1)))))))))))))))))

;; quick_rec_ensures_default_po_6, File "HOME/tests/c/quick_sort.c", line 67, characters 8-31
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(EQ (Permut t l_0 r intP_intM_t_5 intP_intM_t_5) |@true|))))))))))))))))

;; quick_rec_ensures_default_po_7, File "HOME/tests/c/quick_sort.c", line 65, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (j_4)
(IMPLIES (AND (< m j_4) (< j_4 i_0))
(>= (select intP_intM_t_5 (shift t j_4)) v))))))))))))))))))

;; quick_rec_ensures_default_po_8, File "HOME/tests/c/quick_sort.c", line 63, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (j_3)
(IMPLIES (AND (< l_0 j_3) (<= j_3 m))
(< (select intP_intM_t_5 (shift t j_3)) v))))))))))))))))))

;; quick_rec_ensures_default_po_9, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 131, characters 6-1481
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(not_assigns
intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5 (pset_range
                                                 (pset_singleton t) l_0 r)))))))))))))))))

;; quick_rec_ensures_default_po_10, File "HOME/tests/c/quick_sort.c", line 75, characters 17-39
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_11, File "HOME/tests/c/quick_sort.c", line 68, characters 21-30
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(EQ (select intP_intM_t_5_1 (shift t l_0)) v)))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_12, File "HOME/tests/c/quick_sort.c", line 68, characters 34-40
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= l_0 m1)))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_13, File "HOME/tests/c/quick_sort.c", line 68, characters 39-44
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (< m1 i_0_1)))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_14, File "HOME/tests/c/quick_sort.c", line 68, characters 43-51
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= i_0_1 (+ r 1))))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_15, File "HOME/tests/c/quick_sort.c", line 67, characters 8-31
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5) |@true|)))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_16, File "HOME/tests/c/quick_sort.c", line 65, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(FORALL (j_4)
(IMPLIES (AND (< m1 j_4) (< j_4 i_0_1))
(>= (select intP_intM_t_5_1 (shift t j_4)) v)))))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_17, File "HOME/tests/c/quick_sort.c", line 63, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(FORALL (j_3)
(IMPLIES (AND (< l_0 j_3) (<= j_3 m1))
(< (select intP_intM_t_5_1 (shift t j_3)) v)))))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_18, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 131, characters 6-1481
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(not_assigns
intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_1 (pset_range
                                                   (pset_singleton t) l_0 r))))))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_19, File "HOME/tests/c/quick_sort.c", line 68, characters 21-30
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(EQ (select intP_intM_t_5_0 (shift t l_0)) v))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_20, File "HOME/tests/c/quick_sort.c", line 68, characters 34-40
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= l_0 m0))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_21, File "HOME/tests/c/quick_sort.c", line 68, characters 39-44
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (< m0 i_0_1))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_22, File "HOME/tests/c/quick_sort.c", line 68, characters 43-51
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= i_0_1 (+ r 1)))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_23, File "HOME/tests/c/quick_sort.c", line 67, characters 8-31
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_24, File "HOME/tests/c/quick_sort.c", line 65, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(FORALL (j_4)
(IMPLIES (AND (< m0 j_4) (< j_4 i_0_1))
(>= (select intP_intM_t_5_0 (shift t j_4)) v))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_25, File "HOME/tests/c/quick_sort.c", line 63, characters 8-50
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (<= i_0_0 r)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1)
(IMPLIES (EQ i_0_1 (+ i_0_0 1))
(FORALL (j_3)
(IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
(< (select intP_intM_t_5_0 (shift t j_3)) v))))))))))))))))))))))))))))

;; quick_rec_ensures_default_po_26, File "HOME/tests/c/quick_sort.c", line 78, characters 13-24
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (> i_0_0 r) (<= l_0 m0)))))))))))))))))))))

;; quick_rec_ensures_default_po_27, File "HOME/tests/c/quick_sort.c", line 78, characters 13-24
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (> i_0_0 r) (<= m0 r)))))))))))))))))))))

;; quick_rec_ensures_default_po_28, File "HOME/tests/c/quick_sort.c", line 80, characters 13-34
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|))))))))))))))))))))))))

;; quick_rec_ensures_default_po_29, File "HOME/tests/c/quick_sort.c", line 57, characters 5-14
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES (AND
         (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_0 (pset_range
                                                            (pset_singleton
                                                            t) l_0 r)))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(FORALL (intP_intM_t_5_3)
(IMPLIES (AND
         (EQ (Permut t (+ m0 1) r intP_intM_t_5_3 intP_intM_t_5_2) |@true|)
         (AND (Sorted t (+ m0 1) (+ r 1) intP_intM_t_5_3)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_2 intP_intM_t_5_3 (pset_range
                                                              (pset_singleton
                                                              t) (+ m0 1) r))))
(not_assigns
intP_t_5_alloc_table intP_intM_t_5 intP_intM_t_5_3 (pset_range
                                                   (pset_singleton t) l_0 r))))))))))))))))))))))))))))))

;; quick_rec_ensures_permutation_po_1, File "HOME/tests/c/quick_sort.c", line 55, characters 14-37
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (>= l_0 r)
(EQ (Permut t l_0 r intP_intM_t_5 intP_intM_t_5) |@true|))))))))

;; quick_rec_ensures_permutation_po_2, File "HOME/tests/c/quick_sort.c", line 55, characters 14-37
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(FORALL (intP_intM_t_5_3)
(IMPLIES (AND
         (EQ (Permut t (+ m0 1) r intP_intM_t_5_3 intP_intM_t_5_2) |@true|)
         (AND (Sorted t (+ m0 1) (+ r 1) intP_intM_t_5_3)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_2 intP_intM_t_5_3 (pset_range
                                                              (pset_singleton
                                                              t) (+ m0 1) r))))
(EQ (Permut t l_0 r intP_intM_t_5_3 intP_intM_t_5) |@true|))))))))))))))))))))))))))))))

;; quick_rec_ensures_sorted_po_1, File "HOME/tests/c/quick_sort.c", line 53, characters 14-29
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (>= l_0 r) (Sorted t l_0 (+ r 1) intP_intM_t_5))))))))

;; quick_rec_ensures_sorted_po_2, File "HOME/tests/c/quick_sort.c", line 53, characters 14-29
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(FORALL (intP_intM_t_5_3)
(IMPLIES (AND
         (EQ (Permut t (+ m0 1) r intP_intM_t_5_3 intP_intM_t_5_2) |@true|)
         (AND (Sorted t (+ m0 1) (+ r 1) intP_intM_t_5_3)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_2 intP_intM_t_5_3 (pset_range
                                                              (pset_singleton
                                                              t) (+ m0 1) r))))
(Sorted t l_0 (+ r 1) intP_intM_t_5_3))))))))))))))))))))))))))))))

;; quick_rec_safety_po_1, File "HOME/tests/c/quick_sort.c", line 60, characters 6-10
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r) (<= l_0 (offset_max intP_t_5_alloc_table t))))))))

;; quick_rec_safety_po_2, File "HOME/tests/c/quick_sort.c", line 72, characters 8-12
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r) (<= (offset_min intP_t_5_alloc_table t) i_0_0)))))))))))))))))))))))

;; quick_rec_safety_po_3, File "HOME/tests/c/quick_sort.c", line 72, characters 8-12
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r) (<= i_0_0 (offset_max intP_t_5_alloc_table t))))))))))))))))))))))))

;; quick_rec_safety_po_4, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 159, characters 27-42
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1)) (>= (offset_max intP_t_5_alloc_table t) i_0_0)))))))))))))))))))))))))))))

;; quick_rec_safety_po_5, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 159, characters 27-42
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1)) (<= (offset_min intP_t_5_alloc_table t) m1)))))))))))))))))))))))))))))

;; quick_rec_safety_po_6, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 159, characters 27-42
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1)) (>= (offset_max intP_t_5_alloc_table t) m1)))))))))))))))))))))))))))))

;; quick_rec_safety_po_7, File "HOME/tests/c/quick_sort.c", line 69, characters 19-22
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) i_0_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m1)
         (>= (offset_max intP_t_5_alloc_table t) m1))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= 0 (- r i_0_0))))))))))))))))))))))))))))))))))))

;; quick_rec_safety_po_8, File "HOME/tests/c/quick_sort.c", line 69, characters 19-22
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (< result0 v)
(FORALL (m1)
(IMPLIES (EQ m1 (+ m0 1))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) i_0_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m1)
         (>= (offset_max intP_t_5_alloc_table t) m1))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t i_0_0 m1 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m1 m1) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) i_0_0 i_0_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (< (- r i_0_1) (- r i_0_0))))))))))))))))))))))))))))))))))))

;; quick_rec_safety_po_9, File "HOME/tests/c/quick_sort.c", line 69, characters 19-22
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (<= 0 (- r i_0_0))))))))))))))))))))))))))))))

;; quick_rec_safety_po_10, File "HOME/tests/c/quick_sort.c", line 69, characters 19-22
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (<= i_0_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) i_0_0)
         (<= i_0_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_5_0 (shift t i_0_0)))
(IMPLIES (>= result0 v)
(FORALL (i_0_1) (IMPLIES (EQ i_0_1 (+ i_0_0 1)) (< (- r i_0_1) (- r i_0_0))))))))))))))))))))))))))))))

;; quick_rec_safety_po_11, File "HOME/tests/c/quick_sort.c", line 79, characters 4-15
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(>= (offset_max intP_t_5_alloc_table t) l_0))))))))))))))))))))))))

;; quick_rec_safety_po_12, File "HOME/tests/c/quick_sort.c", line 79, characters 4-15
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(<= (offset_min intP_t_5_alloc_table t) m0))))))))))))))))))))))))

;; quick_rec_safety_po_13, File "HOME/tests/c/quick_sort.c", line 79, characters 4-15
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(>= (offset_max intP_t_5_alloc_table t) m0))))))))))))))))))))))))

;; quick_rec_safety_po_14, File "why/quick_sort.why", line 870, characters 14-106
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(<= 0 (- r l_0)))))))))))))))))))))))))))))

;; quick_rec_safety_po_15, File "why/quick_sort.why", line 870, characters 14-106
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(< (- (- m0 1) l_0) (- r l_0)))))))))))))))))))))))))))))

;; quick_rec_safety_po_16, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 183, characters 15-49
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(>= (offset_max intP_t_5_alloc_table t) (- m0 1)))))))))))))))))))))))))))))

;; quick_rec_safety_po_17, File "why/quick_sort.why", line 879, characters 14-106
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) (- m0 1)))
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(<= 0 (- r l_0))))))))))))))))))))))))))))))))

;; quick_rec_safety_po_18, File "why/quick_sort.why", line 879, characters 14-106
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) (- m0 1)))
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(< (- r (+ m0 1)) (- r l_0))))))))))))))))))))))))))))))))

;; quick_rec_safety_po_19, File "HOME/tests/c/quick_sort.jessie/quick_sort.jc", line 184, characters 15-49
(FORALL (t)
(FORALL (l_0)
(FORALL (r)
(FORALL (intP_t_5_alloc_table)
(FORALL (intP_intM_t_5)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) r))
(IMPLIES (< l_0 r)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (<= l_0 (offset_max intP_t_5_alloc_table t)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_5 (shift t l_0)))
(FORALL (v)
(IMPLIES (EQ v result)
(FORALL (m)
(IMPLIES (EQ m l_0)
(FORALL (i_0)
(IMPLIES (EQ i_0 (+ l_0 1))
(FORALL (i_0_0)
(FORALL (intP_intM_t_5_0)
(FORALL (m0)
(IMPLIES TRUE
(IMPLIES (AND
         (AND (EQ (select intP_intM_t_5_0 (shift t l_0)) v)
         (AND (<= l_0 m0) (AND (< m0 i_0_0) (<= i_0_0 (+ r 1)))))
         (AND (EQ (Permut t l_0 r intP_intM_t_5_0 intP_intM_t_5) |@true|)
         (AND
         (FORALL (j_4)
         (IMPLIES (AND (< m0 j_4) (< j_4 i_0_0))
         (>= (select intP_intM_t_5_0 (shift t j_4)) v)))
         (FORALL (j_3)
         (IMPLIES (AND (< l_0 j_3) (<= j_3 m0))
         (< (select intP_intM_t_5_0 (shift t j_3)) v))))))
(IMPLIES (> i_0_0 r)
(IMPLIES (AND (<= l_0 m0) (<= m0 r))
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (AND (>= (offset_max intP_t_5_alloc_table t) l_0)
         (AND (<= (offset_min intP_t_5_alloc_table t) m0)
         (>= (offset_max intP_t_5_alloc_table t) m0))))
(FORALL (intP_intM_t_5_1)
(IMPLIES (AND (Swap t l_0 m0 intP_intM_t_5_1 intP_intM_t_5_0)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_0 intP_intM_t_5_1 (pset_union
                                                              (pset_range
                                                              (pset_singleton
                                                              t) m0 m0) 
                                                              (pset_range
                                                              (pset_singleton
                                                              t) l_0 l_0))))
(IMPLIES (EQ (Permut t l_0 r intP_intM_t_5_1 intP_intM_t_5_0) |@true|)
(IMPLIES (AND (<= (offset_min intP_t_5_alloc_table t) l_0)
         (>= (offset_max intP_t_5_alloc_table t) (- m0 1)))
(FORALL (intP_intM_t_5_2)
(IMPLIES (AND
         (EQ (Permut t l_0 (- m0 1) intP_intM_t_5_2 intP_intM_t_5_1) |@true|)
         (AND (Sorted t l_0 (+ (- m0 1) 1) intP_intM_t_5_2)
         (not_assigns
         intP_t_5_alloc_table intP_intM_t_5_1 intP_intM_t_5_2 (pset_range
                                                              (pset_singleton
                                                              t) l_0 
                                                              (- m0 1)))))
(<= (offset_min intP_t_5_alloc_table t) (+ m0 1))))))))))))))))))))))))))))))))

;; quick_sort_ensures_sorted_po_1, File "HOME/tests/c/quick_sort.c", line 87, characters 14-27
(FORALL (t_0)
(FORALL (n_1)
(FORALL (intP_t_0_6_alloc_table)
(FORALL (intP_intM_t_0_6)
(IMPLIES (AND (<= (offset_min intP_t_0_6_alloc_table t_0) 0)
         (>= (offset_max intP_t_0_6_alloc_table t_0) (- n_1 1)))
(FORALL (intP_intM_t_0_6_0)
(IMPLIES (AND
         (EQ (Permut
         t_0 0 (- n_1 1) intP_intM_t_0_6_0 intP_intM_t_0_6) |@true|)
         (AND (Sorted t_0 0 (+ (- n_1 1) 1) intP_intM_t_0_6_0)
         (not_assigns
         intP_t_0_6_alloc_table intP_intM_t_0_6 intP_intM_t_0_6_0 (pset_range
                                                                  (pset_singleton
                                                                  t_0) 0 
                                                                  (- n_1 1)))))
(Sorted t_0 0 n_1 intP_intM_t_0_6_0))))))))

;; swap_ensures_default_po_1, File "HOME/tests/c/quick_sort.c", line 40, characters 12-33
(FORALL (t_1)
(FORALL (i)
(FORALL (j)
(FORALL (intP_t_1_4_alloc_table)
(FORALL (intP_intM_t_1_4)
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (AND (>= (offset_max intP_t_1_4_alloc_table t_1) i)
         (AND (<= (offset_min intP_t_1_4_alloc_table t_1) j)
         (>= (offset_max intP_t_1_4_alloc_table t_1) j))))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_1_4 (shift t_1 i)))
(FORALL (tmp)
(IMPLIES (EQ tmp result)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_1_4 (shift t_1 j)))
(FORALL (intP_intM_t_1_4_0)
(IMPLIES (EQ intP_intM_t_1_4_0
         (|why__store| intP_intM_t_1_4 (shift t_1 i) result0))
(FORALL (intP_intM_t_1_4_1)
(IMPLIES (EQ intP_intM_t_1_4_1
         (|why__store| intP_intM_t_1_4_0 (shift t_1 j) tmp))
(Swap t_1 i j intP_intM_t_1_4_1 intP_intM_t_1_4)))))))))))))))))

;; swap_ensures_default_po_2, File "HOME/tests/c/quick_sort.c", line 42, characters 5-9
(FORALL (t_1)
(FORALL (i)
(FORALL (j)
(FORALL (intP_t_1_4_alloc_table)
(FORALL (intP_intM_t_1_4)
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (AND (>= (offset_max intP_t_1_4_alloc_table t_1) i)
         (AND (<= (offset_min intP_t_1_4_alloc_table t_1) j)
         (>= (offset_max intP_t_1_4_alloc_table t_1) j))))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_1_4 (shift t_1 i)))
(FORALL (tmp)
(IMPLIES (EQ tmp result)
(FORALL (result0)
(IMPLIES (EQ result0 (select intP_intM_t_1_4 (shift t_1 j)))
(FORALL (intP_intM_t_1_4_0)
(IMPLIES (EQ intP_intM_t_1_4_0
         (|why__store| intP_intM_t_1_4 (shift t_1 i) result0))
(FORALL (intP_intM_t_1_4_1)
(IMPLIES (EQ intP_intM_t_1_4_1
         (|why__store| intP_intM_t_1_4_0 (shift t_1 j) tmp))
(not_assigns
intP_t_1_4_alloc_table intP_intM_t_1_4 intP_intM_t_1_4_1 (pset_union
                                                         (pset_range
                                                         (pset_singleton t_1) j j) 
                                                         (pset_range
                                                         (pset_singleton t_1) i i)))))))))))))))))))

;; swap_safety_po_1, File "HOME/tests/c/quick_sort.c", line 43, characters 12-16
(FORALL (t_1)
(FORALL (i)
(FORALL (j)
(FORALL (intP_t_1_4_alloc_table)
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (AND (>= (offset_max intP_t_1_4_alloc_table t_1) i)
         (AND (<= (offset_min intP_t_1_4_alloc_table t_1) j)
         (>= (offset_max intP_t_1_4_alloc_table t_1) j))))
(<= i (offset_max intP_t_1_4_alloc_table t_1)))))))

;; swap_safety_po_2, File "HOME/tests/c/quick_sort.c", line 44, characters 9-13
(FORALL (t_1)
(FORALL (i)
(FORALL (j)
(FORALL (intP_t_1_4_alloc_table)
(FORALL (intP_intM_t_1_4)
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (AND (>= (offset_max intP_t_1_4_alloc_table t_1) i)
         (AND (<= (offset_min intP_t_1_4_alloc_table t_1) j)
         (>= (offset_max intP_t_1_4_alloc_table t_1) j))))
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (<= i (offset_max intP_t_1_4_alloc_table t_1)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_1_4 (shift t_1 i)))
(FORALL (tmp)
(IMPLIES (EQ tmp result) (<= (offset_min intP_t_1_4_alloc_table t_1) j))))))))))))

;; swap_safety_po_3, File "HOME/tests/c/quick_sort.c", line 44, characters 9-13
(FORALL (t_1)
(FORALL (i)
(FORALL (j)
(FORALL (intP_t_1_4_alloc_table)
(FORALL (intP_intM_t_1_4)
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (AND (>= (offset_max intP_t_1_4_alloc_table t_1) i)
         (AND (<= (offset_min intP_t_1_4_alloc_table t_1) j)
         (>= (offset_max intP_t_1_4_alloc_table t_1) j))))
(IMPLIES (AND (<= (offset_min intP_t_1_4_alloc_table t_1) i)
         (<= i (offset_max intP_t_1_4_alloc_table t_1)))
(FORALL (result)
(IMPLIES (EQ result (select intP_intM_t_1_4 (shift t_1 i)))
(FORALL (tmp)
(IMPLIES (EQ tmp result) (<= j (offset_max intP_t_1_4_alloc_table t_1)))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/quick_sort_why.sx    : ..............................?.#......................... (56/0/1/1/0)
total   :  58
valid   :  56 ( 97%)
invalid :   0 (  0%)
unknown :   1 (  2%)
timeout :   1 (  2%)
failure :   0 (  0%)
