========== file tests/c/binary_search.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/

// RUNSIMPLIFY this tells regtests to run Simplify in this example

//@ lemma mean: \forall integer x, y; x <= y ==> x <= (x+y)/2 <= y;

/*@ predicate sorted{L}(long *t, integer a, integer b) =
  @    \forall integer i,j; a <= i <= j <= b ==> t[i] <= t[j];
  @*/

/*@ requires n >= 0 && \valid_range(t,0,n-1);
  @ ensures -1 <= \result < n;
  @ behavior success:
  @   ensures \result >= 0 ==> t[\result] == v;
  @ behavior failure:
  @   assumes sorted(t,0,n-1);
  @   ensures \result == -1 ==>
  @     \forall integer k; 0 <= k < n ==> t[k] != v;
  @*/
int binary_search(long t[], int n, long v) {
  int l = 0, u = n-1;
  /*@ loop invariant
    @   0 <= l && u <= n-1;
    @ for failure:
    @   loop invariant
    @   \forall integer k; 0 <= k < n && t[k] == v ==> l <= k <= u;
    @ loop variant u-l;
    @*/
  while (l <= u ) {
    int m = (l + u) / 2;
    //@ assert l <= m <= u;
    if (t[m] < v) l = m + 1;
    else if (t[m] > v) u = m - 1;
    else return m;
  }
  return -1;
}

/*
Local Variables:
compile-command: "make binary_search.why3ml"
End:
*/
========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/binary_search.c"
[jessie] Starting Jessie translation
[jessie] Producing Jessie files in subdir tests/c/binary_search.jessie
[jessie] File tests/c/binary_search.jessie/binary_search.jc written.
[jessie] File tests/c/binary_search.jessie/binary_search.cloc written.
========== file tests/c/binary_search.jessie/binary_search.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol

axiomatic Padding {

  logic type padding
  
}

type int32 = -2147483648..2147483647

type int8 = -128..127

tag longP = {
  int32 longM: 32;
}

type longP = [longP]

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

lemma mean :
(\forall integer x;
  (\forall integer y;
    ((x <= y) ==> ((x <= ((x + y) / 2)) && (((x + y) / 2) <= y)))))

predicate sorted{L}(longP[..] t, integer a, integer b) =
(\forall integer i;
  (\forall integer j;
    (((a <= i) && ((i <= j) && (j <= b))) ==>
      ((t + i).longM <= (t + j).longM))))

int32 binary_search(longP[..] t, int32 n, int32 v)
  requires (C_35 : ((C_36 : (n >= 0)) &&
                     ((C_38 : (\offset_min(t) <= 0)) &&
                       (C_39 : (\offset_max(t) >= (n - 1))))));
behavior default:
  ensures (C_30 : ((C_31 : ((- 1) <= \result)) &&
                    (C_32 : (\result < \at(n,Old)))));
behavior success:
  ensures (C_33 : ((\result >= 0) ==>
                    ((\at(t,Old) + \result).longM == \at(v,Old))));
behavior failure:
  assumes sorted{Here}(t, 0, (n - 1));
  ensures (C_34 : ((\result == (- 1)) ==>
                    (\forall integer k_0;
                      (((0 <= k_0) && (k_0 < \at(n,Old))) ==>
                        ((\at(t,Old) + k_0).longM != \at(v,Old))))));
{  
   (var int32 l);
   
   (var int32 u);
   
   (var int32 m);
   
   (var int32 __retres);
   
   {  (C_1 : (l = 0));
      (C_4 : (u = (C_3 : ((C_2 : (n - 1)) :> int32))));
      
      loop 
      behavior default:
        invariant (C_7 : ((C_8 : (0 <= l)) && (C_9 : (u <= (n - 1)))));
      behavior failure:
        invariant (C_6 : (\forall integer k;
                           ((((0 <= k) && (k < n)) && ((t + k).longM == v)) ==>
                             ((l <= k) && (k <= u)))));
      variant (C_5 : (u - l));
      while (true)
      {  
         {  (if (l <= u) then () else 
            (goto while_0_break));
            
            {  (C_14 : (m = (C_13 : ((C_12 : ((C_11 : ((C_10 : (l + u)) :> int32)) /
                                               2)) :> int32))));
               
               {  
                  (assert for default: (C_15 : ((C_16 : (l <= m)) &&
                                                 (C_17 : (m <= u)))));
                  ()
               };
               
               {  (if ((C_28 : (C_27 : (t + m)).longM) < v) then (C_26 : (l = 
                                                                 (C_25 : (
                                                                 (C_24 : 
                                                                 (m +
                                                                   1)) :> int32)))) else 
                  (if ((C_23 : (C_22 : (t + m)).longM) > v) then (C_21 : (u = 
                                                                 (C_20 : (
                                                                 (C_19 : 
                                                                 (m -
                                                                   1)) :> int32)))) else 
                  {  (C_18 : (__retres = m));
                     
                     (goto return_label)
                  }))
               }
            }
         }
      };
      (while_0_break : ());
      (C_29 : (__retres = -1));
      (return_label : 
      (return __retres))
   }
}
========== file tests/c/binary_search.jessie/binary_search.cloc ==========
[C_10]
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 13
end = 18

[C_11]
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 13
end = 18

[C_12]
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[C_13]
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[C_14]
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 4
end = 7

[C_15]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 26

[C_16]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 21

[C_17]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 20
end = 26

[C_18]
file = "HOME/tests/c/binary_search.c"
line = 63
begin = 9
end = 18

[C_19]
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 27
end = 32

[C_1]
file = "HOME/tests/c/binary_search.c"
line = 50
begin = 2
end = 5

[C_2]
file = "HOME/tests/c/binary_search.c"
line = 50
begin = 17
end = 20

[C_3]
file = "HOME/tests/c/binary_search.c"
line = 50
begin = 17
end = 20

[C_4]
file = "HOME/tests/c/binary_search.c"
line = 50
begin = 2
end = 5

[binary_search]
name = "Function binary_search"
file = "HOME/tests/c/binary_search.c"
line = 49
begin = 4
end = 17

[C_20]
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 27
end = 32

[C_5]
file = "HOME/tests/c/binary_search.c"
line = 56
begin = 19
end = 22

[C_21]
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 27
end = 32

[C_6]
file = "HOME/tests/c/binary_search.c"
line = 55
begin = 8
end = 66

[C_22]
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 13
end = 14

[C_7]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 26

[C_23]
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 13
end = 17

[C_8]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 14

[C_24]
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 22
end = 27

[C_9]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 18
end = 26

[C_25]
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 22
end = 27

[mean]
name = "Lemma mean"
file = "HOME/tests/c/binary_search.c"
line = 34
begin = 4
end = 67

[C_26]
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 22
end = 27

[C_27]
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 8
end = 9

[C_28]
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 8
end = 12

[C_29]
file = "HOME/tests/c/binary_search.c"
line = 65
begin = 2
end = 12

[C_30]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 29

[C_31]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 25

[C_32]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 18
end = 29

[C_33]
file = "HOME/tests/c/binary_search.c"
line = 43
begin = 14
end = 46

[C_34]
file = "HOME/tests/c/binary_search.c"
line = 46
begin = 14
end = 83

[C_35]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 44

[C_36]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 19

[C_37]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[C_38]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[C_39]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

========== jessie execution ==========
Generating Why function binary_search
========== file tests/c/binary_search.jessie/binary_search.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs binary_search.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs binary_search.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why
JESSIE3LIB ?=$(WHYLIB)/why3

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/binary_search_why.sx

project: why/binary_search.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/binary_search_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/binary_search_why.vo

coq/binary_search_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/binary_search_why.v: why/binary_search.why
	@echo 'why -coq [...] why/binary_search.why' && $(WHY) $(JESSIELIBFILES) why/binary_search.why && rm -f coq/jessie_why.v

coq-goals: goals coq/binary_search_ctx_why.vo
	for f in why/*_po*.why; do make -f binary_search.makefile coq/`basename $$f .why`_why.v ; done

coq/binary_search_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/binary_search_ctx_why.v: why/binary_search_ctx.why
	@echo 'why -coq [...] why/binary_search_ctx.why' && $(WHY) why/binary_search_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export binary_search_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/binary_search_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/binary_search_ctx_why.vo

pvs: pvs/binary_search_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/binary_search_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/binary_search_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/binary_search_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/binary_search_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/binary_search_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/binary_search_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/binary_search_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/binary_search_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/binary_search_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/binary_search_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/binary_search_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/binary_search_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/binary_search_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/binary_search_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: binary_search.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/binary_search_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/binary_search_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: binary_search.mlw
	@echo 'why3ml [...] $<' && why3ide -I $(JESSIE3LIB) $<

-include binary_search.depend

depend: coq/binary_search_why.v
	-$(COQDEP) -I coq coq/binary_search*_why.v > binary_search.depend

clean:
	rm -f coq/*.vo

========== file tests/c/binary_search.jessie/binary_search.loc ==========
[binary_search_safety]
name = "Function binary_search"
behavior = "Safety"
file = "HOME/tests/c/binary_search.c"
line = 49
begin = 4
end = 17

[JC_40]
file = "HOME/tests/c/binary_search.c"
line = 56
begin = 19
end = 22

[JC_41]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 14

[JC_42]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 18
end = 26

[JC_43]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 26

[JC_44]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_45]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_46]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_1]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 19

[JC_47]
kind = DivByZero
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[JC_2]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[JC_48]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 21

[JC_3]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[JC_49]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 20
end = 26

[JC_4]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 44

[JC_5]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_6]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 19

[JC_7]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[JC_8]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 23
end = 44

[JC_9]
file = "HOME/tests/c/binary_search.c"
line = 40
begin = 13
end = 44

[JC_50]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 26

[binary_search_ensures_failure]
name = "Function binary_search"
behavior = "Behavior `failure'"
file = "HOME/tests/c/binary_search.c"
line = 49
begin = 4
end = 17

[JC_51]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 14

[JC_52]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 18
end = 26

[JC_53]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 26

[JC_54]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_55]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_56]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_57]
kind = DivByZero
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[JC_58]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 21

[JC_59]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 20
end = 26

[JC_60]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 26

[JC_61]
file = "HOME/tests/c/binary_search.c"
line = 55
begin = 8
end = 66

[JC_62]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 14

[JC_10]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_63]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 18
end = 26

[JC_11]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 25

[JC_64]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 26

[JC_12]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 18
end = 29

[JC_65]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_13]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 29

[JC_66]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[binary_search_ensures_success]
name = "Function binary_search"
behavior = "Behavior `success'"
file = "HOME/tests/c/binary_search.c"
line = 49
begin = 4
end = 17

[JC_14]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 25

[JC_67]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_15]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 18
end = 29

[JC_68]
kind = DivByZero
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[JC_16]
file = "HOME/tests/c/binary_search.c"
line = 41
begin = 12
end = 29

[JC_69]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 21

[JC_17]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/binary_search.c"
line = 43
begin = 14
end = 46

[mean]
name = "Lemma mean"
behavior = "lemma"
file = "HOME/tests/c/binary_search.c"
line = 34
begin = 4
end = 67

[JC_70]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 20
end = 26

[JC_71]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 26

[JC_20]
file = "HOME/tests/c/binary_search.c"
line = 43
begin = 14
end = 46

[JC_21]
file = "HOME/tests/c/binary_search.c"
line = 46
begin = 14
end = 83

[JC_22]
file = "HOME/tests/c/binary_search.c"
line = 46
begin = 14
end = 83

[JC_23]
kind = ArithOverflow
file = "HOME/tests/c/binary_search.c"
line = 50
begin = 17
end = 20

[JC_24]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 14

[JC_25]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 18
end = 26

[JC_26]
file = "HOME/tests/c/binary_search.c"
line = 52
begin = 8
end = 26

[JC_27]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_28]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_29]
file = "HOME/tests/c/binary_search.jessie/binary_search.jc"
line = 73
begin = 6
end = 1796

[JC_30]
kind = ArithOverflow
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 13
end = 18

[JC_31]
kind = DivByZero
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[binary_search_ensures_default]
name = "Function binary_search"
behavior = "default behavior"
file = "HOME/tests/c/binary_search.c"
line = 49
begin = 4
end = 17

[JC_32]
kind = ArithOverflow
file = "HOME/tests/c/binary_search.c"
line = 59
begin = 12
end = 23

[JC_33]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 21

[JC_34]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 20
end = 26

[JC_35]
file = "HOME/tests/c/binary_search.c"
line = 60
begin = 15
end = 26

[JC_36]
kind = PointerDeref
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 8
end = 12

[JC_37]
kind = ArithOverflow
file = "HOME/tests/c/binary_search.c"
line = 61
begin = 22
end = 27

[JC_38]
kind = PointerDeref
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 13
end = 17

[JC_39]
kind = ArithOverflow
file = "HOME/tests/c/binary_search.c"
line = 62
begin = 27
end = 32

========== file tests/c/binary_search.jessie/why/binary_search.why ==========
type charP

type int32

type int8

type longP

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32, y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_extensionality :
 (forall x:int32.
  (forall y:int32.
   (eq_int(integer_of_int32(x), integer_of_int32(y)) -> (x = y))))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8.
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_longP(p:longP pointer, a:int,
 longP_alloc_table:longP alloc_table) =
 (offset_min(longP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

logic longP_tag:  -> longP tag_id

axiom longP_int : (int_of_tag(longP_tag) = (1))

logic longP_of_pointer_address: unit pointer -> longP pointer

axiom longP_of_pointer_address_of_pointer_addr :
 (forall p:longP pointer. (p = longP_of_pointer_address(pointer_address(p))))

axiom longP_parenttag_bottom : parenttag(longP_tag, bottom_tag)

axiom longP_tags :
 (forall x:longP pointer.
  (forall longP_tag_table:longP tag_table.
   instanceof(longP_tag_table, x, longP_tag)))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_longP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(longP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_longP(p:longP pointer, b:int,
 longP_alloc_table:longP alloc_table) =
 (offset_max(longP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate sorted(t:longP pointer, a:int, b:int,
 longP_longM_t_1_at_L:(longP, int32) memory) =
 (forall i:int.
  (forall j:int.
   ((le_int(a, i) and (le_int(i, j) and le_int(j, b))) ->
    le_int(integer_of_int32(select(longP_longM_t_1_at_L, shift(t, i))),
    integer_of_int32(select(longP_longM_t_1_at_L, shift(t, j)))))))

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_longP(p:longP pointer, a:int, b:int,
 longP_alloc_table:longP alloc_table) =
 ((offset_min(longP_alloc_table, p) = a)
 and (offset_max(longP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_longP(p:longP pointer, a:int, b:int,
 longP_alloc_table:longP alloc_table) =
 ((offset_min(longP_alloc_table, p) = a)
 and (offset_max(longP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_longP(p:longP pointer, a:int, b:int,
 longP_alloc_table:longP alloc_table) =
 ((offset_min(longP_alloc_table, p) <= a)
 and (offset_max(longP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_longP(p:longP pointer, a:int, b:int,
 longP_alloc_table:longP alloc_table) =
 ((offset_min(longP_alloc_table, p) <= a)
 and (offset_max(longP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

lemma mean :
 (forall x_0:int.
  (forall y:int.
   (le_int(x_0, y) ->
    (le_int(x_0, computer_div(add_int(x_0, y), (2)))
    and le_int(computer_div(add_int(x_0, y), (2)), y)))))

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter longP_alloc_table : longP alloc_table ref

parameter longP_tag_table : longP tag_table ref

parameter alloc_struct_longP :
 n:int ->
  longP_alloc_table:longP alloc_table ref ->
   longP_tag_table:longP tag_table ref ->
    { } longP pointer writes longP_alloc_table,longP_tag_table
    { (strict_valid_struct_longP(result, (0), sub_int(n, (1)),
       longP_alloc_table)
      and (alloc_extends(longP_alloc_table@, longP_alloc_table)
          and (alloc_fresh(longP_alloc_table@, result, n)
              and instanceof(longP_tag_table, result, longP_tag)))) }

parameter alloc_struct_longP_requires :
 n:int ->
  longP_alloc_table:longP alloc_table ref ->
   longP_tag_table:longP tag_table ref ->
    { ge_int(n, (0))} longP pointer writes longP_alloc_table,longP_tag_table
    { (strict_valid_struct_longP(result, (0), sub_int(n, (1)),
       longP_alloc_table)
      and (alloc_extends(longP_alloc_table@, longP_alloc_table)
          and (alloc_fresh(longP_alloc_table@, result, n)
              and instanceof(longP_tag_table, result, longP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter binary_search :
 t_0:longP pointer ->
  n:int32 ->
   v:int32 ->
    longP_t_2_alloc_table:longP alloc_table ->
     longP_longM_t_2:(longP, int32) memory ->
      { } int32
      { ((sorted(t_0, (0), sub_int(integer_of_int32(n), (1)),
          longP_longM_t_2) ->
          (JC_22:
          ((integer_of_int32(result) = neg_int((1))) ->
           (forall k_0:int.
            ((le_int((0), k_0) and lt_int(k_0, integer_of_int32(n))) ->
             (integer_of_int32(select(longP_longM_t_2, shift(t_0, k_0))) <> 
             integer_of_int32(v)))))))
        and ((JC_20:
             (ge_int(integer_of_int32(result), (0)) ->
              (integer_of_int32(select(longP_longM_t_2,
                                shift(t_0, integer_of_int32(result)))) = 
              integer_of_int32(v))))
            and (JC_16:
                ((JC_14: le_int(neg_int((1)), integer_of_int32(result)))
                and (JC_15:
                    lt_int(integer_of_int32(result), integer_of_int32(n))))))) }

parameter binary_search_requires :
 t_0:longP pointer ->
  n:int32 ->
   v:int32 ->
    longP_t_2_alloc_table:longP alloc_table ->
     longP_longM_t_2:(longP, int32) memory ->
      { (JC_4:
        ((JC_1: ge_int(integer_of_int32(n), (0)))
        and ((JC_2: le_int(offset_min(longP_t_2_alloc_table, t_0), (0)))
            and (JC_3:
                ge_int(offset_max(longP_t_2_alloc_table, t_0),
                sub_int(integer_of_int32(n), (1)))))))}
      int32
      { ((sorted(t_0, (0), sub_int(integer_of_int32(n), (1)),
          longP_longM_t_2) ->
          (JC_22:
          ((integer_of_int32(result) = neg_int((1))) ->
           (forall k_0:int.
            ((le_int((0), k_0) and lt_int(k_0, integer_of_int32(n))) ->
             (integer_of_int32(select(longP_longM_t_2, shift(t_0, k_0))) <> 
             integer_of_int32(v)))))))
        and ((JC_20:
             (ge_int(integer_of_int32(result), (0)) ->
              (integer_of_int32(select(longP_longM_t_2,
                                shift(t_0, integer_of_int32(result)))) = 
              integer_of_int32(v))))
            and (JC_16:
                ((JC_14: le_int(neg_int((1)), integer_of_int32(result)))
                and (JC_15:
                    lt_int(integer_of_int32(result), integer_of_int32(n))))))) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

let binary_search_ensures_default =
 fun (t_0 : longP pointer) (n : int32) (v : int32) (longP_t_2_alloc_table : longP alloc_table) (longP_longM_t_2 : (longP, int32) memory) ->
  { (JC_9:
    ((JC_6: ge_int(integer_of_int32(n), (0)))
    and ((JC_7: le_int(offset_min(longP_t_2_alloc_table, t_0), (0)))
        and (JC_8:
            ge_int(offset_max(longP_t_2_alloc_table, t_0),
            sub_int(integer_of_int32(n), (1))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_2:
          while true do
          { invariant
              (JC_43:
              ((JC_41: le_int((0), integer_of_int32(l)))
              and (JC_42:
                  le_int(integer_of_int32(u),
                  sub_int(integer_of_int32(n), (1))))))  }
           begin
             [ { } unit { true } ];
            try
             (C_14:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<num> =
              (m := (C_13:
                    (safe_int32_of_integer_ (C_12:
                                            (JC_47:
                                            ((computer_div (integer_of_int32 
                                                            (C_11:
                                                            (safe_int32_of_integer_ 
                                                             (C_10:
                                                             ((add_int 
                                                               (integer_of_int32 !l)) 
                                                              (integer_of_int32 !u))))))) (2))))))) in
              void);
              (assert
              { (JC_50:
                ((JC_48: le_int(integer_of_int32(l), integer_of_int32(m)))
                and (JC_49: le_int(integer_of_int32(m), integer_of_int32(u))))) };
              void); void;
              (if ((lt_int_ (integer_of_int32 (C_28:
                                              ((safe_acc_ longP_longM_t_2) 
                                               (C_27:
                                               ((shift t_0) (integer_of_int32 !m))))))) 
                   (integer_of_int32 v))
              then
               (let jessie_<num> =
               (C_26:
               (l := (C_25:
                     (safe_int32_of_integer_ (C_24:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_int_ (integer_of_int32 (C_23:
                                               ((safe_acc_ longP_longM_t_2) 
                                                (C_22:
                                                ((shift t_0) (integer_of_int32 !m))))))) 
                    (integer_of_int32 v))
               then
                (let jessie_<num> =
                (C_21:
                (u := (C_20:
                      (safe_int32_of_integer_ (C_19:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (C_18:
                begin
                  (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end)));
              (raise (Loop_continue_exc void)) end) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_29:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_13:
    ((JC_11: le_int(neg_int((1)), integer_of_int32(result)))
    and (JC_12: lt_int(integer_of_int32(result), integer_of_int32(n))))) }

let binary_search_ensures_failure =
 fun (t_0 : longP pointer) (n : int32) (v : int32) (longP_t_2_alloc_table : longP alloc_table) (longP_longM_t_2 : (longP, int32) memory) ->
  { (sorted(t_0, (0), sub_int(integer_of_int32(n), (1)), longP_longM_t_2)
    and (JC_9:
        ((JC_6: ge_int(integer_of_int32(n), (0)))
        and ((JC_7: le_int(offset_min(longP_t_2_alloc_table, t_0), (0)))
            and (JC_8:
                ge_int(offset_max(longP_t_2_alloc_table, t_0),
                sub_int(integer_of_int32(n), (1)))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_4:
          while true do
          { invariant
              (JC_61:
              (forall k:int.
               ((le_int((0), k)
                and (lt_int(k, integer_of_int32(n))
                    and (integer_of_int32(select(longP_longM_t_2,
                                          shift(t_0, k))) = integer_of_int32(v)))) ->
                (le_int(integer_of_int32(l), k)
                and le_int(k, integer_of_int32(u))))))  }
           begin
             [ { } unit reads l,u
               { (JC_64:
                 ((JC_62: le_int((0), integer_of_int32(l)))
                 and (JC_63:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (C_14:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<num> =
              (m := (C_13:
                    (safe_int32_of_integer_ (C_12:
                                            (JC_68:
                                            ((computer_div (integer_of_int32 
                                                            (C_11:
                                                            (safe_int32_of_integer_ 
                                                             (C_10:
                                                             ((add_int 
                                                               (integer_of_int32 !l)) 
                                                              (integer_of_int32 !u))))))) (2))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_71:
                  ((JC_69: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_70:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_int_ (integer_of_int32 (C_28:
                                              ((safe_acc_ longP_longM_t_2) 
                                               (C_27:
                                               ((shift t_0) (integer_of_int32 !m))))))) 
                   (integer_of_int32 v))
              then
               (let jessie_<num> =
               (C_26:
               (l := (C_25:
                     (safe_int32_of_integer_ (C_24:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_int_ (integer_of_int32 (C_23:
                                               ((safe_acc_ longP_longM_t_2) 
                                                (C_22:
                                                ((shift t_0) (integer_of_int32 !m))))))) 
                    (integer_of_int32 v))
               then
                (let jessie_<num> =
                (C_21:
                (u := (C_20:
                      (safe_int32_of_integer_ (C_19:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (C_18:
                begin
                  (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end)));
              (raise (Loop_continue_exc void)) end) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_29:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_21:
    ((integer_of_int32(result) = neg_int((1))) ->
     (forall k_0:int.
      ((le_int((0), k_0) and lt_int(k_0, integer_of_int32(n))) ->
       (integer_of_int32(select(longP_longM_t_2, shift(t_0, k_0))) <> 
       integer_of_int32(v)))))) }

let binary_search_ensures_success =
 fun (t_0 : longP pointer) (n : int32) (v : int32) (longP_t_2_alloc_table : longP alloc_table) (longP_longM_t_2 : (longP, int32) memory) ->
  { (JC_9:
    ((JC_6: ge_int(integer_of_int32(n), (0)))
    and ((JC_7: le_int(offset_min(longP_t_2_alloc_table, t_0), (0)))
        and (JC_8:
            ge_int(offset_max(longP_t_2_alloc_table, t_0),
            sub_int(integer_of_int32(n), (1))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (safe_int32_of_integer_ (C_2:
                                        ((sub_int (integer_of_int32 n)) (1)))))) in
          void);
          (loop_3:
          while true do
          { invariant (JC_55: true)  }
           begin
             [ { } unit reads l,u
               { (JC_53:
                 ((JC_51: le_int((0), integer_of_int32(l)))
                 and (JC_52:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (C_14:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<num> =
              (m := (C_13:
                    (safe_int32_of_integer_ (C_12:
                                            (JC_57:
                                            ((computer_div (integer_of_int32 
                                                            (C_11:
                                                            (safe_int32_of_integer_ 
                                                             (C_10:
                                                             ((add_int 
                                                               (integer_of_int32 !l)) 
                                                              (integer_of_int32 !u))))))) (2))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_60:
                  ((JC_58: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_59:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_int_ (integer_of_int32 (C_28:
                                              ((safe_acc_ longP_longM_t_2) 
                                               (C_27:
                                               ((shift t_0) (integer_of_int32 !m))))))) 
                   (integer_of_int32 v))
              then
               (let jessie_<num> =
               (C_26:
               (l := (C_25:
                     (safe_int32_of_integer_ (C_24:
                                             ((add_int (integer_of_int32 !m)) (1))))))) in
               void)
              else
               (if ((gt_int_ (integer_of_int32 (C_23:
                                               ((safe_acc_ longP_longM_t_2) 
                                                (C_22:
                                                ((shift t_0) (integer_of_int32 !m))))))) 
                    (integer_of_int32 v))
               then
                (let jessie_<num> =
                (C_21:
                (u := (C_20:
                      (safe_int32_of_integer_ (C_19:
                                              ((sub_int (integer_of_int32 !m)) (1))))))) in
                void)
               else
                (C_18:
                begin
                  (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end)));
              (raise (Loop_continue_exc void)) end) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_29:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end))
  { (JC_19:
    (ge_int(integer_of_int32(result), (0)) ->
     (integer_of_int32(select(longP_longM_t_2,
                       shift(t_0, integer_of_int32(result)))) = integer_of_int32(v)))) }

let binary_search_safety =
 fun (t_0 : longP pointer) (n : int32) (v : int32) (longP_t_2_alloc_table : longP alloc_table) (longP_longM_t_2 : (longP, int32) memory) ->
  { (JC_9:
    ((JC_6: ge_int(integer_of_int32(n), (0)))
    and ((JC_7: le_int(offset_min(longP_t_2_alloc_table, t_0), (0)))
        and (JC_8:
            ge_int(offset_max(longP_t_2_alloc_table, t_0),
            sub_int(integer_of_int32(n), (1))))))) }
  (init:
  (let return = ref (any_int32 void) in
  try
   begin
     (let l = ref (any_int32 void) in
     (let u = ref (any_int32 void) in
     (let m = ref (any_int32 void) in
     (let __retres = ref (any_int32 void) in
     try
      begin
        try
         (C_1:
         (C_4:
         begin
           (let jessie_<num> = (l := (safe_int32_of_integer_ (0))) in void);
          (let jessie_<num> =
          (u := (C_3:
                (JC_23:
                (int32_of_integer_ (C_2:
                                   ((sub_int (integer_of_int32 n)) (1))))))) in
          void);
          (loop_1:
          while true do
          { invariant (JC_28: true)
            variant (JC_40 : sub_int(integer_of_int32(u),
                             integer_of_int32(l))) }
           begin
             [ { } unit reads l,u
               { (JC_26:
                 ((JC_24: le_int((0), integer_of_int32(l)))
                 and (JC_25:
                     le_int(integer_of_int32(u),
                     sub_int(integer_of_int32(n), (1)))))) } ];
            try
             (C_14:
             begin
               (if ((le_int_ (integer_of_int32 !l)) (integer_of_int32 !u))
               then void else (raise (Goto_while_0_break_exc void)));
              (let jessie_<num> =
              (m := (C_13:
                    (JC_32:
                    (int32_of_integer_ (C_12:
                                       (JC_31:
                                       ((computer_div_ (integer_of_int32 
                                                        (C_11:
                                                        (JC_30:
                                                        (int32_of_integer_ 
                                                         (C_10:
                                                         ((add_int (integer_of_int32 !l)) 
                                                          (integer_of_int32 !u)))))))) (2)))))))) in
              void);
              [ { } unit reads l,m,u
                { (JC_35:
                  ((JC_33: le_int(integer_of_int32(l), integer_of_int32(m)))
                  and (JC_34:
                      le_int(integer_of_int32(m), integer_of_int32(u))))) } ];
              void;
              (if ((lt_int_ (integer_of_int32 (C_28:
                                              (JC_36:
                                              ((((offset_acc_ longP_t_2_alloc_table) longP_longM_t_2) t_0) 
                                               (integer_of_int32 !m)))))) 
                   (integer_of_int32 v))
              then
               (let jessie_<num> =
               (C_26:
               (l := (C_25:
                     (JC_37:
                     (int32_of_integer_ (C_24:
                                        ((add_int (integer_of_int32 !m)) (1)))))))) in
               void)
              else
               (if ((gt_int_ (integer_of_int32 (C_23:
                                               (JC_38:
                                               ((((offset_acc_ longP_t_2_alloc_table) longP_longM_t_2) t_0) 
                                                (integer_of_int32 !m)))))) 
                    (integer_of_int32 v))
               then
                (let jessie_<num> =
                (C_21:
                (u := (C_20:
                      (JC_39:
                      (int32_of_integer_ (C_19:
                                         ((sub_int (integer_of_int32 !m)) (1)))))))) in
                void)
               else
                (C_18:
                begin
                  (let jessie_<num> = (__retres := !m) in void);
                 (raise (Return_label_exc void)) end)));
              (raise (Loop_continue_exc void)) end) with
             Loop_continue_exc jessie_<num> -> void end end done);
          (raise (Goto_while_0_break_exc void)) end)) with
         Goto_while_0_break_exc jessie_<num> ->
         (let jessie_<num> =
         (while_0_break:
         (C_29:
         begin
           void; (__retres := (safe_int32_of_integer_ (neg_int (1))));
          !__retres end)) in void) end; (raise (Return_label_exc void)) end
      with Return_label_exc jessie_<num> ->
      (return_label: begin   (return := !__retres); (raise Return) end) end))));
    absurd  end with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/binary_search.why
========== file tests/c/binary_search.jessie/why/binary_search_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s2) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s3))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type charP

type int32

type int8

type longP

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

logic integer_of_int32 : int32 -> int

predicate eq_int32(x: int32, y: int32) =
  (integer_of_int32(x) = integer_of_int32(y))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int32_of_integer : int -> int32

axiom int32_coerce:
  (forall x:int.
    ((((-2147483648) <= x) and (x <= 2147483647)) ->
     (integer_of_int32(int32_of_integer(x)) = x)))

axiom int32_extensionality:
  (forall x:int32.
    (forall y:int32.
      ((integer_of_int32(x) = integer_of_int32(y)) -> (x = y))))

axiom int32_range:
  (forall x:int32.
    (((-2147483648) <= integer_of_int32(x)) and
     (integer_of_int32(x) <= 2147483647)))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_longP(p: longP pointer, a: int,
  longP_alloc_table: longP alloc_table) = (offset_min(longP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

logic longP_tag : longP tag_id

axiom longP_int: (int_of_tag(longP_tag) = 1)

logic longP_of_pointer_address : unit pointer -> longP pointer

axiom longP_of_pointer_address_of_pointer_addr:
  (forall p:longP pointer.
    (p = longP_of_pointer_address(pointer_address(p))))

axiom longP_parenttag_bottom: parenttag(longP_tag, bottom_tag)

axiom longP_tags:
  (forall x:longP pointer.
    (forall longP_tag_table:longP tag_table. instanceof(longP_tag_table, x,
      longP_tag)))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

axiom pointer_addr_of_longP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(longP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_longP(p: longP pointer, b: int,
  longP_alloc_table: longP alloc_table) = (offset_max(longP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate sorted(t: longP pointer, a: int, b: int,
  longP_longM_t_1_at_L: (longP, int32) memory) =
  (forall i:int.
    (forall j:int.
      (((a <= i) and ((i <= j) and (j <= b))) ->
       (integer_of_int32(select(longP_longM_t_1_at_L, shift(t,
       i))) <= integer_of_int32(select(longP_longM_t_1_at_L, shift(t, j)))))))

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_longP(p: longP pointer, a: int, b: int,
  longP_alloc_table: longP alloc_table) =
  ((offset_min(longP_alloc_table, p) = a) and (offset_max(longP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_longP(p: longP pointer, a: int, b: int,
  longP_alloc_table: longP alloc_table) =
  ((offset_min(longP_alloc_table, p) = a) and (offset_max(longP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_longP(p: longP pointer, a: int, b: int,
  longP_alloc_table: longP alloc_table) =
  ((offset_min(longP_alloc_table, p) <= a) and (offset_max(longP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_longP(p: longP pointer, a: int, b: int,
  longP_alloc_table: longP alloc_table) =
  ((offset_min(longP_alloc_table, p) <= a) and (offset_max(longP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal mean:
  (forall x_0:int.
    (forall y:int.
      ((x_0 <= y) ->
       ((x_0 <= computer_div((x_0 + y), 2)) and (computer_div((x_0 + y),
        2) <= y)))))

axiom mean_as_axiom:
  (forall x_0:int.
    (forall y:int.
      ((x_0 <= y) ->
       ((x_0 <= computer_div((x_0 + y), 2)) and (computer_div((x_0 + y),
        2) <= y)))))

goal binary_search_ensures_default_po_1:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_43": ("JC_41": (0 <= integer_of_int32(l))))

goal binary_search_ensures_default_po_2:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  ("JC_43": ("JC_42": (integer_of_int32(u) <= (integer_of_int32(n) - 1))))

goal binary_search_ensures_default_po_3:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50": ("JC_48": (integer_of_int32(l0) <= integer_of_int32(m))))

goal binary_search_ensures_default_po_4:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50": ("JC_49": (integer_of_int32(m) <= integer_of_int32(u0))))

goal binary_search_ensures_default_po_5:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50":
  (("JC_48": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_49": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) < integer_of_int32(v)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result4) ->
  ("JC_43": ("JC_41": (0 <= integer_of_int32(l1))))

goal binary_search_ensures_default_po_6:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50":
  (("JC_48": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_49": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) > integer_of_int32(v)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result5) ->
  ("JC_43": ("JC_42": (integer_of_int32(u1) <= (integer_of_int32(n) - 1))))

goal binary_search_ensures_default_po_7:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50":
  (("JC_48": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_49": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) <= integer_of_int32(v)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_13": ("JC_11": ((-1) <= integer_of_int32(return))))

goal binary_search_ensures_default_po_8:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_50":
  (("JC_48": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_49": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) <= integer_of_int32(v)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_13": ("JC_12": (integer_of_int32(return) < integer_of_int32(n))))

goal binary_search_ensures_default_po_9:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_13": ("JC_11": ((-1) <= integer_of_int32(return))))

goal binary_search_ensures_default_po_10:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_43":
  (("JC_41": (0 <= integer_of_int32(l0))) and
   ("JC_42": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  ("JC_13": ("JC_12": (integer_of_int32(return) < integer_of_int32(n))))

goal binary_search_ensures_failure_po_1:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (integer_of_int32(l) <= k))

goal binary_search_ensures_failure_po_2:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (k <= integer_of_int32(u)))

goal binary_search_ensures_failure_po_3:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_71":
  (("JC_69": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_70": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) < integer_of_int32(v)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result4) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (integer_of_int32(l1) <= k))

goal binary_search_ensures_failure_po_4:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_71":
  (("JC_69": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_70": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) < integer_of_int32(v)) ->
  forall result4:int32.
  (integer_of_int32(result4) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result4) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (k <= integer_of_int32(u0)))

goal binary_search_ensures_failure_po_5:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_71":
  (("JC_69": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_70": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) > integer_of_int32(v)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result5) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (integer_of_int32(l0) <= k))

goal binary_search_ensures_failure_po_6:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_71":
  (("JC_69": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_70": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) > integer_of_int32(v)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result5) ->
  forall k:int.
  ((0 <= k) and
   ((k < integer_of_int32(n)) and (integer_of_int32(select(longP_longM_t_2,
    shift(t_0, k))) = integer_of_int32(v)))) ->
  ("JC_61": (k <= integer_of_int32(u1)))

goal binary_search_ensures_failure_po_7:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_71":
  (("JC_69": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_70": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) <= integer_of_int32(v)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) = (-1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < integer_of_int32(n))) ->
  ("JC_21": (integer_of_int32(select(longP_longM_t_2, shift(t_0,
  k_0))) <> integer_of_int32(v)))

goal binary_search_ensures_failure_po_8:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  (sorted(t_0, 0, (integer_of_int32(n) - 1), longP_longM_t_2) and
   ("JC_9":
   (("JC_6": (integer_of_int32(n) >= 0)) and
    (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
     ("JC_8": (offset_max(longP_t_2_alloc_table,
     t_0) >= (integer_of_int32(n) - 1))))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_61":
  (forall k:int.
    (((0 <= k) and
      ((k < integer_of_int32(n)) and
       (integer_of_int32(select(longP_longM_t_2, shift(t_0,
       k))) = integer_of_int32(v)))) ->
     ((integer_of_int32(l0) <= k) and (k <= integer_of_int32(u0)))))) ->
  ("JC_64":
  (("JC_62": (0 <= integer_of_int32(l0))) and
   ("JC_63": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) = (-1)) ->
  forall k_0:int.
  ((0 <= k_0) and (k_0 < integer_of_int32(n))) ->
  ("JC_21": (integer_of_int32(select(longP_longM_t_2, shift(t_0,
  k_0))) <> integer_of_int32(v)))

goal binary_search_ensures_success_po_1:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_55": true) ->
  ("JC_53":
  (("JC_51": (0 <= integer_of_int32(l0))) and
   ("JC_52": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  forall result2:int32.
  (integer_of_int32(result2) = computer_div(integer_of_int32(result1), 2)) ->
  forall m:int32.
  (m = result2) ->
  ("JC_60":
  (("JC_58": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_59": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  forall result3:int32.
  (result3 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result3) >= integer_of_int32(v)) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) <= integer_of_int32(v)) ->
  forall __retres:int32.
  (__retres = m) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_19": (integer_of_int32(select(longP_longM_t_2, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

goal binary_search_ensures_success_po_2:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_55": true) ->
  ("JC_53":
  (("JC_51": (0 <= integer_of_int32(l0))) and
   ("JC_52": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) > integer_of_int32(u0)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (-1)) ->
  forall __retres:int32.
  (__retres = result1) ->
  forall return:int32.
  (return = __retres) ->
  (integer_of_int32(return) >= 0) ->
  ("JC_19": (integer_of_int32(select(longP_longM_t_2, shift(t_0,
  integer_of_int32(return)))) = integer_of_int32(v)))

goal binary_search_safety_po_1:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  ((-2147483648) <= (integer_of_int32(n) - 1))

goal binary_search_safety_po_2:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  ((integer_of_int32(n) - 1) <= 2147483647)

goal binary_search_safety_po_3:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  ((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0)))

goal binary_search_safety_po_4:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)

goal binary_search_safety_po_5:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0)

goal binary_search_safety_po_6:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  ((-2147483648) <= result2)

goal binary_search_safety_po_7:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (result2 <= 2147483647)

goal binary_search_safety_po_8:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  (offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m))

goal binary_search_safety_po_9:
  forall t_0:longP pointer.
  forall n:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))

goal binary_search_safety_po_10:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) < integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(m) + 1))

goal binary_search_safety_po_11:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) < integer_of_int32(v)) ->
  ((integer_of_int32(m) + 1) <= 2147483647)

goal binary_search_safety_po_12:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) < integer_of_int32(v)) ->
  (((-2147483648) <= (integer_of_int32(m) + 1)) and
   ((integer_of_int32(m) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result5) ->
  (0 <= ("JC_40": (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_13:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) < integer_of_int32(v)) ->
  (((-2147483648) <= (integer_of_int32(m) + 1)) and
   ((integer_of_int32(m) + 1) <= 2147483647)) ->
  forall result5:int32.
  (integer_of_int32(result5) = (integer_of_int32(m) + 1)) ->
  forall l1:int32.
  (l1 = result5) ->
  (("JC_40": (integer_of_int32(u0) - integer_of_int32(l1))) < ("JC_40":
                                                              (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_14:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) >= integer_of_int32(v)) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result5) > integer_of_int32(v)) ->
  ((-2147483648) <= (integer_of_int32(m) - 1))

goal binary_search_safety_po_15:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) >= integer_of_int32(v)) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result5) > integer_of_int32(v)) ->
  ((integer_of_int32(m) - 1) <= 2147483647)

goal binary_search_safety_po_16:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) >= integer_of_int32(v)) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result5) > integer_of_int32(v)) ->
  (((-2147483648) <= (integer_of_int32(m) - 1)) and
   ((integer_of_int32(m) - 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result6) ->
  (0 <= ("JC_40": (integer_of_int32(u0) - integer_of_int32(l0))))

goal binary_search_safety_po_17:
  forall t_0:longP pointer.
  forall n:int32.
  forall v:int32.
  forall longP_t_2_alloc_table:longP alloc_table.
  forall longP_longM_t_2:(longP,
  int32) memory.
  ("JC_9":
  (("JC_6": (integer_of_int32(n) >= 0)) and
   (("JC_7": (offset_min(longP_t_2_alloc_table, t_0) <= 0)) and
    ("JC_8": (offset_max(longP_t_2_alloc_table,
    t_0) >= (integer_of_int32(n) - 1)))))) ->
  forall result:int32.
  (integer_of_int32(result) = 0) ->
  forall l:int32.
  (l = result) ->
  (((-2147483648) <= (integer_of_int32(n) - 1)) and
   ((integer_of_int32(n) - 1) <= 2147483647)) ->
  forall result0:int32.
  (integer_of_int32(result0) = (integer_of_int32(n) - 1)) ->
  forall u:int32.
  (u = result0) ->
  forall l0:int32.
  forall u0:int32.
  ("JC_28": true) ->
  ("JC_26":
  (("JC_24": (0 <= integer_of_int32(l0))) and
   ("JC_25": (integer_of_int32(u0) <= (integer_of_int32(n) - 1))))) ->
  (integer_of_int32(l0) <= integer_of_int32(u0)) ->
  (((-2147483648) <= (integer_of_int32(l0) + integer_of_int32(u0))) and
   ((integer_of_int32(l0) + integer_of_int32(u0)) <= 2147483647)) ->
  forall result1:int32.
  (integer_of_int32(result1) = (integer_of_int32(l0) + integer_of_int32(u0))) ->
  (2 <> 0) ->
  forall result2:int.
  (result2 = computer_div(integer_of_int32(result1), 2)) ->
  (((-2147483648) <= result2) and (result2 <= 2147483647)) ->
  forall result3:int32.
  (integer_of_int32(result3) = result2) ->
  forall m:int32.
  (m = result3) ->
  ("JC_35":
  (("JC_33": (integer_of_int32(l0) <= integer_of_int32(m))) and
   ("JC_34": (integer_of_int32(m) <= integer_of_int32(u0))))) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result4:int32.
  (result4 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result4) >= integer_of_int32(v)) ->
  ((offset_min(longP_t_2_alloc_table, t_0) <= integer_of_int32(m)) and
   (integer_of_int32(m) <= offset_max(longP_t_2_alloc_table, t_0))) ->
  forall result5:int32.
  (result5 = select(longP_longM_t_2, shift(t_0, integer_of_int32(m)))) ->
  (integer_of_int32(result5) > integer_of_int32(v)) ->
  (((-2147483648) <= (integer_of_int32(m) - 1)) and
   ((integer_of_int32(m) - 1) <= 2147483647)) ->
  forall result6:int32.
  (integer_of_int32(result6) = (integer_of_int32(m) - 1)) ->
  forall u1:int32.
  (u1 = result6) ->
  (("JC_40": (integer_of_int32(u1) - integer_of_int32(l0))) < ("JC_40":
                                                              (integer_of_int32(u0) - integer_of_int32(l0))))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/binary_search_why.why     : ?.......................?............. (36/0/2/0/0)
total   :  38
valid   :  36 ( 95%)
invalid :   0 (  0%)
unknown :   2 (  5%)
timeout :   0 (  0%)
failure :   0 (  0%)
// RUNSIMPLIFY this tells regtests to run Simplify in this example
========== generation of Simplify VC output ==========
why -simplify [...] why/binary_search.why
========== file tests/c/binary_search.jessie/simplify/binary_search_why.sx ==========

;; DO NOT EDIT BELOW THIS LINE

(BG_PUSH (NEQ |@true| |@false|))

(DEFPRED (zwf_zero a b) (AND (<= 0 b) (< a b)))

(BG_PUSH
 ;; Why axiom bool_and_def
 (FORALL (a b)
 (IFF (EQ (bool_and a b) |@true|) (AND (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_or_def
 (FORALL (a b)
 (IFF (EQ (bool_or a b) |@true|) (OR (EQ a |@true|) (EQ b |@true|)))))

(BG_PUSH
 ;; Why axiom bool_xor_def
 (FORALL (a b) (IFF (EQ (bool_xor a b) |@true|) (NEQ a b))))

(BG_PUSH
 ;; Why axiom bool_not_def
 (FORALL (a) (IFF (EQ (bool_not a) |@true|) (EQ a |@false|))))

(BG_PUSH
 ;; Why axiom ite_true
 (FORALL (x y) (EQ (ite |@true| x y) x)))

(BG_PUSH
 ;; Why axiom ite_false
 (FORALL (x y) (EQ (ite |@false| x y) y)))

(BG_PUSH
 ;; Why axiom lt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (lt_int_bool x y) |@true|) (< x y))))

(BG_PUSH
 ;; Why axiom le_int_bool_axiom
 (FORALL (x y) (IFF (EQ (le_int_bool x y) |@true|) (<= x y))))

(BG_PUSH
 ;; Why axiom gt_int_bool_axiom
 (FORALL (x y) (IFF (EQ (gt_int_bool x y) |@true|) (> x y))))

(BG_PUSH
 ;; Why axiom ge_int_bool_axiom
 (FORALL (x y) (IFF (EQ (ge_int_bool x y) |@true|) (>= x y))))

(BG_PUSH
 ;; Why axiom eq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_int_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_int_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_int_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom abs_int_pos
 (FORALL (x) (IMPLIES (>= x 0) (EQ (abs_int x) x))))

(BG_PUSH
 ;; Why axiom abs_int_neg
 (FORALL (x) (IMPLIES (<= x 0) (EQ (abs_int x) (- 0 x)))))

(BG_PUSH
 ;; Why axiom int_max_is_ge
 (FORALL (x y) (AND (>= (int_max x y) x) (>= (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_max_is_some
 (FORALL (x y) (OR (EQ (int_max x y) x) (EQ (int_max x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_le
 (FORALL (x y) (AND (<= (int_min x y) x) (<= (int_min x y) y))))

(BG_PUSH
 ;; Why axiom int_min_is_some
 (FORALL (x y) (OR (EQ (int_min x y) x) (EQ (int_min x y) y))))

(BG_PUSH
 ;; Why axiom real_of_int_zero
 (EQ (real_of_int 0) real_constant_0_0e))

(BG_PUSH
 ;; Why axiom real_of_int_one
 (EQ (real_of_int 1) real_constant_1_0e))

(BG_PUSH
 ;; Why axiom real_of_int_add
 (FORALL (x y)
 (EQ (real_of_int (+ x y)) (real_add (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom real_of_int_sub
 (FORALL (x y)
 (EQ (real_of_int (- x y)) (real_sub (real_of_int x) (real_of_int y)))))

(BG_PUSH
 ;; Why axiom truncate_down_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (AND (EQ (le_real (real_of_int (truncate_real_to_int x)) x) |@true|)
 (EQ (lt_real x (real_of_int (+ (truncate_real_to_int x) 1))) |@true|)))))

(BG_PUSH
 ;; Why axiom truncate_up_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (AND (EQ (lt_real (real_of_int (- (truncate_real_to_int x) 1)) x) |@true|)
 (EQ (le_real x (real_of_int (truncate_real_to_int x))) |@true|)))))

(BG_PUSH
 ;; Why axiom lt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (lt_real_bool x y) |@true|) (EQ (lt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom le_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (le_real_bool x y) |@true|) (EQ (le_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom gt_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (gt_real_bool x y) |@true|) (EQ (gt_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom ge_real_bool_axiom
 (FORALL (x y)
 (IFF (EQ (ge_real_bool x y) |@true|) (EQ (ge_real x y) |@true|))))

(BG_PUSH
 ;; Why axiom eq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (eq_real_bool x y) |@true|) (EQ x y))))

(BG_PUSH
 ;; Why axiom neq_real_bool_axiom
 (FORALL (x y) (IFF (EQ (neq_real_bool x y) |@true|) (NEQ x y))))

(BG_PUSH
 ;; Why axiom real_max_is_ge
 (FORALL (x y)
 (AND (EQ (ge_real (real_max x y) x) |@true|)
 (EQ (ge_real (real_max x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_max_is_some
 (FORALL (x y) (OR (EQ (real_max x y) x) (EQ (real_max x y) y))))

(BG_PUSH
 ;; Why axiom real_min_is_le
 (FORALL (x y)
 (AND (EQ (le_real (real_min x y) x) |@true|)
 (EQ (le_real (real_min x y) y) |@true|))))

(BG_PUSH
 ;; Why axiom real_min_is_some
 (FORALL (x y) (OR (EQ (real_min x y) x) (EQ (real_min x y) y))))

(BG_PUSH
 ;; Why axiom sqr_real_def
 (FORALL (x) (EQ (sqr_real x) (real_mul x x))))

(BG_PUSH
 ;; Why axiom sqrt_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (ge_real (real_sqrt x) real_constant_0_0e) |@true|))))

(BG_PUSH
 ;; Why axiom sqrt_sqr
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (sqr_real (real_sqrt x)) x))))

(BG_PUSH
 ;; Why axiom sqr_sqrt
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|)
 (EQ (real_sqrt (real_mul x x)) x))))

(BG_PUSH
 ;; Why axiom abs_real_pos
 (FORALL (x)
 (IMPLIES (EQ (ge_real x real_constant_0_0e) |@true|) (EQ (real_abs x) x))))

(BG_PUSH
 ;; Why axiom abs_real_neg
 (FORALL (x)
 (IMPLIES (EQ (le_real x real_constant_0_0e) |@true|)
 (EQ (real_abs x) (real_neg x)))))

(BG_PUSH
 ;; Why axiom log_exp
 (FORALL (x) (EQ (log (exp x)) x)))

(BG_PUSH
 ;; Why axiom exp_log
 (FORALL (x)
 (IMPLIES (EQ (gt_real x real_constant_0_0e) |@true|) (EQ (exp (log x)) x))))

(BG_PUSH
 ;; Why axiom prod_pos
 (FORALL (x y)
 (AND
 (IMPLIES
 (AND (EQ (gt_real x real_constant_0_0e) |@true|)
 (EQ (gt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|))
 (IMPLIES
 (AND (EQ (lt_real x real_constant_0_0e) |@true|)
 (EQ (lt_real y real_constant_0_0e) |@true|))
 (EQ (gt_real (real_mul x y) real_constant_0_0e) |@true|)))))

(BG_PUSH
 ;; Why axiom abs_minus
 (FORALL (x) (EQ (real_abs (real_neg x)) (real_abs x))))

(BG_PUSH
 ;; Why axiom math_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (math_div x y)) (math_mod x y)))))))

(BG_PUSH
 ;; Why axiom math_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0)
 (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (AND (<= 0 (math_mod x y)) (< (math_mod x y) (abs_int y)))))))

(BG_PUSH
 ;; Why axiom computer_div_mod
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (EQ x (+ (* y (computer_div x y)) (computer_mod x y)))))))

(BG_PUSH
 ;; Why axiom computer_div_bound
 (FORALL (x y)
 (IMPLIES (AND (>= x 0) (> y 0))
 (AND (<= 0 (computer_div x y)) (<= (computer_div x y) x)))))

(BG_PUSH
 ;; Why axiom computer_mod_bound
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (< (abs_int (computer_mod x y)) (abs_int y))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (< (abs_int (computer_mod x y)) (abs_int y))))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_pos
 (FORALL (x y) (IMPLIES (AND (>= x 0) (NEQ y 0)) (>= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_mod_sign_neg
 (FORALL (x y) (IMPLIES (AND (<= x 0) (NEQ y 0)) (<= (computer_mod x y) 0))))

(BG_PUSH
 ;; Why axiom computer_rounds_toward_zero
 (FORALL (x y)
 (IMPLIES (NEQ y 0) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))

 (FORALL (y)
 (IMPLIES (NEQ y 0)
 (FORALL (x) (<= (abs_int (* (computer_div x y) y)) (abs_int x))))))

(DEFPRED (valid a p) (AND (<= (offset_min a p) 0) (>= (offset_max a p) 0)))

(DEFPRED (same_block p q) (EQ (base_block p) (base_block q)))

(BG_PUSH
 ;; Why axiom address_injective
 (FORALL (p q) (IFF (EQ p q) (EQ (address p) (address q)))))

(BG_PUSH
 ;; Why axiom address_null
 (EQ (address null) 0))

(BG_PUSH
 ;; Why axiom address_shift_lt
 (FORALL (p i j)
 (IFF (< (address (shift p i)) (address (shift p j))) (< i j))))

(BG_PUSH
 ;; Why axiom address_shift_le
 (FORALL (p i j)
 (IFF (<= (address (shift p i)) (address (shift p j))) (<= i j))))

(BG_PUSH
 ;; Why axiom shift_zero
 (FORALL (p) (EQ (shift p 0) p)))

(BG_PUSH
 ;; Why axiom shift_shift
 (FORALL (p i j) (EQ (shift (shift p i) j) (shift p (+ i j)))))

(BG_PUSH
 ;; Why axiom offset_max_shift
 (FORALL (a p i) (EQ (offset_max a (shift p i)) (- (offset_max a p) i))))

(BG_PUSH
 ;; Why axiom offset_min_shift
 (FORALL (a p i) (EQ (offset_min a (shift p i)) (- (offset_min a p) i))))

(BG_PUSH
 ;; Why axiom neq_shift
 (FORALL (p i j) (IMPLIES (NEQ i j) (NEQ (shift p i) (shift p j))))

 (FORALL (i j)
 (IMPLIES (NEQ i j) (FORALL (p) (NEQ (shift p i) (shift p j))))))

(BG_PUSH
 ;; Why axiom null_not_valid
 (FORALL (a) (NOT (valid a null))))

(BG_PUSH
 ;; Why axiom null_pointer
 (FORALL (a)
 (AND (>= (offset_min a null) 0) (<= (offset_max a null) (- 0 2)))))

(BG_PUSH
 ;; Why axiom eq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (eq_pointer_bool p1 p2) |@true|) (EQ p1 p2))))

(BG_PUSH
 ;; Why axiom neq_pointer_bool_def
 (FORALL (p1 p2) (IFF (EQ (neq_pointer_bool p1 p2) |@true|) (NEQ p1 p2))))

(BG_PUSH
 ;; Why axiom same_block_shift_right
 (FORALL (p q i) (IMPLIES (same_block p q) (same_block p (shift q i))))

 (FORALL (p q)
 (IMPLIES (same_block p q) (FORALL (i) (same_block p (shift q i))))))

(BG_PUSH
 ;; Why axiom same_block_shift_left
 (FORALL (p q i) (IMPLIES (same_block q p) (same_block (shift q i) p)))

 (FORALL (p q)
 (IMPLIES (same_block q p) (FORALL (i) (same_block (shift q i) p)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift
 (FORALL (p q) (IMPLIES (same_block p q) (EQ p (shift q (sub_pointer p q))))))

(BG_PUSH
 ;; Why axiom sub_pointer_self
 (FORALL (p) (EQ (sub_pointer p p) 0)))

(BG_PUSH
 ;; Why axiom sub_pointer_zero
 (FORALL (p q)
 (IMPLIES (same_block p q) (IMPLIES (EQ (sub_pointer p q) 0) (EQ p q)))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_left
 (FORALL (p q i) (EQ (sub_pointer (shift p i) q) (+ (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom sub_pointer_shift_right
 (FORALL (p q i) (EQ (sub_pointer p (shift q i)) (- (sub_pointer p q) i))))

(BG_PUSH
 ;; Why axiom select_store_eq
 (FORALL (m p1 p2 a)
 (IMPLIES (EQ p1 p2) (EQ (select (|why__store| m p1 a) p2) a)))

 (FORALL (p1 p2)
 (IMPLIES (EQ p1 p2) (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) a)))))

(BG_PUSH
 ;; Why axiom select_store_neq
 (FORALL (m p1 p2 a)
 (IMPLIES (NEQ p1 p2) (EQ (select (|why__store| m p1 a) p2) (select m p2))))

 (FORALL (p1 p2)
 (IMPLIES (NEQ p1 p2)
 (FORALL (m a) (EQ (select (|why__store| m p1 a) p2) (select m p2))))))

(DEFPRED (pset_disjoint ps1 ps2)
  (FORALL (p)
  (NOT (AND (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|)))))

(DEFPRED (pset_included ps1 ps2)
  (FORALL (p)
  (IMPLIES (EQ (in_pset p ps1) |@true|) (EQ (in_pset p ps2) |@true|))))

(BG_PUSH
 ;; Why axiom pset_included_self
 (FORALL (ps) (pset_included ps ps)))

(BG_PUSH
 ;; Why axiom pset_included_range
 (FORALL (ps a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (pset_included (pset_range ps a b) (pset_range ps c d))))

 (FORALL (a b c d)
 (IMPLIES (AND (<= c a) (<= b d))
 (FORALL (ps) (pset_included (pset_range ps a b) (pset_range ps c d))))))

(BG_PUSH
 ;; Why axiom pset_included_range_all
 (FORALL (ps a b c d) (pset_included (pset_range ps a b) (pset_all ps))))

(BG_PUSH
 ;; Why axiom in_pset_empty
 (FORALL (p) (NOT (EQ (in_pset p pset_empty) |@true|))))

(BG_PUSH
 ;; Why axiom in_pset_singleton
 (FORALL (p q) (IFF (EQ (in_pset p (pset_singleton q)) |@true|) (EQ p q))))

(BG_PUSH
 ;; Why axiom in_pset_deref
 (FORALL (p m q)
 (IFF (EQ (in_pset p (pset_deref m q)) |@true|)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (select m r)))))))

(BG_PUSH
 ;; Why axiom in_pset_all
 (FORALL (p q)
 (IFF (EQ (in_pset p (pset_all q)) |@true|)
 (EXISTS (i)
 (EXISTS (r) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))

(BG_PUSH
 ;; Why axiom in_pset_range
 (FORALL (p q a b)
 (IFF (EQ (in_pset p (pset_range q a b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i))))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_left
 (FORALL (p q b)
 (IFF (EQ (in_pset p (pset_range_left q b)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= i b) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_range_right
 (FORALL (p q a)
 (IFF (EQ (in_pset p (pset_range_right q a)) |@true|)
 (EXISTS (i)
 (EXISTS (r)
 (AND (<= a i) (AND (EQ (in_pset r q) |@true|) (EQ p (shift r i)))))))))

(BG_PUSH
 ;; Why axiom in_pset_union
 (FORALL (p s1 s2)
 (IFF (EQ (in_pset p (pset_union s1 s2)) |@true|)
 (OR (EQ (in_pset p s1) |@true|) (EQ (in_pset p s2) |@true|)))))

(BG_PUSH
 ;; Why axiom valid_pset_empty
 (FORALL (a) (EQ (valid_pset a pset_empty) |@true|)))

(BG_PUSH
 ;; Why axiom valid_pset_singleton
 (FORALL (a p)
 (IFF (EQ (valid_pset a (pset_singleton p)) |@true|) (valid a p))))

(BG_PUSH
 ;; Why axiom valid_pset_deref
 (FORALL (a m q)
 (IFF (EQ (valid_pset a (pset_deref m q)) |@true|)
 (FORALL (r p)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (EQ p (select m r))) (valid a p))))))

(BG_PUSH
 ;; Why axiom valid_pset_range
 (FORALL (a q c d)
 (IFF (EQ (valid_pset a (pset_range q c d)) |@true|)
 (FORALL (i r)
 (IMPLIES (AND (EQ (in_pset r q) |@true|) (AND (<= c i) (<= i d)))
 (valid a (shift r i)))))))

(BG_PUSH
 ;; Why axiom valid_pset_union
 (FORALL (a s1 s2)
 (IFF (EQ (valid_pset a (pset_union s1 s2)) |@true|)
 (AND (EQ (valid_pset a s1) |@true|) (EQ (valid_pset a s2) |@true|)))))

(DEFPRED (not_assigns a m1 m2 l)
  (FORALL (p)
  (IMPLIES (AND (valid a p) (NOT (EQ (in_pset p l) |@true|)))
  (EQ (select m2 p) (select m1 p)))))

(BG_PUSH
 ;; Why axiom not_assigns_refl
 (FORALL (a m l) (not_assigns a m m l)))

(BG_PUSH
 ;; Why axiom not_assigns_trans
 (FORALL (a m1 m2 m3 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))

 (FORALL (a m1 m2 l)
 (IMPLIES (not_assigns a m1 m2 l)
 (FORALL (m3) (IMPLIES (not_assigns a m2 m3 l) (not_assigns a m1 m3 l))))))

(BG_PUSH
 ;; Why axiom full_separated_shift1
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift2
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated p q) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift3
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated (shift q i) p) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated (shift q i) p) |@true|)))))

(BG_PUSH
 ;; Why axiom full_separated_shift4
 (FORALL (p q i)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (EQ (full_separated p (shift q i)) |@true|)))

 (FORALL (p q)
 (IMPLIES (EQ (full_separated q p) |@true|)
 (FORALL (i) (EQ (full_separated p (shift q i)) |@true|)))))

(BG_PUSH
 ;; Why axiom subtag_bool_def
 (FORALL (t1 t2)
 (IFF (EQ (subtag_bool t1 t2) |@true|) (EQ (subtag t1 t2) |@true|))))

(BG_PUSH
 ;; Why axiom subtag_refl
 (FORALL (t) (EQ (subtag t t) |@true|)))

(BG_PUSH
 ;; Why axiom subtag_parent
 (FORALL (t1 t2 t3)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))

 (FORALL (t1 t2)
 (IMPLIES (EQ (subtag t1 t2) |@true|)
 (FORALL (t3)
 (IMPLIES (EQ (parenttag t2 t3) |@true|) (EQ (subtag t1 t3) |@true|))))))

(DEFPRED (instanceof a p t) (EQ (subtag (typeof a p) t) |@true|))

(BG_PUSH
 ;; Why axiom downcast_instanceof
 (FORALL (a p s) (IMPLIES (instanceof a p s) (EQ (downcast a p s) p))))

(BG_PUSH
 ;; Why axiom bottom_tag_axiom
 (FORALL (t) (EQ (subtag t bottom_tag) |@true|)))

(DEFPRED (root_tag t) (EQ (parenttag t bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom root_subtag
 (FORALL (a b c)
 (IMPLIES (root_tag a)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|)))))))

 (FORALL (a)
 (IMPLIES (root_tag a)
 (FORALL (b)
 (IMPLIES (root_tag b)
 (IMPLIES (NEQ a b)
 (FORALL (c)
 (IMPLIES (EQ (subtag c a) |@true|) (NOT (EQ (subtag c b) |@true|))))))))))

(DEFPRED (fully_packed tag_table mutable this)
  (EQ (select mutable this) (typeof tag_table this)))

(BG_PUSH
 ;; Why axiom bw_and_not_null
 (FORALL (a b) (IMPLIES (NEQ (bw_and a b) 0) (AND (NEQ a 0) (NEQ b 0)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsl a b)))))

(BG_PUSH
 ;; Why axiom lsl_left_positive_monotone
 (FORALL (a1 a2 b)
 (IMPLIES (AND (<= 0 a1) (AND (<= a1 a2) (<= 0 b)))
 (<= (lsl a1 b) (lsl a2 b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_returns_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsr_left_positive_decreases
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsr a b) a))))

(BG_PUSH
 ;; Why axiom asr_positive_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= 0 (asr a b)))))

(BG_PUSH
 ;; Why axiom asr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (asr a b) a))))

(BG_PUSH
 ;; Why axiom asr_lsr_same_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (asr a b) (lsr a b)))))

(BG_PUSH
 ;; Why axiom lsl_of_lsr_decreases_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (<= (lsl (lsr a b) b) a))))

(BG_PUSH
 ;; Why axiom lsr_of_lsl_identity_on_positive
 (FORALL (a b) (IMPLIES (AND (<= 0 a) (<= 0 b)) (EQ (lsr (lsl a b) b) a))))

(DEFPRED (alloc_fresh a p n)
  (FORALL (i) (IMPLIES (AND (<= 0 i) (< i n)) (NOT (valid a (shift p i))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_min
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_offset_max
 (FORALL (a1 a2)
 (IMPLIES (EQ (alloc_extends a1 a2) |@true|)
 (FORALL (p) (IMPLIES (valid a1 p) (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_not_assigns_empty
 (FORALL (a1 a2 m1 m2 l p n)
 (IMPLIES
 (AND (EQ (alloc_extends a1 a2) |@true|)
 (AND (alloc_fresh a1 p n)
 (AND (not_assigns a2 m1 m2 l)
 (pset_included l (pset_all (pset_singleton p))))))
 (not_assigns a1 m1 m2 pset_empty))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_min
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_min a1 p) (offset_min a2 p)))))))

(BG_PUSH
 ;; Why axiom alloc_extends_except_offset_max
 (FORALL (a1 a2 l)
 (IMPLIES (EQ (alloc_extends_except a1 a2 l) |@true|)
 (FORALL (p)
 (IMPLIES (AND (valid a1 p) (NOT (EQ (in_pset p l) |@true|)))
 (EQ (offset_max a1 p) (offset_max a2 p)))))))

(BG_PUSH
 ;; Why axiom disj_sym
 (FORALL (s1 s2)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|) (EQ (disj_mybag s2 s1) |@true|))))

(BG_PUSH
 ;; Why axiom sub_refl
 (FORALL (sa) (EQ (sub_mybag sa sa) |@true|)))

(BG_PUSH
 ;; Why axiom sub_disj
 (FORALL (s1 s2 s3)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s3) |@true|))))

 (FORALL (s1 s2)
 (IMPLIES (EQ (disj_mybag s1 s2) |@true|)
 (FORALL (s3)
 (IMPLIES (EQ (sub_mybag s2 s3) |@true|) (EQ (disj_mybag s1 s3) |@true|))))))

(BG_PUSH
 ;; Why axiom sub_in
 (FORALL (s1 s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))

 (FORALL (s2 p)
 (IMPLIES (NOT (EQ (in_mybag p s2) |@true|))
 (FORALL (s1)
 (IMPLIES (EQ (sub_mybag s1 s2) |@true|) (NOT (EQ (in_mybag p s1) |@true|)))))))

(BG_PUSH
 ;; Why axiom frame_between_refl
 (FORALL (sa m) (EQ (frame_between sa m m) |@true|)))

(BG_PUSH
 ;; Why axiom frame_between_gen
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (EQ (in_mybag p sa) |@true|)
 (FORALL (v) (EQ (frame_between sa (|why__store| m1 p v) m2) |@true|)))))))

(BG_PUSH
 ;; Why axiom frame_between_gen2
 (FORALL (sa m1 m2 m3)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between sa m2 m3) |@true|)
 (EQ (frame_between sa m1 m3) |@true|))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub1
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 s13)
 (IMPLIES (EQ (sub_mybag s12 s13) |@true|)
 (FORALL (m2 m1)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s23 m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_gen_sub2
 (FORALL (s12 s23 s13 m1 m2 m3)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|)))))

 (FORALL (s12 m1 m2)
 (IMPLIES (EQ (frame_between s12 m1 m2) |@true|)
 (FORALL (s13 s23)
 (IMPLIES (EQ (sub_mybag s23 s13) |@true|)
 (FORALL (m3)
 (IMPLIES (EQ (frame_between s23 m2 m3) |@true|)
 (EQ (frame_between s13 m1 m3) |@true|))))))))

(BG_PUSH
 ;; Why axiom frame_between_pointer
 (FORALL (sa m1 m2 p v)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (EQ (select m1 p) (select m2 p)))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (p)
 (IMPLIES (NOT (EQ (in_mybag p sa) |@true|))
 (FORALL (v) (EQ (select m1 p) (select m2 p))))))))

(BG_PUSH
 ;; Why axiom frame_between_sub
 (FORALL (sa sb m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))

 (FORALL (sa m1 m2)
 (IMPLIES (EQ (frame_between sa m1 m2) |@true|)
 (FORALL (sb)
 (IMPLIES (EQ (sub_mybag sa sb) |@true|)
 (EQ (frame_between sb m1 m2) |@true|))))))

(BG_PUSH
 ;; Why axiom charP_int
 (EQ (int_of_tag charP_tag) 1))

(BG_PUSH
 ;; Why axiom charP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (charP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom charP_parenttag_bottom
 (EQ (parenttag charP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom charP_tags
 (FORALL (x charP_tag_table) (instanceof charP_tag_table x charP_tag)))

(DEFPRED (eq_int32 x y) (EQ (integer_of_int32 x) (integer_of_int32 y)))

(DEFPRED (eq_int8 x y) (EQ (integer_of_int8 x) (integer_of_int8 y)))

(BG_PUSH
 ;; Why axiom int32_coerce
 (FORALL (x)
 (IMPLIES
 (AND (<= (- 0 constant_too_large_2147483648) x)
 (<= x constant_too_large_2147483647))
 (EQ (integer_of_int32 (int32_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int32_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_int32 x) (integer_of_int32 y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom int32_range
 (FORALL (x)
 (AND (<= (- 0 constant_too_large_2147483648) (integer_of_int32 x))
 (<= (integer_of_int32 x) constant_too_large_2147483647))))

(BG_PUSH
 ;; Why axiom int8_coerce
 (FORALL (x)
 (IMPLIES (AND (<= (- 0 128) x) (<= x 127))
 (EQ (integer_of_int8 (int8_of_integer x)) x))))

(BG_PUSH
 ;; Why axiom int8_extensionality
 (FORALL (x y)
 (IMPLIES (EQ (integer_of_int8 x) (integer_of_int8 y)) (EQ x y))))

(BG_PUSH
 ;; Why axiom int8_range
 (FORALL (x)
 (AND (<= (- 0 128) (integer_of_int8 x)) (<= (integer_of_int8 x) 127))))

(DEFPRED (left_valid_struct_charP p a charP_alloc_table)
  (<= (offset_min charP_alloc_table p) a))

(DEFPRED (left_valid_struct_longP p a longP_alloc_table)
  (<= (offset_min longP_alloc_table p) a))

(DEFPRED (left_valid_struct_voidP p a voidP_alloc_table)
  (<= (offset_min voidP_alloc_table p) a))

(BG_PUSH
 ;; Why axiom longP_int
 (EQ (int_of_tag longP_tag) 1))

(BG_PUSH
 ;; Why axiom longP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (longP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom longP_parenttag_bottom
 (EQ (parenttag longP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom longP_tags
 (FORALL (x longP_tag_table) (instanceof longP_tag_table x longP_tag)))

(BG_PUSH
 ;; Why axiom pointer_addr_of_charP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (charP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_longP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (longP_of_pointer_address p)))))

(BG_PUSH
 ;; Why axiom pointer_addr_of_voidP_of_pointer_address
 (FORALL (p) (EQ p (pointer_address (voidP_of_pointer_address p)))))

(DEFPRED (right_valid_struct_charP p b charP_alloc_table)
  (>= (offset_max charP_alloc_table p) b))

(DEFPRED (right_valid_struct_longP p b longP_alloc_table)
  (>= (offset_max longP_alloc_table p) b))

(DEFPRED (right_valid_struct_voidP p b voidP_alloc_table)
  (>= (offset_max voidP_alloc_table p) b))

(DEFPRED (sorted t a b longP_longM_t_1_at_L)
  (FORALL (i j)
  (IMPLIES (AND (<= a i) (AND (<= i j) (<= j b)))
  (<= (integer_of_int32 (select longP_longM_t_1_at_L (shift t i))) (integer_of_int32
                                                                   (select
                                                                   longP_longM_t_1_at_L 
                                                                   (shift
                                                                   t j)))))))

(DEFPRED (strict_valid_root_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_root_longP p a b longP_alloc_table)
  (AND (EQ (offset_min longP_alloc_table p) a)
  (EQ (offset_max longP_alloc_table p) b)))

(DEFPRED (strict_valid_root_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_charP p a b charP_alloc_table)
  (AND (EQ (offset_min charP_alloc_table p) a)
  (EQ (offset_max charP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_longP p a b longP_alloc_table)
  (AND (EQ (offset_min longP_alloc_table p) a)
  (EQ (offset_max longP_alloc_table p) b)))

(DEFPRED (strict_valid_struct_voidP p a b voidP_alloc_table)
  (AND (EQ (offset_min voidP_alloc_table p) a)
  (EQ (offset_max voidP_alloc_table p) b)))

(DEFPRED (valid_root_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_root_longP p a b longP_alloc_table)
  (AND (<= (offset_min longP_alloc_table p) a)
  (>= (offset_max longP_alloc_table p) b)))

(DEFPRED (valid_root_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(DEFPRED (valid_struct_charP p a b charP_alloc_table)
  (AND (<= (offset_min charP_alloc_table p) a)
  (>= (offset_max charP_alloc_table p) b)))

(DEFPRED (valid_struct_longP p a b longP_alloc_table)
  (AND (<= (offset_min longP_alloc_table p) a)
  (>= (offset_max longP_alloc_table p) b)))

(DEFPRED (valid_struct_voidP p a b voidP_alloc_table)
  (AND (<= (offset_min voidP_alloc_table p) a)
  (>= (offset_max voidP_alloc_table p) b)))

(BG_PUSH
 ;; Why axiom voidP_int
 (EQ (int_of_tag voidP_tag) 1))

(BG_PUSH
 ;; Why axiom voidP_of_pointer_address_of_pointer_addr
 (FORALL (p) (EQ p (voidP_of_pointer_address (pointer_address p)))))

(BG_PUSH
 ;; Why axiom voidP_parenttag_bottom
 (EQ (parenttag voidP_tag bottom_tag) |@true|))

(BG_PUSH
 ;; Why axiom voidP_tags
 (FORALL (x voidP_tag_table) (instanceof voidP_tag_table x voidP_tag)))

;; mean, File "HOME/tests/c/binary_search.c", line 34, characters 4-67
(FORALL (x_0 y)
(IMPLIES (<= x_0 y)
(AND (<= x_0 (computer_div (+ x_0 y) 2)) (<= (computer_div (+ x_0 y) 2) y))))

(BG_PUSH
 ;; lemma mean as axiom
(FORALL (x_0 y)
(IMPLIES (<= x_0 y)
(AND (<= x_0 (computer_div (+ x_0 y) 2)) (<= (computer_div (+ x_0 y) 2) y)))))

;; binary_search_ensures_default_po_1, File "HOME/tests/c/binary_search.c", line 52, characters 8-14
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u) (IMPLIES (EQ u result0) (<= 0 (integer_of_int32 l))))))))))))))

;; binary_search_ensures_default_po_2, File "HOME/tests/c/binary_search.c", line 52, characters 18-26
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0) (<= (integer_of_int32 u) (- (integer_of_int32 n) 1))))))))))))))

;; binary_search_ensures_default_po_3, File "HOME/tests/c/binary_search.c", line 60, characters 15-21
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2) (<= (integer_of_int32 l0) (integer_of_int32 m))))))))))))))))))))))))

;; binary_search_ensures_default_po_4, File "HOME/tests/c/binary_search.c", line 60, characters 20-26
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2) (<= (integer_of_int32 m) (integer_of_int32 u0))))))))))))))))))))))))

;; binary_search_ensures_default_po_5, File "HOME/tests/c/binary_search.c", line 52, characters 8-14
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) (+ (integer_of_int32 m) 1))
(FORALL (l1) (IMPLIES (EQ l1 result4) (<= 0 (integer_of_int32 l1))))))))))))))))))))))))))))))))))

;; binary_search_ensures_default_po_6, File "HOME/tests/c/binary_search.c", line 52, characters 18-26
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (- (integer_of_int32 m) 1))
(FORALL (u1)
(IMPLIES (EQ u1 result5)
(<= (integer_of_int32 u1) (- (integer_of_int32 n) 1)))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_default_po_7, File "HOME/tests/c/binary_search.c", line 41, characters 12-25
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (<= (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| m)
(FORALL (return)
(IMPLIES (EQ return |__retres|) (<= (- 0 1) (integer_of_int32 return)))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_default_po_8, File "HOME/tests/c/binary_search.c", line 41, characters 18-29
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (<= (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| m)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(< (integer_of_int32 return) (integer_of_int32 n)))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_default_po_9, File "HOME/tests/c/binary_search.c", line 41, characters 12-25
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (> (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- 0 1))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| result1)
(FORALL (return)
(IMPLIES (EQ return |__retres|) (<= (- 0 1) (integer_of_int32 return))))))))))))))))))))))))

;; binary_search_ensures_default_po_10, File "HOME/tests/c/binary_search.c", line 41, characters 18-29
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (> (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- 0 1))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| result1)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(< (integer_of_int32 return) (integer_of_int32 n))))))))))))))))))))))))

;; binary_search_ensures_failure_po_1, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= (integer_of_int32 l) k)))))))))))))))))

;; binary_search_ensures_failure_po_2, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= k (integer_of_int32 u))))))))))))))))))

;; binary_search_ensures_failure_po_3, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) (+ (integer_of_int32 m) 1))
(FORALL (l1)
(IMPLIES (EQ l1 result4)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= (integer_of_int32 l1) k))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_failure_po_4, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ (integer_of_int32 result4) (+ (integer_of_int32 m) 1))
(FORALL (l1)
(IMPLIES (EQ l1 result4)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= k (integer_of_int32 u0)))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_failure_po_5, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (- (integer_of_int32 m) 1))
(FORALL (u1)
(IMPLIES (EQ u1 result5)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= (integer_of_int32 l0) k)))))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_failure_po_6, File "HOME/tests/c/binary_search.c", line 55, characters 8-66
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (- (integer_of_int32 m) 1))
(FORALL (u1)
(IMPLIES (EQ u1 result5)
(FORALL (k)
(IMPLIES (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
(<= k (integer_of_int32 u1))))))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_failure_po_7, File "HOME/tests/c/binary_search.c", line 46, characters 14-83
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (<= (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| m)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(IMPLIES (EQ (integer_of_int32 return) (- 0 1))
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (integer_of_int32 n)))
(NEQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k_0)))
(integer_of_int32 v)))))))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_failure_po_8, File "HOME/tests/c/binary_search.c", line 46, characters 14-83
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (sorted t_0 0 (- (integer_of_int32 n) 1) longP_longM_t_2)
         (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1)))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES (FORALL (k)
         (IMPLIES
         (AND (<= 0 k)
         (AND (< k (integer_of_int32 n))
         (EQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k)))
         (integer_of_int32 v))))
         (AND (<= (integer_of_int32 l0) k) (<= k (integer_of_int32 u0)))))
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (> (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- 0 1))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| result1)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(IMPLIES (EQ (integer_of_int32 return) (- 0 1))
(FORALL (k_0)
(IMPLIES (AND (<= 0 k_0) (< k_0 (integer_of_int32 n)))
(NEQ (integer_of_int32 (select longP_longM_t_2 (shift t_0 k_0)))
(integer_of_int32 v))))))))))))))))))))))))))))))

;; binary_search_ensures_success_po_1, File "HOME/tests/c/binary_search.c", line 43, characters 14-46
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(FORALL (result2)
(IMPLIES (EQ (integer_of_int32 result2)
         (computer_div (integer_of_int32 result1) 2))
(FORALL (m)
(IMPLIES (EQ m result2)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(FORALL (result3)
(IMPLIES (EQ result3
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result3) (integer_of_int32 v))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (<= (integer_of_int32 result4) (integer_of_int32 v))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| m)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(IMPLIES (>= (integer_of_int32 return) 0)
(EQ (integer_of_int32
    (select longP_longM_t_2 (shift t_0 (integer_of_int32 return))))
(integer_of_int32 v)))))))))))))))))))))))))))))))))))))))

;; binary_search_ensures_success_po_2, File "HOME/tests/c/binary_search.c", line 43, characters 14-46
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (> (integer_of_int32 l0) (integer_of_int32 u0))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1) (- 0 1))
(FORALL (|__retres|)
(IMPLIES (EQ |__retres| result1)
(FORALL (return)
(IMPLIES (EQ return |__retres|)
(IMPLIES (>= (integer_of_int32 return) 0)
(EQ (integer_of_int32
    (select longP_longM_t_2 (shift t_0 (integer_of_int32 return))))
(integer_of_int32 v))))))))))))))))))))))))))))

;; binary_search_safety_po_1, File "HOME/tests/c/binary_search.c", line 50, characters 17-20
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))))))))))

;; binary_search_safety_po_2, File "HOME/tests/c/binary_search.c", line 50, characters 17-20
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(<= (- (integer_of_int32 n) 1) constant_too_large_2147483647)))))))))

;; binary_search_safety_po_3, File "HOME/tests/c/binary_search.c", line 59, characters 13-18
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) (integer_of_int32
                                                                 u0)))))))))))))))))))))

;; binary_search_safety_po_4, File "HOME/tests/c/binary_search.c", line 59, characters 13-18
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647)))))))))))))))))))

;; binary_search_safety_po_5, File "HOME/tests/c/binary_search.c", line 59, characters 12-23
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(NEQ 2 0))))))))))))))))))))))

;; binary_search_safety_po_6, File "HOME/tests/c/binary_search.c", line 59, characters 12-23
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(<= (- 0 constant_too_large_2147483648) result2)))))))))))))))))))))))))

;; binary_search_safety_po_7, File "HOME/tests/c/binary_search.c", line 59, characters 12-23
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(<= result2 constant_too_large_2147483647)))))))))))))))))))))))))

;; binary_search_safety_po_8, File "HOME/tests/c/binary_search.c", line 61, characters 8-12
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))))))))))))))))))))))))))))))))

;; binary_search_safety_po_9, File "HOME/tests/c/binary_search.c", line 61, characters 8-12
(FORALL (t_0)
(FORALL (n)
(FORALL (longP_t_2_alloc_table)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0))))))))))))))))))))))))))))))))

;; binary_search_safety_po_10, File "HOME/tests/c/binary_search.c", line 61, characters 22-27
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result4) (integer_of_int32 v))
(<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 m) 1))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_11, File "HOME/tests/c/binary_search.c", line 61, characters 22-27
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result4) (integer_of_int32 v))
(<= (+ (integer_of_int32 m) 1) constant_too_large_2147483647)))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_12, File "HOME/tests/c/binary_search.c", line 56, characters 19-22
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 m) 1))
         (<= (+ (integer_of_int32 m) 1) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 m) 1))
(FORALL (l1)
(IMPLIES (EQ l1 result5)
(<= 0 (- (integer_of_int32 u0) (integer_of_int32 l0))))))))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_13, File "HOME/tests/c/binary_search.c", line 56, characters 19-22
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (< (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 m) 1))
         (<= (+ (integer_of_int32 m) 1) constant_too_large_2147483647))
(FORALL (result5)
(IMPLIES (EQ (integer_of_int32 result5) (+ (integer_of_int32 m) 1))
(FORALL (l1)
(IMPLIES (EQ l1 result5)
(< (- (integer_of_int32 u0) (integer_of_int32 l1)) (- (integer_of_int32 u0) 
                                                   (integer_of_int32 l0))))))))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_14, File "HOME/tests/c/binary_search.c", line 62, characters 27-32
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result5) (integer_of_int32 v))
(<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 m) 1))))))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_15, File "HOME/tests/c/binary_search.c", line 62, characters 27-32
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result5) (integer_of_int32 v))
(<= (- (integer_of_int32 m) 1) constant_too_large_2147483647)))))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_16, File "HOME/tests/c/binary_search.c", line 56, characters 19-22
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result5) (integer_of_int32 v))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 m) 1))
         (<= (- (integer_of_int32 m) 1) constant_too_large_2147483647))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (- (integer_of_int32 m) 1))
(FORALL (u1)
(IMPLIES (EQ u1 result6)
(<= 0 (- (integer_of_int32 u0) (integer_of_int32 l0))))))))))))))))))))))))))))))))))))))))))))))))

;; binary_search_safety_po_17, File "HOME/tests/c/binary_search.c", line 56, characters 19-22
(FORALL (t_0)
(FORALL (n)
(FORALL (v)
(FORALL (longP_t_2_alloc_table)
(FORALL (longP_longM_t_2)
(IMPLIES (AND (>= (integer_of_int32 n) 0)
         (AND (<= (offset_min longP_t_2_alloc_table t_0) 0)
         (>= (offset_max longP_t_2_alloc_table t_0) (- (integer_of_int32 n) 1))))
(FORALL (result)
(IMPLIES (EQ (integer_of_int32 result) 0)
(FORALL (l)
(IMPLIES (EQ l result)
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 n) 1))
         (<= (- (integer_of_int32 n) 1) constant_too_large_2147483647))
(FORALL (result0)
(IMPLIES (EQ (integer_of_int32 result0) (- (integer_of_int32 n) 1))
(FORALL (u)
(IMPLIES (EQ u result0)
(FORALL (l0)
(FORALL (u0)
(IMPLIES TRUE
(IMPLIES (AND (<= 0 (integer_of_int32 l0))
         (<= (integer_of_int32 u0) (- (integer_of_int32 n) 1)))
(IMPLIES (<= (integer_of_int32 l0) (integer_of_int32 u0))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (+ (integer_of_int32 l0) 
                                                 (integer_of_int32 u0)))
         (<= (+ (integer_of_int32 l0) (integer_of_int32 u0)) constant_too_large_2147483647))
(FORALL (result1)
(IMPLIES (EQ (integer_of_int32 result1)
         (+ (integer_of_int32 l0) (integer_of_int32 u0)))
(IMPLIES (NEQ 2 0)
(FORALL (result2)
(IMPLIES (EQ result2 (computer_div (integer_of_int32 result1) 2))
(IMPLIES (AND (<= (- 0 constant_too_large_2147483648) result2)
         (<= result2 constant_too_large_2147483647))
(FORALL (result3)
(IMPLIES (EQ (integer_of_int32 result3) result2)
(FORALL (m)
(IMPLIES (EQ m result3)
(IMPLIES (AND (<= (integer_of_int32 l0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (integer_of_int32 u0)))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result4)
(IMPLIES (EQ result4
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (>= (integer_of_int32 result4) (integer_of_int32 v))
(IMPLIES (AND
         (<= (offset_min longP_t_2_alloc_table t_0) (integer_of_int32 m))
         (<= (integer_of_int32 m) (offset_max longP_t_2_alloc_table t_0)))
(FORALL (result5)
(IMPLIES (EQ result5
         (select longP_longM_t_2 (shift t_0 (integer_of_int32 m))))
(IMPLIES (> (integer_of_int32 result5) (integer_of_int32 v))
(IMPLIES (AND
         (<= (- 0 constant_too_large_2147483648) (- (integer_of_int32 m) 1))
         (<= (- (integer_of_int32 m) 1) constant_too_large_2147483647))
(FORALL (result6)
(IMPLIES (EQ (integer_of_int32 result6) (- (integer_of_int32 m) 1))
(FORALL (u1)
(IMPLIES (EQ u1 result6)
(< (- (integer_of_int32 u1) (integer_of_int32 l0)) (- (integer_of_int32 u0) 
                                                   (integer_of_int32 l0))))))))))))))))))))))))))))))))))))))))))))))))

========== running Simplify ==========
Running Simplify on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
simplify/binary_search_why.sx : .....................?..?.........?... (35/0/3/0/0)
total   :  38
valid   :  35 ( 92%)
invalid :   0 (  0%)
unknown :   3 (  8%)
timeout :   0 (  0%)
failure :   0 (  0%)
