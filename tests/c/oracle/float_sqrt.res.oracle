========== file tests/c/float_sqrt.c ==========
/**************************************************************************/
/*                                                                        */
/*  The Why platform for program certification                            */
/*                                                                        */
/*  Copyright (C) 2002-2011                                               */
/*                                                                        */
/*    Jean-Christophe FILLIATRE, CNRS & Univ. Paris-sud 11                */
/*    Claude MARCHE, INRIA & Univ. Paris-sud 11                           */
/*    Yannick MOY, Univ. Paris-sud 11                                     */
/*    Romain BARDOU, Univ. Paris-sud 11                                   */
/*                                                                        */
/*  Secondary contributors:                                               */
/*                                                                        */
/*    Thierry HUBERT, Univ. Paris-sud 11  (former Caduceus front-end)     */
/*    Nicolas ROUSSET, Univ. Paris-sud 11 (on Jessie & Krakatoa)          */
/*    Ali AYAD, CNRS & CEA Saclay         (floating-point support)        */
/*    Sylvie BOLDO, INRIA                 (floating-point support)        */
/*    Jean-Francois COUCHOT, INRIA        (sort encodings, hyps pruning)  */
/*    Mehdi DOGGUY, Univ. Paris-sud 11    (Why GUI)                       */
/*                                                                        */
/*  This software is free software; you can redistribute it and/or        */
/*  modify it under the terms of the GNU Lesser General Public            */
/*  License version 2.1, with the special exception on linking            */
/*  described in file LICENSE.                                            */
/*                                                                        */
/*  This software is distributed in the hope that it will be useful,      */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of        */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                  */
/*                                                                        */
/**************************************************************************/


/* contribution by Guillaume Melquiond */

// RUN GAPPA (does not work)

#pragma JessieFloatModel(defensive)

/*
 With some help, the Gappa tool is able to prove the postcondition of the
 sqrt function.

 First, it needs to know that Newton's iteration converges quadratically.
 This formula on relative errors is denoted by the newton_rel predicate.
 The newton states its general expression and it is proved by a short Coq
 script performing algebraic manipulations. The newton lemma is then
 instantiated by Alt-Ergo at each iteration of the loop to solve the
 three assertions about the predicate.

 In order to prove the postcondition, Gappa also needs to be told that
 the value computed after an iteration is close to both sqrt(x) and the
 value that would have been computed with an infinite precision. This is
 done by putting distance expressions into the context through three
 other assertions about the closeness predicate. They are much weaker
 than what Gappa will end up proving; they are only here to guide its
 heuristics.

 Finally, Gappa also needs to know about the inverse square root trick.
 That is what the assertion is for, and it is proved in Coq.
*/

/*@
 predicate newton_rel(real t, real x) =
   (0.5 * t * (3 - t * t * x) - 1/\sqrt(x)) / (1/\sqrt(x)) ==
     - (1.5 + 0.5 * ((t - 1/\sqrt(x)) / (1/\sqrt(x)))) *
     (((t - 1/\sqrt(x)) / (1/\sqrt(x))) * ((t - 1/\sqrt(x)) / (1/\sqrt(x))));

 lemma newton: \forall real t, x; x > 0. ==> newton_rel(t, x);

 predicate closeness(real u, real t, real x) =
   \abs(u - 0.5 * t * (3 - t * t * x)) <= 1 &&
   \abs(u - 1/\sqrt(x)) <= 1;
*/

/*@
 requires 0.5 <= x <= 2;
 ensures \abs(\result - 1/\sqrt(x)) <= 0x1p-6 * \abs(1/\sqrt(x));
*/
double sqrt_init(double x);

/*@
 requires 0.5 <= x <= 2;
 ensures \abs(\result - \sqrt(x)) <= 0x1p-43 * \abs(\sqrt(x));
*/
double sqrt(double x)
{
  double t, u;
  t = sqrt_init(x);

  u = 0.5 * t * (3 - t * t * x);
  //@ assert newton_rel(t, x);
  //@ assert closeness(u, t, x);
  t = u;

  u = 0.5 * t * (3 - t * t * x);
  //@ assert newton_rel(t, x);
  //@ assert closeness(u, t, x);
  t = u;

  u = 0.5 * t * (3 - t * t * x);
  //@ assert newton_rel(t, x);
  //@ assert closeness(u, t, x);
  t = u;

  //@ assert x * (1/\sqrt(x)) == \sqrt(x);
  return x * t;
}



/*
Local Variables:
compile-command: "make float_sqrt.why3ml"
End:
*/


========== frama-c -jessie execution ==========
[kernel] preprocessing with "gcc -C -E -I.  -dD tests/c/float_sqrt.c"
[jessie] Starting Jessie translation
[kernel] warning: No code for function sqrt_init, default assigns generated for default behavior
[jessie] Producing Jessie files in subdir tests/c/float_sqrt.jessie
[jessie] File tests/c/float_sqrt.jessie/float_sqrt.jc written.
[jessie] File tests/c/float_sqrt.jessie/float_sqrt.cloc written.
========== file tests/c/float_sqrt.jessie/float_sqrt.jc ==========
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions
# AnnotationPolicy = None
# AbstractDomain = Pol
# FloatModel = defensive

axiomatic Padding {

  logic type padding
  
}

type int8 = -128..127

tag charP = {
  int8 charM: 8;
}

type charP = [charP]

tag voidP = {
}

type voidP = [voidP]

predicate newton_rel(real t, real x) =
(((((0.5 * t) * (3 - ((t * t) * x))) - (1 / \real_sqrt(x))) /
   (1 / \real_sqrt(x))) ==
  ((- (1.5 + (0.5 * ((t - (1 / \real_sqrt(x))) / (1 / \real_sqrt(x)))))) *
    (((t - (1 / \real_sqrt(x))) / (1 / \real_sqrt(x))) *
      ((t - (1 / \real_sqrt(x))) / (1 / \real_sqrt(x))))))

lemma newton :
(\forall real t_0;
  (\forall real x_0;
    ((x_0 > 0.) ==> newton_rel(t_0, x_0))))

predicate closeness(real u, real t_1, real x_1) =
((\real_abs((u - ((0.5 * t_1) * (3 - ((t_1 * t_1) * x_1))))) <= 1) &&
  (\real_abs((u - (1 / \real_sqrt(x_1)))) <= 1))

double sqrt_init(double x_0)
  requires (C_2 : ((C_3 : (0.5 <= (x_0 :> real))) &&
                    (C_4 : ((x_0 :> real) <= 2))));
behavior default:
  assigns \nothing;
  ensures (C_1 : (\real_abs(((\result :> real) -
                              (1 / \real_sqrt((\at(x_0,Old) :> real))))) <=
                   (0x1p-6 *
                     \real_abs((1 / \real_sqrt((\at(x_0,Old) :> real)))))));
;

double sqrt(double x)
  requires (C_41 : ((C_42 : (0.5 <= (x :> real))) &&
                     (C_43 : ((x :> real) <= 2))));
behavior default:
  ensures (C_40 : (\real_abs(((\result :> real) -
                               \real_sqrt((\at(x,Old) :> real)))) <=
                    (0x1p-43 * \real_abs(\real_sqrt((\at(x,Old) :> real))))));
{  
   (var double t);
   
   (var double u);
   
   (var double __retres);
   
   {  (C_6 : (t = (C_5 : sqrt_init(x))));
      (C_13 : (u = (C_12 : ((C_11 : ((0.5 :> double) * t)) *
                             (C_10 : ((C_9 : (3 :> double)) -
                                       (C_8 : ((C_7 : (t * t)) * x))))))));
      
      {  
         (assert for default: (C_14 : newton_rel((t :> real), (x :> real))));
         ()
      };
      
      {  
         (assert for default: (C_15 : closeness((u :> real), (t :> real),
                                                (x :> real))));
         ()
      };
      (C_16 : (t = u));
      (C_23 : (u = (C_22 : ((C_21 : ((0.5 :> double) * t)) *
                             (C_20 : ((C_19 : (3 :> double)) -
                                       (C_18 : ((C_17 : (t * t)) * x))))))));
      
      {  
         (assert for default: (C_24 : newton_rel((t :> real), (x :> real))));
         ()
      };
      
      {  
         (assert for default: (C_25 : closeness((u :> real), (t :> real),
                                                (x :> real))));
         ()
      };
      (C_26 : (t = u));
      (C_33 : (u = (C_32 : ((C_31 : ((0.5 :> double) * t)) *
                             (C_30 : ((C_29 : (3 :> double)) -
                                       (C_28 : ((C_27 : (t * t)) * x))))))));
      
      {  
         (assert for default: (C_34 : newton_rel((t :> real), (x :> real))));
         ()
      };
      
      {  
         (assert for default: (C_35 : closeness((u :> real), (t :> real),
                                                (x :> real))));
         ()
      };
      (C_36 : (t = u));
      
      {  
         (assert for default: (C_37 : (((x :> real) *
                                         (1 / \real_sqrt((x :> real)))) ==
                                        \real_sqrt((x :> real)))));
         ()
      };
      (C_39 : (__retres = (C_38 : (x * t))));
      
      (return __retres)
   }
}
========== file tests/c/float_sqrt.jessie/float_sqrt.cloc ==========
[C_10]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 17
end = 30

[C_11]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 13

[C_12]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 31

[C_13]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 31

[C_14]
file = "HOME/tests/c/float_sqrt.c"
line = 91
begin = 13
end = 29

[C_15]
file = "HOME/tests/c/float_sqrt.c"
line = 92
begin = 13
end = 31

[C_16]
file = "HOME/tests/c/float_sqrt.c"
line = 93
begin = 6
end = 7

[C_17]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 26

[C_18]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 30

[C_19]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 17
end = 18

[C_1]
file = "HOME/tests/c/float_sqrt.c"
line = 77
begin = 9
end = 64

[C_2]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 23

[C_3]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 18

[C_4]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 17
end = 23

[C_20]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 17
end = 30

[C_5]
file = "HOME/tests/c/float_sqrt.c"
line = 88
begin = 6
end = 18

[C_21]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 13

[C_6]
file = "HOME/tests/c/float_sqrt.c"
line = 88
begin = 6
end = 18

[C_22]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 31

[C_7]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 26

[C_23]
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 31

[C_8]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 30

[C_24]
file = "HOME/tests/c/float_sqrt.c"
line = 96
begin = 13
end = 29

[C_9]
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 17
end = 18

[C_25]
file = "HOME/tests/c/float_sqrt.c"
line = 97
begin = 13
end = 31

[C_26]
file = "HOME/tests/c/float_sqrt.c"
line = 98
begin = 6
end = 7

[C_27]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 26

[C_28]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 30

[C_29]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 17
end = 18

[newton]
name = "Lemma newton"
file = "HOME/tests/c/float_sqrt.c"
line = 68
begin = 1
end = 187

[C_30]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 17
end = 30

[C_31]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 13

[C_32]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 31

[C_33]
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 31

[C_34]
file = "HOME/tests/c/float_sqrt.c"
line = 101
begin = 13
end = 29

[C_35]
file = "HOME/tests/c/float_sqrt.c"
line = 102
begin = 13
end = 31

[C_36]
file = "HOME/tests/c/float_sqrt.c"
line = 103
begin = 6
end = 7

[C_37]
file = "HOME/tests/c/float_sqrt.c"
line = 105
begin = 13
end = 41

[C_38]
file = "HOME/tests/c/float_sqrt.c"
line = 106
begin = 9
end = 14

[C_39]
file = "HOME/tests/c/float_sqrt.c"
line = 106
begin = 2
end = 15

[sqrt]
name = "Function sqrt"
file = "HOME/tests/c/float_sqrt.c"
line = 85
begin = 7
end = 11

[C_40]
file = "HOME/tests/c/float_sqrt.c"
line = 83
begin = 9
end = 61

[C_41]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 23

[C_42]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 18

[C_43]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 17
end = 23

========== jessie execution ==========
Generating Why function sqrt
========== file tests/c/float_sqrt.jessie/float_sqrt.makefile ==========
# this makefile was automatically generated; do not edit 

TIMEOUT ?= 10

DP ?= why-dp -timeout $(TIMEOUT)
WHYEXEC ?= why
GWHYEXEC ?= gwhy-bin
WHYLIB ?= HOME/lib

WHY=WHYLIB=$(WHYLIB) $(WHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs float_sqrt.loc

GWHY=WHYLIB=$(WHYLIB) $(GWHYEXEC) $(WHYOPT)  -split-user-conj -explain -locs float_sqrt.loc

JESSIELIBFILES ?= $(WHYLIB)/why/jessie.why $(WHYLIB)/why/floats_strict.why
JESSIE3LIB ?=$(WHYLIB)/why3

COQDEP = coqdep

.PHONY: all coq pvs simplify vampire cvcl harvey smtlib zenon

all: simplify/float_sqrt_why.sx

project: why/float_sqrt.wpr

why/%.wpr:  WHYOPT=--project -dir why
why/%.wpr: why/%.why
	@echo 'why --project [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

goals: why/float_sqrt_ctx.why

why/%_ctx.why: WHYOPT=--multi-why -dir why
why/%_ctx.why: why/%.why
	@echo 'why --multi-why [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

coq: coq/float_sqrt_why.vo

coq/float_sqrt_why.v: WHYOPT=-coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/float_sqrt_why.v: why/float_sqrt.why
	@echo 'why -coq [...] why/float_sqrt.why' && $(WHY) $(JESSIELIBFILES) why/float_sqrt.why && rm -f coq/jessie_why.v

coq-goals: goals coq/float_sqrt_ctx_why.vo
	for f in why/*_po*.why; do make -f float_sqrt.makefile coq/`basename $$f .why`_why.v ; done

coq/float_sqrt_ctx_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export jessie_why." -coq-tactic "intuition"
coq/float_sqrt_ctx_why.v: why/float_sqrt_ctx.why
	@echo 'why -coq [...] why/float_sqrt_ctx.why' && $(WHY) why/float_sqrt_ctx.why

coq/%_why.v: WHYOPT=-no-pervasives -coq -dir coq -coq-preamble "Require Export float_sqrt_ctx_why." -coq-tactic "intuition"
coq/%_why.v: why/%.why
	@echo 'why -coq [...] why/$*.why' && $(WHY) why/float_sqrt_ctx.why why/$*.why

coq/%.vo: coq/%.v
	coqc -I coq $<
coq/%_po_why.vo: coq/float_sqrt_ctx_why.vo

pvs: pvs/float_sqrt_why.pvs

pvs/%_why.pvs: WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@jessie"
pvs/%_why.pvs: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why

pvs/jessie_why.pvs:WHYOPT=-pvs -dir pvs -pvs-preamble "IMPORTING why@why"
pvs/jessie_why.pvs:
	$(WHY) $(JESSIELIBFILES)

isabelle: isabelle/float_sqrt_why.thy

isabelle/%_why.thy: WHYOPT=-isabelle -dir isabelle -isabelle-base-theory jessie_why
isabelle/%_why.thy: why/%.why
	$(WHY) $(JESSIELIBFILES) why/$*.why
	cp -f HOME/lib/isabelle/jessie_why.thy isabelle/

simplify: simplify/float_sqrt_why.sx
	@echo 'Running Simplify on proof obligations' && ($(DP) $^)

simplify/%_why.sx: WHYOPT=-simplify -dir simplify
simplify/%_why.sx: why/%.why
	@echo 'why -simplify [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

vampire: vampire/float_sqrt_why.vp
	@echo 'Running Vampire on proof obligations' && ($(DP) $^)

vampire/%_why.vp: WHYOPT=-vampire -dir vampire
vampire/%_why.vp: why/%.why
	@echo 'why -vampire [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

alt-ergo ergo: why/float_sqrt_why.why
	@echo 'Running Alt-Ergo on proof obligations' && ($(DP) $^)

why/%_why.why: WHYOPT=-alt-ergo -dir why
why/%_why.why: why/%.why
	@echo 'why -alt-ergo [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

gappa: gappa/float_sqrt_why.gappa
	@echo 'Running Gappa on proof obligations' && ($(DP) $^)

gappa/%_why.gappa: WHYOPT=-gappa -dir gappa
gappa/%_why.gappa: why/%.why
	@echo 'why -gappa [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

cvcl: cvcl/float_sqrt_why.cvc

	@echo 'Running CVC Lite on proof obligations' && ($(DP) $^)

cvcl/%_why.cvc: WHYOPT=-cvcl -dir cvcl
cvcl/%_why.cvc: why/%.why
	@echo 'why -cvcl [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

harvey: harvey/float_sqrt_why.rv
	@echo 'Running haRVey on proof obligations' && ($(DP) $^)

harvey/%_why.rv: WHYOPT=-harvey -dir harvey
harvey/%_why.rv: why/%.why
	@echo 'why -harvey [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

zenon: zenon/float_sqrt_why.znn
	@echo 'Running Zenon on proof obligations' && ($(DP) $^)

zenon/%_why.znn: WHYOPT=-zenon -dir zenon
zenon/%_why.znn: why/%.why
	@echo 'why -zenon [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

smtlib: smtlib/float_sqrt_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) $^)

smtlib/%_why.smt:  WHYOPT=-smtlib --encoding sstrat --exp goal -dir smtlib
smtlib/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

z3: smtlib/float_sqrt_why.smt
	@echo 'Running Z3 on proof obligations' && ($(DP) -smt-solver z3 $^)

yices: smtlib/float_sqrt_why.smt
	@echo 'Running Yices on proof obligations' && ($(DP) -smt-solver yices $^)

cvc3: smtlib/float_sqrt_why.smt
	@echo 'Running CVC3 on proof obligations' && ($(DP) -smt-solver cvc3 $^)

smtlib-v1: smtlib-v1/float_sqrt_why.smt
smtlib-v1/%_why.smt:  WHYOPT=-smtlib --smtlib-v1 --encoding sstrat --exp goal -dir smtlib-v1
smtlib-v1/%_why.smt: why/%.why
	@echo 'why -smtlib [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why

verit: smtlib-v1/float_sqrt_why.smt
	@echo 'Running VeriT on proof obligations' && ($(DP) -smt-solver verit $^)

gui stat: float_sqrt.stat

%.stat: why/%.why
	@echo 'gwhy-bin [...] why/$*.why' && $(GWHY) $(JESSIELIBFILES) why/$*.why

why3: why/float_sqrt_why3.why
why/%_why3.why:  WHYOPT=-why3
why/%_why3.why: why/%.why
	@echo 'why -why3 [...] why/$*.why' && $(WHY) $(JESSIELIBFILES) why/$*.why
why3ide: why/float_sqrt_why3.why
	@echo 'why3ide [...] $<' && why3ide $<

why3ml: float_sqrt.mlw
	@echo 'why3ml [...] $<' && why3ide -I $(JESSIE3LIB) $<

-include float_sqrt.depend

depend: coq/float_sqrt_why.v
	-$(COQDEP) -I coq coq/float_sqrt*_why.v > float_sqrt.depend

clean:
	rm -f coq/*.vo

========== file tests/c/float_sqrt.jessie/float_sqrt.loc ==========
[JC_40]
file = "HOME/tests/c/float_sqrt.c"
line = 96
begin = 13
end = 29

[JC_41]
file = "HOME/tests/c/float_sqrt.c"
line = 97
begin = 13
end = 31

[JC_42]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 13

[JC_43]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 26

[JC_44]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 30

[JC_45]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 17
end = 30

[JC_46]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 31

[JC_1]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 18

[JC_47]
file = "HOME/tests/c/float_sqrt.c"
line = 101
begin = 13
end = 29

[JC_2]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 17
end = 23

[JC_48]
file = "HOME/tests/c/float_sqrt.c"
line = 102
begin = 13
end = 31

[JC_3]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 23

[JC_49]
file = "HOME/tests/c/float_sqrt.c"
line = 105
begin = 13
end = 41

[JC_4]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_5]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 18

[JC_6]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 17
end = 23

[JC_7]
file = "HOME/tests/c/float_sqrt.c"
line = 76
begin = 10
end = 23

[JC_8]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_9]
file = "HOME/tests/c/float_sqrt.c"
line = 77
begin = 9
end = 64

[JC_50]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 106
begin = 9
end = 14

[JC_51]
kind = UserCall
file = "HOME/tests/c/float_sqrt.c"
line = 88
begin = 6
end = 18

[JC_52]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 13

[JC_53]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 26

[JC_54]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 30

[JC_55]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 17
end = 30

[JC_56]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 31

[JC_57]
file = "HOME/tests/c/float_sqrt.c"
line = 91
begin = 13
end = 29

[JC_58]
file = "HOME/tests/c/float_sqrt.c"
line = 92
begin = 13
end = 31

[JC_59]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 13

[JC_60]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 26

[JC_61]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 30

[JC_62]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 17
end = 30

[JC_10]
file = "HOME/tests/c/float_sqrt.jessie/float_sqrt.jc"
line = 47
begin = 10
end = 18

[JC_63]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 31

[JC_11]
file = "HOME/tests/c/float_sqrt.c"
line = 77
begin = 9
end = 64

[JC_64]
file = "HOME/tests/c/float_sqrt.c"
line = 96
begin = 13
end = 29

[JC_12]
file = "HOME/tests/c/float_sqrt.jessie/float_sqrt.jc"
line = 47
begin = 10
end = 18

[JC_65]
file = "HOME/tests/c/float_sqrt.c"
line = 97
begin = 13
end = 31

[JC_13]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_66]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 13

[JC_14]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_67]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 26

[JC_15]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 18

[JC_68]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 21
end = 30

[JC_16]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 17
end = 23

[JC_69]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 17
end = 30

[sqrt_safety]
name = "Function sqrt"
behavior = "Safety"
file = "HOME/tests/c/float_sqrt.c"
line = 85
begin = 7
end = 11

[JC_17]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 23

[JC_18]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_19]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 18

[newton]
name = "Lemma newton"
behavior = "lemma"
file = "HOME/tests/c/float_sqrt.c"
line = 68
begin = 1
end = 187

[JC_70]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 100
begin = 6
end = 31

[JC_71]
file = "HOME/tests/c/float_sqrt.c"
line = 101
begin = 13
end = 29

[JC_72]
file = "HOME/tests/c/float_sqrt.c"
line = 102
begin = 13
end = 31

[JC_20]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 17
end = 23

[JC_73]
file = "HOME/tests/c/float_sqrt.c"
line = 105
begin = 13
end = 41

[JC_21]
file = "HOME/tests/c/float_sqrt.c"
line = 82
begin = 10
end = 23

[JC_74]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 106
begin = 9
end = 14

[JC_22]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_23]
file = "HOME/tests/c/float_sqrt.c"
line = 83
begin = 9
end = 61

[JC_24]
file = "HOME/tests/c/float_sqrt.c"
line = 83
begin = 9
end = 61

[JC_25]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_26]
file = "HOME/"
line = 0
begin = -1
end = -1

[JC_27]
kind = UserCall
file = "HOME/tests/c/float_sqrt.c"
line = 88
begin = 6
end = 18

[JC_28]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 13

[JC_29]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 26

[sqrt_ensures_default]
name = "Function sqrt"
behavior = "default behavior"
file = "HOME/tests/c/float_sqrt.c"
line = 85
begin = 7
end = 11

[JC_30]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 21
end = 30

[JC_31]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 17
end = 30

[JC_32]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 90
begin = 6
end = 31

[JC_33]
file = "HOME/tests/c/float_sqrt.c"
line = 91
begin = 13
end = 29

[JC_34]
file = "HOME/tests/c/float_sqrt.c"
line = 92
begin = 13
end = 31

[JC_35]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 13

[JC_36]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 26

[JC_37]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 21
end = 30

[JC_38]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 17
end = 30

[JC_39]
kind = FPOverflow
file = "HOME/tests/c/float_sqrt.c"
line = 95
begin = 6
end = 31

========== file tests/c/float_sqrt.jessie/why/float_sqrt.why ==========
type charP

type int8

type padding

type voidP

logic charP_tag:  -> charP tag_id

axiom charP_int : (int_of_tag(charP_tag) = (1))

logic charP_of_pointer_address: unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr :
 (forall p:charP pointer. (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom : parenttag(charP_tag, bottom_tag)

axiom charP_tags :
 (forall x:charP pointer.
  (forall charP_tag_table:charP tag_table.
   instanceof(charP_tag_table, x, charP_tag)))

predicate closeness(u:real, t_1:real, x_1:real) =
 (le_real(abs_real(sub_real(u,
                   mul_real(mul_real(0.5, t_1),
                   sub_real(3.0, mul_real(mul_real(t_1, t_1), x_1))))),
  1.0)
 and le_real(abs_real(sub_real(u, div_real(1.0, sqrt_real(x_1)))), 1.0))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8, y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_extensionality :
 (forall x:int8.
  (forall y:int8[eq_int(integer_of_int8(x), integer_of_int8(y))].
   (eq_int(integer_of_int8(x), integer_of_int8(y)) -> (x = y))))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

predicate left_valid_struct_charP(p:charP pointer, a:int,
 charP_alloc_table:charP alloc_table) =
 (offset_min(charP_alloc_table, p) <= a)

predicate left_valid_struct_voidP(p:voidP pointer, a:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_min(voidP_alloc_table, p) <= a)

predicate newton_rel(t:real, x_0:real) =
 (div_real(sub_real(mul_real(mul_real(0.5, t),
                    sub_real(3.0, mul_real(mul_real(t, t), x_0))),
           div_real(1.0, sqrt_real(x_0))),
  div_real(1.0, sqrt_real(x_0))) = mul_real(neg_real(add_real(1.5,
                                                     mul_real(0.5,
                                                     div_real(sub_real(t,
                                                              div_real(1.0,
                                                              sqrt_real(x_0))),
                                                     div_real(1.0,
                                                     sqrt_real(x_0)))))),
                                   mul_real(div_real(sub_real(t,
                                                     div_real(1.0,
                                                     sqrt_real(x_0))),
                                            div_real(1.0, sqrt_real(x_0))),
                                   div_real(sub_real(t,
                                            div_real(1.0, sqrt_real(x_0))),
                                   div_real(1.0, sqrt_real(x_0))))))

axiom pointer_addr_of_charP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address: unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address :
 (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p:charP pointer, b:int,
 charP_alloc_table:charP alloc_table) =
 (offset_max(charP_alloc_table, p) >= b)

predicate right_valid_struct_voidP(p:voidP pointer, b:int,
 voidP_alloc_table:voidP alloc_table) =
 (offset_max(voidP_alloc_table, p) >= b)

predicate strict_valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate strict_valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) = a)
 and (offset_max(charP_alloc_table, p) = b))

predicate strict_valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) = a)
 and (offset_max(voidP_alloc_table, p) = b))

predicate valid_root_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_root_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

predicate valid_struct_charP(p:charP pointer, a:int, b:int,
 charP_alloc_table:charP alloc_table) =
 ((offset_min(charP_alloc_table, p) <= a)
 and (offset_max(charP_alloc_table, p) >= b))

predicate valid_struct_voidP(p:voidP pointer, a:int, b:int,
 voidP_alloc_table:voidP alloc_table) =
 ((offset_min(voidP_alloc_table, p) <= a)
 and (offset_max(voidP_alloc_table, p) >= b))

logic voidP_tag:  -> voidP tag_id

axiom voidP_int : (int_of_tag(voidP_tag) = (1))

axiom voidP_of_pointer_address_of_pointer_addr :
 (forall p:voidP pointer. (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom : parenttag(voidP_tag, bottom_tag)

axiom voidP_tags :
 (forall x:voidP pointer.
  (forall voidP_tag_table:voidP tag_table.
   instanceof(voidP_tag_table, x, voidP_tag)))

lemma newton :
 (forall t_0:real.
  (forall x_0_1:real. (gt_real(x_0_1, 0.) -> newton_rel(t_0, x_0_1))))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

exception Return_label_exc of unit

parameter charP_alloc_table : charP alloc_table ref

parameter charP_tag_table : charP tag_table ref

parameter alloc_struct_charP :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { } charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter alloc_struct_charP_requires :
 n:int ->
  charP_alloc_table:charP alloc_table ref ->
   charP_tag_table:charP tag_table ref ->
    { ge_int(n, (0))} charP pointer writes charP_alloc_table,charP_tag_table
    { (strict_valid_struct_charP(result, (0), sub_int(n, (1)),
       charP_alloc_table)
      and (alloc_extends(charP_alloc_table@, charP_alloc_table)
          and (alloc_fresh(charP_alloc_table@, result, n)
              and instanceof(charP_tag_table, result, charP_tag)))) }

parameter voidP_alloc_table : voidP alloc_table ref

parameter voidP_tag_table : voidP tag_table ref

parameter alloc_struct_voidP :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { } voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter alloc_struct_voidP_requires :
 n:int ->
  voidP_alloc_table:voidP alloc_table ref ->
   voidP_tag_table:voidP tag_table ref ->
    { ge_int(n, (0))} voidP pointer writes voidP_alloc_table,voidP_tag_table
    { (strict_valid_struct_voidP(result, (0), sub_int(n, (1)),
       voidP_alloc_table)
      and (alloc_extends(voidP_alloc_table@, voidP_alloc_table)
          and (alloc_fresh(voidP_alloc_table@, result, n)
              and instanceof(voidP_tag_table, result, voidP_tag)))) }

parameter any_int8 : unit -> { } int8 { true }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter sqrt :
 x_2:double ->
  { } double
  { (JC_24:
    le_real(abs_real(sub_real(double_value(result),
                     sqrt_real(double_value(x_2)))),
    mul_real(0x1p-43, abs_real(sqrt_real(double_value(x_2)))))) }

parameter sqrt_init :
 x_0_0:double ->
  { } double
  { (JC_11:
    le_real(abs_real(sub_real(double_value(result),
                     div_real(1.0, sqrt_real(double_value(x_0_0))))),
    mul_real(0x1p-6, abs_real(div_real(1.0, sqrt_real(double_value(x_0_0))))))) }

parameter sqrt_init_requires :
 x_0_0:double ->
  { (JC_3:
    ((JC_1: le_real(0.5, double_value(x_0_0)))
    and (JC_2: le_real(double_value(x_0_0), 2.0))))}
  double
  { (JC_11:
    le_real(abs_real(sub_real(double_value(result),
                     div_real(1.0, sqrt_real(double_value(x_0_0))))),
    mul_real(0x1p-6, abs_real(div_real(1.0, sqrt_real(double_value(x_0_0))))))) }

parameter sqrt_requires :
 x_2:double ->
  { (JC_17:
    ((JC_15: le_real(0.5, double_value(x_2)))
    and (JC_16: le_real(double_value(x_2), 2.0))))}
  double
  { (JC_24:
    le_real(abs_real(sub_real(double_value(result),
                     sqrt_real(double_value(x_2)))),
    mul_real(0x1p-43, abs_real(sqrt_real(double_value(x_2)))))) }

let sqrt_ensures_default =
 fun (x_2 : double) ->
  { (JC_21:
    ((JC_19: le_real(0.5, double_value(x_2)))
    and (JC_20: le_real(double_value(x_2), 2.0)))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let t_2 = ref (any_double void) in
     (let u_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     (C_6:
     (C_13:
     (C_16:
     (C_23:
     (C_26:
     (C_33:
     (C_36:
     (C_39:
     begin
       (let jessie_<num> =
       (t_2 := (C_5: (let jessie_<num> = x_2 in (JC_51: (sqrt_init jessie_<num>))))) in
       void);
      (let jessie_<num> =
      (u_0 := (C_12:
              (JC_56:
              (((mul_double_safe nearest_even) (C_11:
                                               (JC_52:
                                               (((mul_double_safe nearest_even) 
                                                 (double_of_real_exact 0.5)) !t_2)))) 
               (C_10:
               (JC_55:
               (((sub_double_safe nearest_even) (C_9:
                                                (double_of_real_exact 3.0))) 
                (C_8:
                (JC_54:
                (((mul_double_safe nearest_even) (C_7:
                                                 (JC_53:
                                                 (((mul_double_safe nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      (assert { (JC_57: newton_rel(double_value(t_2), double_value(x_2))) };
      void); void;
      (assert
      { (JC_58:
        closeness(double_value(u_0), double_value(t_2), double_value(x_2))) };
      void); void; (let jessie_<num> = (t_2 := !u_0) in void);
      (let jessie_<num> =
      (u_0 := (C_22:
              (JC_63:
              (((mul_double_safe nearest_even) (C_21:
                                               (JC_59:
                                               (((mul_double_safe nearest_even) 
                                                 (double_of_real_exact 0.5)) !t_2)))) 
               (C_20:
               (JC_62:
               (((sub_double_safe nearest_even) (C_19:
                                                (double_of_real_exact 3.0))) 
                (C_18:
                (JC_61:
                (((mul_double_safe nearest_even) (C_17:
                                                 (JC_60:
                                                 (((mul_double_safe nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      (assert { (JC_64: newton_rel(double_value(t_2), double_value(x_2))) };
      void); void;
      (assert
      { (JC_65:
        closeness(double_value(u_0), double_value(t_2), double_value(x_2))) };
      void); void; (let jessie_<num> = (t_2 := !u_0) in void);
      (let jessie_<num> =
      (u_0 := (C_32:
              (JC_70:
              (((mul_double_safe nearest_even) (C_31:
                                               (JC_66:
                                               (((mul_double_safe nearest_even) 
                                                 (double_of_real_exact 0.5)) !t_2)))) 
               (C_30:
               (JC_69:
               (((sub_double_safe nearest_even) (C_29:
                                                (double_of_real_exact 3.0))) 
                (C_28:
                (JC_68:
                (((mul_double_safe nearest_even) (C_27:
                                                 (JC_67:
                                                 (((mul_double_safe nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      (assert { (JC_71: newton_rel(double_value(t_2), double_value(x_2))) };
      void); void;
      (assert
      { (JC_72:
        closeness(double_value(u_0), double_value(t_2), double_value(x_2))) };
      void); void; (let jessie_<num> = (t_2 := !u_0) in void);
      (assert
      { (JC_73:
        (mul_real(double_value(x_2),
         div_real(1.0, sqrt_real(double_value(x_2)))) = sqrt_real(double_value(x_2)))) };
      void); void;
      (let jessie_<num> =
      (__retres := (C_38:
                   (JC_74: (((mul_double_safe nearest_even) x_2) !t_2)))) in
      void); (return := !__retres); (raise Return) end))))))))))); absurd 
   end with Return -> !return end))
  { (JC_23:
    le_real(abs_real(sub_real(double_value(result),
                     sqrt_real(double_value(x_2)))),
    mul_real(0x1p-43, abs_real(sqrt_real(double_value(x_2)))))) }

let sqrt_safety =
 fun (x_2 : double) ->
  { (JC_21:
    ((JC_19: le_real(0.5, double_value(x_2)))
    and (JC_20: le_real(double_value(x_2), 2.0)))) }
  (init:
  (let return = ref (any_double void) in
  try
   begin
     (let t_2 = ref (any_double void) in
     (let u_0 = ref (any_double void) in
     (let __retres = ref (any_double void) in
     (C_6:
     (C_13:
     (C_16:
     (C_23:
     (C_26:
     (C_33:
     (C_36:
     (C_39:
     begin
       (let jessie_<num> =
       (t_2 := (C_5:
               (let jessie_<num> = x_2 in (JC_27: (sqrt_init_requires jessie_<num>))))) in
       void);
      (let jessie_<num> =
      (u_0 := (C_12:
              (JC_32:
              (((mul_double nearest_even) (C_11:
                                          (JC_28:
                                          (((mul_double nearest_even) 
                                            (double_of_real_exact 0.5)) !t_2)))) 
               (C_10:
               (JC_31:
               (((sub_double nearest_even) (C_9: (double_of_real_exact 3.0))) 
                (C_8:
                (JC_30:
                (((mul_double nearest_even) (C_7:
                                            (JC_29:
                                            (((mul_double nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      [ { } unit reads t_2
        { (JC_33: newton_rel(double_value(t_2), double_value(x_2))) } ];
      void;
      [ { } unit reads t_2,u_0
        { (JC_34:
          closeness(double_value(u_0), double_value(t_2), double_value(x_2))) } ];
      void; (let jessie_<num> = (t_2 := !u_0) in void);
      (let jessie_<num> =
      (u_0 := (C_22:
              (JC_39:
              (((mul_double nearest_even) (C_21:
                                          (JC_35:
                                          (((mul_double nearest_even) 
                                            (double_of_real_exact 0.5)) !t_2)))) 
               (C_20:
               (JC_38:
               (((sub_double nearest_even) (C_19: (double_of_real_exact 3.0))) 
                (C_18:
                (JC_37:
                (((mul_double nearest_even) (C_17:
                                            (JC_36:
                                            (((mul_double nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      [ { } unit reads t_2
        { (JC_40: newton_rel(double_value(t_2), double_value(x_2))) } ];
      void;
      [ { } unit reads t_2,u_0
        { (JC_41:
          closeness(double_value(u_0), double_value(t_2), double_value(x_2))) } ];
      void; (let jessie_<num> = (t_2 := !u_0) in void);
      (let jessie_<num> =
      (u_0 := (C_32:
              (JC_46:
              (((mul_double nearest_even) (C_31:
                                          (JC_42:
                                          (((mul_double nearest_even) 
                                            (double_of_real_exact 0.5)) !t_2)))) 
               (C_30:
               (JC_45:
               (((sub_double nearest_even) (C_29: (double_of_real_exact 3.0))) 
                (C_28:
                (JC_44:
                (((mul_double nearest_even) (C_27:
                                            (JC_43:
                                            (((mul_double nearest_even) !t_2) !t_2)))) x_2)))))))))) in
      void);
      [ { } unit reads t_2
        { (JC_47: newton_rel(double_value(t_2), double_value(x_2))) } ];
      void;
      [ { } unit reads t_2,u_0
        { (JC_48:
          closeness(double_value(u_0), double_value(t_2), double_value(x_2))) } ];
      void; (let jessie_<num> = (t_2 := !u_0) in void);
      [ { } unit
        { (JC_49:
          (mul_real(double_value(x_2),
           div_real(1.0, sqrt_real(double_value(x_2)))) = sqrt_real(double_value(x_2)))) } ];
      void;
      (let jessie_<num> =
      (__retres := (C_38: (JC_50: (((mul_double nearest_even) x_2) !t_2)))) in
      void); (return := !__retres); (raise Return) end))))))))))); absurd 
   end with Return -> !return end)) { true }


========== generation of alt-ergo VC output ==========
why -alt-ergo [...] why/float_sqrt.why
========== file tests/c/float_sqrt.jessie/why/float_sqrt_why.why ==========
logic eq_unit : unit, unit -> prop

logic neq_unit : unit, unit -> prop

logic eq_bool : bool, bool -> prop

logic neq_bool : bool, bool -> prop

logic lt_int : int, int -> prop

logic le_int : int, int -> prop

logic gt_int : int, int -> prop

logic ge_int : int, int -> prop

logic eq_int : int, int -> prop

logic neq_int : int, int -> prop

logic add_int : int, int -> int

logic sub_int : int, int -> int

logic mul_int : int, int -> int

logic neg_int : int -> int

predicate zwf_zero(a: int, b: int) = ((0 <= b) and (a < b))

logic bool_and : bool, bool -> bool

logic bool_or : bool, bool -> bool

logic bool_xor : bool, bool -> bool

logic bool_not : bool -> bool

axiom bool_and_def:
  (forall a:bool.
    (forall b:bool.
      ((bool_and(a, b) = true) <-> ((a = true) and (b = true)))))

axiom bool_or_def:
  (forall a:bool.
    (forall b:bool. ((bool_or(a, b) = true) <-> ((a = true) or (b = true)))))

axiom bool_xor_def:
  (forall a:bool. (forall b:bool. ((bool_xor(a, b) = true) <-> (a <> b))))

axiom bool_not_def: (forall a:bool. ((bool_not(a) = true) <-> (a = false)))

logic ite : bool, 'a1, 'a1 -> 'a1

axiom ite_true: (forall x:'a1. (forall y:'a1. (ite(true, x, y) = x)))

axiom ite_false: (forall x:'a1. (forall y:'a1. (ite(false, x, y) = y)))

logic lt_int_bool : int, int -> bool

logic le_int_bool : int, int -> bool

logic gt_int_bool : int, int -> bool

logic ge_int_bool : int, int -> bool

logic eq_int_bool : int, int -> bool

logic neq_int_bool : int, int -> bool

axiom lt_int_bool_axiom:
  (forall x:int. (forall y:int. ((lt_int_bool(x, y) = true) <-> (x < y))))

axiom le_int_bool_axiom:
  (forall x:int. (forall y:int. ((le_int_bool(x, y) = true) <-> (x <= y))))

axiom gt_int_bool_axiom:
  (forall x:int. (forall y:int. ((gt_int_bool(x, y) = true) <-> (x > y))))

axiom ge_int_bool_axiom:
  (forall x:int. (forall y:int. ((ge_int_bool(x, y) = true) <-> (x >= y))))

axiom eq_int_bool_axiom:
  (forall x:int. (forall y:int. ((eq_int_bool(x, y) = true) <-> (x = y))))

axiom neq_int_bool_axiom:
  (forall x:int. (forall y:int. ((neq_int_bool(x, y) = true) <-> (x <> y))))

logic abs_int : int -> int

axiom abs_int_pos: (forall x:int. ((x >= 0) -> (abs_int(x) = x)))

axiom abs_int_neg: (forall x:int. ((x <= 0) -> (abs_int(x) = (-x))))

logic int_max : int, int -> int

logic int_min : int, int -> int

axiom int_max_is_ge:
  (forall x:int.
    (forall y:int. ((int_max(x, y) >= x) and (int_max(x, y) >= y))))

axiom int_max_is_some:
  (forall x:int.
    (forall y:int. ((int_max(x, y) = x) or (int_max(x, y) = y))))

axiom int_min_is_le:
  (forall x:int.
    (forall y:int. ((int_min(x, y) <= x) and (int_min(x, y) <= y))))

axiom int_min_is_some:
  (forall x:int.
    (forall y:int. ((int_min(x, y) = x) or (int_min(x, y) = y))))

logic lt_real : real, real -> prop

logic le_real : real, real -> prop

logic gt_real : real, real -> prop

logic ge_real : real, real -> prop

logic eq_real : real, real -> prop

logic neq_real : real, real -> prop

logic add_real : real, real -> real

logic sub_real : real, real -> real

logic mul_real : real, real -> real

logic div_real : real, real -> real

logic neg_real : real -> real

logic real_of_int : int -> real

axiom real_of_int_zero: (real_of_int(0) = 0.0)

axiom real_of_int_one: (real_of_int(1) = 1.0)

axiom real_of_int_add:
  (forall x:int.
    (forall y:int.
      (real_of_int((x + y)) = (real_of_int(x) + real_of_int(y)))))

axiom real_of_int_sub:
  (forall x:int.
    (forall y:int.
      (real_of_int((x - y)) = (real_of_int(x) - real_of_int(y)))))

logic truncate_real_to_int : real -> int

axiom truncate_down_pos:
  (forall x:real.
    ((x >= 0.0) ->
     ((real_of_int(truncate_real_to_int(x)) <= x) and
      (x < real_of_int((truncate_real_to_int(x) + 1))))))

axiom truncate_up_neg:
  (forall x:real.
    ((x <= 0.0) ->
     ((real_of_int((truncate_real_to_int(x) - 1)) < x) and
      (x <= real_of_int(truncate_real_to_int(x))))))

logic floor_real_to_int : real -> int

logic ceil_real_to_int : real -> int

logic lt_real_bool : real, real -> bool

logic le_real_bool : real, real -> bool

logic gt_real_bool : real, real -> bool

logic ge_real_bool : real, real -> bool

logic eq_real_bool : real, real -> bool

logic neq_real_bool : real, real -> bool

axiom lt_real_bool_axiom:
  (forall x:real. (forall y:real. ((lt_real_bool(x, y) = true) <-> (x < y))))

axiom le_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((le_real_bool(x, y) = true) <-> (x <= y))))

axiom gt_real_bool_axiom:
  (forall x:real. (forall y:real. ((gt_real_bool(x, y) = true) <-> (x > y))))

axiom ge_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((ge_real_bool(x, y) = true) <-> (x >= y))))

axiom eq_real_bool_axiom:
  (forall x:real. (forall y:real. ((eq_real_bool(x, y) = true) <-> (x = y))))

axiom neq_real_bool_axiom:
  (forall x:real.
    (forall y:real. ((neq_real_bool(x, y) = true) <-> (x <> y))))

logic real_max : real, real -> real

logic real_min : real, real -> real

axiom real_max_is_ge:
  (forall x:real.
    (forall y:real. ((real_max(x, y) >= x) and (real_max(x, y) >= y))))

axiom real_max_is_some:
  (forall x:real.
    (forall y:real. ((real_max(x, y) = x) or (real_max(x, y) = y))))

axiom real_min_is_le:
  (forall x:real.
    (forall y:real. ((real_min(x, y) <= x) and (real_min(x, y) <= y))))

axiom real_min_is_some:
  (forall x:real.
    (forall y:real. ((real_min(x, y) = x) or (real_min(x, y) = y))))

function sqr_real(x: real) : real = (x * x)

logic sqrt_real : real -> real

axiom sqrt_pos: (forall x:real. ((x >= 0.0) -> (sqrt_real(x) >= 0.0)))

axiom sqrt_sqr: (forall x:real. ((x >= 0.0) -> (sqr_real(sqrt_real(x)) = x)))

axiom sqr_sqrt: (forall x:real. ((x >= 0.0) -> (sqrt_real((x * x)) = x)))

logic pow_real : real, real -> real

logic abs_real : real -> real

axiom abs_real_pos:
  (forall x:real [abs_real(x)]. ((x >= 0.0) -> (abs_real(x) = x)))

axiom abs_real_neg:
  (forall x:real [abs_real(x)]. ((x <= 0.0) -> (abs_real(x) = (-x))))

logic exp : real -> real

logic log : real -> real

logic log10 : real -> real

axiom log_exp: (forall x:real. (log(exp(x)) = x))

axiom exp_log: (forall x:real. ((x > 0.0) -> (exp(log(x)) = x)))

logic cos : real -> real

logic sin : real -> real

logic tan : real -> real

logic pi : real

logic cosh : real -> real

logic sinh : real -> real

logic tanh : real -> real

logic acos : real -> real

logic asin : real -> real

logic atan : real -> real

logic atan2 : real, real -> real

logic hypot : real, real -> real

axiom prod_pos:
  (forall x:real.
    (forall y:real.
      ((((x > 0.0) and (y > 0.0)) -> ((x * y) > 0.0)) and
       (((x < 0.0) and (y < 0.0)) -> ((x * y) > 0.0)))))

axiom abs_minus: (forall x:real. (abs_real((-x)) = abs_real(x)))

logic computer_div : int, int -> int

logic computer_mod : int, int -> int

logic math_div : int, int -> int

logic math_mod : int, int -> int

axiom math_div_mod:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (x = ((y * math_div(x, y)) + math_mod(x, y))))))

axiom math_mod_bound:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> ((0 <= math_mod(x, y)) and (math_mod(x, y) < abs_int(y))))))

axiom computer_div_mod:
  (forall x:int.
    (forall y:int [computer_div(x, y), computer_mod(x, y)].
      ((y <> 0) -> (x = ((y * computer_div(x, y)) + computer_mod(x, y))))))

axiom computer_div_bound:
  (forall x:int.
    (forall y:int.
      (((x >= 0) and (y > 0)) ->
       ((0 <= computer_div(x, y)) and (computer_div(x, y) <= x)))))

axiom computer_mod_bound:
  (forall x:int.
    (forall y:int. ((y <> 0) -> (abs_int(computer_mod(x, y)) < abs_int(y)))))

axiom computer_mod_sign_pos:
  (forall x:int.
    (forall y:int. (((x >= 0) and (y <> 0)) -> (computer_mod(x, y) >= 0))))

axiom computer_mod_sign_neg:
  (forall x:int.
    (forall y:int. (((x <= 0) and (y <> 0)) -> (computer_mod(x, y) <= 0))))

axiom computer_rounds_toward_zero:
  (forall x:int.
    (forall y:int.
      ((y <> 0) -> (abs_int((computer_div(x, y) * y)) <= abs_int(x)))))

type 't alloc_table

type 't pointer

type 't block

logic base_block : 'a1 pointer -> 'a1 block

logic offset_max : 'a1 alloc_table, 'a1 pointer -> int

logic offset_min : 'a1 alloc_table, 'a1 pointer -> int

predicate valid(a: 'a1 alloc_table, p: 'a1 pointer) =
  ((offset_min(a, p) <= 0) and (offset_max(a, p) >= 0))

predicate same_block(p: 'a1 pointer, q: 'a1 pointer) =
  (base_block(p) = base_block(q))

logic sub_pointer : 'a1 pointer, 'a1 pointer -> int

logic shift : 'a1 pointer, int -> 'a1 pointer

logic null : 'a1 pointer

logic pointer_address : 'a1 pointer -> unit pointer

logic absolute_address : int -> unit pointer

logic address : 'a1 pointer -> int

axiom address_injective:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. ((p = q) <-> (address(p) = address(q)))))

axiom address_null: (address(null) = 0)

axiom address_shift_lt:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) < address(shift(p, j))) <-> (i < j)))))

axiom address_shift_le:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [address(shift(p, i)), address(shift(p, j))].
        ((address(shift(p, i)) <= address(shift(p, j))) <-> (i <= j)))))

axiom shift_zero: (forall p:'a1 pointer [shift(p, 0)]. (shift(p, 0) = p))

axiom shift_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(shift(p, i), j)]. (shift(shift(p, i),
        j) = shift(p, (i + j))))))

axiom offset_max_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_max(a, shift(p, i)) = (offset_max(a, p) - i)))))

axiom offset_min_shift:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (forall i:int. (offset_min(a, shift(p, i)) = (offset_min(a, p) - i)))))

axiom neq_shift:
  (forall p:'a1 pointer.
    (forall i:int.
      (forall j:int [shift(p, i), shift(p, j)].
        ((i <> j) -> (shift(p, i) <> shift(p, j))))))

axiom null_not_valid: (forall a:'a1 alloc_table. (not valid(a, null)))

axiom null_pointer:
  (forall a:'a1 alloc_table.
    ((offset_min(a, null) >= 0) and (offset_max(a, null) <= (-2))))

logic eq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

logic neq_pointer_bool : 'a1 pointer, 'a1 pointer -> bool

axiom eq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer. ((eq_pointer_bool(p1, p2) = true) <-> (p1 = p2))))

axiom neq_pointer_bool_def:
  (forall p1:'a1 pointer.
    (forall p2:'a1 pointer.
      ((neq_pointer_bool(p1, p2) = true) <-> (p1 <> p2))))

axiom same_block_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(p, shift(q, i))].
        (same_block(p, q) -> same_block(p, shift(q, i))))))

axiom same_block_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [same_block(shift(q, i), p)].
        (same_block(q, p) -> same_block(shift(q, i), p)))))

axiom sub_pointer_shift:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> (p = shift(q, sub_pointer(p, q))))))

axiom sub_pointer_self:
  (forall p:'a1 pointer [sub_pointer(p, p)]. (sub_pointer(p, p) = 0))

axiom sub_pointer_zero:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer [sub_pointer(p, q)].
      (same_block(p, q) -> ((sub_pointer(p, q) = 0) -> (p = q)))))

axiom sub_pointer_shift_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(shift(p, i), q)]. (sub_pointer(shift(p, i),
        q) = (sub_pointer(p, q) + i)))))

axiom sub_pointer_shift_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [sub_pointer(p, shift(q, i))]. (sub_pointer(p, shift(q,
        i)) = (sub_pointer(p, q) - i)))))

type ('t, 'v) memory

logic select : ('a2, 'a1) memory, 'a2 pointer -> 'a1

logic store : ('a1, 'a2) memory, 'a1 pointer, 'a2 -> ('a1, 'a2) memory

axiom select_store_eq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 = p2) -> (select(store(m, p1, a), p2) = a))))))

axiom select_store_neq:
  (forall m:('a1, 'a2) memory.
    (forall p1:'a1 pointer.
      (forall p2:'a1 pointer.
        (forall a:'a2 [store(m, p1, a), p2].
          ((p1 <> p2) -> (select(store(m, p1, a), p2) = select(m, p2)))))))

type 't pset

logic pset_empty : 'a1 pset

logic pset_singleton : 'a1 pointer -> 'a1 pset

logic pset_deref : ('a2, 'a1 pointer) memory, 'a2 pset -> 'a1 pset

logic pset_union : 'a1 pset, 'a1 pset -> 'a1 pset

logic pset_all : 'a1 pset -> 'a1 pset

logic pset_range : 'a1 pset, int, int -> 'a1 pset

logic pset_range_left : 'a1 pset, int -> 'a1 pset

logic pset_range_right : 'a1 pset, int -> 'a1 pset

logic in_pset : 'a1 pointer, 'a1 pset -> prop

logic valid_pset : 'a1 alloc_table, 'a1 pset -> prop

predicate pset_disjoint(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (not (in_pset(p, ps1) and in_pset(p, ps2))))

predicate pset_included(ps1: 'a1 pset, ps2: 'a1 pset) =
  (forall p:'a1 pointer. (in_pset(p, ps1) -> in_pset(p, ps2)))

axiom pset_included_self: (forall ps:'a1 pset. pset_included(ps, ps))

axiom pset_included_range:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))].
            (((c <= a) and (b <= d)) -> pset_included(pset_range(ps, a, b),
             pset_range(ps, c, d))))))))

axiom pset_included_range_all:
  (forall ps:'a1 pset.
    (forall a:int.
      (forall b:int.
        (forall c:int.
          (forall d:int [pset_included(pset_range(ps, a, b), pset_range(ps,
            c, d))]. pset_included(pset_range(ps, a, b), pset_all(ps)))))))

axiom in_pset_empty: (forall p:'a1 pointer. (not in_pset(p, pset_empty)))

axiom in_pset_singleton:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer. (in_pset(p, pset_singleton(q)) <-> (p = q))))

axiom in_pset_deref:
  (forall p:'a1 pointer.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (in_pset(p, pset_deref(m, q)) <->
         (exists r:'a2 pointer. (in_pset(r, q) and (p = select(m, r))))))))

axiom in_pset_all:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (in_pset(p, pset_all(q)) <->
       (exists i:int.
         (exists r:'a1 pointer. (in_pset(r, q) and (p = shift(r, i))))))))

axiom in_pset_range:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (forall b:int.
          (in_pset(p, pset_range(q, a, b)) <->
           (exists i:int.
             (exists r:'a1 pointer.
               ((a <= i) and
                ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))))

axiom in_pset_range_left:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall b:int.
        (in_pset(p, pset_range_left(q, b)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((i <= b) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_range_right:
  (forall p:'a1 pointer.
    (forall q:'a1 pset.
      (forall a:int.
        (in_pset(p, pset_range_right(q, a)) <->
         (exists i:int.
           (exists r:'a1 pointer.
             ((a <= i) and (in_pset(r, q) and (p = shift(r, i))))))))))

axiom in_pset_union:
  (forall p:'a1 pointer.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (in_pset(p, pset_union(s1, s2)) <->
         (in_pset(p, s1) or in_pset(p, s2))))))

axiom valid_pset_empty: (forall a:'a1 alloc_table. valid_pset(a, pset_empty))

axiom valid_pset_singleton:
  (forall a:'a1 alloc_table.
    (forall p:'a1 pointer.
      (valid_pset(a, pset_singleton(p)) <-> valid(a, p))))

axiom valid_pset_deref:
  (forall a:'a1 alloc_table.
    (forall m:('a2, 'a1 pointer) memory.
      (forall q:'a2 pset.
        (valid_pset(a, pset_deref(m, q)) <->
         (forall r:'a2 pointer.
           (forall p:'a1 pointer.
             ((in_pset(r, q) and (p = select(m, r))) -> valid(a, p))))))))

axiom valid_pset_range:
  (forall a:'a1 alloc_table.
    (forall q:'a1 pset.
      (forall c:int.
        (forall d:int.
          (valid_pset(a, pset_range(q, c, d)) <->
           (forall i:int.
             (forall r:'a1 pointer.
               ((in_pset(r, q) and ((c <= i) and (i <= d))) -> valid(a,
                shift(r, i))))))))))

axiom valid_pset_union:
  (forall a:'a1 alloc_table.
    (forall s1:'a1 pset.
      (forall s2:'a1 pset.
        (valid_pset(a, pset_union(s1, s2)) <->
         (valid_pset(a, s1) and valid_pset(a, s2))))))

predicate not_assigns(a: 'a1 alloc_table, m1: ('a1, 'a2) memory, m2: ('a1,
  'a2) memory, l: 'a1 pset) =
  (forall p:'a1 pointer.
    ((valid(a, p) and (not in_pset(p, l))) -> (select(m2, p) = select(m1, p))))

axiom not_assigns_refl:
  (forall a:'a1 alloc_table.
    (forall m:('a1, 'a2) memory.
      (forall l:'a1 pset. not_assigns(a, m, m, l))))

axiom not_assigns_trans:
  (forall a:'a1 alloc_table.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory.
          (forall l:'a1 pset [not_assigns(a, m1, m2, l), not_assigns(a, m1,
            m3, l)].
            (not_assigns(a, m1, m2, l) ->
             (not_assigns(a, m2, m3, l) -> not_assigns(a, m1, m3, l))))))))

logic full_separated : 'a1 pointer, 'a2 pointer -> prop

axiom full_separated_shift1:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(p, shift(q, i))))))

axiom full_separated_shift2:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(p, q), shift(q, i)].
        (full_separated(p, q) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift3:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(shift(q, i), p)))))

axiom full_separated_shift4:
  (forall p:'a1 pointer.
    (forall q:'a1 pointer.
      (forall i:int [full_separated(q, p), shift(q, i)].
        (full_separated(q, p) -> full_separated(p, shift(q, i))))))

type 't tag_table

type 't tag_id

logic int_of_tag : 'a1 tag_id -> int

logic typeof : 'a1 tag_table, 'a1 pointer -> 'a1 tag_id

logic parenttag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag : 'a1 tag_id, 'a1 tag_id -> prop

logic subtag_bool : 'a1 tag_id, 'a1 tag_id -> bool

axiom subtag_bool_def:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id. ((subtag_bool(t1, t2) = true) <-> subtag(t1, t2))))

axiom subtag_refl: (forall t:'a1 tag_id. subtag(t, t))

axiom subtag_parent:
  (forall t1:'a1 tag_id.
    (forall t2:'a1 tag_id.
      (forall t3:'a1 tag_id.
        (subtag(t1, t2) -> (parenttag(t2, t3) -> subtag(t1, t3))))))

predicate instanceof(a: 'a1 tag_table, p: 'a1 pointer, t: 'a1 tag_id) =
  subtag(typeof(a, p), t)

logic downcast : 'a1 tag_table, 'a1 pointer, 'a1 tag_id -> 'a1 pointer

axiom downcast_instanceof:
  (forall a:'a1 tag_table.
    (forall p:'a1 pointer.
      (forall s:'a1 tag_id. (instanceof(a, p, s) -> (downcast(a, p, s) = p)))))

logic bottom_tag : 'a1 tag_id

axiom bottom_tag_axiom: (forall t:'a1 tag_id. subtag(t, bottom_tag))

predicate root_tag(t: 'a1 tag_id) = parenttag(t, bottom_tag)

axiom root_subtag:
  (forall a:'a1 tag_id.
    (forall b:'a1 tag_id.
      (forall c:'a1 tag_id.
        (root_tag(a) ->
         (root_tag(b) -> ((a <> b) -> (subtag(c, a) -> (not subtag(c, b)))))))))

predicate fully_packed(tag_table: 'a1 tag_table, mutable: ('a1,
  'a1 tag_id) memory, this: 'a1 pointer) = (select(mutable,
  this) = typeof(tag_table, this))

logic bw_compl : int -> int

logic bw_and : int, int -> int

axiom bw_and_not_null:
  (forall a:int.
    (forall b:int. ((bw_and(a, b) <> 0) -> ((a <> 0) and (b <> 0)))))

logic bw_xor : int, int -> int

logic bw_or : int, int -> int

logic lsl : int, int -> int

axiom lsl_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsl(a, b)))))

axiom lsl_left_positive_monotone:
  (forall a1:int.
    (forall a2:int.
      (forall b:int.
        (((0 <= a1) and ((a1 <= a2) and (0 <= b))) -> (lsl(a1, b) <= lsl(a2,
         b))))))

logic lsr : int, int -> int

axiom lsr_left_positive_returns_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= lsr(a, b)))))

axiom lsr_left_positive_decreases:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(a, b) <= a))))

logic asr : int, int -> int

axiom asr_positive_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (0 <= asr(a, b)))))

axiom asr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) <= a))))

axiom asr_lsr_same_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (asr(a, b) = lsr(a, b)))))

axiom lsl_of_lsr_decreases_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsl(lsr(a, b), b) <= a))))

axiom lsr_of_lsl_identity_on_positive:
  (forall a:int.
    (forall b:int. (((0 <= a) and (0 <= b)) -> (lsr(lsl(a, b), b) = a))))

logic alloc_extends : 'a1 alloc_table, 'a1 alloc_table -> prop

predicate alloc_fresh(a: 'a1 alloc_table, p: 'a1 pointer, n: int) =
  (forall i:int. (((0 <= i) and (i < n)) -> (not valid(a, shift(p, i)))))

axiom alloc_extends_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_min(a1, p) = offset_min(a2, p)))))))

axiom alloc_extends_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table [alloc_extends(a1, a2)].
      (alloc_extends(a1, a2) ->
       (forall p:'a1 pointer.
         (valid(a1, p) -> (offset_max(a1, p) = offset_max(a2, p)))))))

axiom alloc_extends_not_assigns_empty:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory.
          (forall l:'a1 pset.
            (forall p:'a1 pointer.
              (forall n:int [alloc_extends(a1, a2), alloc_fresh(a1, p, n),
                not_assigns(a2, m1, m2, l)].
                ((alloc_extends(a1, a2) and
                  (alloc_fresh(a1, p, n) and
                   (not_assigns(a2, m1, m2, l) and pset_included(l,
                    pset_all(pset_singleton(p)))))) ->
                 not_assigns(a1, m1, m2, pset_empty)))))))))

logic alloc_extends_except : 'a1 alloc_table, 'a1 alloc_table,
'a1 pset -> prop

axiom alloc_extends_except_offset_min:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_min(a1,
            p) = offset_min(a2, p))))))))

axiom alloc_extends_except_offset_max:
  (forall a1:'a1 alloc_table.
    (forall a2:'a1 alloc_table.
      (forall l:'a1 pset [alloc_extends_except(a1, a2, l)].
        (alloc_extends_except(a1, a2, l) ->
         (forall p:'a1 pointer.
           ((valid(a1, p) and (not in_pset(p, l))) -> (offset_max(a1,
            p) = offset_max(a2, p))))))))

type 'a mybag

logic in_mybag : 'a1, 'a1 mybag -> prop

logic disj_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom disj_sym:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag [disj_mybag(s1, s2)].
      (disj_mybag(s1, s2) -> disj_mybag(s2, s1))))

logic sub_mybag : 'a1 mybag, 'a1 mybag -> prop

axiom sub_refl:
  (forall sa:'a1 pointer mybag [sub_mybag(sa, sa)]. sub_mybag(sa, sa))

axiom sub_disj:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [disj_mybag(s1, s2), sub_mybag(s2, s3)|
        disj_mybag(s1, s3), sub_mybag(s2, s3)].
        (disj_mybag(s1, s3) -> (sub_mybag(s2, s3) -> disj_mybag(s1, s2))))))

axiom sub_in:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall p:'a1 [in_mybag(p, s1), sub_mybag(s1, s2)| in_mybag(p, s2),
        sub_mybag(s1, s2)].
        ((not in_mybag(p, s2)) ->
         (sub_mybag(s1, s2) -> (not in_mybag(p, s1)))))))

axiom sub_sub:
  (forall s1:'a1 mybag.
    (forall s2:'a1 mybag.
      (forall s3:'a1 mybag [sub_mybag(s1, s3), sub_mybag(s2, s3)|
        sub_mybag(s1, s3), sub_mybag(s1, s2)].
        (sub_mybag(s1, s2) -> (sub_mybag(s2, s3) -> sub_mybag(s1, s3))))))

logic frame_between : 'a1 pointer mybag, ('a1, 'a2) memory, ('a1,
'a2) memory -> prop

axiom frame_between_refl:
  (forall sa:'a1 pointer mybag.
    (forall m:('a1, 'a2) memory [frame_between(sa, m, m)]. frame_between(sa,
      m, m)))

axiom frame_between_gen:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, store(m2, p, v))].
            (frame_between(sa, m1, m2) ->
             (in_mybag(p, sa) -> frame_between(sa, store(m1, p, v), m2))))))))

axiom frame_between_gen2:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall m3:('a1, 'a2) memory [frame_between(sa, m1, m2),
          frame_between(sa, m1, m3)| frame_between(sa, m2, m3),
          frame_between(sa, m1, m3)].
          (frame_between(sa, m1, m2) ->
           (frame_between(sa, m2, m3) -> frame_between(sa, m1, m3)))))))

axiom frame_between_gen_sub1:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s12, m1, m2),
              frame_between(s13, m1, m3)].
              (sub_mybag(s12, s13) ->
               (frame_between(s12, m1, m2) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_gen_sub2:
  (forall s12:'a1 pointer mybag.
    (forall s23:'a1 pointer mybag.
      (forall s13:'a1 pointer mybag.
        (forall m1:('a1, 'a2) memory.
          (forall m2:('a1, 'a2) memory.
            (forall m3:('a1, 'a2) memory [frame_between(s23, m2, m3),
              frame_between(s13, m1, m3)].
              (frame_between(s12, m1, m2) ->
               (sub_mybag(s23, s13) ->
                (frame_between(s23, m2, m3) -> frame_between(s13, m1, m3))))))))))

axiom frame_between_pointer:
  (forall sa:'a1 pointer mybag.
    (forall m1:('a1, 'a2) memory.
      (forall m2:('a1, 'a2) memory.
        (forall p:'a1 pointer.
          (forall v:'a2 [frame_between(sa, m1, m2), select(m1, p)|
            frame_between(sa, m1, m2), select(m2, p)].
            (frame_between(sa, m1, m2) ->
             ((not in_mybag(p, sa)) -> (select(m1, p) = select(m2, p)))))))))

axiom frame_between_sub:
  (forall sa:'a1 pointer mybag.
    (forall sb:'a1 pointer mybag.
      (forall m1:('a1, 'a2) memory.
        (forall m2:('a1, 'a2) memory [frame_between(sa, m1, m2),
          sub_mybag(sa, sb)].
          (frame_between(sa, m1, m2) ->
           (sub_mybag(sa, sb) -> frame_between(sb, m1, m2)))))))

type mode

logic nearest_even : mode

logic to_zero : mode

logic up : mode

logic down : mode

logic nearest_away : mode

logic mode_match : mode, 'a1, 'a1, 'a1, 'a1, 'a1 -> 'a1

axiom mode_match_nearest_even:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_even, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_2))))))

axiom mode_match_to_zero:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(to_zero, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_3))))))

axiom mode_match_up:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(up, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_4))))))

axiom mode_match_down:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6)]. (mode_match(down, aux_2, aux_3, aux_4, aux_5,
            aux_6) = aux_5))))))

axiom mode_match_nearest_away:
  (forall aux_2:'a1.
    (forall aux_3:'a1.
      (forall aux_4:'a1.
        (forall aux_5:'a1.
          (forall aux_6:'a1 [mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6)]. (mode_match(nearest_away, aux_2, aux_3, aux_4,
            aux_5, aux_6) = aux_6))))))

axiom mode_inversion:
  (forall aux_1:mode.
    (((((aux_1 = nearest_even) or (aux_1 = to_zero)) or (aux_1 = up)) or
      (aux_1 = down)) or
     (aux_1 = nearest_away)))

logic mode_to_int : mode -> int

axiom mode_to_int_nearest_even: (mode_to_int(nearest_even) = 0)

axiom mode_to_int_to_zero: (mode_to_int(to_zero) = 1)

axiom mode_to_int_up: (mode_to_int(up) = 2)

axiom mode_to_int_down: (mode_to_int(down) = 3)

axiom mode_to_int_nearest_away: (mode_to_int(nearest_away) = 4)

type double

logic round_double : mode, real -> real

logic round_double_logic : mode, real -> double

logic double_value : double -> real

logic double_exact : double -> real

logic double_model : double -> real

function double_round_error(x: double) : real =
  abs_real((double_value(x) - double_exact(x)))

function double_total_error(x: double) : real =
  abs_real((double_value(x) - double_model(x)))

function max_double() : real = 0x1.FFFFFFFFFFFFFp1023

predicate no_overflow_double(m: mode, x: real) = (abs_real(round_double(m,
  x)) <= max_double)

axiom bounded_real_no_overflow_double:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_double) -> no_overflow_double(m, x))))

axiom round_double_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_double(m, x) <= round_double(m, y))))))

axiom exact_round_double_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-9007199254740992) <= i) and (i <= 9007199254740992)) ->
       (round_double(m, real_of_int(i)) = real_of_int(i)))))

axiom exact_round_double_for_doubles:
  (forall x:double.
    (forall m:mode. (round_double(m, double_value(x)) = double_value(x))))

axiom round_double_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_double(m1, round_double(m2,
        x)) = round_double(m2, x)))))

axiom round_down_double_neg:
  (forall x:real. (round_double(down, (-x)) = (-round_double(up, x))))

axiom round_up_double_neg:
  (forall x:real. (round_double(up, (-x)) = (-round_double(down, x))))

axiom round_double_down_le: (forall x:real. (round_double(down, x) <= x))

axiom round_up_double_ge: (forall x:real. (round_double(up, x) >= x))

type single

logic round_single : mode, real -> real

logic round_single_logic : mode, real -> single

logic single_value : single -> real

logic single_exact : single -> real

logic single_model : single -> real

function single_round_error(x: single) : real =
  abs_real((single_value(x) - single_exact(x)))

function single_total_error(x: single) : real =
  abs_real((single_value(x) - single_model(x)))

function max_single() : real = 0x1.FFFFFEp127

predicate no_overflow_single(m: mode, x: real) = (abs_real(round_single(m,
  x)) <= max_single)

axiom bounded_real_no_overflow_single:
  (forall m:mode.
    (forall x:real.
      ((abs_real(x) <= max_single) -> no_overflow_single(m, x))))

axiom round_single_monotonic:
  (forall x:real.
    (forall y:real.
      (forall m:mode.
        ((x <= y) -> (round_single(m, x) <= round_single(m, y))))))

axiom exact_round_single_for_integers:
  (forall i:int.
    (forall m:mode.
      ((((-16777216) <= i) and (i <= 16777216)) -> (round_single(m,
       real_of_int(i)) = real_of_int(i)))))

axiom exact_round_single_for_singles:
  (forall x:single.
    (forall m:mode. (round_single(m, single_value(x)) = single_value(x))))

axiom round_single_idempotent:
  (forall m1:mode.
    (forall m2:mode.
      (forall x:real. (round_single(m1, round_single(m2,
        x)) = round_single(m2, x)))))

axiom round_down_single_neg:
  (forall x:real. (round_single(down, (-x)) = (-round_single(up, x))))

axiom round_up_single_neg:
  (forall x:real. (round_single(up, (-x)) = (-round_single(down, x))))

axiom round_single_down_le: (forall x:real. (round_single(down, x) <= x))

axiom round_up_single_ge: (forall x:real. (round_single(up, x) >= x))

axiom single_value_is_bounded:
  (forall x:single. (abs_real(single_value(x)) <= max_single))

axiom double_value_is_bounded:
  (forall x:double. (abs_real(double_value(x)) <= max_double))

predicate single_of_real_post(m: mode, x: real, res: single) =
  ((single_value(res) = round_single(m, x)) and
   ((single_exact(res) = x) and (single_model(res) = x)))

predicate single_of_double_post(m: mode, x: double, res: single) =
  ((single_value(res) = round_single(m, double_value(x))) and
   ((single_exact(res) = double_exact(x)) and
    (single_model(res) = double_model(x))))

predicate add_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) + single_value(y)))) and
   ((single_exact(res) = (single_exact(x) + single_exact(y))) and
    (single_model(res) = (single_model(x) + single_model(y)))))

predicate sub_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) - single_value(y)))) and
   ((single_exact(res) = (single_exact(x) - single_exact(y))) and
    (single_model(res) = (single_model(x) - single_model(y)))))

predicate mul_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m,
   (single_value(x) * single_value(y)))) and
   ((single_exact(res) = (single_exact(x) * single_exact(y))) and
    (single_model(res) = (single_model(x) * single_model(y)))))

predicate div_single_post(m: mode, x: single, y: single, res: single) =
  ((single_value(res) = round_single(m, div_real(single_value(x),
   single_value(y)))) and
   ((single_exact(res) = div_real(single_exact(x), single_exact(y))) and
    (single_model(res) = div_real(single_model(x), single_model(y)))))

predicate sqrt_single_post(m: mode, x: single, res: single) =
  ((single_value(res) = round_single(m, sqrt_real(single_value(x)))) and
   ((single_exact(res) = sqrt_real(single_exact(x))) and
    (single_model(res) = sqrt_real(single_model(x)))))

predicate neg_single_post(x: single, res: single) =
  ((single_value(res) = (-single_value(x))) and
   ((single_exact(res) = (-single_exact(x))) and
    (single_model(res) = (-single_model(x)))))

predicate abs_single_post(x: single, res: single) =
  ((single_value(res) = abs_real(single_value(x))) and
   ((single_exact(res) = abs_real(single_exact(x))) and
    (single_model(res) = abs_real(single_model(x)))))

predicate double_of_real_post(m: mode, x: real, res: double) =
  ((double_value(res) = round_double(m, x)) and
   ((double_exact(res) = x) and (double_model(res) = x)))

predicate double_of_single_post(x: single, res: double) =
  ((double_value(res) = single_value(x)) and
   ((double_exact(res) = single_exact(x)) and
    (double_model(res) = single_model(x))))

predicate add_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) + double_value(y)))) and
   ((double_exact(res) = (double_exact(x) + double_exact(y))) and
    (double_model(res) = (double_model(x) + double_model(y)))))

predicate sub_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) - double_value(y)))) and
   ((double_exact(res) = (double_exact(x) - double_exact(y))) and
    (double_model(res) = (double_model(x) - double_model(y)))))

predicate mul_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m,
   (double_value(x) * double_value(y)))) and
   ((double_exact(res) = (double_exact(x) * double_exact(y))) and
    (double_model(res) = (double_model(x) * double_model(y)))))

predicate div_double_post(m: mode, x: double, y: double, res: double) =
  ((double_value(res) = round_double(m, div_real(double_value(x),
   double_value(y)))) and
   ((double_exact(res) = div_real(double_exact(x), double_exact(y))) and
    (double_model(res) = div_real(double_model(x), double_model(y)))))

predicate sqrt_double_post(m: mode, x: double, res: double) =
  ((double_value(res) = round_double(m, sqrt_real(double_value(x)))) and
   ((double_exact(res) = sqrt_real(double_exact(x))) and
    (double_model(res) = sqrt_real(double_model(x)))))

predicate neg_double_post(x: double, res: double) =
  ((double_value(res) = (-double_value(x))) and
   ((double_exact(res) = (-double_exact(x))) and
    (double_model(res) = (-double_model(x)))))

predicate abs_double_post(x: double, res: double) =
  ((double_value(res) = abs_real(double_value(x))) and
   ((double_exact(res) = abs_real(double_exact(x))) and
    (double_model(res) = abs_real(double_model(x)))))

type charP

type int8

type padding

type voidP

logic charP_tag : charP tag_id

axiom charP_int: (int_of_tag(charP_tag) = 1)

logic charP_of_pointer_address : unit pointer -> charP pointer

axiom charP_of_pointer_address_of_pointer_addr:
  (forall p:charP pointer.
    (p = charP_of_pointer_address(pointer_address(p))))

axiom charP_parenttag_bottom: parenttag(charP_tag, bottom_tag)

axiom charP_tags:
  (forall x:charP pointer.
    (forall charP_tag_table:charP tag_table. instanceof(charP_tag_table, x,
      charP_tag)))

predicate closeness(u: real, t_1: real, x_1: real) =
  ((abs_real((u - ((0.5 * t_1) * (3.0 - ((t_1 * t_1) * x_1))))) <= 1.0) and
   (abs_real((u - div_real(1.0, sqrt_real(x_1)))) <= 1.0))

logic integer_of_int8 : int8 -> int

predicate eq_int8(x: int8, y: int8) =
  (integer_of_int8(x) = integer_of_int8(y))

logic int8_of_integer : int -> int8

axiom int8_coerce:
  (forall x:int.
    ((((-128) <= x) and (x <= 127)) ->
     (integer_of_int8(int8_of_integer(x)) = x)))

axiom int8_extensionality:
  (forall x:int8.
    (forall y:int8. ((integer_of_int8(x) = integer_of_int8(y)) -> (x = y))))

axiom int8_range:
  (forall x:int8.
    (((-128) <= integer_of_int8(x)) and (integer_of_int8(x) <= 127)))

predicate left_valid_struct_charP(p: charP pointer, a: int,
  charP_alloc_table: charP alloc_table) = (offset_min(charP_alloc_table,
  p) <= a)

predicate left_valid_struct_voidP(p: voidP pointer, a: int,
  voidP_alloc_table: voidP alloc_table) = (offset_min(voidP_alloc_table,
  p) <= a)

predicate newton_rel(t: real, x_0: real) =
  (div_real((((0.5 * t) * (3.0 - ((t * t) * x_0))) - div_real(1.0,
  sqrt_real(x_0))), div_real(1.0,
  sqrt_real(x_0))) = ((-(1.5 + (0.5 * div_real((t - div_real(1.0,
  sqrt_real(x_0))), div_real(1.0,
  sqrt_real(x_0)))))) * (div_real((t - div_real(1.0, sqrt_real(x_0))),
  div_real(1.0, sqrt_real(x_0))) * div_real((t - div_real(1.0,
  sqrt_real(x_0))), div_real(1.0, sqrt_real(x_0))))))

axiom pointer_addr_of_charP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(charP_of_pointer_address(p))))

logic voidP_of_pointer_address : unit pointer -> voidP pointer

axiom pointer_addr_of_voidP_of_pointer_address:
  (forall p:unit pointer. (p = pointer_address(voidP_of_pointer_address(p))))

predicate right_valid_struct_charP(p: charP pointer, b: int,
  charP_alloc_table: charP alloc_table) = (offset_max(charP_alloc_table,
  p) >= b)

predicate right_valid_struct_voidP(p: voidP pointer, b: int,
  voidP_alloc_table: voidP alloc_table) = (offset_max(voidP_alloc_table,
  p) >= b)

predicate strict_valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate strict_valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) = a) and (offset_max(charP_alloc_table,
   p) = b))

predicate strict_valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) = a) and (offset_max(voidP_alloc_table,
   p) = b))

predicate valid_root_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_root_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

predicate valid_struct_charP(p: charP pointer, a: int, b: int,
  charP_alloc_table: charP alloc_table) =
  ((offset_min(charP_alloc_table, p) <= a) and (offset_max(charP_alloc_table,
   p) >= b))

predicate valid_struct_voidP(p: voidP pointer, a: int, b: int,
  voidP_alloc_table: voidP alloc_table) =
  ((offset_min(voidP_alloc_table, p) <= a) and (offset_max(voidP_alloc_table,
   p) >= b))

logic voidP_tag : voidP tag_id

axiom voidP_int: (int_of_tag(voidP_tag) = 1)

axiom voidP_of_pointer_address_of_pointer_addr:
  (forall p:voidP pointer.
    (p = voidP_of_pointer_address(pointer_address(p))))

axiom voidP_parenttag_bottom: parenttag(voidP_tag, bottom_tag)

axiom voidP_tags:
  (forall x:voidP pointer.
    (forall voidP_tag_table:voidP tag_table. instanceof(voidP_tag_table, x,
      voidP_tag)))

goal newton:
  (forall t_0:real.
    (forall x_0_1:real. ((x_0_1 > 0.) -> newton_rel(t_0, x_0_1))))

axiom newton_as_axiom:
  (forall t_0:real.
    (forall x_0_1:real. ((x_0_1 > 0.) -> newton_rel(t_0, x_0_1))))

goal sqrt_ensures_default_po_1:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2)))

goal sqrt_ensures_default_po_2:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2)))

goal sqrt_ensures_default_po_3:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2)))

goal sqrt_ensures_default_po_4:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_65": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2)))

goal sqrt_ensures_default_po_5:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_65": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  forall result20:double.
  mul_double_post(nearest_even, result15, result19, result20) ->
  forall u_0_1:double.
  (u_0_1 = result20) ->
  ("JC_71": newton_rel(double_value(t_2_1), double_value(x_2)))

goal sqrt_ensures_default_po_6:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_65": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  forall result20:double.
  mul_double_post(nearest_even, result15, result19, result20) ->
  forall u_0_1:double.
  (u_0_1 = result20) ->
  ("JC_71": newton_rel(double_value(t_2_1), double_value(x_2))) ->
  ("JC_72": closeness(double_value(u_0_1), double_value(t_2_1),
  double_value(x_2)))

goal sqrt_ensures_default_po_7:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_65": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  forall result20:double.
  mul_double_post(nearest_even, result15, result19, result20) ->
  forall u_0_1:double.
  (u_0_1 = result20) ->
  ("JC_71": newton_rel(double_value(t_2_1), double_value(x_2))) ->
  ("JC_72": closeness(double_value(u_0_1), double_value(t_2_1),
  double_value(x_2))) ->
  forall t_2_2:double.
  (t_2_2 = u_0_1) ->
  ("JC_73": ((double_value(x_2) * div_real(1.0,
  sqrt_real(double_value(x_2)))) = sqrt_real(double_value(x_2))))

goal sqrt_ensures_default_po_8:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_57": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_58": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_64": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_65": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  forall result20:double.
  mul_double_post(nearest_even, result15, result19, result20) ->
  forall u_0_1:double.
  (u_0_1 = result20) ->
  ("JC_71": newton_rel(double_value(t_2_1), double_value(x_2))) ->
  ("JC_72": closeness(double_value(u_0_1), double_value(t_2_1),
  double_value(x_2))) ->
  forall t_2_2:double.
  (t_2_2 = u_0_1) ->
  ("JC_73": ((double_value(x_2) * div_real(1.0,
  sqrt_real(double_value(x_2)))) = sqrt_real(double_value(x_2)))) ->
  forall result21:double.
  mul_double_post(nearest_even, x_2, t_2_2, result21) ->
  forall __retres:double.
  (__retres = result21) ->
  forall return:double.
  (return = __retres) ->
  ("JC_23":
  (abs_real((double_value(return) - sqrt_real(double_value(x_2)))) <= (0x1.p-43 * abs_real(sqrt_real(double_value(x_2))))))

goal sqrt_safety_po_1:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2)))

goal sqrt_safety_po_2:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even, (double_value(t_2) * double_value(t_2)))

goal sqrt_safety_po_3:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2)))

goal sqrt_safety_po_4:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4)))

goal sqrt_safety_po_5:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5)))

goal sqrt_safety_po_6:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0)))

goal sqrt_safety_po_7:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0)))

goal sqrt_safety_po_8:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2)))

goal sqrt_safety_po_9:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11)))

goal sqrt_safety_po_10:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12)))

goal sqrt_safety_po_11:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1)))

goal sqrt_safety_po_12:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_1) * double_value(t_2_1)))

goal sqrt_safety_po_13:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_1) * double_value(t_2_1))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  no_overflow_double(nearest_even,
  (double_value(result17) * double_value(x_2)))

goal sqrt_safety_po_14:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_1) * double_value(t_2_1))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  no_overflow_double(nearest_even,
  (double_value(result17) * double_value(x_2))) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  no_overflow_double(nearest_even,
  (double_value(result16) - double_value(result18)))

goal sqrt_safety_po_15:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_1) * double_value(t_2_1))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  no_overflow_double(nearest_even,
  (double_value(result17) * double_value(x_2))) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  no_overflow_double(nearest_even,
  (double_value(result16) - double_value(result18))) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  no_overflow_double(nearest_even,
  (double_value(result15) * double_value(result19)))

goal sqrt_safety_po_16:
  forall x_2:double.
  ("JC_21":
  (("JC_19": (0.5 <= double_value(x_2))) and
   ("JC_20": (double_value(x_2) <= 2.0)))) ->
  ("JC_3":
  (("JC_1": (0.5 <= double_value(x_2))) and
   ("JC_2": (double_value(x_2) <= 2.0)))) ->
  forall result:double.
  ("JC_11": (abs_real((double_value(result) - div_real(1.0,
  sqrt_real(double_value(x_2))))) <= (0x1.p-6 * abs_real(div_real(1.0,
  sqrt_real(double_value(x_2))))))) ->
  forall t_2:double.
  (t_2 = result) ->
  forall result0:double.
  ((double_value(result0) = 0.5) and
   ((double_exact(result0) = 0.5) and (double_model(result0) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result0) * double_value(t_2))) ->
  forall result1:double.
  mul_double_post(nearest_even, result0, t_2, result1) ->
  forall result2:double.
  ((double_value(result2) = 3.0) and
   ((double_exact(result2) = 3.0) and (double_model(result2) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2) * double_value(t_2))) ->
  forall result3:double.
  mul_double_post(nearest_even, t_2, t_2, result3) ->
  no_overflow_double(nearest_even,
  (double_value(result3) * double_value(x_2))) ->
  forall result4:double.
  mul_double_post(nearest_even, result3, x_2, result4) ->
  no_overflow_double(nearest_even,
  (double_value(result2) - double_value(result4))) ->
  forall result5:double.
  sub_double_post(nearest_even, result2, result4, result5) ->
  no_overflow_double(nearest_even,
  (double_value(result1) * double_value(result5))) ->
  forall result6:double.
  mul_double_post(nearest_even, result1, result5, result6) ->
  forall u_0:double.
  (u_0 = result6) ->
  ("JC_33": newton_rel(double_value(t_2), double_value(x_2))) ->
  ("JC_34": closeness(double_value(u_0), double_value(t_2),
  double_value(x_2))) ->
  forall t_2_0:double.
  (t_2_0 = u_0) ->
  forall result7:double.
  ((double_value(result7) = 0.5) and
   ((double_exact(result7) = 0.5) and (double_model(result7) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result7) * double_value(t_2_0))) ->
  forall result8:double.
  mul_double_post(nearest_even, result7, t_2_0, result8) ->
  forall result9:double.
  ((double_value(result9) = 3.0) and
   ((double_exact(result9) = 3.0) and (double_model(result9) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_0) * double_value(t_2_0))) ->
  forall result10:double.
  mul_double_post(nearest_even, t_2_0, t_2_0, result10) ->
  no_overflow_double(nearest_even,
  (double_value(result10) * double_value(x_2))) ->
  forall result11:double.
  mul_double_post(nearest_even, result10, x_2, result11) ->
  no_overflow_double(nearest_even,
  (double_value(result9) - double_value(result11))) ->
  forall result12:double.
  sub_double_post(nearest_even, result9, result11, result12) ->
  no_overflow_double(nearest_even,
  (double_value(result8) * double_value(result12))) ->
  forall result13:double.
  mul_double_post(nearest_even, result8, result12, result13) ->
  forall u_0_0:double.
  (u_0_0 = result13) ->
  ("JC_40": newton_rel(double_value(t_2_0), double_value(x_2))) ->
  ("JC_41": closeness(double_value(u_0_0), double_value(t_2_0),
  double_value(x_2))) ->
  forall t_2_1:double.
  (t_2_1 = u_0_0) ->
  forall result14:double.
  ((double_value(result14) = 0.5) and
   ((double_exact(result14) = 0.5) and (double_model(result14) = 0.5))) ->
  no_overflow_double(nearest_even,
  (double_value(result14) * double_value(t_2_1))) ->
  forall result15:double.
  mul_double_post(nearest_even, result14, t_2_1, result15) ->
  forall result16:double.
  ((double_value(result16) = 3.0) and
   ((double_exact(result16) = 3.0) and (double_model(result16) = 3.0))) ->
  no_overflow_double(nearest_even,
  (double_value(t_2_1) * double_value(t_2_1))) ->
  forall result17:double.
  mul_double_post(nearest_even, t_2_1, t_2_1, result17) ->
  no_overflow_double(nearest_even,
  (double_value(result17) * double_value(x_2))) ->
  forall result18:double.
  mul_double_post(nearest_even, result17, x_2, result18) ->
  no_overflow_double(nearest_even,
  (double_value(result16) - double_value(result18))) ->
  forall result19:double.
  sub_double_post(nearest_even, result16, result18, result19) ->
  no_overflow_double(nearest_even,
  (double_value(result15) * double_value(result19))) ->
  forall result20:double.
  mul_double_post(nearest_even, result15, result19, result20) ->
  forall u_0_1:double.
  (u_0_1 = result20) ->
  ("JC_47": newton_rel(double_value(t_2_1), double_value(x_2))) ->
  ("JC_48": closeness(double_value(u_0_1), double_value(t_2_1),
  double_value(x_2))) ->
  forall t_2_2:double.
  (t_2_2 = u_0_1) ->
  ("JC_49": ((double_value(x_2) * div_real(1.0,
  sqrt_real(double_value(x_2)))) = sqrt_real(double_value(x_2)))) ->
  no_overflow_double(nearest_even, (double_value(x_2) * double_value(t_2_2)))

========== running alt-ergo ==========
Running Alt-Ergo on proof obligations
(. = valid * = invalid ? = unknown # = timeout ! = failure)
why/float_sqrt_why.why        : ?.#.#.###.############### (4/0/1/20/0)
total   :  25
valid   :   4 ( 16%)
invalid :   0 (  0%)
unknown :   1 (  4%)
timeout :  20 ( 80%)
failure :   0 (  0%)
