(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export Why.
Dp_hint frame_between_sub.
Dp_hint frame_between_pointer.
Dp_hint frame_between_gen_sub2.
Dp_hint frame_between_gen_sub1.
Dp_hint frame_between_gen2.
Dp_hint frame_between_gen.
Dp_hint frame_between_refl.
Dp_hint sub_sub.
Dp_hint sub_in.
Dp_hint sub_disj.
Dp_hint sub_refl.
Dp_hint disj_sym.
Dp_hint alloc_extends_except_offset_max.
Dp_hint alloc_extends_except_offset_min.
Dp_hint alloc_extends_not_assigns_empty.
Dp_hint alloc_extends_offset_max.
Dp_hint alloc_extends_offset_min.
Dp_hint lsr_of_lsl_identity_on_positive.
Dp_hint lsl_of_lsr_decreases_on_positive.
Dp_hint asr_lsr_same_on_positive.
Dp_hint asr_decreases_on_positive.
Dp_hint asr_positive_on_positive.
Dp_hint lsr_left_positive_decreases.
Dp_hint lsr_left_positive_returns_positive.
Dp_hint lsl_left_positive_monotone.
Dp_hint lsl_left_positive_returns_positive.
Dp_hint bw_and_not_null.
Dp_hint root_subtag.
Dp_hint bottom_tag_axiom.
Dp_hint downcast_instanceof.
Dp_hint subtag_parent.
Dp_hint subtag_refl.
Dp_hint subtag_bool_def.
Dp_hint full_separated_shift4.
Dp_hint full_separated_shift3.
Dp_hint full_separated_shift2.
Dp_hint full_separated_shift1.
Dp_hint not_assigns_trans.
Dp_hint not_assigns_refl.
Dp_hint valid_pset_union.
Dp_hint valid_pset_range.
Dp_hint valid_pset_deref.
Dp_hint valid_pset_singleton.
Dp_hint valid_pset_empty.
Dp_hint in_pset_union.
Dp_hint in_pset_range_right.
Dp_hint in_pset_range_left.
Dp_hint in_pset_range.
Dp_hint in_pset_all.
Dp_hint in_pset_deref.
Dp_hint in_pset_singleton.
Dp_hint in_pset_empty.
Dp_hint pset_included_range_all.
Dp_hint pset_included_range.
Dp_hint pset_included_self.
Dp_hint select_store_neq.
Dp_hint select_store_eq.
Dp_hint sub_pointer_shift_right.
Dp_hint sub_pointer_shift_left.
Dp_hint sub_pointer_zero.
Dp_hint sub_pointer_self.
Dp_hint sub_pointer_shift.
Dp_hint same_block_shift_left.
Dp_hint same_block_shift_right.
Dp_hint neq_pointer_bool_def.
Dp_hint eq_pointer_bool_def.
Dp_hint null_pointer.
Dp_hint null_not_valid.
Dp_hint neq_shift.
Dp_hint offset_min_shift.
Dp_hint offset_max_shift.
Dp_hint shift_shift.
Dp_hint shift_zero.
Dp_hint address_shift_le.
Dp_hint address_shift_lt.
Dp_hint address_null.
Dp_hint address_injective.
Dp_hint computer_rounds_toward_zero.
Dp_hint computer_mod_sign_neg.
Dp_hint computer_mod_sign_pos.
Dp_hint computer_mod_bound.
Dp_hint computer_div_bound.
Dp_hint computer_div_mod.
Dp_hint math_mod_bound.
Dp_hint math_div_mod.
Dp_hint abs_minus.
Dp_hint prod_pos.
Dp_hint exp_log.
Dp_hint log_exp.
Dp_hint abs_real_neg.
Dp_hint abs_real_pos.
Dp_hint sqr_sqrt.
Dp_hint sqrt_sqr.
Dp_hint sqrt_pos.
Dp_hint real_min_is_some.
Dp_hint real_min_is_le.
Dp_hint real_max_is_some.
Dp_hint real_max_is_ge.
Dp_hint neq_real_bool_axiom.
Dp_hint eq_real_bool_axiom.
Dp_hint ge_real_bool_axiom.
Dp_hint gt_real_bool_axiom.
Dp_hint le_real_bool_axiom.
Dp_hint lt_real_bool_axiom.
Dp_hint truncate_up_neg.
Dp_hint truncate_down_pos.
Dp_hint real_of_int_sub.
Dp_hint real_of_int_add.
Dp_hint real_of_int_one.
Dp_hint real_of_int_zero.
Dp_hint int_min_is_some.
Dp_hint int_min_is_le.
Dp_hint int_max_is_some.
Dp_hint int_max_is_ge.
Dp_hint abs_int_neg.
Dp_hint abs_int_pos.
Dp_hint neq_int_bool_axiom.
Dp_hint eq_int_bool_axiom.
Dp_hint ge_int_bool_axiom.
Dp_hint gt_int_bool_axiom.
Dp_hint le_int_bool_axiom.
Dp_hint lt_int_bool_axiom.
Dp_hint ite_false.
Dp_hint ite_true.
Dp_hint bool_not_def.
Dp_hint bool_xor_def.
Dp_hint bool_or_def.
Dp_hint bool_and_def.

(*Why type*) Definition charP: Set.
Admitted.

(*Why type*) Definition int32: Set.
Admitted.

(*Why type*) Definition int8: Set.
Admitted.

(*Why type*) Definition intP: Set.
Admitted.

(*Why type*) Definition int_set: Set.
Admitted.

(*Why type*) Definition padding: Set.
Admitted.

(*Why type*) Definition uint32: Set.
Admitted.

(*Why type*) Definition voidP: Set.
Admitted.

(*Why logic*) Definition intset :
  (pointer intP) -> Z -> (memory intP int32) -> int_set.
Admitted.

(*Why logic*) Definition empty_int_set : int_set.
Admitted.

(*Why logic*) Definition add_int_set : int_set -> int32 -> int_set.
Admitted.

(*Why axiom*) Lemma _jc_axiom_intset :
  (forall (s_8:(pointer intP)),
   (forall (n_1:Z),
    (forall (intP_intM_s_8_1_at_L:(memory intP int32)),
     (intset s_8 n_1 intP_intM_s_8_1_at_L) =
     (if_then_else (eq_int_bool n_1 0) empty_int_set
      (add_int_set
       (intset s_8 (n_1 - 1) intP_intM_s_8_1_at_L) (select
                                                    intP_intM_s_8_1_at_L (
                                                    shift s_8 (n_1 - 1)))))))).
Admitted.
Dp_hint _jc_axiom_intset.

(*Why predicate*) Definition alloc_extends_struct_charP  (old_charP_alloc_table:(alloc_table charP)) (charP_alloc_table:(alloc_table charP))
  := (alloc_extends old_charP_alloc_table charP_alloc_table).

(*Why predicate*) Definition alloc_extends_struct_intP  (old_intP_alloc_table:(alloc_table intP)) (intP_alloc_table:(alloc_table intP))
  := (alloc_extends old_intP_alloc_table intP_alloc_table).

(*Why predicate*) Definition alloc_extends_struct_voidP  (old_voidP_alloc_table:(alloc_table voidP)) (voidP_alloc_table:(alloc_table voidP))
  := (alloc_extends old_voidP_alloc_table voidP_alloc_table).

(*Why logic*) Definition charP_tag : (tag_id charP).
Admitted.

(*Why axiom*) Lemma charP_int : (int_of_tag charP_tag) = 1.
Admitted.
Dp_hint charP_int.

(*Why axiom*) Lemma charP_parenttag_bottom :
  (parenttag charP_tag (@bottom_tag charP)).
Admitted.
Dp_hint charP_parenttag_bottom.

(*Why axiom*) Lemma charP_tags :
  (forall (x:(pointer charP)),
   (forall (charP_tag_table:(tag_table charP)),
    (instanceof charP_tag_table x charP_tag))).
Admitted.
Dp_hint charP_tags.

(*Why logic*) Definition integer_of_int32 : int32 -> Z.
Admitted.

(*Why predicate*) Definition eq_int32  (x:int32) (y:int32)
  := (integer_of_int32 x) = (integer_of_int32 y).

(*Why logic*) Definition integer_of_int8 : int8 -> Z.
Admitted.

(*Why predicate*) Definition eq_int8  (x:int8) (y:int8)
  := (integer_of_int8 x) = (integer_of_int8 y).

(*Why logic*) Definition integer_of_uint32 : uint32 -> Z.
Admitted.

(*Why predicate*) Definition eq_uint32  (x:uint32) (y:uint32)
  := (integer_of_uint32 x) = (integer_of_uint32 y).

(*Why predicate*) Definition fresh_singleton_struct_charP  (p:(pointer charP)) (charP_alloc_table:(alloc_table charP))
  := (alloc_fresh charP_alloc_table p 1) /\ ~(valid charP_alloc_table p).

(*Why predicate*) Definition fresh_singleton_struct_intP  (p:(pointer intP)) (intP_alloc_table:(alloc_table intP))
  := (alloc_fresh intP_alloc_table p 1) /\ ~(valid intP_alloc_table p).

(*Why predicate*) Definition fresh_singleton_struct_voidP  (p:(pointer voidP)) (voidP_alloc_table:(alloc_table voidP))
  := (alloc_fresh voidP_alloc_table p 1) /\ ~(valid voidP_alloc_table p).

(*Why predicate*) Definition fresh_struct_charP  (p:(pointer charP)) (n:Z) (charP_alloc_table:(alloc_table charP))
  := (alloc_fresh charP_alloc_table p n) /\
     (forall (i:Z), (0 >= i /\ i < n -> True)).

(*Why predicate*) Definition fresh_struct_intP  (p:(pointer intP)) (n:Z) (intP_alloc_table:(alloc_table intP))
  := (alloc_fresh intP_alloc_table p n) /\
     (forall (i:Z), (0 >= i /\ i < n -> True)).

(*Why predicate*) Definition fresh_struct_voidP  (p:(pointer voidP)) (n:Z) (voidP_alloc_table:(alloc_table voidP))
  := (alloc_fresh voidP_alloc_table p n) /\
     (forall (i:Z), (0 >= i /\ i < n -> True)).

(*Why predicate*) Definition instanceof_singleton_struct_charP  (p:(pointer charP)) (charP_tag_table:(tag_table charP))
  := (instanceof charP_tag_table p charP_tag).

(*Why logic*) Definition intP_tag : (tag_id intP).
Admitted.

(*Why predicate*) Definition instanceof_singleton_struct_intP  (p:(pointer intP)) (intP_tag_table:(tag_table intP))
  := (instanceof intP_tag_table p intP_tag).

(*Why logic*) Definition voidP_tag : (tag_id voidP).
Admitted.

(*Why predicate*) Definition instanceof_singleton_struct_voidP  (p:(pointer voidP)) (voidP_tag_table:(tag_table voidP))
  := (instanceof voidP_tag_table p voidP_tag).

(*Why predicate*) Definition instanceof_struct_charP  (p:(pointer charP)) (l:Z) (r:Z) (charP_tag_table:(tag_table charP))
  := (forall (i:Z),
      (l >= i /\ i < r -> (instanceof charP_tag_table (shift p i) charP_tag))).

(*Why predicate*) Definition instanceof_struct_intP  (p:(pointer intP)) (l:Z) (r:Z) (intP_tag_table:(tag_table intP))
  := (forall (i:Z),
      (l >= i /\ i < r -> (instanceof intP_tag_table (shift p i) intP_tag))).

(*Why predicate*) Definition instanceof_struct_voidP  (p:(pointer voidP)) (l:Z) (r:Z) (voidP_tag_table:(tag_table voidP))
  := (forall (i:Z),
      (l >= i /\ i < r -> (instanceof voidP_tag_table (shift p i) voidP_tag))).

(*Why logic*) Definition int32_of_integer : Z -> int32.
Admitted.

(*Why axiom*) Lemma int32_coerce :
  (forall (x:Z),
   ((-2147483648) <= x /\ x <= 2147483647 ->
    (integer_of_int32 (int32_of_integer x)) = x)).
Admitted.
Dp_hint int32_coerce.

(*Why axiom*) Lemma int32_extensionality :
  (forall (x:int32),
   (forall (y:int32), ((integer_of_int32 x) = (integer_of_int32 y) -> x = y))).
Admitted.
Dp_hint int32_extensionality.

(*Why axiom*) Lemma int32_range :
  (forall (x:int32), (-2147483648) <= (integer_of_int32 x) /\
   (integer_of_int32 x) <= 2147483647).
Admitted.
Dp_hint int32_range.

(*Why logic*) Definition int8_of_integer : Z -> int8.
Admitted.

(*Why axiom*) Lemma int8_coerce :
  (forall (x:Z),
   ((-128) <= x /\ x <= 127 -> (integer_of_int8 (int8_of_integer x)) = x)).
Admitted.
Dp_hint int8_coerce.

(*Why axiom*) Lemma int8_extensionality :
  (forall (x:int8),
   (forall (y:int8), ((integer_of_int8 x) = (integer_of_int8 y) -> x = y))).
Admitted.
Dp_hint int8_extensionality.

(*Why axiom*) Lemma int8_range :
  (forall (x:int8), (-128) <= (integer_of_int8 x) /\ (integer_of_int8 x) <=
   127).
Admitted.
Dp_hint int8_range.

(*Why axiom*) Lemma intP_int : (int_of_tag intP_tag) = 1.
Admitted.
Dp_hint intP_int.

(*Why axiom*) Lemma intP_parenttag_bottom :
  (parenttag intP_tag (@bottom_tag intP)).
Admitted.
Dp_hint intP_parenttag_bottom.

(*Why axiom*) Lemma intP_tags :
  (forall (x:(pointer intP)),
   (forall (intP_tag_table:(tag_table intP)),
    (instanceof intP_tag_table x intP_tag))).
Admitted.
Dp_hint intP_tags.

(*Why logic*) Definition intersect_int_set : int_set -> int_set -> int_set.
Admitted.

(*Why logic*) Definition size_int_set : int_set -> Z.
Admitted.

(*Why predicate*) Definition is_intset  (s_10:(pointer intP)) (n_2:Z) (intP_intM_s_10_2_at_L:(memory intP int32))
  := (size_int_set (intset s_10 n_2 intP_intM_s_10_2_at_L)) = n_2.

(*Why logic*) Definition isin_int_set : int_set -> int32 -> bool.
Admitted.

(*Why predicate*) Definition left_valid_struct_charP  (p:(pointer charP)) (a:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_intP  (p:(pointer intP)) (a:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_min intP_alloc_table p) <= a.

(*Why predicate*) Definition left_valid_struct_voidP  (p:(pointer voidP)) (a:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a.

(*Why predicate*) Definition right_valid_struct_charP  (p:(pointer charP)) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_intP  (p:(pointer intP)) (b:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_max intP_alloc_table p) >= b.

(*Why predicate*) Definition right_valid_struct_voidP  (p:(pointer voidP)) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_max voidP_alloc_table p) >= b.

(*Why predicate*) Definition strict_valid_root_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) = a /\
     (offset_max charP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_root_intP  (p:(pointer intP)) (a:Z) (b:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_min intP_alloc_table p) = a /\ (offset_max intP_alloc_table p) =
     b.

(*Why predicate*) Definition strict_valid_root_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) = a /\
     (offset_max voidP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) = a /\
     (offset_max charP_alloc_table p) = b.

(*Why predicate*) Definition strict_valid_struct_intP  (p:(pointer intP)) (a:Z) (b:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_min intP_alloc_table p) = a /\ (offset_max intP_alloc_table p) =
     b.

(*Why predicate*) Definition strict_valid_struct_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) = a /\
     (offset_max voidP_alloc_table p) = b.

(*Why logic*) Definition uint32_of_integer : Z -> uint32.
Admitted.

(*Why axiom*) Lemma uint32_coerce :
  (forall (x:Z),
   (0 <= x /\ x <= 4294967295 -> (integer_of_uint32 (uint32_of_integer x)) =
    x)).
Admitted.
Dp_hint uint32_coerce.

(*Why axiom*) Lemma uint32_extensionality :
  (forall (x:uint32),
   (forall (y:uint32),
    ((integer_of_uint32 x) = (integer_of_uint32 y) -> x = y))).
Admitted.
Dp_hint uint32_extensionality.

(*Why axiom*) Lemma uint32_range :
  (forall (x:uint32), 0 <= (integer_of_uint32 x) /\ (integer_of_uint32 x) <=
   4294967295).
Admitted.
Dp_hint uint32_range.

(*Why function*) Definition umin  (n1:uint32) (n2:uint32)
  := (if_then_else (lt_int_bool (integer_of_uint32 n1) (integer_of_uint32 n2))
      n1 n2).

(*Why predicate*) Definition valid_root_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a /\
     (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_intP  (p:(pointer intP)) (a:Z) (b:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_min intP_alloc_table p) <= a /\
     (offset_max intP_alloc_table p) >= b.

(*Why predicate*) Definition valid_root_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a /\
     (offset_max voidP_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_charP  (p:(pointer charP)) (a:Z) (b:Z) (charP_alloc_table:(alloc_table charP))
  := (offset_min charP_alloc_table p) <= a /\
     (offset_max charP_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_intP  (p:(pointer intP)) (a:Z) (b:Z) (intP_alloc_table:(alloc_table intP))
  := (offset_min intP_alloc_table p) <= a /\
     (offset_max intP_alloc_table p) >= b.

(*Why predicate*) Definition valid_struct_voidP  (p:(pointer voidP)) (a:Z) (b:Z) (voidP_alloc_table:(alloc_table voidP))
  := (offset_min voidP_alloc_table p) <= a /\
     (offset_max voidP_alloc_table p) >= b.

(*Why axiom*) Lemma voidP_int : (int_of_tag voidP_tag) = 1.
Admitted.
Dp_hint voidP_int.

(*Why axiom*) Lemma voidP_parenttag_bottom :
  (parenttag voidP_tag (@bottom_tag voidP)).
Admitted.
Dp_hint voidP_parenttag_bottom.

(*Why axiom*) Lemma voidP_tags :
  (forall (x:(pointer voidP)),
   (forall (voidP_tag_table:(tag_table voidP)),
    (instanceof voidP_tag_table x voidP_tag))).
Admitted.
Dp_hint voidP_tags.

(*Why axiom*) Lemma add2_set :
  (forall (s_1:int_set),
   (forall (i_1:int32),
    (add_int_set (add_int_set s_1 i_1) i_1) = (add_int_set s_1 i_1))).
Admitted.
Dp_hint add2_set.

(*Why axiom*) Lemma add_int_set_trans :
  (forall (s_2:int_set),
   (forall (i_2:int32),
    (forall (j:int32),
     (add_int_set (add_int_set s_2 i_2) j) =
     (add_int_set (add_int_set s_2 j) i_2)))).
Admitted.
Dp_hint add_int_set_trans.

(*Why axiom*) Lemma isin_empty_set :
  (forall (i_3:int32), (isin_int_set empty_int_set i_3) = false).
Admitted.
Dp_hint isin_empty_set.

(*Why axiom*) Lemma isin_add_int_set1 :
  (forall (s_3:int_set),
   (forall (i_4:int32), (isin_int_set (add_int_set s_3 i_4) i_4) = true)).
Admitted.
Dp_hint isin_add_int_set1.

(*Why axiom*) Lemma isin_add_int_set2 :
  (forall (s_4:int_set),
   (forall (i_5:int32),
    (forall (j_0:int32),
     ((integer_of_int32 i_5) <> (integer_of_int32 j_0) ->
      (isin_int_set (add_int_set s_4 i_5) j_0) = (isin_int_set s_4 j_0))))).
Admitted.
Dp_hint isin_add_int_set2.

(*Why axiom*) Lemma intersect_com :
  (forall (s1_1_0:int_set),
   (forall (s2_0_0:int_set),
    (intersect_int_set s1_1_0 s2_0_0) = (intersect_int_set s2_0_0 s1_1_0))).
Admitted.
Dp_hint intersect_com.

(*Why axiom*) Lemma intersect_trans :
  (forall (s1_2:int_set),
   (forall (s2_1_0:int_set),
    (forall (s3:int_set),
     (intersect_int_set s1_2 (intersect_int_set s2_1_0 s3)) =
     (intersect_int_set (intersect_int_set s1_2 s2_1_0) s3)))).
Admitted.
Dp_hint intersect_trans.

(*Why axiom*) Lemma intersect_def0 :
  (forall (s_5:int_set),
   (intersect_int_set empty_int_set s_5) = empty_int_set).
Admitted.
Dp_hint intersect_def0.

(*Why axiom*) Lemma intersect_def :
  (forall (s1_3:int_set),
   (forall (s2_2:int_set),
    (forall (i_6:int32),
     ((isin_int_set s1_3 i_6) = true /\ (isin_int_set s2_2 i_6) = true <->
      (isin_int_set (intersect_int_set s1_3 s2_2) i_6) = true)))).
Admitted.
Dp_hint intersect_def.

(*Why axiom*) Lemma size_int_set_def0 : (size_int_set empty_int_set) = 0.
Admitted.
Dp_hint size_int_set_def0.

(*Why axiom*) Lemma size_int_set_def1 :
  (forall (s_6:int_set),
   (forall (e:int32),
    ((isin_int_set s_6 e) = true -> (size_int_set (add_int_set s_6 e)) =
     (size_int_set s_6)))).
Admitted.
Dp_hint size_int_set_def1.

(*Why axiom*) Lemma size_int_set_def2 :
  (forall (s_7:int_set),
   (forall (e_0:int32),
    (~(isin_int_set s_7 e_0) = true -> (size_int_set (add_int_set s_7 e_0)) =
     ((size_int_set s_7) + 1)))).
Admitted.
Dp_hint size_int_set_def2.

(* Why obligation from file "intersect.c", line 58, characters 4-158: *)
(*Why goal*) Lemma intset_intersect_prop : 
  (forall (s1_4:int_set),
   (forall (s2_3:int_set), (size_int_set (intersect_int_set s1_4 s2_3)) <=
    (int_min (size_int_set s1_4) (size_int_set s2_3)))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint intset_intersect_prop.

(* Why obligation from file "intersect.c", line 69, characters 4-84: *)
(*Why goal*) Lemma intset0 : 
  (forall (intP_intM_s_9_6_at_L:(memory intP int32)),
   (forall (s_9:(pointer intP)),
    (intset s_9 0 intP_intM_s_9_6_at_L) = empty_int_set)).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint intset0.

(* Why obligation from file "intersect.c", line 75, characters 4-73: *)
(*Why goal*) Lemma is_intset0 : 
  (forall (intP_intM_s_11_7_at_L:(memory intP int32)),
   (forall (s_11:(pointer intP)), (is_intset s_11 0 intP_intM_s_11_7_at_L))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint is_intset0.

(* Why obligation from file "intersect.c", line 79, characters 4-73: *)
(*Why goal*) Lemma is_intset1 : 
  (forall (intP_intM_s_12_8_at_L:(memory intP int32)),
   (forall (s_12:(pointer intP)), (is_intset s_12 1 intP_intM_s_12_8_at_L))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint is_intset1.

(* Why obligation from file "intersect.c", line 83, characters 4-159: *)
(*Why goal*) Lemma is_intset_new : 
  (forall (intP_intM_s_13_9_at_L:(memory intP int32)),
   (forall (s_13:(pointer intP)),
    (forall (n_3:Z),
     ((is_intset s_13 n_3 intP_intM_s_13_9_at_L) /\
      ~(isin_int_set
        (intset s_13 n_3 intP_intM_s_13_9_at_L) (select
                                                 intP_intM_s_13_9_at_L (
                                                 shift s_13 n_3))) =
       true ->
      (is_intset s_13 (n_3 + 1) intP_intM_s_13_9_at_L))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint is_intset_new.

(* Why obligation from file "intersect.c", line 88, characters 4-122: *)
(*Why goal*) Lemma is_intset_sub : 
  (forall (intP_intM_s_14_10_at_L:(memory intP int32)),
   (forall (s_14:(pointer intP)),
    (forall (n_4:Z),
     (forall (m:Z),
      ((is_intset s_14 n_4 intP_intM_s_14_10_at_L) /\ 0 <= m /\ m <= n_4 ->
       (is_intset s_14 m intP_intM_s_14_10_at_L)))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint is_intset_sub.

(* Why obligation from file "intersect.c", line 92, characters 4-202: *)
(*Why goal*) Lemma is_intset_ex : 
  (forall (intP_intM_s_15_11_at_L:(memory intP int32)),
   (forall (s_15:(pointer intP)),
    (forall (n_5:Z),
     ((is_intset s_15 n_5 intP_intM_s_15_11_at_L) <->
      (forall (i_7:Z),
       (forall (j_1:Z),
        (0 <= i_7 /\ i_7 < n_5 /\ 0 <= j_1 /\ j_1 < n_5 /\ i_7 <> j_1 ->
         (integer_of_int32 (select intP_intM_s_15_11_at_L (shift s_15 i_7))) <>
         (integer_of_int32 (select intP_intM_s_15_11_at_L (shift s_15 j_1)))))))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint is_intset_ex.

(* Why obligation from file "intersect.c", line 98, characters 4-170: *)
(*Why goal*) Lemma isin_int_set_ex : 
  (forall (intP_intM_s_16_12_at_L:(memory intP int32)),
   (forall (s_16:(pointer intP)),
    (forall (n_6:Z),
     (forall (a:int32),
      ((isin_int_set (intset s_16 n_6 intP_intM_s_16_12_at_L) a) = true <->
       (exists i_8:Z, 0 <= i_8 /\ i_8 < n_6 /\
        (integer_of_int32 (select intP_intM_s_16_12_at_L (shift s_16 i_8))) =
        (integer_of_int32 a))))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint isin_int_set_ex.

(* Why obligation from file "intersect.c", line 103, characters 4-684: *)
(*Why goal*) Lemma intersect_ex : 
  (forall (intP_intM_r_15_at_L3:(memory intP int32)),
   (forall (intP_intM_s2_4_14_at_L2:(memory intP int32)),
    (forall (intP_intM_s1_5_13_at_L1:(memory intP int32)),
     (forall (s1_5:(pointer intP)),
      (forall (s2_4:(pointer intP)),
       (forall (r:(pointer intP)),
        (forall (n1_0_0:Z),
         (forall (n2_0_0:Z),
          (forall (k_0:Z),
           ((intset r k_0 intP_intM_r_15_at_L3) =
            (intersect_int_set
             (intset s1_5 n1_0_0 intP_intM_s1_5_13_at_L1) (intset
                                                           s2_4 n2_0_0 intP_intM_s2_4_14_at_L2)) <->
            (forall (i_9:Z),
             (0 <= i_9 /\ i_9 < k_0 ->
              (exists j1:Z,
               (exists j2:Z, 0 <= j1 /\ j1 < n1_0_0 /\ 0 <= j2 /\ j2 <
                n2_0_0 /\
                (integer_of_int32 (select intP_intM_r_15_at_L3 (shift r i_9))) =
                (integer_of_int32
                 (select intP_intM_s1_5_13_at_L1 (shift s1_5 j1))) /\
                (integer_of_int32 (select intP_intM_r_15_at_L3 (shift r i_9))) =
                (integer_of_int32
                 (select intP_intM_s2_4_14_at_L2 (shift s2_4 j2))))))) /\
            (forall (j1_0:Z),
             (forall (j2_0:Z),
              (0 <= j1_0 /\ j1_0 < n1_0_0 /\ 0 <= j2_0 /\ j2_0 < n2_0_0 /\
               (integer_of_int32
                (select intP_intM_s1_5_13_at_L1 (shift s1_5 j1_0))) =
               (integer_of_int32
                (select intP_intM_s2_4_14_at_L2 (shift s2_4 j2_0))) ->
               (exists i_10:Z, 0 <= i_10 /\ i_10 < k_0 /\
                (integer_of_int32
                 (select intP_intM_s1_5_13_at_L1 (shift s1_5 j1_0))) =
                (integer_of_int32
                 (select intP_intM_r_15_at_L3 (shift r i_10))))))))))))))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint intersect_ex.

(* Why obligation from file "intersect.c", line 117, characters 4-310: *)
(*Why goal*) Lemma intset_intersect_len : 
  (forall (intP_intM_r_0_18_at_L3:(memory intP int32)),
   (forall (intP_intM_s2_5_17_at_L2:(memory intP int32)),
    (forall (intP_intM_s1_6_16_at_L1:(memory intP int32)),
     (forall (s1_6:(pointer intP)),
      (forall (s2_5:(pointer intP)),
       (forall (r_0:(pointer intP)),
        (forall (n1_1:Z),
         (forall (n2_1:Z),
          (forall (k_1:Z),
           ((is_intset s1_6 n1_1 intP_intM_s1_6_16_at_L1) /\
            (is_intset s2_5 n2_1 intP_intM_s2_5_17_at_L2) /\
            (is_intset r_0 k_1 intP_intM_r_0_18_at_L3) /\
            (intset r_0 k_1 intP_intM_r_0_18_at_L3) =
            (intersect_int_set
             (intset s1_6 n1_1 intP_intM_s1_6_16_at_L1) (intset
                                                         s2_5 n2_1 intP_intM_s2_5_17_at_L2)) ->
            k_1 <= (int_min n1_1 n2_1))))))))))).
Proof.
(* FILL PROOF HERE *)
Save.
Dp_hint intset_intersect_len.

(* Why obligation from file "intersect.c", line 143, characters 9-15: *)
(*Why goal*) Lemma intersect_ensures_default_po_1 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  (* JC_68 *) (* JC_64 *) 0 <= (integer_of_uint32 i_11).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 143, characters 14-21: *)
(*Why goal*) Lemma intersect_ensures_default_po_2 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  (* JC_68 *)
  (* JC_65 *) (integer_of_uint32 i_11) <= (integer_of_uint32 n1_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 144, characters 8-77: *)
(*Why goal*) Lemma intersect_ensures_default_po_3 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  (* JC_68 *)
  (* JC_66 *)
  (intset result_0 (integer_of_uint32 k) intP_intM_result_5) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 i_11) intP_intM_set1_3) (intset
                                                            set2 (integer_of_uint32
                                                                  n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 145, characters 8-27: *)
(*Why goal*) Lemma intersect_ensures_default_po_4 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  (* JC_68 *)
  (* JC_67 *) (is_intset result_0 (integer_of_uint32 k) intP_intM_result_5).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 152, characters 11-17: *)
(*Why goal*) Lemma intersect_ensures_default_po_5 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  (* JC_80 *) (* JC_75 *) 0 <= (integer_of_uint32 j_2).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 152, characters 16-23: *)
(*Why goal*) Lemma intersect_ensures_default_po_6 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  (* JC_80 *) (* JC_76 *) (integer_of_uint32 j_2) <= (integer_of_uint32 n2_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 153, characters 10-79: *)
(*Why goal*) Lemma intersect_ensures_default_po_7 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  (* JC_80 *)
  (* JC_77 *)
  (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (intset
                                                              set2 (integer_of_uint32
                                                                    n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 154, characters 10-29: *)
(*Why goal*) Lemma intersect_ensures_default_po_8 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  (* JC_80 *)
  (* JC_78 *)
  (is_intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 155, characters 10-47: *)
(*Why goal*) Lemma intersect_ensures_default_po_9 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  (* JC_80 *)
  (* JC_79 *)
  ~(isin_int_set
    (intset set2 (integer_of_uint32 j_2) intP_intM_set2_4) (select
                                                            intP_intM_set1_3 (
                                                            shift
                                                            set1 (integer_of_uint32
                                                                  i_11_0)))) =
   true.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 143, characters 9-15: *)
(*Why goal*) Lemma intersect_ensures_default_po_10 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_20: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (result4: int32),
  forall (HW_21: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (intP_intM_result_5_2: (memory intP int32)),
  forall (HW_22: intP_intM_result_5_2 =
                 (store
                  intP_intM_result_5_1 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (result5: uint32),
  forall (HW_23: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_24: k2 = result5),
  forall (result6: uint32),
  forall (HW_25: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_26: i_11_1 = result6),
  (* JC_68 *) (* JC_64 *) 0 <= (integer_of_uint32 i_11_1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 143, characters 14-21: *)
(*Why goal*) Lemma intersect_ensures_default_po_11 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_20: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (result4: int32),
  forall (HW_21: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (intP_intM_result_5_2: (memory intP int32)),
  forall (HW_22: intP_intM_result_5_2 =
                 (store
                  intP_intM_result_5_1 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (result5: uint32),
  forall (HW_23: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_24: k2 = result5),
  forall (result6: uint32),
  forall (HW_25: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_26: i_11_1 = result6),
  (* JC_68 *)
  (* JC_65 *) (integer_of_uint32 i_11_1) <= (integer_of_uint32 n1_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 144, characters 8-77: *)
(*Why goal*) Lemma intersect_ensures_default_po_12 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_20: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (result4: int32),
  forall (HW_21: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (intP_intM_result_5_2: (memory intP int32)),
  forall (HW_22: intP_intM_result_5_2 =
                 (store
                  intP_intM_result_5_1 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (result5: uint32),
  forall (HW_23: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_24: k2 = result5),
  forall (result6: uint32),
  forall (HW_25: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_26: i_11_1 = result6),
  (* JC_68 *)
  (* JC_66 *)
  (intset result_0 (integer_of_uint32 k2) intP_intM_result_5_2) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 i_11_1) intP_intM_set1_3) (intset
                                                              set2 (integer_of_uint32
                                                                    n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 145, characters 8-27: *)
(*Why goal*) Lemma intersect_ensures_default_po_13 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_20: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (result4: int32),
  forall (HW_21: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (intP_intM_result_5_2: (memory intP int32)),
  forall (HW_22: intP_intM_result_5_2 =
                 (store
                  intP_intM_result_5_1 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (result5: uint32),
  forall (HW_23: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_24: k2 = result5),
  forall (result6: uint32),
  forall (HW_25: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_26: i_11_1 = result6),
  (* JC_68 *)
  (* JC_67 *)
  (is_intset result_0 (integer_of_uint32 k2) intP_intM_result_5_2).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 152, characters 11-17: *)
(*Why goal*) Lemma intersect_ensures_default_po_14 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_27: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (result4: uint32),
  forall (HW_28: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_29: j_2_1 = result4),
  (* JC_80 *) (* JC_75 *) 0 <= (integer_of_uint32 j_2_1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 152, characters 16-23: *)
(*Why goal*) Lemma intersect_ensures_default_po_15 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_27: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (result4: uint32),
  forall (HW_28: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_29: j_2_1 = result4),
  (* JC_80 *)
  (* JC_76 *) (integer_of_uint32 j_2_1) <= (integer_of_uint32 n2_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 153, characters 10-79: *)
(*Why goal*) Lemma intersect_ensures_default_po_16 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_27: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (result4: uint32),
  forall (HW_28: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_29: j_2_1 = result4),
  (* JC_80 *)
  (* JC_77 *)
  (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (intset
                                                              set2 (integer_of_uint32
                                                                    n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 154, characters 10-29: *)
(*Why goal*) Lemma intersect_ensures_default_po_17 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_27: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (result4: uint32),
  forall (HW_28: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_29: j_2_1 = result4),
  (* JC_80 *)
  (* JC_78 *)
  (is_intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 155, characters 10-47: *)
(*Why goal*) Lemma intersect_ensures_default_po_18 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (result2: int32),
  forall (HW_18: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (result3: int32),
  forall (HW_19: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_27: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (result4: uint32),
  forall (HW_28: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_29: j_2_1 = result4),
  (* JC_80 *)
  (* JC_79 *)
  ~(isin_int_set
    (intset set2 (integer_of_uint32 j_2_1) intP_intM_set2_4) (select
                                                              intP_intM_set1_3 (
                                                              shift
                                                              set1 (integer_of_uint32
                                                                    i_11_0)))) =
   true.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 143, characters 9-15: *)
(*Why goal*) Lemma intersect_ensures_default_po_19 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_30: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (result2: uint32),
  forall (HW_31: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result2),
  (* JC_68 *) (* JC_64 *) 0 <= (integer_of_uint32 i_11_1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 143, characters 14-21: *)
(*Why goal*) Lemma intersect_ensures_default_po_20 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_30: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (result2: uint32),
  forall (HW_31: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result2),
  (* JC_68 *)
  (* JC_65 *) (integer_of_uint32 i_11_1) <= (integer_of_uint32 n1_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 144, characters 8-77: *)
(*Why goal*) Lemma intersect_ensures_default_po_21 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_30: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (result2: uint32),
  forall (HW_31: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result2),
  (* JC_68 *)
  (* JC_66 *)
  (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 i_11_1) intP_intM_set1_3) (intset
                                                              set2 (integer_of_uint32
                                                                    n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 145, characters 8-27: *)
(*Why goal*) Lemma intersect_ensures_default_po_22 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_80 *) ((* JC_73 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_74 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_75 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_76 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_77 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_78 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_1) /\
                 (* JC_79 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_30: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (result2: uint32),
  forall (HW_31: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result2),
  (* JC_68 *)
  (* JC_67 *)
  (is_intset result_0 (integer_of_uint32 k1) intP_intM_result_5_1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 134, characters 12-104: *)
(*Why goal*) Lemma intersect_ensures_default_po_23 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_33: (integer_of_uint32 i_11_0) >= (integer_of_uint32 n1_0)),
  forall (why__return: uint32),
  forall (HW_34: why__return = k0),
  (* JC_27 *)
  (* JC_25 *)
  (intset result_0 (integer_of_uint32 why__return) intP_intM_result_5_0) =
  (intersect_int_set
   (intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) (intset
                                                            set2 (integer_of_uint32
                                                                  n2_0) intP_intM_set2_4)).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 135, characters 12-37: *)
(*Why goal*) Lemma intersect_ensures_default_po_24 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_68 *) ((* JC_64 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_65 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_66 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_67 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5_0))),
  forall (HW_33: (integer_of_uint32 i_11_0) >= (integer_of_uint32 n1_0)),
  forall (why__return: uint32),
  forall (HW_34: why__return = k0),
  (* JC_27 *)
  (* JC_26 *)
  (is_intset result_0 (integer_of_uint32 why__return) intP_intM_result_5_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 160, characters 10-17: *)
(*Why goal*) Lemma intersect_safety_po_1 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  (offset_min intP_set1_3_alloc_table set1) <= (integer_of_uint32 i_11_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 160, characters 10-17: *)
(*Why goal*) Lemma intersect_safety_po_2 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  (integer_of_uint32 i_11_0) <= (offset_max intP_set1_3_alloc_table set1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 160, characters 21-28: *)
(*Why goal*) Lemma intersect_safety_po_3 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  (offset_min intP_set2_4_alloc_table set2) <= (integer_of_uint32 j_2_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 160, characters 21-28: *)
(*Why goal*) Lemma intersect_safety_po_4 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  (integer_of_uint32 j_2_0) <= (offset_max intP_set2_4_alloc_table set2).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.jc", line 302, characters 37-140: *)
(*Why goal*) Lemma intersect_safety_po_5 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  (offset_min intP_result_5_alloc_table result_0) <= (integer_of_uint32 k1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.jc", line 302, characters 37-140: *)
(*Why goal*) Lemma intersect_safety_po_6 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  (integer_of_uint32 k1) <= (offset_max intP_result_5_alloc_table result_0).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 163, characters 8-11: *)
(*Why goal*) Lemma intersect_safety_po_7 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  0 <= ((integer_of_uint32 k1) + 1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 163, characters 8-11: *)
(*Why goal*) Lemma intersect_safety_po_8 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  ((integer_of_uint32 k1) + 1) <= 4294967295.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 148, characters 22-25: *)
(*Why goal*) Lemma intersect_safety_po_9 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (HW_27: 0 <= ((integer_of_uint32 k1) + 1) /\
                 ((integer_of_uint32 k1) + 1) <= 4294967295),
  forall (result5: uint32),
  forall (HW_28: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_29: k2 = result5),
  0 <= ((integer_of_uint32 i_11_0) + 1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 148, characters 22-25: *)
(*Why goal*) Lemma intersect_safety_po_10 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (HW_27: 0 <= ((integer_of_uint32 k1) + 1) /\
                 ((integer_of_uint32 k1) + 1) <= 4294967295),
  forall (result5: uint32),
  forall (HW_28: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_29: k2 = result5),
  ((integer_of_uint32 i_11_0) + 1) <= 4294967295.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 146, characters 19-25: *)
(*Why goal*) Lemma intersect_safety_po_11 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (HW_27: 0 <= ((integer_of_uint32 k1) + 1) /\
                 ((integer_of_uint32 k1) + 1) <= 4294967295),
  forall (result5: uint32),
  forall (HW_28: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_29: k2 = result5),
  forall (HW_30: 0 <= ((integer_of_uint32 i_11_0) + 1) /\
                 ((integer_of_uint32 i_11_0) + 1) <= 4294967295),
  forall (result6: uint32),
  forall (HW_31: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result6),
  0 <= ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_0))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 146, characters 19-25: *)
(*Why goal*) Lemma intersect_safety_po_12 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_22: (integer_of_int32 result2) = (integer_of_int32 result3)),
  forall (HW_23: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result4: int32),
  forall (HW_24: result4 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_25: (offset_min intP_result_5_alloc_table result_0) <=
                 (integer_of_uint32 k1) /\ (integer_of_uint32 k1) <=
                 (offset_max intP_result_5_alloc_table result_0)),
  forall (intP_intM_result_5_1: (memory intP int32)),
  forall (HW_26: intP_intM_result_5_1 =
                 (store
                  intP_intM_result_5_0 (shift result_0 (integer_of_uint32 k1)) result4)),
  forall (HW_27: 0 <= ((integer_of_uint32 k1) + 1) /\
                 ((integer_of_uint32 k1) + 1) <= 4294967295),
  forall (result5: uint32),
  forall (HW_28: (integer_of_uint32 result5) = ((integer_of_uint32 k1) + 1)),
  forall (k2: uint32),
  forall (HW_29: k2 = result5),
  forall (HW_30: 0 <= ((integer_of_uint32 i_11_0) + 1) /\
                 ((integer_of_uint32 i_11_0) + 1) <= 4294967295),
  forall (result6: uint32),
  forall (HW_31: (integer_of_uint32 result6) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_32: i_11_1 = result6),
  ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_1))) <
  ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_0))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 158, characters 24-27: *)
(*Why goal*) Lemma intersect_safety_po_13 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_33: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  0 <= ((integer_of_uint32 j_2_0) + 1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 158, characters 24-27: *)
(*Why goal*) Lemma intersect_safety_po_14 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_33: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  ((integer_of_uint32 j_2_0) + 1) <= 4294967295.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 156, characters 21-27: *)
(*Why goal*) Lemma intersect_safety_po_15 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_33: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (HW_34: 0 <= ((integer_of_uint32 j_2_0) + 1) /\
                 ((integer_of_uint32 j_2_0) + 1) <= 4294967295),
  forall (result4: uint32),
  forall (HW_35: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_36: j_2_1 = result4),
  0 <= ((* JC_61 *) ((integer_of_uint32 n2_0) - (integer_of_uint32 j_2_0))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 156, characters 21-27: *)
(*Why goal*) Lemma intersect_safety_po_16 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_17: (integer_of_uint32 j_2_0) < (integer_of_uint32 n2_0)),
  forall (HW_18: (offset_min intP_set1_3_alloc_table set1) <=
                 (integer_of_uint32 i_11_0) /\ (integer_of_uint32 i_11_0) <=
                 (offset_max intP_set1_3_alloc_table set1)),
  forall (result2: int32),
  forall (HW_19: result2 =
                 (select
                  intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))),
  forall (HW_20: (offset_min intP_set2_4_alloc_table set2) <=
                 (integer_of_uint32 j_2_0) /\ (integer_of_uint32 j_2_0) <=
                 (offset_max intP_set2_4_alloc_table set2)),
  forall (result3: int32),
  forall (HW_21: result3 =
                 (select
                  intP_intM_set2_4 (shift set2 (integer_of_uint32 j_2_0)))),
  forall (HW_33: (integer_of_int32 result2) <> (integer_of_int32 result3)),
  forall (HW_34: 0 <= ((integer_of_uint32 j_2_0) + 1) /\
                 ((integer_of_uint32 j_2_0) + 1) <= 4294967295),
  forall (result4: uint32),
  forall (HW_35: (integer_of_uint32 result4) =
                 ((integer_of_uint32 j_2_0) + 1)),
  forall (j_2_1: uint32),
  forall (HW_36: j_2_1 = result4),
  ((* JC_61 *) ((integer_of_uint32 n2_0) - (integer_of_uint32 j_2_1))) <
  ((* JC_61 *) ((integer_of_uint32 n2_0) - (integer_of_uint32 j_2_0))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 148, characters 22-25: *)
(*Why goal*) Lemma intersect_safety_po_17 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_37: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  0 <= ((integer_of_uint32 i_11_0) + 1).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 148, characters 22-25: *)
(*Why goal*) Lemma intersect_safety_po_18 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_37: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  ((integer_of_uint32 i_11_0) + 1) <= 4294967295.
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 146, characters 19-25: *)
(*Why goal*) Lemma intersect_safety_po_19 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_37: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (HW_38: 0 <= ((integer_of_uint32 i_11_0) + 1) /\
                 ((integer_of_uint32 i_11_0) + 1) <= 4294967295),
  forall (result2: uint32),
  forall (HW_39: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_40: i_11_1 = result2),
  0 <= ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_0))).
Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "intersect.c", line 146, characters 19-25: *)
(*Why goal*) Lemma intersect_safety_po_20 : 
  forall (set1: (pointer intP)),
  forall (n1_0: uint32),
  forall (set2: (pointer intP)),
  forall (n2_0: uint32),
  forall (result_0: (pointer intP)),
  forall (intP_set1_3_alloc_table: (alloc_table intP)),
  forall (intP_set2_4_alloc_table: (alloc_table intP)),
  forall (intP_result_5_alloc_table: (alloc_table intP)),
  forall (intP_intM_set1_3: (memory intP int32)),
  forall (intP_intM_set2_4: (memory intP int32)),
  forall (HW_1: (* JC_23 *)
                ((* JC_13 *) (offset_min intP_set1_3_alloc_table set1) <= 0 /\
                (* JC_14 *) (offset_max intP_set1_3_alloc_table set1) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_15 *) (offset_min intP_set2_4_alloc_table set2) <= 0 /\
                (* JC_16 *) (offset_max intP_set2_4_alloc_table set2) >=
                ((integer_of_uint32 n2_0) - 1) /\
                (* JC_17 *)
                (offset_min intP_result_5_alloc_table result_0) <= 0 /\
                (* JC_18 *)
                (offset_max intP_result_5_alloc_table result_0) >=
                ((integer_of_uint32 n1_0) - 1) /\
                (* JC_19 *) ~(same_block set1 result_0) /\
                (* JC_20 *) ~(same_block set2 result_0) /\
                (* JC_21 *)
                (is_intset set1 (integer_of_uint32 n1_0) intP_intM_set1_3) /\
                (* JC_22 *)
                (is_intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4))),
  forall (result: uint32),
  forall (HW_6: (integer_of_uint32 result) = 0),
  forall (k: uint32),
  forall (HW_7: k = result),
  forall (result0: uint32),
  forall (HW_8: (integer_of_uint32 result0) = 0),
  forall (i_11: uint32),
  forall (HW_9: i_11 = result0),
  forall (i_11_0: uint32),
  forall (intP_intM_result_5: (memory intP int32)),
  forall (k0: uint32),
  forall (HW_10: (* JC_39 *) True),
  forall (HW_11: (* JC_37 *) ((* JC_33 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_34 *) (integer_of_uint32 i_11_0) <=
                 (integer_of_uint32 n1_0) /\
                 (* JC_35 *)
                 (intset result_0 (integer_of_uint32 k0) intP_intM_result_5) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_36 *)
                 (is_intset
                  result_0 (integer_of_uint32 k0) intP_intM_result_5))),
  forall (HW_12: (integer_of_uint32 i_11_0) < (integer_of_uint32 n1_0)),
  forall (result1: uint32),
  forall (HW_13: (integer_of_uint32 result1) = 0),
  forall (j_2: uint32),
  forall (HW_14: j_2 = result1),
  forall (intP_intM_result_5_0: (memory intP int32)),
  forall (j_2_0: uint32),
  forall (k1: uint32),
  forall (HW_15: (* JC_51 *) True),
  forall (HW_16: (* JC_49 *) ((* JC_42 *) 0 <= (integer_of_uint32 i_11_0) /\
                 (* JC_43 *) (integer_of_uint32 i_11_0) <
                 (integer_of_uint32 n1_0) /\
                 (* JC_44 *) 0 <= (integer_of_uint32 j_2_0) /\
                 (* JC_45 *) (integer_of_uint32 j_2_0) <=
                 (integer_of_uint32 n2_0) /\
                 (* JC_46 *)
                 (intset result_0 (integer_of_uint32 k1) intP_intM_result_5_0) =
                 (intersect_int_set
                  (intset set1 (integer_of_uint32 i_11_0) intP_intM_set1_3) (
                  intset set2 (integer_of_uint32 n2_0) intP_intM_set2_4)) /\
                 (* JC_47 *)
                 (is_intset
                  result_0 (integer_of_uint32 k1) intP_intM_result_5_0) /\
                 (* JC_48 *)
                 ~(isin_int_set
                   (intset set2 (integer_of_uint32 j_2_0) intP_intM_set2_4) (
                   select
                   intP_intM_set1_3 (shift set1 (integer_of_uint32 i_11_0)))) =
                  true)),
  forall (HW_37: (integer_of_uint32 j_2_0) >= (integer_of_uint32 n2_0)),
  forall (HW_38: 0 <= ((integer_of_uint32 i_11_0) + 1) /\
                 ((integer_of_uint32 i_11_0) + 1) <= 4294967295),
  forall (result2: uint32),
  forall (HW_39: (integer_of_uint32 result2) =
                 ((integer_of_uint32 i_11_0) + 1)),
  forall (i_11_1: uint32),
  forall (HW_40: i_11_1 = result2),
  ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_1))) <
  ((* JC_63 *) ((integer_of_uint32 n1_0) - (integer_of_uint32 i_11_0))).
Proof.
(* FILL PROOF HERE *)
Save.

