#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@
bindir=@bindir@
libdir=@libdir@
includedir=@includedir@

enable_debug=@enable_debug@
enable_prof=@enable_prof@
enable_assert=@enable_assert@
enable_gmp=@enable_gmp@
enable_mpfr=@enable_mpfr@
enable_ocaml=@enable_ocaml@
enable_polka=@enable_polka@
enable_ocamlpolka=@enable_ocamlpolka@
enable_ocamlgmp=@enable_ocamlgmp@
with_num=@with_num@
with_polka_num=@with_polka_num@

thislib_suffix=@lib_suffix@

usage()
{
cat <<__EOF
Usage: oct-config [OPTIONS] [ACTIONS]
Options:
  [--enable-debug=[yes/no]]   debugging info [default=$enable_debug]
  [--enable-prof=[yes/no]]    internal memory/time profiling [default=$enable_prof]
  [--enable-assert=[yes/no]]  basic sanity checking [default=$enable_assert]
  [--with-num=[int/satint/frac/float/longdouble]]   numerical type [default=$with_num]
  [--with-polka-num=[long/longlong/gmp]] Polka integer type [default=$with_polka_num]
  [--with-ocamlopt]        emit flags for ocamlopt instead of ocamlc
Actions:
  [--version]              prints only the version number
  [--libs]                 prints flags needed by the linker
  [--cflags]               prints flags needed by the C compiler
  [--mlflags]              prints flags needed by the OCaml compiler/linker
  [--mltop]                prints how to call ocaml toplevel
  [--mlmodule]             prints the OCaml module name

Numerical type is ............... $with_num
GMP support ..................... $enable_gmp
MPFR support .................... $enable_mpfr
New Polka support ............... $enable_polka 
New Polka integer type .......... $with_polka_num
OCaml support ................... $enable_ocaml
OCaml GMP support ............... $enable_ocamlgmp
OCaml New Polka support ......... $enable_ocamlpolka
__EOF
exit 0
}

with_ocamlopt=no

while test $# -gt 0; do
  arg="$arg $1"
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) optarg= ;;
  esac

  case $1 in
    --version | -v)
      echo @OCT_VERSION@
      exit 0
      ;;
    --help | -h)
      usage 1>&2
      ;;
    --enable-debug)     enable_debug=yes;;
    --enable-debug=yes) enable_debug=yes;;
    --enable-debug=no)  enable_debug=no;;
    --disable-debug)    enable_debug=no;;
    --enable-prof)     enable_prof=yes;;
    --enable-prof=yes) enable_prof=yes;;
    --enable-prof=no)  enable_prof=no;;
    --disable-prof)    enable_prof=no;;
    --enable-assert)     enable_assert=yes;;
    --enable-assert=yes) enable_assert=yes;;
    --enable-assert=no)  enable_assert=no;;
    --disable-assert)    enable_assert=no;;
    --with-num=*) with_num=`echo $1|sed -e 's/--with-num=//g'`;;
    --with-polka-num=*) with_polka_num=`echo $1|sed -e 's/--with-polka-num=//g'`;;
    --with-ocamlopt)     with_ocamlopt=yes;;
    --with-ocamlc)       with_ocamlopt=no;;
    --with-ocamlopt=yes) with_ocamlopt=yes;;
    --with-ocamlopt=no)  with_ocamlopt=no;;
    --cflags)
      echo_cflags=yes
      ;;
    --mlflags)
      echo_mlflags=yes
      ;;
    --mltop)
      echo_mltop=yes
      ;;
    --mlmodule)
      echo_mlmodule=yes
      ;;
    --libs)
      echo_libs=yes
      ;;
    --polka)
      echo_polka=yes
      ;;
    *)
       echo "Invalid option $1" 
       exit 1;;
  esac
  shift
done

lib_suffix=""
if test "x$enable_debug" = "xyes"; then
  lib_suffix="g$lib_suffix"
else
  lib_suffix="o$lib_suffix"
fi
if test "x$enable_polka" != "xno"; then
case $with_polka_num in
  long)     num="1";;
  longlong) num="2";;
  gmp)      num="3";;
  *)        echo "Invalid New Polka numerical type $with_polka_num"; exit 1;;
esac
lib_suffix="$num$lib_suffix"
fi
if test "x$enable_prof" = "xyes"; then
  lib_suffix="p$lib_suffix"
fi
if test "x$enable_assert" = "xyes"; then
  lib_suffix="a$lib_suffix"
fi
case $with_num in
  int)        short_num_type="i"; num_type="INT";;
  frac)       short_num_type="q"; num_type="FRAC";;
  float)      short_num_type="f"; num_type="FLOAT";;
  longdouble) short_num_type="Lf"; num_type="LONGDOUBLE";;
  gmpint)     short_num_type="I"; num_type="GMP_INT";;
  gmpfrac)    short_num_type="Q"; num_type="GMP_FRAC";;
  mpfrfloat)  short_num_type="F"; num_type="MPFR_FLOAT";;
  *) echo "Unknown numerical type $with_num"; exit 1;;
esac
lib_suffix="$short_num_type$lib_suffix"


if test "x$lib_suffix" != "x$thislib_suffix"; then
  oct-config-$lib_suffix --version >/dev/null 2>/dev/null && oct-config-$lib_suffix $arg && exit 0
  echo "No library was compiled with the requested options"
  exit 1
fi

d="no"
if test "$echo_prefix" = "yes"; then
  echo $prefix
  d="yes"
fi

if test "$echo_exec_prefix" = "yes"; then
  echo $exec_prefix
  d="yes"
fi

if test "$echo_cflags" = "yes"; then
  echo -I${includedir}/oct @CFLAGS@ @EXTRA_DEFS@
  d="yes"
fi

if test "$echo_libs" = "yes"; then
  echo -L${libdir} @LDFLAGS@ -loct_${lib_suffix} @LIBS@
  d="yes"
fi

if test "$echo_mlflags" = "yes"; then
  if test "$enable_ocaml" = "no"; then
  echo "OCaml support not available"
  exit 1
  fi
  if test "x$with_ocamlopt" = "xno"; then
    echo -custom @MLFLAGS@ -I @with_ocaml@/oct oct_${lib_suffix}.cma @MLMODS@
  else
    echo @MLFLAGS@ -I @with_ocaml@/oct oct_${lib_suffix}.cmxa @MLMODSX@
  fi
  d="yes"
fi

if test "$echo_mltop" = "yes"; then
  echo ${bindir}/octtop-${lib_suffix} -I @with_ocaml@/oct @MLFLAGS@
  d="yes"
fi

if test "$echo_mlmodule" = "yes"; then
  echo Oct_${lib_suffix}
  d="yes"
fi


if test "x$d" = "xno"; then
  usage 1>&2
fi
