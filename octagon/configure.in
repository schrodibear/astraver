# require autoconf 2.13
AC_PREREQ(2.13)

# init autoconf
AC_INIT(oct-config.in)
AC_CANONICAL_SYSTEM

# versionning
#
# new release: MICRO_VERSION++, INTERFACE_AGE++, BINARY_AGE++
# interface change: INTERFACE_AGE=0
# backward incompatibility: BINARY_AGE=0, INTERFACE_AGE=0
#
#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl

OCT_MAJOR_VERSION=0
OCT_MINOR_VERSION=9
OCT_MICRO_VERSION=8
OCT_INTERFACE_AGE=8
OCT_BINARY_AGE=8

OCT_VERSION=$OCT_MAJOR_VERSION.$OCT_MINOR_VERSION.$OCT_MICRO_VERSION
LT_RELEASE=$OCT_MAJOR_VERSION.$OCT_MINOR_VERSION
LT_CURRENT=`expr $OCT_MICRO_VERSION - $OCT_INTERFACE_AGE`
LT_REVISION=$OCT_INTERFACE_AGE
LT_AGE=`expr $OCT_BINARY_AGE - $OCT_INTERFACE_AGE`
#AC_DIVERT_POP()dnl
AC_SUBST(OCT_MAJOR_VERSION)
AC_SUBST(OCT_MINOR_VERSION)
AC_SUBST(OCT_MICRO_VERSION)
AC_SUBST(OCT_INTERFACE_AGE)
AC_SUBST(OCT_BINARY_AGE)
AC_SUBST(OCT_VERSION)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
VERSION=$OCT_VERSION
PACKAGE=oct

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

# specify a configuration file
AM_CONFIG_HEADER(oct_config.h)

AC_DEFINE_UNQUOTED(OCT_MAJOR_VERSION, $OCT_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(OCT_MINOR_VERSION, $OCT_MINOR_VERSION)
AC_DEFINE_UNQUOTED(OCT_MICRO_VERSION, $OCT_MICRO_VERSION)
AC_DEFINE_UNQUOTED(OCT_INTERFACE_AGE, $OCT_INTERFACE_AGE)
AC_DEFINE_UNQUOTED(OCT_BINARY_AGE, $OCT_BINARY_AGE)

# allows SUBDIRS in Makefile.am
AC_PROG_MAKE_SET

# init libtool
AM_PROG_LIBTOOL

# init maintainer mode
AM_MAINTAINER_MODE



# flags

#AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)dnl
default_debug=yes
default_prof=no
#AC_DIVERT_POP()dnl

AC_ARG_ENABLE(debug,[  --enable-debug=[no/yes]  debugging info [default=$default_debug]],,enable_debug=$default_debug)

AC_ARG_ENABLE(assert, [  --enable-assert=[no/yes] basic sanity checking (recommanded)],,enable_assert=yes)

AC_ARG_ENABLE(prof, [  --enable-prof=[no/yes]   internal memory/time profiling [default=$default_prof]],,enable_prof=$default_prof)

AC_ARG_ENABLE(ocaml, [  --enable-ocaml=[no/yes]  OCaml support [default=auto]],,enable_ocaml=auto)

AC_ARG_ENABLE(polka, [  --enable-polka=[no/yes]  New Polka library support [default=auto]],,enable_polka=auto)

AC_ARG_ENABLE(gmp, [  --enable-gmp=[no/yes]  GMP library support [default=auto]],,enable_gmp=auto)

AC_ARG_ENABLE(mpfr, [  --enable-mpfr=[no/yes]  MPFR library support [default=auto]],,enable_mpfr=auto)

AC_ARG_ENABLE(ocamlpolka, [  --enable-ocamlpolka=[no/yes]  New Polka OCaml library support [default=auto]],,enable_ocamlpolka=auto)

AC_ARG_ENABLE(doc, [  --enable-doc=[no/yes]    generate documentation using LaTeX [default=yes]],,enable_doc=yes)


AC_ARG_WITH(num, [  --with-num=[int/frac/float/longdouble/gmpint/gmpfrac/mpfrfloat] which numerical type to used (MANDATORY)],,with_num=none)

AC_ARG_WITH(polka, [  --with-polka=DIR         where New Polka is installed],,with_polka=NONE)
AC_ARG_WITH(polka_num, [  --with-polka-num=[long/longlong/gmp] integer type used in Polka],,with_polka_num=gmp)
AC_ARG_WITH(gmp, [  --with-gmp=DIR           where GMP is installed],,with_gmp=NONE)
AC_ARG_WITH(mpfr, [  --with-mpfr=DIR           where MPFR is installed],,with_mpfr=NONE)

AC_ARG_WITH(ocaml, [  --with-ocaml=DIR         where to install OCaml objs [LIBDIR/ocaml]],,with_ocaml=NONE)

# checks for programs
AC_PROG_CXX
AM_PROG_CC_STDC
AC_PROG_INSTALL

# checks for header files

AC_HEADER_STDC

# endianess (used in marshaling)
AC_C_BIGENDIAN

# base packages
SUBDIRS="clib test"
AC_SUBST(SUBDIRS)

# optimization
case $host in
  i?86*) OPT_CFLAGS="-O3 -fstrength-reduce -fthread-jumps -funroll-all-loops";;
  *) OPT_CFLAGS="-O";;
esac

# do we need -R ?
case $host in
  *linux* | *sunos* | *darwin*| *cygwin* | *mingw*) 
    with_runpath=no;;
  *solaris* | *bsd*)
     with_runpath=yes;;
  *) echo "cannot set with_runpath... assuming no"
     with_runpath=no;;
esac

echo "do we need -R link flag ................ $with_runpath"



# debug
if test "x$enable_debug" = "xyes"; then
  CFLAGS="$CFLAGS -g"
  lib_suffix="g$lib_suffix"
else
  CFLAGS="$CFLAGS $OPT_CFLAGS"
  lib_suffix="o$lib_suffix"
fi

# const
AC_C_CONST

# inline, __inline, __inline__
AC_MSG_CHECKING(for __inline)
AC_CACHE_VAL(oct_cv_has__inline,[
        AC_TRY_COMPILE([__inline int foo () { return 1; }],
                       [int main() { return foo (); }],
		       oct_cv_has__inline=yes,
		       oct_cv_has__inline=no)
])
AC_MSG_RESULT($oct_cv_has__inline)
AC_MSG_CHECKING(for __inline__)
AC_CACHE_VAL(oct_cv_has__inline__,[
        AC_TRY_COMPILE([__inline__ int foo () { return 1; }],
		       [int main() { return foo (); }],
		       oct_cv_has__inline__=yes,
		       oct_cv_has__inline__=no)
])
AC_MSG_RESULT($oct_cv_has__inline__)
AC_MSG_CHECKING(for inline)
AC_CACHE_VAL(oct_cv_hasinline,[
        AC_TRY_COMPILE([inline int foo () { return 1; }],
		       [int main() { return foo (); }],
		       oct_cv_hasinline=yes,
		       oct_cv_hasinline=no)
])
AC_MSG_RESULT($oct_cv_hasinline)

case yes in
$oct_cv_hasinline) oct_inline="include";;
$oct_cv_has__inline) oct_inline="__include";;
$oct_cv_has__inline__) oct_inline="__include__";;
*) oct_inline=""
esac

# looking for bool
AC_MSG_CHECKING(for bool type support in the C compiler)
AC_CACHE_VAL(oct_cv_type_bool_c,[
        AC_TRY_COMPILE(,[
        bool i; return 1;
        ],
        oct_cv_type_bool_c=yes
        ,
        oct_cv_type_bool_c=no
        ,)
])
AC_MSG_RESULT($oct_cv_type_bool_c)
AC_LANG_CPLUSPLUS
AC_MSG_CHECKING(for bool type support in the C++ compiler)
AC_CACHE_VAL(oct_cv_type_bool_cpp,[
        AC_TRY_COMPILE(,[
        bool i; return 1;
        ],
        oct_cv_type_bool_cpp=yes
        ,
        oct_cv_type_bool_cpp=no
        ,)
])
AC_MSG_RESULT($oct_cv_type_bool_cpp)
AC_LANG_C

# looking for math
AC_CHECK_LIB(m,ceil,,AC_MSG_ERROR([Cannot find maht library]))


# GMP
if test "x$enable_gmp" != "xno"; then
old_CFLAGS="$CFLAGS"
old_LIBS="$LIBS"
AC_MSG_CHECKING(where GMP is installed)
gmp_dir="NONE"
LIBS="$old_LIBS -lgmp"
AC_TRY_LINK([#include <gmp.h>],[mpz_t a; mpz_init(a)],[gmp_dir=""; break],
for i in $with_gmp $exec_prefix $prefix /usr/local /usr /sw; do
  if test "x$i" != "xNONE" -a -f $i/include/gmp.h; then
    CFLAGS="$old_CFLAGS -I$i/include "
    LIBS="$old_LIBS -L$i/lib -lgmp"
    AC_TRY_LINK([#include <gmp.h>],[mpz_t a; mpz_init(a)],[gmp_dir="$i"; break],)
  fi
done)
CFLAGS="$old_CFLAGS"
LIBS="$old_LIBS"
if test "x$gmp_dir" = "xNONE"; then
  enable_gmp=no
  AC_MSG_RESULT(not found)
elif test "x$gmp_dir" = "x"; then
  enable_gmp=yes
  AC_MSG_RESULT(found)
  EXTRA_DEFS="-DOCT_HAS_GMP $EXTRA_DEFS"
  LIBS="-lgmp $LIBS"
else
  enable_gmp=yes
  AC_MSG_RESULT(found in $gmp_dir)
  CFLAGS="$CFLAGS -I$gmp_dir/include"
  LDPATH="$LDPATH $gmp_dir/lib"
  EXTRA_DEFS="-DOCT_HAS_GMP $EXTRA_DEFS"
  LIBS="-lgmp $LIBS"
  GMPLIB="-L$gmp_dir/lib"
fi
fi

# MPFR
if test "x$enable_mpfr" != "xno" -a "x$enable_gmp" = "xyes"; then
old_CFLAGS="$CFLAGS"
old_LIBS="$LIBS"
AC_MSG_CHECKING(where MPFR is installed)
mpfr_dir="NONE"
LIBS="-lmpfr $old_LIBS"
AC_TRY_LINK([#include <gmp.h>
             #include <mpfr.h>],
	    [mpfr_t a; mpfr_init(a)],
            [mpfr_dir=""; break],
for i in $with_mpfr $exec_prefix $prefix /usr/local /usr /sw; do
  if test "x$i" != "xNONE" -a -f $i/include/mpfr.h; then
    CFLAGS="$old_CFLAGS  -I$i/include "
    LIBS="-L$i/lib -lmpfr $GMPLIB $old_LIBS"
    AC_TRY_LINK([#include <gmp.h>
	         #include <mpfr.h>],
	        [mpfr_t a; mpfr_init(a)],
                [mpfr_dir="$i"; break],)
  fi
done)
LIBS="$old_LIBS"
CFLAGS="$old_CFLAGS"
if test "x$mpfr_dir" = "xNONE"; then
  enable_mpfr=no
  AC_MSG_RESULT(not found)
elif test "x$mpfr_dir" = "x"; then
  enable_mpfr=yes
  AC_MSG_RESULT(found)
  EXTRA_DEFS="-DOCT_HAS_MPFR $EXTRA_DEFS"
  CFLAGS="$CFLAGS -DOCT_HAS_MPFR"
  LIBS="-lmpfr $LIBS"
else
  enable_mpfr=yes
  AC_MSG_RESULT(found in $mpfr_dir)
  CFLAGS="$CFLAGS -I$mpfr_dir/include"
  LDPATH="$LDPATH $mpfr_dir/lib"
  EXTRA_DEFS="-DOCT_HAS_MPFR $EXTRA_DEFS"
  LIBS="-lmpfr $LIBS"
fi
else
  enable_mpfr=no
fi


# New Polka
if test "x$enable_polka" != "xno"; then
AC_MSG_CHECKING(where New Polka headers are installed)
for i in $with_polka $exec_prefix $prefix /usr/local /usr /sw; do
  for j in "" polka newpolka poly; do
    if test -f $i/include/$j/poly.h; then
      polka_includedir="$i/include/$j"
      polka_libdir="$i/lib"
      break 2
    fi
  done
done
if test "x$polka_includedir" = "x"; then
  enable_polka=no
  AC_MSG_RESULT(not found)
else
  AC_MSG_RESULT($polka_includedir)
fi
fi

if test "x$enable_polka" != "xno"; then
case $with_polka_num in
  long)     infix="i"; num="1";;
  longlong) infix="l"; num="2";;
  gmp)      if test "x$enable_gmp" != "xyes"; then
		AC_MSG_ERROR([the NewPolka numerical type requires the GMP library])
	    fi
	    infix="g"; num="3";;
  *) AC_MSG_ERROR([unknown New Polka numerical type $with_polka_num]);;
esac
polka_libname="polka$infix"
if test "x$enable_debug" = "xyes"; then
  polka_libname="${polka_libname}_debug"
fi
AC_MSG_CHECKING(for New Polka library $polka_libname in $polka_libdir)
old_CFLAGS="$CFLAGS"
old_LIBS="$LIBS"
CFLAGS="$CFLAGS -I$polka_includedir -DPOLKA_NUM=$num"
LIBS="-L$polka_libdir -l$polka_libname $GMPLIB $LIBS"
AC_TRY_LINK([#include <poly.h>],[poly_t*a = poly_empty(10)],[enable_polka=yes])
CFLAGS="$old_CFLAGS"
LIBS="$old_LIBS"
if test "x$enable_polka" != "xyes"; then
  enable_polka=no
  AC_MSG_RESULT(not found)
else
  enable_polka=yes
  AC_MSG_RESULT(yes)
  CFLAGS="$CFLAGS -I$polka_includedir"
  EXTRA_DEFS="-DPOLKA_NUM=$num -DOCT_HAS_NEW_POLKA $EXTRA_DEFS"
  LDPATH="$LDPATH $polka_libdir"
  LIBS="-l$polka_libname $LIBS"
  lib_suffix="$num$lib_suffix"
fi
fi
if test "x$enable_polka" = "xno"; then
  with_polka_num=""
fi

# profiling
if test "x$enable_prof" = "xyes"; then
  EXTRA_DEFS="$EXTRA_DEFS -DOCT_ENABLE_MALLOC_MONITORING -DOCT_ENABLE_TIMING"
  lib_suffix="p$lib_suffix"
fi

# assert
if test "x$enable_assert" = "xyes"; then
  EXTRA_DEFS="$EXTRA_DEFS -DOCT_ENABLE_ASSERT"
  lib_suffix="a$lib_suffix"
fi

# num type
case $with_num in

  int)      short_num_type="i"; num_type="INT";;

  frac)     short_num_type="q"; num_type="FRAC";;

  float)    short_num_type="f"; num_type="FLOAT";;

  longdouble) short_num_type="Lf"; num_type="LONGDOUBLE";;

   gmpint)   if test "x$enable_gmp" != "xyes"; then
		AC_MSG_ERROR([the numerical type requires the GMP library ])
	    fi
	    short_num_type="I"; num_type="GMP_INT";;

  gmpfrac)  if test "x$enable_gmp" != "xyes"; then
		AC_MSG_ERROR([the numerical type requires the GMP library ])
	    fi
  	    short_num_type="Q"; num_type="GMP_FRAC";;

  mpfrfloat) if test "x$enable_mpfr" != "xyes"; then
		AC_MSG_ERROR([the numerical type requires the MPFR library ])
	    fi
  	    short_num_type="F"; num_type="MPFR_FLOAT";;

  *) AC_MSG_ERROR([please choose a numerical type, with --with-num, among int / frac / float / longdouble / gmpint / gmpfrac / mpfrfloat])

esac
EXTRA_DEFS="$EXTRA_DEFS -DOCT_NUM_$num_type"
lib_suffix="$short_num_type$lib_suffix"

# looking for OCaml
if test "x$enable_ocaml" != "xno"; then

AC_MSG_CHECKING(where the OCaml libraries are installed)
old_CFLAGS="$CFLAGS"
for i in $with_ocaml $exec_prefix/lib/ocaml $prefix/lib/ocaml /usr/local/lib/ocaml /usr/lib/ocaml /sw/lib/ocaml; do
  if test "x$i" != "xNONE" -a -f $i/caml/custom.h; then
    CFLAGS="$old_CFLAGS -I$i"
    AC_TRY_COMPILE([#include <caml/mlvalues.h>
                    #include <caml/memory.h>],
      	           [CAMLparam0(); CAMLlocal1(v); CAMLreturn(Int_val(v));],
                   [AC_MSG_RESULT(found in $i); ocaml_dir="$i"; break]);
  fi
done
CFLAGS="$old_CFLAGS"
if test "x$ocaml_dir" = "x"; then
  enable_ocaml="no"
  enable_ocamlpolka="no"
  AC_MSG_RESULT(not found, or too old)
else
  SUBDIRS="$SUBDIRS ocamllib ocamlanal"

  OCAML_ML="oct_common.ml"
  OCAML_MLI="oct_common.mli"

# checking for OCaml Polka

  enable_ocaml="yes"
  CFLAGS="$CFLAGS -I${ocaml_dir}"
  AC_MSG_RESULT($ocaml_dir)
  if test "x$enable_polka" = "xyes" -a "x$enable_ocamlpolka" != "xno"; then
    case $with_polka_num in
      long)     infix="i";;
      longlong) infix="l";;
      gmp)      infix="g";;
      *) AC_MSG_ERROR([unknown New Polka numerical type $with_polka_num]);;
    esac
    polka_mllibname="polka${infix}_caml"
    if test "x$enable_debug" = "xyes"; then
      polka_mllibname="${polka_mllibname}_debug"
    fi
    AC_MSG_CHECKING(for OCaml New Polka library $polka_mllibname in $polka_libdir)
    if test -f ${polka_libdir}/lib${polka_mllibname}.a -o -f ${polka_libdir}/lib${polka_mllibname}.so; then
      AC_MSG_RESULT(found)
      AC_MSG_CHECKING(for OCaml New Polka library polka.cma)
      enable_ocamlpolka="no"
      for i in ${with_ocaml} ${ocaml_dir} ${with_ocaml}/polka ${ocaml_dir}/polka ${with_ocaml}/newpolka ${ocaml_dir}/newpolka ${with_ocaml}/poly ${ocaml_dir}/poly; do
        if test -f $i/polka.cma; then
          AC_MSG_RESULT(found in $i)
          enable_ocamlpolka="yes"	  
          MLFLAGS="$MLFLAGS -I $i"
          MLLIBS="$MLLIBS -l$polka_mllibname -lcamlidl"
	  MLMODS="polka.cma $MLMODS"
	  MLMODSX="polka.cmxa $MLMODSX"
          OCAML_ML="$OCAML_ML oct_polka.mli"
          OCAML_MLI="$OCAML_MLI oct_polka.mli"
          EXTRA_DEFS="-DOCT_HAS_OCAML_NEW_POLKA $EXTRA_DEFS"
    	  break
        fi
      done
      if test "x$enable_ocamlpolka" = "xno"; then
          AC_MSG_RESULT(not found)
      fi
    else
      enable_ocamlpolka="no"
      AC_MSG_RESULT(not found)
    fi
  fi 

# checking for OCaml GMP

  if test "x$enable_gmp" = "xyes"; then
    AC_MSG_CHECKING(for Caml-GMP module gmp.cma)
    enable_ocamlgmp="no"
    for i in ${with_ocaml} ${ocaml_dir} ${with_ocaml}/gmp ${ocaml_dir}/gmp; do
      if test -f $i/gmp.cma -a -f $i/libmlgmp.a; then
        AC_MSG_RESULT(found in $i)
        enable_ocamlgmp="yes"
        MLLIBS="$MLLIBS -lmlgmp"
        MLFLAGS="$MLFLAGS -I $i"
# does not seem to work...
#        MLMODS="gmp.cma $MLMODS"
#	 MLMODSX="gmp.cmxa $MLMODSX"
        OCAML_ML="$OCAML_ML oct_gmp.mli"
        OCAML_MLI="$OCAML_MLI oct_gmp.mli"
	LDPATH="$LDPATH $i"
        EXTRA_DEFS="-DOCT_HAS_OCAML_GMP $EXTRA_DEFS"
	break
      fi
    done
    if test "x$enable_ocamlgmp" = "xno"; then
        AC_MSG_RESULT(not found)
    fi
  fi

  if test "x$with_ocaml" = "xNONE"; then
    with_ocaml="$ocaml_dir"
  fi

# passes extra C libraries to OCaml

  for i in $LDFLAGS; do
    EXTRA_MLFLAGS="$EXTRA_MLFLAGS -ccopt $i"
  done

  if test "x$with_runpath" = "xyes"; then
    for i in $LDPATH; do
      EXTRA_MLFLAGS="$EXTRA_MLFLAGS -ccopt -L$i -ccopt -R$i"
    done
  else
    for i in $LDPATH; do
      EXTRA_MLFLAGS="$EXTRA_MLFLAGS -ccopt -L$i"
    done
  fi

  for i in -locamloct_${lib_suffix} -loct_${lib_suffix} $MLLIBS $LIBS; do
    EXTRA_MLFLAGS="$EXTRA_MLFLAGS -cclib $i"
  done
fi
fi

if test "x$with_runpath" = "xyes"; then
  for i in $LDPATH; do
    LDFLAGS="$LDFLAGS -L$i -R $i"
  done
else
  for i in $LDPATH; do
    LDFLAGS="$LDFLAGS -L$i"
  done
fi


# documentation
if test "x$enable_doc" = "xyes"; then
 SUBDIRS="$SUBDIRS doc"
fi

# prefix
oct_prefix="oct${lib_suffix}"
EXTRA_DEFS="$EXTRA_DEFS -DOCT_PREFIX=CAT\(${oct_prefix}_"

# summary

echo
echo "Summary"
echo "-------"
echo "GMP support...................... $enable_gmp"
echo "MPFR support..................... $enable_mpfr"
echo "OCaml support ................... $enable_ocaml"
echo "New Polka support ............... $enable_polka"
if test "x$enable_polka" = "xyes" -a "x$enable_ocaml" = "xyes"; then
echo "OCaml New Polka support ......... $enable_ocamlpolka"
echo "OCaml GMP support ............... $enable_ocamlgmp"
fi
echo "Numerical type .................. $with_num"
if test "x$enable_polka" = "xyes"; then
echo "New Polka numerical type ........ $with_polka_num"
fi
echo
echo "Name-mangling suffix ............ $lib_suffix"

echo

# exports 

AC_SUBST(EXTRA_DEFS)
AC_SUBST(MLFLAGS)
AC_SUBST(EXTRA_MLFLAGS)
AC_SUBST(MLMODS)
AC_SUBST(MLMODSX)
AC_SUBST(OCAML_ML)
AC_SUBST(OCAML_MLI)

AC_SUBST(enable_gmp)
AC_SUBST(enable_mpfr)
AC_SUBST(enable_debug)
AC_SUBST(enable_prof)
AC_SUBST(enable_assert)
AC_SUBST(enable_ocaml)
AC_SUBST(enable_polka)
AC_SUBST(enable_ocamlpolka)
AC_SUBST(enable_ocamlgmp)
AC_SUBST(with_num)
AC_SUBST(with_polka_num)
AC_SUBST(lib_suffix)
AC_SUBST(with_ocaml)


# output

AC_OUTPUT_COMMANDS([

outfile=oct_config.h
outfile2=oct_config_2.h

echo Editing $outfile

rm -f $outfile2

cat > $outfile2 <<__EOF
#ifndef OCT_CONFIG_H__
#define OCT_CONFIG_H__

#ifdef __cplusplus
extern "C" {
#endif

__EOF

cat $outfile >>$outfile2

case yes in
$oct_cv_hasinline) ;;
$oct_cv_has__inline) echo >>$outfile2 "#define inline __include";;
$oct_cv_has__inline__) echo >>$outfile2 "#define inline __include__";;
*) echo >>$outfile2 "#define inline";;
esac

if test "x$ac_cv_c_const" = "xno"; then
  echo >>$outfile2 "#define const"
fi

echo >> $outfile2

echo >> $outfile2 "#ifndef __cplusplus"
if test "x$oct_vc_type_bool_c" = "xyes"
then
  echo >> $outfile2 "#define OCT_HAS_BOOL"
else
  echo >> $outfile2 "#undef OCT_HAS_BOOL"
fi
echo >> $outfile2 "#else"
if test "x$oct_cv_type_bool_cpp" = "xyes"
then
  echo >> $outfile2 "#define OCT_HAS_BOOL"
else
  echo >> $outfile2 "#undef OCT_HAS_BOOL"
fi
echo >> $outfile2 "#endif"
echo >> $outfile2

cat >> $outfile2 <<__EOF
#ifdef __cplusplus
}
#endif

#endif /* OCT_CONFIG_H__ */
__EOF

echo Editing Makefiles

for i in . clib ocamllib doc test ocamlanal; do
	mv ${i}/Makefile ${i}/Makefile.tmp
	sed -e "s/LIBSUFFIX/${lib_suffix}/g" ${i}/Makefile.tmp >${i}/Makefile
	rm ${i}/Makefile.tmp
done

cp oct-config oct-config-${lib_suffix}

],[

oct_const=$oct_const
oct_inline=$oct_inline
oct_cv_type_bool_c=$oct_cv_type_bool_c
oct_cv_type_bool_cpp=$oct_cv_type_bool_cpp
oct_cv_hasinline=$oct_cv_hasinline
oct_cv_has__inline=$oct_cv_has__inline
oct_cv_has__inline__=$oct_cv_has__inline__
ac_cv_c_const=$ac_cv_c_const
enable_assert=$enable_assert
enable_prof=$enable_prof
enable_polka=$enable_polka
lib_suffix=$lib_suffix
])

AC_OUTPUT([oct-config Makefile clib/Makefile ocamllib/Makefile doc/Makefile test/Makefile ocamlanal/Makefile])
