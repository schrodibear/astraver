logic coerce : double -> real
logic in_double_inter : real -> prop
logic round : real,double -> prop

parameter double_1 : double

parameter f_mult : 
  x:double -> y:double -> 
  { in_double_inter(coerce(x) * coerce(y)) } 
  double 
  { round(coerce(x) * coerce(y), result) }

parameter f_div : 
  x:double -> y:double -> 
  { in_double_inter(coerce(x) / coerce(y)) } 
  double 
  { round(coerce(x) / coerce(y), result) }

let f (x:double) (y:double) = 
  { 0.01 <= coerce(x) <= 100.0 and 0.01 <= coerce(y) <= 100.0 }
  (f_div double_1 (f_mult x y))  
  { }
