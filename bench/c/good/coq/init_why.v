(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export init_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (b_Z9: ((memory) ((pointer) Z2) Z9)),
  forall (int_Z2: ((memory) Z Z2)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: ((* File "init.c", line 5, characters 25-34 *)
                 (acc int_Z7 (shift t 1)) = 2 /\
                (* File "init.c", line 13, characters 25-51 *)
                ((acc int_Z2 (acc b_Z9 s)) = 1 /\
                (acc int_Z2 (shift (acc b_Z9 s) 2)) = 4)) /\
                (valid_range alloc t 0 2) /\ (valid alloc s) /\
                (valid1 b_Z9) /\ (valid1_range b_Z9 3)),
  forall (result: ((pointer) Z7)),
  forall (HW_2: result = (shift t 1)),
  forall (result0: Z),
  forall (HW_3: result0 = (acc int_Z7 result)),
  forall (result1: ((pointer) Z2)),
  forall (HW_4: result1 = (acc b_Z9 s)),
  forall (result2: Z),
  forall (HW_5: result2 = (acc int_Z2 result1)),
  forall (result3: ((pointer) Z2)),
  forall (HW_6: result3 = (acc b_Z9 s)),
  forall (result4: ((pointer) Z2)),
  forall (HW_7: result4 = (shift result3 2)),
  forall (result5: Z),
  forall (HW_8: result5 = (acc int_Z2 result4)),
  (* File "init.c", line 15, characters 13-25 *)
  (result0 + result2 + result5) = 7 /\
  (* File "init.c", line 5, characters 25-34 *) (acc int_Z7 (shift t 1)) = 2 /\
  (* File "init.c", line 13, characters 25-51 *) ((acc int_Z2 (acc b_Z9 s)) =
  1 /\ (acc int_Z2 (shift (acc b_Z9 s) 2)) = 4).
Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
unfold valid1_range in H6.
apply valid_range_valid_shift with 0 (3-1).
apply H6;auto.
omega.
Save.

Proof.
intuition.
subst;auto.
rewrite H0.
rewrite H4.
rewrite H1.
auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: (valid_range alloc t 0 2) /\ (valid alloc s)),
  2 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_2 : 
  forall (A885:Set), forall (A886:Set), forall (A887:Set), forall (A888:Set),
  forall (A889:Set), forall (A890:Set), forall (A891:Set), forall (A892:Set),
  forall (alloc: alloc_table),
  forall (int_Z5: ((memory) Z A892)),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: (valid_range alloc t 0 2) /\ (valid alloc s)),
  forall (HW_2: 2 >= 1),
  forall (result: ((pointer) A892)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 2 /\
                (valid_range alloc0 result 0 (2 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z5_0: ((memory) Z A892)),
  forall (HW_4: int_Z5_0 = (upd int_Z5 result 4)),
  forall (result0: ((pointer) A892)),
  forall (HW_5: result0 = (shift result 1)),
  forall (int_Z5_1: ((memory) Z A892)),
  forall (HW_6: int_Z5_1 = (upd int_Z5_0 result0 5)),
  forall (result1: Z),
  forall (HW_7: result1 = (acc int_Z5_1 result)),
  (* File "init.c", line 22, characters 13-25 *) result1 = 4.
Proof.
intuition.
Save.

Proof.
intuition;subst.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
rewrite acc_upd_neq;auto.
rewrite acc_upd_eq;auto.
replace (shift result 1 <> result) with (shift result 1 <> shift result 0).
apply neq_offset_neq_shift.
omega.
rewrite shift_zero.
auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: (valid_range alloc t 0 2) /\ (valid alloc s)),
  3 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_2 : 
  forall (A893:Set), forall (A894:Set), forall (A895:Set), forall (A896:Set),
  forall (A897:Set), forall (A898:Set), forall (A899:Set), forall (A900:Set),
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z A900)),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: (valid_range alloc t 0 2) /\ (valid alloc s)),
  forall (HW_2: 3 >= 1),
  forall (result: ((pointer) A900)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z6_0: ((memory) Z A900)),
  forall (HW_4: int_Z6_0 = (upd int_Z6 result 3)),
  forall (result0: ((pointer) A900)),
  forall (HW_5: result0 = (shift result 1)),
  forall (int_Z6_1: ((memory) Z A900)),
  forall (HW_6: int_Z6_1 = (upd int_Z6_0 result0 4)),
  forall (result1: ((pointer) A900)),
  forall (HW_7: result1 = (shift result 2)),
  forall (int_Z6_2: ((memory) Z A900)),
  forall (HW_8: int_Z6_2 = (upd int_Z6_1 result1 5)),
  forall (result2: Z),
  forall (HW_9: result2 = (acc int_Z6_2 result)),
  forall (result3: ((pointer) A900)),
  forall (HW_10: result3 = (shift result 1)),
  forall (result4: Z),
  forall (HW_11: result4 = (acc int_Z6_2 result3)),
  forall (result5: ((pointer) A900)),
  forall (HW_12: result5 = (shift result 2)),
  forall (result6: Z),
  forall (HW_13: result6 = (acc int_Z6_2 result5)),
  (* File "init.c", line 30, characters 13-26 *)
  (result2 + result4 + result6) = 12.
Proof.
intuition;subst;auto.
Save.

Proof.
intuition;subst;auto.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
subst.
rewrite acc_upd_neq;auto.
rewrite acc_upd_neq;auto.
rewrite acc_upd_eq;auto.
rewrite acc_upd_neq;auto.
rewrite acc_upd_eq;auto.
rewrite acc_upd_eq;auto.
apply neq_offset_neq_shift;omega.
replace (shift result 1 <> result) with (shift result 1 <> shift result 0).
apply neq_offset_neq_shift;omega.
rewrite shift_zero;auto.
replace (shift result 2 <> result) with (shift result 2 <> shift result 0).
apply neq_offset_neq_shift;omega.
rewrite shift_zero;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma invariants_initially_established_impl_po_1 : 
  forall (a_Z9: ((memory) Z Z9)),
  forall (alloc: alloc_table),
  forall (b_Z9: ((memory) ((pointer) Z2) Z9)),
  forall (int_Z2: ((memory) Z Z2)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (s: ((pointer) Z9)),
  forall (t: ((pointer) Z7)),
  forall (HW_1: (valid_range alloc t 0 2) /\ (valid alloc s) /\
                (valid1 b_Z9) /\ (valid1_range b_Z9 3)),
  forall (x: Z),
  forall (HW_2: x = 45),
  forall (int_Z7_0: ((memory) Z Z7)),
  forall (HW_3: int_Z7_0 = (upd int_Z7 t 1)),
  forall (result: ((pointer) Z7)),
  forall (HW_4: result = (shift t 1)),
  forall (int_Z7_1: ((memory) Z Z7)),
  forall (HW_5: int_Z7_1 = (upd int_Z7_0 result 2)),
  forall (result0: ((pointer) Z7)),
  forall (HW_6: result0 = (shift t 2)),
  forall (int_Z7_2: ((memory) Z Z7)),
  forall (HW_7: int_Z7_2 = (upd int_Z7_1 result0 3)),
  forall (a_Z9_0: ((memory) Z Z9)),
  forall (HW_8: a_Z9_0 = (upd a_Z9 s 1)),
  forall (result1: ((pointer) Z2)),
  forall (HW_9: result1 = (acc b_Z9 s)),
  forall (int_Z2_0: ((memory) Z Z2)),
  forall (HW_10: int_Z2_0 = (upd int_Z2 result1 1)),
  forall (result2: ((pointer) Z2)),
  forall (HW_11: result2 = (acc b_Z9 s)),
  forall (result3: ((pointer) Z2)),
  forall (HW_12: result3 = (shift result2 1)),
  forall (int_Z2_1: ((memory) Z Z2)),
  forall (HW_13: int_Z2_1 = (upd int_Z2_0 result3 3)),
  forall (result4: ((pointer) Z2)),
  forall (HW_14: result4 = (acc b_Z9 s)),
  forall (result5: ((pointer) Z2)),
  forall (HW_15: result5 = (shift result4 2)),
  forall (int_Z2_2: ((memory) Z Z2)),
  forall (HW_16: int_Z2_2 = (upd int_Z2_1 result5 4)),
  (* File "init.c", line 5, characters 25-34 *) ((acc int_Z7_2 (shift t 1)) =
  2 /\ (acc int_Z2_2 (acc b_Z9 s)) = 1 /\
  (acc int_Z2_2 (shift (acc b_Z9 s) 2)) = 4).
Proof.
intuition;subst;auto.
Save.

Proof.
intuition;subst;auto.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
apply valid_range_valid_shift with 0 (3-1).
apply H3;auto.
omega.
Save.

Proof.
intuition.
Save.

Proof.
intuition.
subst;auto.
apply valid_range_valid_shift with 0 (3-1).
apply H3;auto.
omega.
Save.

Proof.
intuition;subst;auto.
rewrite acc_upd_neq.
rewrite acc_upd_eq;auto.
apply neq_offset_neq_shift;omega.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
rewrite acc_upd_eq;auto.
replace (shift (s # b_Z7) 1 <> s # b_Z7) with (shift (s # b_Z7) 1 <> shift (s # b_Z7) 0).
apply neq_offset_neq_shift;omega.
rewrite shift_zero;auto.
replace (shift (s # b_Z7) 2 <> s # b_Z7) with (shift (s # b_Z7) 2 <> shift (s # b_Z7) 0).
apply neq_offset_neq_shift;omega.
rewrite shift_zero;auto.
rewrite acc_upd_eq;auto.
Save.
