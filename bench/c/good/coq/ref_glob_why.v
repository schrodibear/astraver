(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/ref_glob.why", characters 113-140 *)
Lemma f1_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (x: pointer),
  forall (Pre4: (valid_range alloc x 0 1)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = x),
  (valid alloc caduceus_1).
Proof.
intuition.
subst;auto.
Qed.

(* Why obligation from file "why/ref_glob.why", characters 90-140 *)
Lemma f1_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (x: pointer),
  forall (Pre4: (valid_range alloc x 0 1)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = x),
  forall (Pre3: (valid alloc caduceus_1)),
  forall (intP0: ((memory) Z)),
  forall (Post5: intP0 = (upd intP caduceus_1 1)),
  (acc intP0 x) = 1 /\ (not_assigns alloc intP intP0 (pset_singleton x)).
Proof.
intuition.
subst; caduceus.
subst;auto.
Qed.

(* Why obligation from file "why/ref_glob.why", characters 328-343 *)
Lemma f2_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (x: pointer),
  forall (Pre4: (valid_range alloc x 0 1)),
  (valid alloc x).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.


(* Why obligation from file "why/ref_glob.why", characters 567-594 *)
Lemma f4_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (c2: ((memory) pointer)),
  forall (plas: pointer),
  forall (Pre4: (valid alloc plas)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = (acc c2 plas)),
  (valid alloc caduceus_1).
Proof.
intuition.
subst;auto.
generalize (valid_anonymous_0_c1_pointer alloc c2 plas Pre4).
unfold valid_anonymous_0_c1.
tauto.
Save.

(* Why obligation from file "why/ref_glob.why", characters 529-594 *)
Lemma f4_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (c1: ((memory) pointer)),
  forall (c2: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (plas: pointer),
  forall (Pre4: (valid alloc plas)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = (acc c2 plas)),
  forall (Pre3: (valid alloc caduceus_1)),
  forall (intP0: ((memory) Z)),
  forall (Post8: intP0 = (upd intP caduceus_1 2)),
  (forall (result:pointer),
   (result = (acc c1 plas) ->
    (forall (intP1:((memory) Z)),
     ((acc intP1 result) = 1 /\
      (not_assigns alloc intP0 intP1 (pset_singleton result)) ->
      (forall (result:pointer),
       (result = (acc c2 plas) ->
        (forall (intP0:((memory) Z)),
         ((acc intP0 result) = 1 /\
          (not_assigns alloc intP1 intP0 (pset_singleton result)) ->
          ((acc intP0 (acc c1 plas)) = 1 /\ (acc intP0 (acc c2 plas)) = 1) /\
          (not_assigns alloc intP intP0
           (pset_union (pset_singleton (acc c2 plas))
            (pset_singleton (acc c1 plas)))))) /\
        (valid alloc result))) /\
      (valid alloc plas))) /\
    (valid alloc result))) /\
  (valid alloc plas).
Proof.
intros.
intuition.
subst.
rewrite H5;auto.
generalize (valid_anonymous_0_c1_pointer alloc c1 plas Pre4).
unfold valid_anonymous_0_c1.
tauto.
apply unchanged_pointer_intro.
generalize (valid_anonymous_0_pointer alloc c1 c2 plas Pre4).
unfold internal_separation_anonymous_0.
intro.
generalize (neq_base_addr_neq_shift _ _ 0 0 H).
repeat rewrite shift_zero;auto.
subst;auto.
subst.
red.
intros.
red in H2.
red in H5.
assert (unchanged p (pointer_loc (plas # c2))).
generalize (unchanged_union_elim1 _ _ _ H0);auto.
generalize (H5 p H H3);intro.
rewrite H6.
assert (unchanged p (pointer_loc (plas # c1))).
generalize (unchanged_union_elim2 _ _ _ H0);auto.
generalize (H2 p H H7);intro.
rewrite H8.
rewrite acc_upd_neq;auto.
generalize (unchanged_pointer_elim _ _ H3).
intuition.
subst;auto.
subst.
generalize (valid_anonymous_0_c1_pointer alloc c1 plas Pre4).
unfold valid_anonymous_0_c1;tauto.
Save.

(* Why obligation from file "why/ref_glob.why", characters 938-1092 *)
Lemma g_impl_po_1 : 
  forall (p: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre3: (valid alloc p)),
  forall (intP0: ((memory) Z)),
  forall (Post3: intP0 = (upd intP p 1)),
  (acc intP0 p) = 1 /\ (not_assigns alloc intP intP0 (pset_singleton p)).
Proof.
intuition.
subst; caduceus.
Save.

(* Why obligation from file "why/ref_glob.why", characters 1250-1277 *)
Lemma h_impl_po_1 : 
  forall (p: pointer),
  forall (alloc: alloc_table),
  forall (intPP: ((memory) pointer)),
  forall (Pre5: (valid alloc p) /\ (valid alloc (acc intPP p))),
  forall (Pre4: (valid alloc p)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = (acc intPP p)),
  (valid alloc caduceus_1).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "why/ref_glob.why", characters 1213-1277 *)
Lemma h_impl_po_2 : 
  forall (p: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (intPP: ((memory) pointer)),
  forall (Pre5: (valid alloc p) /\ (valid alloc (acc intPP p))),
  forall (Pre4: (valid alloc p)),
  forall (caduceus_1: pointer),
  forall (Post3: caduceus_1 = (acc intPP p)),
  forall (Pre3: (valid alloc caduceus_1)),
  forall (intP0: ((memory) Z)),
  forall (Post5: intP0 = (upd intP caduceus_1 2)),
  (acc intP0 (acc intPP p)) = 2 /\
  (not_assigns alloc intP intP0 (pset_singleton (acc intPP p))).
Proof.
intuition;subst;auto.
caduceus.
Save.

