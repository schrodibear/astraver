(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export alloca_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_2: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_4: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z0_2: ((memory) Z Z0)),
  forall (HW_6: int_Z0_2 = (upd int_Z0_1 result1 3)),
  forall (result2: ((pointer) Z0)),
  forall (HW_7: result2 = (shift result 2)),
  forall (result3: Z),
  forall (HW_8: result3 = (acc int_Z0_2 result2)),
  (* File \"alloca.c\", line 3, characters 13-25:\n *) result3 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_2: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_4: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z0_2: ((memory) Z Z0)),
  forall (HW_6: int_Z0_2 = (upd int_Z0_1 result1 3)),
  forall (result2: ((pointer) Z0)),
  forall (HW_7: result2 = (shift result 2)),
  forall (HW_9: (forall (result:Z),
                 (result = (acc int_Z0_2 result2) ->
                  (* File \"alloca.c\", line 3, characters 13-25:\n *)
                  result = 3))),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_2: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_4: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_5: result1 = (shift result 2)),
  forall (HW_10: (forall (int_Z0:((memory) Z Z0)),
                  (int_Z0 = (upd int_Z0_1 result1 3) ->
                   (forall (result0:((pointer) Z0)),
                    (result0 = (shift result 2) ->
                     (forall (result:Z),
                      (result = (acc int_Z0 result0) ->
                       (* File \"alloca.c\", line 3, characters 13-25:\n *)
                       result = 3)) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result1).
Proof.
intuition.
subst;caduceus.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_2: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 1)),
  forall (HW_11: (forall (int_Z0:((memory) Z Z0)),
                  (int_Z0 = (upd int_Z0_0 result0 2) ->
                   (forall (result0:((pointer) Z0)),
                    (result0 = (shift result 2) ->
                     (forall (int_Z0_0:((memory) Z Z0)),
                      (int_Z0_0 = (upd int_Z0 result0 3) ->
                       (forall (result0:((pointer) Z0)),
                        (result0 = (shift result 2) ->
                         (forall (result:Z),
                          (result = (acc int_Z0_0 result0) ->
                           (* File \"alloca.c\", line 3, characters 13-25:\n *)
                           result = 3)) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_12: (forall (int_Z0_0:((memory) Z Z0)),
                  (int_Z0_0 = (upd int_Z0 result 1) ->
                   (forall (result0:((pointer) Z0)),
                    (result0 = (shift result 1) ->
                     (forall (int_Z0:((memory) Z Z0)),
                      (int_Z0 = (upd int_Z0_0 result0 2) ->
                       (forall (result0:((pointer) Z0)),
                        (result0 = (shift result 2) ->
                         (forall (int_Z0_0:((memory) Z Z0)),
                          (int_Z0_0 = (upd int_Z0 result0 3) ->
                           (forall (result0:((pointer) Z0)),
                            (result0 = (shift result 2) ->
                             (forall (result:Z),
                              (result = (acc int_Z0_0 result0) ->
                               (* File \"alloca.c\", line 3, characters 13-25:\n *)
                               result = 3)) /\
                             (valid alloc0 result0))))) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (HW_13: (forall (result:((pointer) Z0)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 3 /\
                    (valid_range alloc0 result 0 (3 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (int_Z0_0:((memory) Z Z0)),
                     (int_Z0_0 = (upd int_Z0 result 1) ->
                      (forall (result0:((pointer) Z0)),
                       (result0 = (shift result 1) ->
                        (forall (int_Z0:((memory) Z Z0)),
                         (int_Z0 = (upd int_Z0_0 result0 2) ->
                          (forall (result0:((pointer) Z0)),
                           (result0 = (shift result 2) ->
                            (forall (int_Z0_0:((memory) Z Z0)),
                             (int_Z0_0 = (upd int_Z0 result0 3) ->
                              (forall (result0:((pointer) Z0)),
                               (result0 = (shift result 2) ->
                                (forall (result:Z),
                                 (result = (acc int_Z0_0 result0) ->
                                  (* File \"alloca.c\", line 3, characters 13-25:\n *)
                                  result = 3)) /\
                                (valid alloc0 result0))))) /\
                            (valid alloc0 result0))))) /\
                        (valid alloc0 result0))))) /\
                    (valid alloc0 result))))),
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_2: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_4: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z1_2: ((memory) Z Z1)),
  forall (HW_6: int_Z1_2 = (upd int_Z1_1 result1 3)),
  forall (result2: ((pointer) Z1)),
  forall (HW_7: result2 = (shift result 2)),
  forall (result3: Z),
  forall (HW_8: result3 = (acc int_Z1_2 result2)),
  (* File \"alloca.c\", line 9, characters 13-25:\n *) result3 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_2: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_4: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z1_2: ((memory) Z Z1)),
  forall (HW_6: int_Z1_2 = (upd int_Z1_1 result1 3)),
  forall (result2: ((pointer) Z1)),
  forall (HW_7: result2 = (shift result 2)),
  forall (HW_9: (forall (result:Z),
                 (result = (acc int_Z1_2 result2) ->
                  (* File \"alloca.c\", line 9, characters 13-25:\n *)
                  result = 3))),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_2: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_4: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_5: result1 = (shift result 2)),
  forall (HW_10: (forall (int_Z1:((memory) Z Z1)),
                  (int_Z1 = (upd int_Z1_1 result1 3) ->
                   (forall (result0:((pointer) Z1)),
                    (result0 = (shift result 2) ->
                     (forall (result:Z),
                      (result = (acc int_Z1 result0) ->
                       (* File \"alloca.c\", line 9, characters 13-25:\n *)
                       result = 3)) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result1).
Proof.
intuition;subst;caduceus;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_2: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_3: result0 = (shift result 1)),
  forall (HW_11: (forall (int_Z1:((memory) Z Z1)),
                  (int_Z1 = (upd int_Z1_0 result0 2) ->
                   (forall (result0:((pointer) Z1)),
                    (result0 = (shift result 2) ->
                     (forall (int_Z1_0:((memory) Z Z1)),
                      (int_Z1_0 = (upd int_Z1 result0 3) ->
                       (forall (result0:((pointer) Z1)),
                        (result0 = (shift result 2) ->
                         (forall (result:Z),
                          (result = (acc int_Z1_0 result0) ->
                           (* File \"alloca.c\", line 9, characters 13-25:\n *)
                           result = 3)) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_12: (forall (int_Z1_0:((memory) Z Z1)),
                  (int_Z1_0 = (upd int_Z1 result 1) ->
                   (forall (result0:((pointer) Z1)),
                    (result0 = (shift result 1) ->
                     (forall (int_Z1:((memory) Z Z1)),
                      (int_Z1 = (upd int_Z1_0 result0 2) ->
                       (forall (result0:((pointer) Z1)),
                        (result0 = (shift result 2) ->
                         (forall (int_Z1_0:((memory) Z Z1)),
                          (int_Z1_0 = (upd int_Z1 result0 3) ->
                           (forall (result0:((pointer) Z1)),
                            (result0 = (shift result 2) ->
                             (forall (result:Z),
                              (result = (acc int_Z1_0 result0) ->
                               (* File \"alloca.c\", line 9, characters 13-25:\n *)
                               result = 3)) /\
                             (valid alloc0 result0))))) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (HW_13: (forall (result:((pointer) Z1)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 3 /\
                    (valid_range alloc0 result 0 (3 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (int_Z1_0:((memory) Z Z1)),
                     (int_Z1_0 = (upd int_Z1 result 1) ->
                      (forall (result0:((pointer) Z1)),
                       (result0 = (shift result 1) ->
                        (forall (int_Z1:((memory) Z Z1)),
                         (int_Z1 = (upd int_Z1_0 result0 2) ->
                          (forall (result0:((pointer) Z1)),
                           (result0 = (shift result 2) ->
                            (forall (int_Z1_0:((memory) Z Z1)),
                             (int_Z1_0 = (upd int_Z1 result0 3) ->
                              (forall (result0:((pointer) Z1)),
                               (result0 = (shift result 2) ->
                                (forall (result:Z),
                                 (result = (acc int_Z1_0 result0) ->
                                  (* File \"alloca.c\", line 9, characters 13-25:\n *)
                                  result = 3)) /\
                                (valid alloc0 result0))))) /\
                            (valid alloc0 result0))))) /\
                        (valid alloc0 result0))))) /\
                    (valid alloc0 result))))),
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_3: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_4: result0 = (shift result 1)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_5: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_6: result1 = (shift result 2)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_7: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_8: result2 = (shift result 3)),
  forall (int_Z3_3: ((memory) Z Z3)),
  forall (HW_9: int_Z3_3 = (upd int_Z3_2 result2 4)),
  forall (result3: ((pointer) Z11)),
  forall (HW_10: result3 = (shift u 2)),
  forall (result4: Z),
  forall (HW_11: result4 = (acc int_Z11 result3)),
  (* File \"alloca.c\", line 18, characters 13-26:\n *) result4 = 12.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_3: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_4: result0 = (shift result 1)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_5: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_6: result1 = (shift result 2)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_7: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_8: result2 = (shift result 3)),
  forall (int_Z3_3: ((memory) Z Z3)),
  forall (HW_9: int_Z3_3 = (upd int_Z3_2 result2 4)),
  forall (result3: ((pointer) Z11)),
  forall (HW_10: result3 = (shift u 2)),
  forall (HW_12: (forall (result:Z),
                  (result = (acc int_Z11 result3) ->
                   (* File \"alloca.c\", line 18, characters 13-26:\n *)
                   result = 12))),
  (valid alloc0 result3).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_3: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_4: result0 = (shift result 1)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_5: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_6: result1 = (shift result 2)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_7: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_8: result2 = (shift result 3)),
  forall (HW_13: (forall (int_Z3:((memory) Z Z3)),
                  (int_Z3 = (upd int_Z3_2 result2 4) ->
                   (forall (result:((pointer) Z11)),
                    (result = (shift u 2) ->
                     (forall (result0:Z),
                      (result0 = (acc int_Z11 result) ->
                       (* File \"alloca.c\", line 18, characters 13-26:\n *)
                       result0 = 12)) /\
                     (valid alloc0 result)))))),
  (valid alloc0 result2).
Proof.
assert (0<=2<=4).
omega.
intuition.
subst.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
subst;auto.
generalize (fresh_not_valid _ _ H7 0).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
rewrite shift_zero in H9.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 1).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 2).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 3).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
subst.
apply alloc_stack_valid with t alloc; auto.
subst.
apply alloc_stack_valid with t alloc; auto.
subst.
apply valid_range_valid_shift with 0 (4-1);auto.
omega.
subst.
apply valid_range_valid_shift with 0 (4-1);auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_3: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_4: result0 = (shift result 1)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_5: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_6: result1 = (shift result 2)),
  forall (HW_14: (forall (int_Z3:((memory) Z Z3)),
                  (int_Z3 = (upd int_Z3_1 result1 3) ->
                   (forall (result0:((pointer) Z3)),
                    (result0 = (shift result 3) ->
                     (forall (int_Z3_0:((memory) Z Z3)),
                      (int_Z3_0 = (upd int_Z3 result0 4) ->
                       (forall (result:((pointer) Z11)),
                        (result = (shift u 2) ->
                         (forall (result0:Z),
                          (result0 = (acc int_Z11 result) ->
                           (* File \"alloca.c\", line 18, characters 13-26:\n *)
                           result0 = 12)) /\
                         (valid alloc0 result))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_3: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_4: result0 = (shift result 1)),
  forall (HW_15: (forall (int_Z3:((memory) Z Z3)),
                  (int_Z3 = (upd int_Z3_0 result0 2) ->
                   (forall (result0:((pointer) Z3)),
                    (result0 = (shift result 2) ->
                     (forall (int_Z3_0:((memory) Z Z3)),
                      (int_Z3_0 = (upd int_Z3 result0 3) ->
                       (forall (result0:((pointer) Z3)),
                        (result0 = (shift result 3) ->
                         (forall (int_Z3:((memory) Z Z3)),
                          (int_Z3 = (upd int_Z3_0 result0 4) ->
                           (forall (result:((pointer) Z11)),
                            (result = (shift u 2) ->
                             (forall (result0:Z),
                              (result0 = (acc int_Z11 result) ->
                               (* File \"alloca.c\", line 18, characters 13-26:\n *)
                               result0 = 12)) /\
                             (valid alloc0 result))))) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_16: (forall (int_Z3_0:((memory) Z Z3)),
                  (int_Z3_0 = (upd int_Z3 result 1) ->
                   (forall (result0:((pointer) Z3)),
                    (result0 = (shift result 1) ->
                     (forall (int_Z3:((memory) Z Z3)),
                      (int_Z3 = (upd int_Z3_0 result0 2) ->
                       (forall (result0:((pointer) Z3)),
                        (result0 = (shift result 2) ->
                         (forall (int_Z3_0:((memory) Z Z3)),
                          (int_Z3_0 = (upd int_Z3 result0 3) ->
                           (forall (result0:((pointer) Z3)),
                            (result0 = (shift result 3) ->
                             (forall (int_Z3:((memory) Z Z3)),
                              (int_Z3 = (upd int_Z3_0 result0 4) ->
                               (forall (result:((pointer) Z11)),
                                (result = (shift u 2) ->
                                 (forall (result0:Z),
                                  (result0 = (acc int_Z11 result) ->
                                   (* File \"alloca.c\", line 18, characters 13-26:\n *)
                                   result0 = 12)) /\
                                 (valid alloc0 result))))) /\
                             (valid alloc0 result0))))) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (int_Z11: ((memory) Z Z11)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z11)),
  forall (HW_1: (* File \"alloca.c\", line 17, characters 14-24:\n *)
                (acc int_Z11 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_17: (forall (result:((pointer) Z3)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 4 /\
                    (valid_range alloc0 result 0 (4 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (int_Z3_0:((memory) Z Z3)),
                     (int_Z3_0 = (upd int_Z3 result 1) ->
                      (forall (result0:((pointer) Z3)),
                       (result0 = (shift result 1) ->
                        (forall (int_Z3:((memory) Z Z3)),
                         (int_Z3 = (upd int_Z3_0 result0 2) ->
                          (forall (result0:((pointer) Z3)),
                           (result0 = (shift result 2) ->
                            (forall (int_Z3_0:((memory) Z Z3)),
                             (int_Z3_0 = (upd int_Z3 result0 3) ->
                              (forall (result0:((pointer) Z3)),
                               (result0 = (shift result 3) ->
                                (forall (int_Z3:((memory) Z Z3)),
                                 (int_Z3 = (upd int_Z3_0 result0 4) ->
                                  (forall (result:((pointer) Z11)),
                                   (result = (shift u 2) ->
                                    (forall (result0:Z),
                                     (result0 = (acc int_Z11 result) ->
                                      (* File \"alloca.c\", line 18, characters 13-26:\n *)
                                      result0 = 12)) /\
                                    (valid alloc0 result))))) /\
                                (valid alloc0 result0))))) /\
                            (valid alloc0 result0))))) /\
                        (valid alloc0 result0))))) /\
                    (valid alloc0 result))))),
  4 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_12: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc int_Z4_3 result6)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_16: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_17: result8 = (shift result3 3)),
  forall (int_Z5_3: ((memory) Z Z5)),
  forall (HW_18: int_Z5_3 = (upd int_Z5_2 result8 0)),
  forall (result9: ((pointer) Z5)),
  forall (HW_19: result9 = (shift result3 2)),
  forall (result10: Z),
  forall (HW_20: result10 = (acc int_Z5_3 result9)),
  (* File \"alloca.c\", line 24, characters 13-25:\n *) result10 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_12: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc int_Z4_3 result6)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_16: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_17: result8 = (shift result3 3)),
  forall (int_Z5_3: ((memory) Z Z5)),
  forall (HW_18: int_Z5_3 = (upd int_Z5_2 result8 0)),
  forall (result9: ((pointer) Z5)),
  forall (HW_19: result9 = (shift result3 2)),
  forall (HW_21: (forall (result:Z),
                  (result = (acc int_Z5_3 result9) ->
                   (* File \"alloca.c\", line 24, characters 13-25:\n *)
                   result = 3))),
  (valid alloc1 result9).
Proof.
intuition.
subst;auto.
Save.


(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_12: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc int_Z4_3 result6)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_16: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_17: result8 = (shift result3 3)),
  forall (HW_22: (forall (int_Z5:((memory) Z Z5)),
                  (int_Z5 = (upd int_Z5_2 result8 0) ->
                   (forall (result:((pointer) Z5)),
                    (result = (shift result3 2) ->
                     (forall (result0:Z),
                      (result0 = (acc int_Z5 result) ->
                       (* File \"alloca.c\", line 24, characters 13-25:\n *)
                       result0 = 3)) /\
                     (valid alloc1 result)))))),
  (valid alloc1 result8).
Proof.
intuition;subst;caduceus.
rewrite acc_upd_neq.
caduceus.
generalize (fresh_not_valid _ _ H14 0);rewrite shift_zero.
intro.
intro;subst.
intuition.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply alloc_stack_valid with result1 alloc0;auto.
apply alloc_stack_valid with result1 alloc0;auto.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply valid_range_valid_shift with 0 (4-1);auto with zarith.
apply valid_range_valid_shift with 0 (4-1);auto with zarith.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_12: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc int_Z4_3 result6)),
  forall (HW_23: (forall (int_Z5:((memory) Z Z5)),
                  (int_Z5 = (upd int_Z5_1 result5 result7) ->
                   (forall (result:((pointer) Z5)),
                    (result = (shift result3 3) ->
                     (forall (int_Z5_0:((memory) Z Z5)),
                      (int_Z5_0 = (upd int_Z5 result 0) ->
                       (forall (result:((pointer) Z5)),
                        (result = (shift result3 2) ->
                         (forall (result0:Z),
                          (result0 = (acc int_Z5_0 result) ->
                           (* File \"alloca.c\", line 24, characters 13-25:\n *)
                           result0 = 3)) /\
                         (valid alloc1 result))))) /\
                     (valid alloc1 result)))))),
  (valid alloc1 result5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_12: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_14: result6 = (shift result 2)),
  forall (HW_24: (forall (result:Z),
                  (result = (acc int_Z4_3 result6) ->
                   (forall (int_Z5:((memory) Z Z5)),
                    (int_Z5 = (upd int_Z5_1 result5 result) ->
                     (forall (result:((pointer) Z5)),
                      (result = (shift result3 3) ->
                       (forall (int_Z5_0:((memory) Z Z5)),
                        (int_Z5_0 = (upd int_Z5 result 0) ->
                         (forall (result:((pointer) Z5)),
                          (result = (shift result3 2) ->
                           (forall (result0:Z),
                            (result0 = (acc int_Z5_0 result) ->
                             (* File \"alloca.c\", line 24, characters 13-25:\n *)
                             result0 = 3)) /\
                           (valid alloc1 result))))) /\
                       (valid alloc1 result))))) /\
                   (valid alloc1 result5)))),
  (valid alloc1 result6).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_10: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_11: result4 = (shift result3 1)),
  forall (HW_25: (forall (int_Z5:((memory) Z Z5)),
                  (int_Z5 = (upd int_Z5_0 result4 0) ->
                   (forall (result0:((pointer) Z5)),
                    (result0 = (shift result3 2) ->
                     (forall (result1:((pointer) Z4)),
                      (result1 = (shift result 2) ->
                       (forall (result:Z),
                        (result = (acc int_Z4_3 result1) ->
                         (forall (int_Z5_0:((memory) Z Z5)),
                          (int_Z5_0 = (upd int_Z5 result0 result) ->
                           (forall (result:((pointer) Z5)),
                            (result = (shift result3 3) ->
                             (forall (int_Z5:((memory) Z Z5)),
                              (int_Z5 = (upd int_Z5_0 result 0) ->
                               (forall (result:((pointer) Z5)),
                                (result = (shift result3 2) ->
                                 (forall (result0:Z),
                                  (result0 = (acc int_Z5 result) ->
                                   (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                   result0 = 3)) /\
                                 (valid alloc1 result))))) /\
                             (valid alloc1 result))))) /\
                         (valid alloc1 result0))) /\
                       (valid alloc1 result1)))))))),
  (valid alloc1 result4).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (HW_26: (forall (int_Z5_0:((memory) Z Z5)),
                  (int_Z5_0 = (upd int_Z5 result3 0) ->
                   (forall (result0:((pointer) Z5)),
                    (result0 = (shift result3 1) ->
                     (forall (int_Z5:((memory) Z Z5)),
                      (int_Z5 = (upd int_Z5_0 result0 0) ->
                       (forall (result0:((pointer) Z5)),
                        (result0 = (shift result3 2) ->
                         (forall (result1:((pointer) Z4)),
                          (result1 = (shift result 2) ->
                           (forall (result:Z),
                            (result = (acc int_Z4_3 result1) ->
                             (forall (int_Z5_0:((memory) Z Z5)),
                              (int_Z5_0 = (upd int_Z5 result0 result) ->
                               (forall (result:((pointer) Z5)),
                                (result = (shift result3 3) ->
                                 (forall (int_Z5:((memory) Z Z5)),
                                  (int_Z5 = (upd int_Z5_0 result 0) ->
                                   (forall (result:((pointer) Z5)),
                                    (result = (shift result3 2) ->
                                     (forall (result0:Z),
                                      (result0 = (acc int_Z5 result) ->
                                       (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                       result0 = 3)) /\
                                     (valid alloc1 result))))) /\
                                 (valid alloc1 result))))) /\
                             (valid alloc1 result0))) /\
                           (valid alloc1 result1))))))) /\
                     (valid alloc1 result0)))))),
  (valid alloc1 result3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_8 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_8: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_27: (forall (result0:((pointer) Z5)),
                  (forall (alloc:alloc_table),
                   ((valid alloc result0) /\ (offset result0) = 0 /\
                    (block_length alloc result0) = 5 /\
                    (valid_range alloc result0 0 (5 - 1)) /\
                    (fresh alloc0 result0) /\ (on_stack alloc result0) /\
                    (alloc_stack result0 alloc0 alloc) ->
                    (forall (int_Z5_0:((memory) Z Z5)),
                     (int_Z5_0 = (upd int_Z5 result0 0) ->
                      (forall (result1:((pointer) Z5)),
                       (result1 = (shift result0 1) ->
                        (forall (int_Z5:((memory) Z Z5)),
                         (int_Z5 = (upd int_Z5_0 result1 0) ->
                          (forall (result1:((pointer) Z5)),
                           (result1 = (shift result0 2) ->
                            (forall (result2:((pointer) Z4)),
                             (result2 = (shift result 2) ->
                              (forall (result:Z),
                               (result = (acc int_Z4_3 result2) ->
                                (forall (int_Z5_0:((memory) Z Z5)),
                                 (int_Z5_0 = (upd int_Z5 result1 result) ->
                                  (forall (result:((pointer) Z5)),
                                   (result = (shift result0 3) ->
                                    (forall (int_Z5:((memory) Z Z5)),
                                     (int_Z5 = (upd int_Z5_0 result 0) ->
                                      (forall (result:((pointer) Z5)),
                                       (result = (shift result0 2) ->
                                        (forall (result0:Z),
                                         (result0 = (acc int_Z5 result) ->
                                          (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                          result0 = 3)) /\
                                        (valid alloc result))))) /\
                                    (valid alloc result))))) /\
                                (valid alloc result1))) /\
                              (valid alloc result2))))))) /\
                        (valid alloc result1))))) /\
                    (valid alloc result0))))),
  5 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_9 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_6: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_7: result2 = (shift result 3)),
  forall (HW_28: (forall (int_Z4:((memory) Z Z4)),
                  (int_Z4 = (upd int_Z4_2 result2 4) ->
                   (forall (result0:((pointer) Z5)),
                    (forall (alloc:alloc_table),
                     ((valid alloc result0) /\ (offset result0) = 0 /\
                      (block_length alloc result0) = 5 /\
                      (valid_range alloc result0 0 (5 - 1)) /\
                      (fresh alloc0 result0) /\ (on_stack alloc result0) /\
                      (alloc_stack result0 alloc0 alloc) ->
                      (forall (int_Z5_0:((memory) Z Z5)),
                       (int_Z5_0 = (upd int_Z5 result0 0) ->
                        (forall (result1:((pointer) Z5)),
                         (result1 = (shift result0 1) ->
                          (forall (int_Z5:((memory) Z Z5)),
                           (int_Z5 = (upd int_Z5_0 result1 0) ->
                            (forall (result1:((pointer) Z5)),
                             (result1 = (shift result0 2) ->
                              (forall (result2:((pointer) Z4)),
                               (result2 = (shift result 2) ->
                                (forall (result:Z),
                                 (result = (acc int_Z4 result2) ->
                                  (forall (int_Z5_0:((memory) Z Z5)),
                                   (int_Z5_0 = (upd int_Z5 result1 result) ->
                                    (forall (result:((pointer) Z5)),
                                     (result = (shift result0 3) ->
                                      (forall (int_Z5:((memory) Z Z5)),
                                       (int_Z5 = (upd int_Z5_0 result 0) ->
                                        (forall (result:((pointer) Z5)),
                                         (result = (shift result0 2) ->
                                          (forall (result0:Z),
                                           (result0 = (acc int_Z5 result) ->
                                            (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                            result0 = 3)) /\
                                          (valid alloc result))))) /\
                                      (valid alloc result))))) /\
                                  (valid alloc result1))) /\
                                (valid alloc result2))))))) /\
                          (valid alloc result1))))) /\
                      (valid alloc result0)))) /\
                   5 >= 1))),
  (valid alloc0 result2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_10 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_4: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_5: result1 = (shift result 2)),
  forall (HW_29: (forall (int_Z4:((memory) Z Z4)),
                  (int_Z4 = (upd int_Z4_1 result1 3) ->
                   (forall (result0:((pointer) Z4)),
                    (result0 = (shift result 3) ->
                     (forall (int_Z4_0:((memory) Z Z4)),
                      (int_Z4_0 = (upd int_Z4 result0 4) ->
                       (forall (result0:((pointer) Z5)),
                        (forall (alloc:alloc_table),
                         ((valid alloc result0) /\ (offset result0) = 0 /\
                          (block_length alloc result0) = 5 /\
                          (valid_range alloc result0 0 (5 - 1)) /\
                          (fresh alloc0 result0) /\
                          (on_stack alloc result0) /\
                          (alloc_stack result0 alloc0 alloc) ->
                          (forall (int_Z5_0:((memory) Z Z5)),
                           (int_Z5_0 = (upd int_Z5 result0 0) ->
                            (forall (result1:((pointer) Z5)),
                             (result1 = (shift result0 1) ->
                              (forall (int_Z5:((memory) Z Z5)),
                               (int_Z5 = (upd int_Z5_0 result1 0) ->
                                (forall (result1:((pointer) Z5)),
                                 (result1 = (shift result0 2) ->
                                  (forall (result2:((pointer) Z4)),
                                   (result2 = (shift result 2) ->
                                    (forall (result:Z),
                                     (result = (acc int_Z4_0 result2) ->
                                      (forall (int_Z5_0:((memory) Z Z5)),
                                       (int_Z5_0 = (upd int_Z5 result1 result) ->
                                        (forall (result:((pointer) Z5)),
                                         (result = (shift result0 3) ->
                                          (forall (int_Z5:((memory) Z Z5)),
                                           (int_Z5 = (upd int_Z5_0 result 0) ->
                                            (forall (result:((pointer) Z5)),
                                             (result = (shift result0 2) ->
                                              (forall (result0:Z),
                                               (result0 = (acc int_Z5 result) ->
                                                (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                                result0 = 3)) /\
                                              (valid alloc result))))) /\
                                          (valid alloc result))))) /\
                                      (valid alloc result1))) /\
                                    (valid alloc result2))))))) /\
                              (valid alloc result1))))) /\
                          (valid alloc result0)))) /\
                       5 >= 1)) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_11 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_2: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_3: result0 = (shift result 1)),
  forall (HW_30: (forall (int_Z4:((memory) Z Z4)),
                  (int_Z4 = (upd int_Z4_0 result0 2) ->
                   (forall (result0:((pointer) Z4)),
                    (result0 = (shift result 2) ->
                     (forall (int_Z4_0:((memory) Z Z4)),
                      (int_Z4_0 = (upd int_Z4 result0 3) ->
                       (forall (result0:((pointer) Z4)),
                        (result0 = (shift result 3) ->
                         (forall (int_Z4:((memory) Z Z4)),
                          (int_Z4 = (upd int_Z4_0 result0 4) ->
                           (forall (result0:((pointer) Z5)),
                            (forall (alloc:alloc_table),
                             ((valid alloc result0) /\ (offset result0) =
                              0 /\ (block_length alloc result0) = 5 /\
                              (valid_range alloc result0 0 (5 - 1)) /\
                              (fresh alloc0 result0) /\
                              (on_stack alloc result0) /\
                              (alloc_stack result0 alloc0 alloc) ->
                              (forall (int_Z5_0:((memory) Z Z5)),
                               (int_Z5_0 = (upd int_Z5 result0 0) ->
                                (forall (result1:((pointer) Z5)),
                                 (result1 = (shift result0 1) ->
                                  (forall (int_Z5:((memory) Z Z5)),
                                   (int_Z5 = (upd int_Z5_0 result1 0) ->
                                    (forall (result1:((pointer) Z5)),
                                     (result1 = (shift result0 2) ->
                                      (forall (result2:((pointer) Z4)),
                                       (result2 = (shift result 2) ->
                                        (forall (result:Z),
                                         (result = (acc int_Z4 result2) ->
                                          (forall (int_Z5_0:((memory) Z Z5)),
                                           (int_Z5_0 = (upd int_Z5 result1
                                                        result) ->
                                            (forall (result:((pointer) Z5)),
                                             (result = (shift result0 3) ->
                                              (forall (int_Z5:((memory) Z
                                               Z5)),
                                               (int_Z5 = (upd int_Z5_0 result
                                                          0) ->
                                                (forall (result:((pointer) Z5)),
                                                 (result = (shift result0 2) ->
                                                  (forall (result0:Z),
                                                   (result0 = (acc int_Z5
                                                               result) ->
                                                    (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                                    result0 = 3)) /\
                                                  (valid alloc result))))) /\
                                              (valid alloc result))))) /\
                                          (valid alloc result1))) /\
                                        (valid alloc result2))))))) /\
                                  (valid alloc result1))))) /\
                              (valid alloc result0)))) /\
                           5 >= 1)) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_12 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_31: (forall (int_Z4_0:((memory) Z Z4)),
                  (int_Z4_0 = (upd int_Z4 result 1) ->
                   (forall (result0:((pointer) Z4)),
                    (result0 = (shift result 1) ->
                     (forall (int_Z4:((memory) Z Z4)),
                      (int_Z4 = (upd int_Z4_0 result0 2) ->
                       (forall (result0:((pointer) Z4)),
                        (result0 = (shift result 2) ->
                         (forall (int_Z4_0:((memory) Z Z4)),
                          (int_Z4_0 = (upd int_Z4 result0 3) ->
                           (forall (result0:((pointer) Z4)),
                            (result0 = (shift result 3) ->
                             (forall (int_Z4:((memory) Z Z4)),
                              (int_Z4 = (upd int_Z4_0 result0 4) ->
                               (forall (result0:((pointer) Z5)),
                                (forall (alloc:alloc_table),
                                 ((valid alloc result0) /\ (offset result0) =
                                  0 /\ (block_length alloc result0) = 5 /\
                                  (valid_range alloc result0 0 (5 - 1)) /\
                                  (fresh alloc0 result0) /\
                                  (on_stack alloc result0) /\
                                  (alloc_stack result0 alloc0 alloc) ->
                                  (forall (int_Z5_0:((memory) Z Z5)),
                                   (int_Z5_0 = (upd int_Z5 result0 0) ->
                                    (forall (result1:((pointer) Z5)),
                                     (result1 = (shift result0 1) ->
                                      (forall (int_Z5:((memory) Z Z5)),
                                       (int_Z5 = (upd int_Z5_0 result1 0) ->
                                        (forall (result1:((pointer) Z5)),
                                         (result1 = (shift result0 2) ->
                                          (forall (result2:((pointer) Z4)),
                                           (result2 = (shift result 2) ->
                                            (forall (result:Z),
                                             (result = (acc int_Z4 result2) ->
                                              (forall (int_Z5_0:((memory) Z
                                               Z5)),
                                               (int_Z5_0 = (upd int_Z5
                                                            result1 result) ->
                                                (forall (result:((pointer) Z5)),
                                                 (result = (shift result0 3) ->
                                                  (forall (int_Z5:((memory) Z
                                                   Z5)),
                                                   (int_Z5 = (upd int_Z5_0
                                                              result 0) ->
                                                    (forall (result:((pointer) Z5)),
                                                     (result = (shift result0
                                                                2) ->
                                                      (forall (result0:Z),
                                                       (result0 = (acc int_Z5
                                                                   result) ->
                                                        (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                                        result0 = 3)) /\
                                                      (valid alloc result))))) /\
                                                  (valid alloc result))))) /\
                                              (valid alloc result1))) /\
                                            (valid alloc result2))))))) /\
                                      (valid alloc result1))))) /\
                                  (valid alloc result0)))) /\
                               5 >= 1)) /\
                             (valid alloc0 result0))))) /\
                         (valid alloc0 result0))))) /\
                     (valid alloc0 result0)))))),
  (valid alloc0 result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_13 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_32: (forall (result:((pointer) Z4)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 4 /\
                    (valid_range alloc0 result 0 (4 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (int_Z4_0:((memory) Z Z4)),
                     (int_Z4_0 = (upd int_Z4 result 1) ->
                      (forall (result0:((pointer) Z4)),
                       (result0 = (shift result 1) ->
                        (forall (int_Z4:((memory) Z Z4)),
                         (int_Z4 = (upd int_Z4_0 result0 2) ->
                          (forall (result0:((pointer) Z4)),
                           (result0 = (shift result 2) ->
                            (forall (int_Z4_0:((memory) Z Z4)),
                             (int_Z4_0 = (upd int_Z4 result0 3) ->
                              (forall (result0:((pointer) Z4)),
                               (result0 = (shift result 3) ->
                                (forall (int_Z4:((memory) Z Z4)),
                                 (int_Z4 = (upd int_Z4_0 result0 4) ->
                                  (forall (result0:((pointer) Z5)),
                                   (forall (alloc:alloc_table),
                                    ((valid alloc result0) /\
                                     (offset result0) = 0 /\
                                     (block_length alloc result0) = 5 /\
                                     (valid_range alloc result0 0 (5 - 1)) /\
                                     (fresh alloc0 result0) /\
                                     (on_stack alloc result0) /\
                                     (alloc_stack result0 alloc0 alloc) ->
                                     (forall (int_Z5_0:((memory) Z Z5)),
                                      (int_Z5_0 = (upd int_Z5 result0 0) ->
                                       (forall (result1:((pointer) Z5)),
                                        (result1 = (shift result0 1) ->
                                         (forall (int_Z5:((memory) Z Z5)),
                                          (int_Z5 = (upd int_Z5_0 result1 0) ->
                                           (forall (result1:((pointer) Z5)),
                                            (result1 = (shift result0 2) ->
                                             (forall (result2:((pointer) Z4)),
                                              (result2 = (shift result 2) ->
                                               (forall (result:Z),
                                                (result = (acc int_Z4 result2) ->
                                                 (forall (int_Z5_0:((memory) Z
                                                  Z5)),
                                                  (int_Z5_0 = (upd int_Z5
                                                               result1 result) ->
                                                   (forall (result:((pointer) Z5)),
                                                    (result = (shift result0
                                                               3) ->
                                                     (forall (int_Z5:((memory) Z
                                                      Z5)),
                                                      (int_Z5 = (upd int_Z5_0
                                                                 result 0) ->
                                                       (forall (result:((pointer) Z5)),
                                                        (result = (shift result0
                                                                   2) ->
                                                         (forall (result0:Z),
                                                          (result0 = (
                                                           acc int_Z5 result) ->
                                                           (* File \"alloca.c\", line 24, characters 13-25:\n *)
                                                           result0 = 3)) /\
                                                         (valid alloc result))))) /\
                                                     (valid alloc result))))) /\
                                                 (valid alloc result1))) /\
                                               (valid alloc result2))))))) /\
                                         (valid alloc result1))))) /\
                                     (valid alloc result0)))) /\
                                  5 >= 1)) /\
                                (valid alloc0 result0))))) /\
                            (valid alloc0 result0))))) /\
                        (valid alloc0 result0))))) /\
                    (valid alloc0 result))))),
  4 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_3: result1 = (shift result 4)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_4: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_5: result2 = (shift result0 4)),
  forall (int_Z7_0: ((memory) Z Z7)),
  forall (HW_6: int_Z7_0 = (upd int_Z7 result2 1)),
  forall (result3: ((pointer) Z6)),
  forall (HW_7: result3 = (shift result 4)),
  forall (result4: Z),
  forall (HW_8: result4 = (acc int_Z6_0 result3)),
  (* File \"alloca.c\", line 31, characters 13-25:\n *) result4 = 3.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_3: result1 = (shift result 4)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_4: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_5: result2 = (shift result0 4)),
  forall (int_Z7_0: ((memory) Z Z7)),
  forall (HW_6: int_Z7_0 = (upd int_Z7 result2 1)),
  forall (result3: ((pointer) Z6)),
  forall (HW_7: result3 = (shift result 4)),
  forall (HW_9: (forall (result:Z),
                 (result = (acc int_Z6_0 result3) ->
                  (* File \"alloca.c\", line 31, characters 13-25:\n *)
                  result = 3))),
  (valid alloc1 result3).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_3: result1 = (shift result 4)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_4: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_5: result2 = (shift result0 4)),
  forall (HW_10: (forall (int_Z7_0:((memory) Z Z7)),
                  (int_Z7_0 = (upd int_Z7 result2 1) ->
                   (forall (result0:((pointer) Z6)),
                    (result0 = (shift result 4) ->
                     (forall (result:Z),
                      (result = (acc int_Z6_0 result0) ->
                       (* File \"alloca.c\", line 31, characters 13-25:\n *)
                       result = 3)) /\
                     (valid alloc1 result0)))))),
  (valid alloc1 result2).
Proof.
intuition;subst.
assert (0<=4<=(5-1)).
omega.
generalize (valid_range_valid_shift _ _ _ _ 4 H2 H12).
intro.
apply alloc_stack_valid with v alloc0;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_3: result1 = (shift result 4)),
  forall (HW_11: (forall (int_Z6_0:((memory) Z Z6)),
                  (int_Z6_0 = (upd int_Z6 result1 3) ->
                   (forall (result1:((pointer) Z7)),
                    (result1 = (shift result0 4) ->
                     (forall (int_Z7_0:((memory) Z Z7)),
                      (int_Z7_0 = (upd int_Z7 result1 1) ->
                       (forall (result0:((pointer) Z6)),
                        (result0 = (shift result 4) ->
                         (forall (result:Z),
                          (result = (acc int_Z6_0 result0) ->
                           (* File \"alloca.c\", line 31, characters 13-25:\n *)
                           result = 3)) /\
                         (valid alloc1 result0))))) /\
                     (valid alloc1 result1)))))),
  (valid alloc1 result1).
Proof.
intuition;subst;auto.
rewrite acc_upd_neq.
rewrite acc_upd_eq;auto.
assert (0<=4<=(5-1)).
omega.
generalize (valid_range_valid_shift _ _ _ _ 4 H2 H12).
intro.
intro.
rewrite <- H15 in H14.
generalize (fresh_not_valid _ _ H10 4).
intro.
elim (H16 H14).
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_12: (forall (result0:((pointer) Z7)),
                  (forall (alloc:alloc_table),
                   ((valid alloc result0) /\ (offset result0) = 0 /\
                    (block_length alloc result0) = 6 /\
                    (valid_range alloc result0 0 (6 - 1)) /\
                    (fresh alloc0 result0) /\ (on_stack alloc result0) /\
                    (alloc_stack result0 alloc0 alloc) ->
                    (forall (result1:((pointer) Z6)),
                     (result1 = (shift result 4) ->
                      (forall (int_Z6_0:((memory) Z Z6)),
                       (int_Z6_0 = (upd int_Z6 result1 3) ->
                        (forall (result1:((pointer) Z7)),
                         (result1 = (shift result0 4) ->
                          (forall (int_Z7_0:((memory) Z Z7)),
                           (int_Z7_0 = (upd int_Z7 result1 1) ->
                            (forall (result0:((pointer) Z6)),
                             (result0 = (shift result 4) ->
                              (forall (result:Z),
                               (result = (acc int_Z6_0 result0) ->
                                (* File \"alloca.c\", line 31, characters 13-25:\n *)
                                result = 3)) /\
                              (valid alloc result0))))) /\
                          (valid alloc result1))))) /\
                      (valid alloc result1))))))),
  6 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (HW_13: (forall (result:((pointer) Z6)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 5 /\
                    (valid_range alloc0 result 0 (5 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (result0:((pointer) Z7)),
                     (forall (alloc:alloc_table),
                      ((valid alloc result0) /\ (offset result0) = 0 /\
                       (block_length alloc result0) = 6 /\
                       (valid_range alloc result0 0 (6 - 1)) /\
                       (fresh alloc0 result0) /\ (on_stack alloc result0) /\
                       (alloc_stack result0 alloc0 alloc) ->
                       (forall (result1:((pointer) Z6)),
                        (result1 = (shift result 4) ->
                         (forall (int_Z6_0:((memory) Z Z6)),
                          (int_Z6_0 = (upd int_Z6 result1 3) ->
                           (forall (result1:((pointer) Z7)),
                            (result1 = (shift result0 4) ->
                             (forall (int_Z7_0:((memory) Z Z7)),
                              (int_Z7_0 = (upd int_Z7 result1 1) ->
                               (forall (result0:((pointer) Z6)),
                                (result0 = (shift result 4) ->
                                 (forall (result:Z),
                                  (result = (acc int_Z6_0 result0) ->
                                   (* File \"alloca.c\", line 31, characters 13-25:\n *)
                                   result = 3)) /\
                                 (valid alloc result0))))) /\
                             (valid alloc result1))))) /\
                         (valid alloc result1)))))) /\
                    6 >= 1)))),
  5 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

