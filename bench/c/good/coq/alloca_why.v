(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/alloca.why", characters 75-94 *)
Lemma f_impl_po_1 : 
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", characters 148-175 *)
Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (Pre14: 3 >= 1),
  forall (alloc0: alloc_table),
  forall (t: pointer),
  forall (Post13: (valid alloc0 t) /\ (offset t) = 0 /\
                  (block_length alloc0 t) = 3 /\
                  (valid_range alloc0 t 0 (3 - 1)) /\ (fresh alloc t) /\
                  (on_stack alloc0 t)),
  forall (caduceus_3: pointer),
  forall (Post3: caduceus_3 = (shift t 0)),
  (valid alloc0 caduceus_3).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "why/alloca.why", characters 113-175 *)
Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre14: 3 >= 1),
  forall (alloc0: alloc_table),
  forall (t: pointer),
  forall (Post13: (valid alloc0 t) /\ (offset t) = 0 /\
                  (block_length alloc0 t) = 3 /\
                  (valid_range alloc0 t 0 (3 - 1)) /\ (fresh alloc t) /\
                  (on_stack alloc0 t)),
  forall (caduceus_3: pointer),
  forall (Post3: caduceus_3 = (shift t 0)),
  forall (Pre5: (valid alloc0 caduceus_3)),
  forall (intP0: ((memory) Z)),
  forall (Post16: intP0 = (upd intP caduceus_3 1)),
  (forall (result:pointer),
   (result = (shift t 1) ->
    (forall (intP:((memory) Z)),
     (intP = (upd intP0 result 2) ->
      (forall (result:pointer),
       (result = (shift t 2) ->
        (forall (intP0:((memory) Z)),
         (intP0 = (upd intP result 3) ->
          ((forall (result:Z),
            (result = (acc intP0 (shift t 2)) -> result = 3)) /\
          (valid alloc0 (shift t 2))) /\ (valid alloc0 (shift t 2)))) /\
        (valid alloc0 result))))) /\
    (valid alloc0 result))).
Proof.
intuition.
subst;caduceus.
subst;auto.
subst.
assert (0<=1<=3-1).
omega.
apply valid_range_valid_shift with 0 (3-1);auto.
Save.

