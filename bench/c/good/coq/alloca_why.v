(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export alloca_spec_why.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 2)),
  forall (result3: Z),
  forall (HW_8: result3 = (acc intP2 result2)),
  (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result3 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 2)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
subst;caduceus.
subst;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_5 : 
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 2)),
  forall (result3: Z),
  forall (HW_8: result3 = (acc intP2 result2)),
  (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result3 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 2)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition;subst;caduceus;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_5 : 
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_3: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_4: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_5: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_6: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_7: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_8: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_9: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (HW_10: result3 = (shift u 2)),
  forall (result4: Z),
  forall (HW_11: result4 = (acc intP3 result3)),
  (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 33-46 *)
  result4 = 12.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_3: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_4: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_5: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_6: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_7: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_8: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_9: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (HW_10: result3 = (shift u 2)),
  (valid alloc0 result3).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_3: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_4: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_5: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_6: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_7: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_8: result2 = (shift result 3)),
  (valid alloc0 result2).
Proof.
assert (0<=2<=4).
omega.
intuition.
subst.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
rewrite acc_upd_neq.
subst;auto.
generalize (fresh_not_valid _ _ H7 0).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
rewrite shift_zero in H9.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 1).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 2).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
generalize (fresh_not_valid _ _ H7 3).
intro.
assert (0<=2<=4).
omega.
generalize (valid_range_valid_shift _ _ _ _ 2 H2 H11).
intro.
intro.
rewrite <- H13 in H12.
elim (H9 H12).
subst.
apply alloc_stack_valid with t alloc; auto.
subst.
apply alloc_stack_valid with t alloc; auto.
subst.
apply valid_range_valid_shift with 0 (4-1);auto.
omega.
subst.
apply valid_range_valid_shift with 0 (4-1);auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_3: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_4: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_5: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_6: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_3: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_4: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (u: pointer),
  forall (HW_1: (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 10-20 *)
                (acc intP (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  4 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  forall (intP5: ((memory) Z)),
  forall (HW_12: intP5 = (upd intP4 result4 0)),
  forall (result5: pointer),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: pointer),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc intP5 result6)),
  forall (intP6: ((memory) Z)),
  forall (HW_16: intP6 = (upd intP5 result5 result7)),
  forall (result8: pointer),
  forall (HW_17: result8 = (shift result3 3)),
  forall (intP7: ((memory) Z)),
  forall (HW_18: intP7 = (upd intP6 result8 0)),
  forall (result9: pointer),
  forall (HW_19: result9 = (shift result3 2)),
  forall (result10: Z),
  forall (HW_20: result10 = (acc intP7 result9)),
  (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result10 = 3.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  forall (intP5: ((memory) Z)),
  forall (HW_12: intP5 = (upd intP4 result4 0)),
  forall (result5: pointer),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: pointer),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc intP5 result6)),
  forall (intP6: ((memory) Z)),
  forall (HW_16: intP6 = (upd intP5 result5 result7)),
  forall (result8: pointer),
  forall (HW_17: result8 = (shift result3 3)),
  forall (intP7: ((memory) Z)),
  forall (HW_18: intP7 = (upd intP6 result8 0)),
  forall (result9: pointer),
  forall (HW_19: result9 = (shift result3 2)),
  (valid alloc1 result9).
Proof.
intuition.
subst;auto.
Save.


(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  forall (intP5: ((memory) Z)),
  forall (HW_12: intP5 = (upd intP4 result4 0)),
  forall (result5: pointer),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: pointer),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc intP5 result6)),
  forall (intP6: ((memory) Z)),
  forall (HW_16: intP6 = (upd intP5 result5 result7)),
  forall (result8: pointer),
  forall (HW_17: result8 = (shift result3 3)),
  (valid alloc1 result8).
Proof.
intuition;subst;caduceus.
rewrite acc_upd_neq.
caduceus.
generalize (fresh_not_valid _ _ H14 0);rewrite shift_zero.
intro.
intro;subst.
intuition.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply alloc_stack_valid with result1 alloc0;auto.
apply alloc_stack_valid with result1 alloc0;auto.
apply valid_range_valid_shift with 0 (5-1);auto with zarith.
apply valid_range_valid_shift with 0 (4-1);auto with zarith.
apply valid_range_valid_shift with 0 (4-1);auto with zarith.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  forall (intP5: ((memory) Z)),
  forall (HW_12: intP5 = (upd intP4 result4 0)),
  forall (result5: pointer),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: pointer),
  forall (HW_14: result6 = (shift result 2)),
  forall (result7: Z),
  forall (HW_15: result7 = (acc intP5 result6)),
  (valid alloc1 result5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  forall (intP5: ((memory) Z)),
  forall (HW_12: intP5 = (upd intP4 result4 0)),
  forall (result5: pointer),
  forall (HW_13: result5 = (shift result3 2)),
  forall (result6: pointer),
  forall (HW_14: result6 = (shift result 2)),
  (valid alloc1 result6).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  forall (result3: pointer),
  forall (alloc1: alloc_table),
  forall (HW_9: (valid alloc1 result3) /\ (offset result3) = 0 /\
                (block_length alloc1 result3) = 5 /\
                (valid_range alloc1 result3 0 (5 - 1)) /\
                (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                (alloc_stack result3 alloc0 alloc1)),
  forall (intP4: ((memory) Z)),
  forall (HW_10: intP4 = (upd intP3 result3 0)),
  forall (result4: pointer),
  forall (HW_11: result4 = (shift result3 1)),
  (valid alloc1 result4).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  forall (intP3: ((memory) Z)),
  forall (HW_8: intP3 = (upd intP2 result2 4)),
  5 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_8 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  forall (intP2: ((memory) Z)),
  forall (HW_6: intP2 = (upd intP1 result1 3)),
  forall (result2: pointer),
  forall (HW_7: result2 = (shift result 3)),
  (valid alloc0 result2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_9 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  forall (intP1: ((memory) Z)),
  forall (HW_4: intP1 = (upd intP0 result0 2)),
  forall (result1: pointer),
  forall (HW_5: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_10 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (intP0: ((memory) Z)),
  forall (HW_2: intP0 = (upd intP result 1)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_11 : 
  4 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: pointer),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: pointer),
  forall (HW_3: result1 = (shift result 4)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result1 3)),
  forall (result2: pointer),
  forall (HW_5: result2 = (shift result0 4)),
  forall (intP1: ((memory) Z)),
  forall (HW_6: intP1 = (upd intP0 result2 1)),
  forall (result3: pointer),
  forall (HW_7: result3 = (shift result 4)),
  forall (result4: Z),
  forall (HW_8: result4 = (acc intP1 result3)),
  (* File \"alloca.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result4 = 3.
Proof.
intuition.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: pointer),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: pointer),
  forall (HW_3: result1 = (shift result 4)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result1 3)),
  forall (result2: pointer),
  forall (HW_5: result2 = (shift result0 4)),
  forall (intP1: ((memory) Z)),
  forall (HW_6: intP1 = (upd intP0 result2 1)),
  forall (result3: pointer),
  forall (HW_7: result3 = (shift result 4)),
  (valid alloc1 result3).
Proof.
intuition.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: pointer),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: pointer),
  forall (HW_3: result1 = (shift result 4)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result1 3)),
  forall (result2: pointer),
  forall (HW_5: result2 = (shift result0 4)),
  (valid alloc1 result2).
Proof.
intuition;subst.
assert (0<=4<=(5-1)).
omega.
generalize (valid_range_valid_shift _ _ _ _ 4 H2 H12).
intro.
apply alloc_stack_valid with v alloc0;auto.
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (result0: pointer),
  forall (alloc1: alloc_table),
  forall (HW_2: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: pointer),
  forall (HW_3: result1 = (shift result 4)),
  (valid alloc1 result1).
Proof.
intuition;subst;auto.
rewrite acc_upd_neq.
rewrite acc_upd_eq;auto.
assert (0<=4<=(5-1)).
omega.
generalize (valid_range_valid_shift _ _ _ _ 4 H2 H12).
intro.
intro.
rewrite <- H15 in H14.
generalize (fresh_not_valid _ _ H10 4).
intro.
elim (H16 H14).
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (result: pointer),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  6 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/alloca.why", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_6 : 
  5 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

