(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export alloca_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  3 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  (valid alloc0 result).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_5: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
subst;caduceus.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_7: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_8: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_7: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z0_2: ((memory) Z Z0)),
  forall (HW_10: int_Z0_2 = (upd int_Z0_1 result1 3)),
  forall (result2: ((pointer) Z0)),
  forall (HW_11: result2 = (shift result 2)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z0: ((memory) Z Z0)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z0)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result 1)),
  forall (result0: ((pointer) Z0)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z0_1: ((memory) Z Z0)),
  forall (HW_7: int_Z0_1 = (upd int_Z0_0 result0 2)),
  forall (result1: ((pointer) Z0)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z0_2: ((memory) Z Z0)),
  forall (HW_10: int_Z0_2 = (upd int_Z0_1 result1 3)),
  forall (result2: ((pointer) Z0)),
  forall (HW_11: result2 = (shift result 2)),
  forall (HW_12: (valid alloc0 result2)),
  forall (result3: Z),
  forall (HW_13: result3 = (acc int_Z0_2 result2)),
  (* File "alloca.c", line 3, characters 13-25 *) result3 = 3.
Proof.
intuition.
subst.
caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  3 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  (valid alloc0 result).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_4: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_5: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition;subst;caduceus;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_4: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_7: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_8: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_4: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_7: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z1_2: ((memory) Z Z1)),
  forall (HW_10: int_Z1_2 = (upd int_Z1_1 result1 3)),
  forall (result2: ((pointer) Z1)),
  forall (HW_11: result2 = (shift result 2)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z1: ((memory) Z Z1)),
  forall (HW_1: 3 >= 1),
  forall (result: ((pointer) Z1)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 3 /\
                (valid_range alloc0 result 0 (3 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_4: int_Z1_0 = (upd int_Z1 result 1)),
  forall (result0: ((pointer) Z1)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z1_1: ((memory) Z Z1)),
  forall (HW_7: int_Z1_1 = (upd int_Z1_0 result0 2)),
  forall (result1: ((pointer) Z1)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z1_2: ((memory) Z Z1)),
  forall (HW_10: int_Z1_2 = (upd int_Z1_1 result1 3)),
  forall (result2: ((pointer) Z1)),
  forall (HW_11: result2 = (shift result 2)),
  forall (HW_12: (valid alloc0 result2)),
  forall (result3: Z),
  forall (HW_13: result3 = (acc int_Z1_2 result2)),
  (* File "alloca.c", line 9, characters 13-25 *) result3 = 3.
Proof.
intuition.
subst;caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  4 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  (valid alloc0 result).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_4: (valid alloc0 result)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_5: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_6: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_4: (valid alloc0 result)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_5: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_6: result0 = (shift result 1)),
  forall (HW_7: (valid alloc0 result0)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_8: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_9: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_4: (valid alloc0 result)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_5: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_6: result0 = (shift result 1)),
  forall (HW_7: (valid alloc0 result0)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_8: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_9: result1 = (shift result 2)),
  forall (HW_10: (valid alloc0 result1)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_11: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_12: result2 = (shift result 3)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_4: (valid alloc0 result)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_5: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_6: result0 = (shift result 1)),
  forall (HW_7: (valid alloc0 result0)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_8: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_9: result1 = (shift result 2)),
  forall (HW_10: (valid alloc0 result1)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_11: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_12: result2 = (shift result 3)),
  forall (HW_13: (valid alloc0 result2)),
  forall (int_Z3_3: ((memory) Z Z3)),
  forall (HW_14: int_Z3_3 = (upd int_Z3_2 result2 4)),
  forall (result3: ((pointer) Z10)),
  forall (HW_15: result3 = (shift u 2)),
  (valid alloc0 result3).
Proof.
intuition.
subst.
apply valid_range_valid_shift with 0 3.
apply alloc_stack_valid_range with Z3 result alloc;auto.
omega.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (int_Z10: ((memory) Z Z10)),
  forall (int_Z3: ((memory) Z Z3)),
  forall (u: ((pointer) Z10)),
  forall (HW_1: (* File "alloca.c", line 17, characters 14-24 *)
                (acc int_Z10 (shift u 2)) = 12 /\ (valid_range alloc u 0 3)),
  forall (HW_2: 4 >= 1),
  forall (result: ((pointer) Z3)),
  forall (alloc0: alloc_table),
  forall (HW_3: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_4: (valid alloc0 result)),
  forall (int_Z3_0: ((memory) Z Z3)),
  forall (HW_5: int_Z3_0 = (upd int_Z3 result 1)),
  forall (result0: ((pointer) Z3)),
  forall (HW_6: result0 = (shift result 1)),
  forall (HW_7: (valid alloc0 result0)),
  forall (int_Z3_1: ((memory) Z Z3)),
  forall (HW_8: int_Z3_1 = (upd int_Z3_0 result0 2)),
  forall (result1: ((pointer) Z3)),
  forall (HW_9: result1 = (shift result 2)),
  forall (HW_10: (valid alloc0 result1)),
  forall (int_Z3_2: ((memory) Z Z3)),
  forall (HW_11: int_Z3_2 = (upd int_Z3_1 result1 3)),
  forall (result2: ((pointer) Z3)),
  forall (HW_12: result2 = (shift result 3)),
  forall (HW_13: (valid alloc0 result2)),
  forall (int_Z3_3: ((memory) Z Z3)),
  forall (HW_14: int_Z3_3 = (upd int_Z3_2 result2 4)),
  forall (result3: ((pointer) Z10)),
  forall (HW_15: result3 = (shift u 2)),
  forall (HW_16: (valid alloc0 result3)),
  forall (result4: Z),
  forall (HW_17: result4 = (acc int_Z10 result3)),
  (* File "alloca.c", line 18, characters 13-26 *) result4 = 12.
Proof.
intuition.
subst;caduceus;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_1 : 
  4 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  (valid alloc0 result).
Proof.
intuition.
Save.


(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  (valid alloc0 result0).
Proof.
intuition;subst;caduceus.
apply valid_range_valid_shift with 0 (4-1);auto.
omega.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  (valid alloc0 result1).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  (valid alloc0 result2).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  5 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  (valid alloc1 result3).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_8 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  (valid alloc1 result4).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_9 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  forall (HW_19: (valid alloc1 result4)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_20: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_21: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_22: result6 = (shift result 2)),
  (valid alloc1 result6).
Proof.
intuition.
subst;auto.
apply alloc_stack_valid with Z5 result3 alloc0;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_10 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  forall (HW_19: (valid alloc1 result4)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_20: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_21: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_22: result6 = (shift result 2)),
  forall (HW_23: (valid alloc1 result6)),
  forall (result7: Z),
  forall (HW_24: result7 = (acc int_Z4_3 result6)),
  (valid alloc1 result5).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_11 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  forall (HW_19: (valid alloc1 result4)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_20: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_21: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_22: result6 = (shift result 2)),
  forall (HW_23: (valid alloc1 result6)),
  forall (result7: Z),
  forall (HW_24: result7 = (acc int_Z4_3 result6)),
  forall (HW_25: (valid alloc1 result5)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_26: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_27: result8 = (shift result3 3)),
  (valid alloc1 result8).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_12 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  forall (HW_19: (valid alloc1 result4)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_20: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_21: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_22: result6 = (shift result 2)),
  forall (HW_23: (valid alloc1 result6)),
  forall (result7: Z),
  forall (HW_24: result7 = (acc int_Z4_3 result6)),
  forall (HW_25: (valid alloc1 result5)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_26: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_27: result8 = (shift result3 3)),
  forall (HW_28: (valid alloc1 result8)),
  forall (int_Z5_3: ((memory) Z Z5)),
  forall (HW_29: int_Z5_3 = (upd int_Z5_2 result8 0)),
  forall (result9: ((pointer) Z5)),
  forall (HW_30: result9 = (shift result3 2)),
  (valid alloc1 result9).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_impl_po_13 : 
  forall (alloc: alloc_table),
  forall (int_Z4: ((memory) Z Z4)),
  forall (int_Z5: ((memory) Z Z5)),
  forall (HW_1: 4 >= 1),
  forall (result: ((pointer) Z4)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 4 /\
                (valid_range alloc0 result 0 (4 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: (valid alloc0 result)),
  forall (int_Z4_0: ((memory) Z Z4)),
  forall (HW_4: int_Z4_0 = (upd int_Z4 result 1)),
  forall (result0: ((pointer) Z4)),
  forall (HW_5: result0 = (shift result 1)),
  forall (HW_6: (valid alloc0 result0)),
  forall (int_Z4_1: ((memory) Z Z4)),
  forall (HW_7: int_Z4_1 = (upd int_Z4_0 result0 2)),
  forall (result1: ((pointer) Z4)),
  forall (HW_8: result1 = (shift result 2)),
  forall (HW_9: (valid alloc0 result1)),
  forall (int_Z4_2: ((memory) Z Z4)),
  forall (HW_10: int_Z4_2 = (upd int_Z4_1 result1 3)),
  forall (result2: ((pointer) Z4)),
  forall (HW_11: result2 = (shift result 3)),
  forall (HW_12: (valid alloc0 result2)),
  forall (int_Z4_3: ((memory) Z Z4)),
  forall (HW_13: int_Z4_3 = (upd int_Z4_2 result2 4)),
  forall (HW_14: 5 >= 1),
  forall (result3: ((pointer) Z5)),
  forall (alloc1: alloc_table),
  forall (HW_15: (valid alloc1 result3) /\ (offset result3) = 0 /\
                 (block_length alloc1 result3) = 5 /\
                 (valid_range alloc1 result3 0 (5 - 1)) /\
                 (fresh alloc0 result3) /\ (on_stack alloc1 result3) /\
                 (alloc_stack result3 alloc0 alloc1)),
  forall (HW_16: (valid alloc1 result3)),
  forall (int_Z5_0: ((memory) Z Z5)),
  forall (HW_17: int_Z5_0 = (upd int_Z5 result3 0)),
  forall (result4: ((pointer) Z5)),
  forall (HW_18: result4 = (shift result3 1)),
  forall (HW_19: (valid alloc1 result4)),
  forall (int_Z5_1: ((memory) Z Z5)),
  forall (HW_20: int_Z5_1 = (upd int_Z5_0 result4 0)),
  forall (result5: ((pointer) Z5)),
  forall (HW_21: result5 = (shift result3 2)),
  forall (result6: ((pointer) Z4)),
  forall (HW_22: result6 = (shift result 2)),
  forall (HW_23: (valid alloc1 result6)),
  forall (result7: Z),
  forall (HW_24: result7 = (acc int_Z4_3 result6)),
  forall (HW_25: (valid alloc1 result5)),
  forall (int_Z5_2: ((memory) Z Z5)),
  forall (HW_26: int_Z5_2 = (upd int_Z5_1 result5 result7)),
  forall (result8: ((pointer) Z5)),
  forall (HW_27: result8 = (shift result3 3)),
  forall (HW_28: (valid alloc1 result8)),
  forall (int_Z5_3: ((memory) Z Z5)),
  forall (HW_29: int_Z5_3 = (upd int_Z5_2 result8 0)),
  forall (result9: ((pointer) Z5)),
  forall (HW_30: result9 = (shift result3 2)),
  forall (HW_31: (valid alloc1 result9)),
  forall (result10: Z),
  forall (HW_32: result10 = (acc int_Z5_3 result9)),
  (* File "alloca.c", line 24, characters 13-25 *) result10 = 3.
Proof.
intuition.
subst;caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_1 : 
  5 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (HW_1: 5 >= 1),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  6 >= 1.
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (HW_1: 5 >= 1),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: 6 >= 1),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_4: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_5: result1 = (shift result 4)),
  (valid alloc1 result1).
Proof.
intuition;subst.
apply valid_range_valid_shift with 0 (5-1);auto.
apply alloc_stack_valid_range with Z7 result0 alloc0;auto.
omega.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (HW_1: 5 >= 1),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: 6 >= 1),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_4: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_5: result1 = (shift result 4)),
  forall (HW_6: (valid alloc1 result1)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_7: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_8: result2 = (shift result0 4)),
  (valid alloc1 result2).
Proof.
intuition;subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (HW_1: 5 >= 1),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: 6 >= 1),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_4: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_5: result1 = (shift result 4)),
  forall (HW_6: (valid alloc1 result1)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_7: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_8: result2 = (shift result0 4)),
  forall (HW_9: (valid alloc1 result2)),
  forall (int_Z7_0: ((memory) Z Z7)),
  forall (HW_10: int_Z7_0 = (upd int_Z7 result2 1)),
  forall (result3: ((pointer) Z6)),
  forall (HW_11: result3 = (shift result 4)),
  (valid alloc1 result3).
Proof.
intuition.
subst;auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma two_local_arrays_not_alias_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (int_Z6: ((memory) Z Z6)),
  forall (int_Z7: ((memory) Z Z7)),
  forall (HW_1: 5 >= 1),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 5 /\
                (valid_range alloc0 result 0 (5 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_3: 6 >= 1),
  forall (result0: ((pointer) Z7)),
  forall (alloc1: alloc_table),
  forall (HW_4: (valid alloc1 result0) /\ (offset result0) = 0 /\
                (block_length alloc1 result0) = 6 /\
                (valid_range alloc1 result0 0 (6 - 1)) /\
                (fresh alloc0 result0) /\ (on_stack alloc1 result0) /\
                (alloc_stack result0 alloc0 alloc1)),
  forall (result1: ((pointer) Z6)),
  forall (HW_5: result1 = (shift result 4)),
  forall (HW_6: (valid alloc1 result1)),
  forall (int_Z6_0: ((memory) Z Z6)),
  forall (HW_7: int_Z6_0 = (upd int_Z6 result1 3)),
  forall (result2: ((pointer) Z7)),
  forall (HW_8: result2 = (shift result0 4)),
  forall (HW_9: (valid alloc1 result2)),
  forall (int_Z7_0: ((memory) Z Z7)),
  forall (HW_10: int_Z7_0 = (upd int_Z7 result2 1)),
  forall (result3: ((pointer) Z6)),
  forall (HW_11: result3 = (shift result 4)),
  forall (HW_12: (valid alloc1 result3)),
  forall (result4: Z),
  forall (HW_13: result4 = (acc int_Z6_0 result3)),
  (* File "alloca.c", line 31, characters 13-25 *) result4 = 3.
Proof.
intuition.
subst;caduceus.
Save.

