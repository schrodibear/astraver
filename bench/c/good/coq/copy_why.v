(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/copy.why", characters 326-334 *)
Lemma copy_impl_po_1 : 
  forall (t1: pointer),
  forall (t2: pointer),
  forall (n: Z),
  forall (alloc: alloc),
  forall (Pre8: ((valid_range alloc t1 0 n) /\ (valid_range alloc t2 0 n)) /\
                ~((base_addr t1) = (base_addr t2))),
  forall (i: Z),
  forall (Post3: i = n),
  forall (Variant1: Z),
  forall (i1: Z),
  forall (intP0: ((memory) Z)),
  forall (Pre7: Variant1 = i1),
  forall (Pre6: i1 <= n /\
                (forall (k:Z),
                 (i1 <= k /\ k < n -> (acc intP0 (shift t2 k)) =
                  (acc intP0 (shift t1 k))))),
  forall (Test2: true = true),
  forall (caduceus: Z),
  forall (Post2: caduceus = i1),
  forall (i2: Z),
  forall (Post1: i2 = (caduceus - 1)),
  ((caduceus > 0 ->
    (forall (result:pointer),
     (result = (shift t2 i2) ->
      (forall (result0:pointer),
       (result0 = (shift t1 i2) ->
        (forall (result1:Z),
         (result1 = (acc intP0 result0) ->
          (forall (intP:((memory) Z)),
           (intP = (upd intP0 result result1) -> (i2 <= n /\
            (forall (k:Z),
             (i2 <= k /\ k < n -> (acc intP (shift t2 k)) =
              (acc intP (shift t1 k))))) /\
            (Zwf 0 i2 i1))) /\
          (valid alloc result))) /\
        (valid alloc result0))))))) /\
  ((caduceus <= 0 ->
    (forall (k:Z),
     (0 <= k /\ k < n -> (acc intP0 (shift t2 k)) = (acc intP0 (shift t1 k)))))).
Proof.
intuition.
subst.
assert (k=i1-1 \/ i1<=k). omega. intuition; subst; caduceus.
subst; valid.
subst; valid.
Save.

(* Why obligation from file "why/copy.why", characters 397-554 *)
Lemma copy_impl_po_2 : 
  forall (t1: pointer),
  forall (t2: pointer),
  forall (n: Z),
  forall (alloc: alloc),
  forall (intP: ((memory) Z)),
  forall (Pre8: ((valid_range alloc t1 0 n) /\ (valid_range alloc t2 0 n)) /\
                ~((base_addr t1) = (base_addr t2))),
  forall (i: Z),
  forall (Post3: i = n),
  i <= n /\
  (forall (k:Z),
   (i <= k /\ k < n -> (acc intP (shift t2 k)) = (acc intP (shift t1 k)))).
Proof.
intuition.
Save.

