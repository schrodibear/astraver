(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 138-167 *)
Lemma init_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (NIL0: pointer),
  forall (Post1: (valid alloc NIL0) /\
                 (block_length alloc (acc forward NIL0)) = 16),
  forall (caduceus_1: pointer),
  forall (Post4: caduceus_1 = NIL0),
  (valid alloc caduceus_1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 591-607 *)
Lemma insert_impl_po_1 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  (valid alloc0 l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 733-748 *)
Lemma insert_impl_po_2 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  (valid alloc1 l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 1018-1036 *)
Lemma insert_impl_po_3 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  (valid alloc1 p2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 946-1118 *)
Lemma insert_impl_po_4 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (Pre5: (valid alloc1 p2)),
  forall (caduceus_14: pointer),
  forall (Post88: caduceus_14 = (acc forward p2)),
  forall (result1: pointer),
  forall (Post90: result1 = (shift caduceus_14 k1)),
  (forall (result:pointer),
   (result = (acc pointerP0 result1) ->
    result = (acc pointerP0 (shift (acc forward p2) k1)))) /\
  (valid alloc1 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 1152-1322 *)
Lemma insert_impl_po_5 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (q3: pointer),
  forall (Post4: q3 = (acc pointerP0 (shift (acc forward p2) k1))),
  (valid alloc1 q3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 887-1353 *)
Lemma insert_impl_po_6 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (q3: pointer),
  forall (Post4: q3 = (acc pointerP0 (shift (acc forward p2) k1))),
  forall (Pre8: (valid alloc1 q3)),
  forall (result2: Z),
  forall (Post5: (acc elt q3) < v /\ result2 = 1 \/ (acc elt q3) >= v /\
                 result2 = 0),
  ((result2 <> 0 -> (forall (p:pointer), (p = q3 -> (Zwf 0 0 0))))) /\
  ((result2 = 0 ->
    (forall (result:pointer),
     (result = (shift update k1) ->
      (forall (pointerP:((memory) pointer)),
       (pointerP = (upd pointerP0 result p2) ->
        (forall (k:Z),
         (k = (k1 - 1) ->
          (forall (result:Z),
           (result = k ->
            ((result >= 0 ->
              ((true = false ->
                (forall (result:unit),
                 (result = tt ->
                  ((((acc elt p2) = v ->
                     (forall (result:unit), (result = tt -> True)))) /\
                  (((acc elt p2) <> v ->
                    (forall (k:Z),
                     (1 <= k /\ k <= 16 ->
                      (((k > (acc level l) ->
                         (forall (result:pointer),
                          (result = l ->
                           (forall (result0:Z),
                            (result0 = ((acc level result) + 1) ->
                             (forall (level0:((memory) Z)),
                              (level0 = (upd level result result0) ->
                               (forall (result:Z),
                                (result = result0 ->
                                 (forall (result0:pointer),
                                  (result0 = (shift update result) ->
                                   (forall (result1:pointer),
                                    (result1 = (acc header l) ->
                                     (forall (pointerP0:((memory) pointer)),
                                      (pointerP0 = (upd pointerP result0
                                                    result1) ->
                                       (forall (q:pointer),
                                        ((valid alloc1 q) /\
                                         (block_length alloc1 (acc forward q)) =
                                         result ->
                                         (forall (result:pointer),
                                          (result = q ->
                                           (forall (elt0:((memory) Z)),
                                            (elt0 = (upd elt result v) ->
                                             (forall (k:Z),
                                              (forall (pointerP:((memory) pointer)),
                                               (True ->
                                                ((true = true ->
                                                  (forall (p:pointer),
                                                   (p = (acc pointerP
                                                         (shift update k)) ->
                                                    (forall (result:pointer),
                                                     (result = (shift (
                                                                acc forward q)
                                                                k) ->
                                                      (((forall (result0:pointer),
                                                         (result0 = (
                                                          acc pointerP
                                                          (shift (acc forward
                                                                  p)
                                                           k)) ->
                                                          (forall (pointerP0:((memory) pointer)),
                                                           (pointerP0 = (
                                                            upd pointerP
                                                            result result0) ->
                                                            (forall (result:pointer),
                                                             (result = (
                                                              shift (
                                                              acc forward p)
                                                              k) ->
                                                              (forall (pointerP:((memory) pointer)),
                                                               (pointerP = (
                                                                upd pointerP0
                                                                result q) ->
                                                                (forall (k0:Z),
                                                                 (k0 =
                                                                  (k - 1) ->
                                                                  (forall (result:Z),
                                                                   (result = k0 ->
                                                                    ((
                                                                    result >=
                                                                    0 ->
                                                                    ((
                                                                    true = false ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    True)))) /\
                                                                    ((
                                                                    false = false ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    (Zwf 0 0 0))))))) /\
                                                                    ((
                                                                    result <
                                                                    0 ->
                                                                    ((
                                                                    true = true ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    True)))) /\
                                                                    ((
                                                                    false = true ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    (Zwf 0 0 0))))))))))))) /\
                                                              (valid alloc1
                                                               result))) /\
                                                            (valid alloc1 p))) /\
                                                          (valid alloc1
                                                           result))) /\
                                                      (valid alloc1 p)) /\
                                                      (valid alloc1
                                                       (shift (acc forward p)
                                                        k))) /\
                                                      (valid alloc1
                                                       (shift (acc forward p)
                                                        k)))) /\
                                                    (valid alloc1 q))))) /\
                                                ((false = true -> True))))))) /\
                                           (valid alloc1 result))))))) /\
                                     (valid alloc1 result0))) /\
                                   (valid alloc1 l))))))) /\
                             (valid alloc1 result))) /\
                           (valid alloc1 result))))) /\
                      ((k <= (acc level l) ->
                        (forall (result:unit),
                         (result = tt ->
                          (forall (q:pointer),
                           ((valid alloc1 q) /\
                            (block_length alloc1 (acc forward q)) = k ->
                            (forall (result:pointer),
                             (result = q ->
                              (forall (elt0:((memory) Z)),
                               (elt0 = (upd elt result v) ->
                                (forall (k:Z),
                                 (forall (pointerP:((memory) pointer)),
                                  (True ->
                                   ((true = true ->
                                     (forall (p:pointer),
                                      (p = (acc pointerP (shift update k)) ->
                                       (forall (result:pointer),
                                        (result = (shift (acc forward q) k) ->
                                         (((forall (result0:pointer),
                                            (result0 = (acc pointerP
                                                        (shift (acc forward p)
                                                         k)) ->
                                             (forall (pointerP0:((memory) pointer)),
                                              (pointerP0 = (upd pointerP
                                                            result result0) ->
                                               (forall (result:pointer),
                                                (result = (shift (acc forward
                                                                  p)
                                                           k) ->
                                                 (forall (pointerP:((memory) pointer)),
                                                  (pointerP = (upd pointerP0
                                                               result q) ->
                                                   (forall (k0:Z),
                                                    (k0 = (k - 1) ->
                                                     (forall (result:Z),
                                                      (result = k0 ->
                                                       ((result >= 0 ->
                                                         ((true = false ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             True)))) /\
                                                         ((false = false ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             (Zwf 0 0 0))))))) /\
                                                       ((result < 0 ->
                                                         ((true = true ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             True)))) /\
                                                         ((false = true ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             (Zwf 0 0 0))))))))))))) /\
                                                 (valid alloc1 result))) /\
                                               (valid alloc1 p))) /\
                                             (valid alloc1 result))) /\
                                         (valid alloc1 p)) /\
                                         (valid alloc1
                                          (shift (acc forward p) k))) /\
                                         (valid alloc1
                                          (shift (acc forward p) k)))) /\
                                       (valid alloc1 q))))) /\
                                   ((false = true -> True))))))) /\
                              (valid alloc1 result)))))))))) /\
                      (valid alloc1 l)))))) /\
                  (valid alloc1 p2))))) /\
              ((false = false ->
                (forall (result:unit), (result = tt -> (Zwf 0 0 0))))))) /\
            ((result < 0 ->
              ((true = true ->
                (forall (result:unit),
                 (result = tt ->
                  ((((acc elt p2) = v ->
                     (forall (result:unit), (result = tt -> True)))) /\
                  (((acc elt p2) <> v ->
                    (forall (k:Z),
                     (1 <= k /\ k <= 16 ->
                      (((k > (acc level l) ->
                         (forall (result:pointer),
                          (result = l ->
                           (forall (result0:Z),
                            (result0 = ((acc level result) + 1) ->
                             (forall (level0:((memory) Z)),
                              (level0 = (upd level result result0) ->
                               (forall (result:Z),
                                (result = result0 ->
                                 (forall (result0:pointer),
                                  (result0 = (shift update result) ->
                                   (forall (result1:pointer),
                                    (result1 = (acc header l) ->
                                     (forall (pointerP0:((memory) pointer)),
                                      (pointerP0 = (upd pointerP result0
                                                    result1) ->
                                       (forall (q:pointer),
                                        ((valid alloc1 q) /\
                                         (block_length alloc1 (acc forward q)) =
                                         result ->
                                         (forall (result:pointer),
                                          (result = q ->
                                           (forall (elt0:((memory) Z)),
                                            (elt0 = (upd elt result v) ->
                                             (forall (k:Z),
                                              (forall (pointerP:((memory) pointer)),
                                               (True ->
                                                ((true = true ->
                                                  (forall (p:pointer),
                                                   (p = (acc pointerP
                                                         (shift update k)) ->
                                                    (forall (result:pointer),
                                                     (result = (shift (
                                                                acc forward q)
                                                                k) ->
                                                      (((forall (result0:pointer),
                                                         (result0 = (
                                                          acc pointerP
                                                          (shift (acc forward
                                                                  p)
                                                           k)) ->
                                                          (forall (pointerP0:((memory) pointer)),
                                                           (pointerP0 = (
                                                            upd pointerP
                                                            result result0) ->
                                                            (forall (result:pointer),
                                                             (result = (
                                                              shift (
                                                              acc forward p)
                                                              k) ->
                                                              (forall (pointerP:((memory) pointer)),
                                                               (pointerP = (
                                                                upd pointerP0
                                                                result q) ->
                                                                (forall (k0:Z),
                                                                 (k0 =
                                                                  (k - 1) ->
                                                                  (forall (result:Z),
                                                                   (result = k0 ->
                                                                    ((
                                                                    result >=
                                                                    0 ->
                                                                    ((
                                                                    true = false ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    True)))) /\
                                                                    ((
                                                                    false = false ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    (Zwf 0 0 0))))))) /\
                                                                    ((
                                                                    result <
                                                                    0 ->
                                                                    ((
                                                                    true = true ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    True)))) /\
                                                                    ((
                                                                    false = true ->
                                                                    (
                                                                    forall (result:unit),
                                                                    (
                                                                    result = tt ->
                                                                    (Zwf 0 0 0))))))))))))) /\
                                                              (valid alloc1
                                                               result))) /\
                                                            (valid alloc1 p))) /\
                                                          (valid alloc1
                                                           result))) /\
                                                      (valid alloc1 p)) /\
                                                      (valid alloc1
                                                       (shift (acc forward p)
                                                        k))) /\
                                                      (valid alloc1
                                                       (shift (acc forward p)
                                                        k)))) /\
                                                    (valid alloc1 q))))) /\
                                                ((false = true -> True))))))) /\
                                           (valid alloc1 result))))))) /\
                                     (valid alloc1 result0))) /\
                                   (valid alloc1 l))))))) /\
                             (valid alloc1 result))) /\
                           (valid alloc1 result))))) /\
                      ((k <= (acc level l) ->
                        (forall (result:unit),
                         (result = tt ->
                          (forall (q:pointer),
                           ((valid alloc1 q) /\
                            (block_length alloc1 (acc forward q)) = k ->
                            (forall (result:pointer),
                             (result = q ->
                              (forall (elt0:((memory) Z)),
                               (elt0 = (upd elt result v) ->
                                (forall (k:Z),
                                 (forall (pointerP:((memory) pointer)),
                                  (True ->
                                   ((true = true ->
                                     (forall (p:pointer),
                                      (p = (acc pointerP (shift update k)) ->
                                       (forall (result:pointer),
                                        (result = (shift (acc forward q) k) ->
                                         (((forall (result0:pointer),
                                            (result0 = (acc pointerP
                                                        (shift (acc forward p)
                                                         k)) ->
                                             (forall (pointerP0:((memory) pointer)),
                                              (pointerP0 = (upd pointerP
                                                            result result0) ->
                                               (forall (result:pointer),
                                                (result = (shift (acc forward
                                                                  p)
                                                           k) ->
                                                 (forall (pointerP:((memory) pointer)),
                                                  (pointerP = (upd pointerP0
                                                               result q) ->
                                                   (forall (k0:Z),
                                                    (k0 = (k - 1) ->
                                                     (forall (result:Z),
                                                      (result = k0 ->
                                                       ((result >= 0 ->
                                                         ((true = false ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             True)))) /\
                                                         ((false = false ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             (Zwf 0 0 0))))))) /\
                                                       ((result < 0 ->
                                                         ((true = true ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             True)))) /\
                                                         ((false = true ->
                                                           (forall (result:unit),
                                                            (result = tt ->
                                                             (Zwf 0 0 0))))))))))))) /\
                                                 (valid alloc1 result))) /\
                                               (valid alloc1 p))) /\
                                             (valid alloc1 result))) /\
                                         (valid alloc1 p)) /\
                                         (valid alloc1
                                          (shift (acc forward p) k))) /\
                                         (valid alloc1
                                          (shift (acc forward p) k)))) /\
                                       (valid alloc1 q))))) /\
                                   ((false = true -> True))))))) /\
                              (valid alloc1 result)))))))))) /\
                      (valid alloc1 l)))))) /\
                  (valid alloc1 p2))))) /\
              ((false = true ->
                (forall (result:unit), (result = tt -> (Zwf 0 0 0))))))))))))) /\
      (valid alloc1 result))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 863-1447 *)
Lemma insert_impl_po_7 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (Post66: (Zwf 0 0 0)),
  (Zwf 0 0 Variant3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 1649-1649 *)
Lemma insert_impl_po_8 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (p2: pointer),
  forall (pointerP1: ((memory) pointer)),
  forall (result3: bool),
  forall (Post12: result3 = false),
  (if result3
   then (forall (result:unit),
         (result = tt ->
          ((((acc elt p2) = v ->
             (forall (result:unit), (result = tt -> True)))) /\
          (((acc elt p2) <> v ->
            (forall (k:Z),
             (1 <= k /\ k <= 16 ->
              (((k > (acc level l) ->
                 (forall (result:pointer),
                  (result = l ->
                   (forall (result0:Z),
                    (result0 = ((acc level result) + 1) ->
                     (forall (level0:((memory) Z)),
                      (level0 = (upd level result result0) ->
                       (forall (result:Z),
                        (result = result0 ->
                         (forall (result0:pointer),
                          (result0 = (shift update result) ->
                           (forall (result1:pointer),
                            (result1 = (acc header l) ->
                             (forall (pointerP:((memory) pointer)),
                              (pointerP = (upd pointerP1 result0 result1) ->
                               (forall (q:pointer),
                                ((valid alloc1 q) /\
                                 (block_length alloc1 (acc forward q)) =
                                 result ->
                                 (forall (result:pointer),
                                  (result = q ->
                                   (forall (elt0:((memory) Z)),
                                    (elt0 = (upd elt result v) ->
                                     (forall (k:Z),
                                      (forall (pointerP:((memory) pointer)),
                                       (True ->
                                        ((true = true ->
                                          (forall (p:pointer),
                                           (p = (acc pointerP
                                                 (shift update k)) ->
                                            (forall (result:pointer),
                                             (result = (shift (acc forward q)
                                                        k) ->
                                              (((forall (result0:pointer),
                                                 (result0 = (acc pointerP
                                                             (shift (
                                                              acc forward p)
                                                              k)) ->
                                                  (forall (pointerP0:((memory) pointer)),
                                                   (pointerP0 = (upd pointerP
                                                                 result
                                                                 result0) ->
                                                    (forall (result:pointer),
                                                     (result = (shift (
                                                                acc forward p)
                                                                k) ->
                                                      (forall (pointerP:((memory) pointer)),
                                                       (pointerP = (upd pointerP0
                                                                    result q) ->
                                                        (forall (k0:Z),
                                                         (k0 = (k - 1) ->
                                                          (forall (result:Z),
                                                           (result = k0 ->
                                                            ((result >= 0 ->
                                                              ((true = false ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  True)))) /\
                                                              ((false = false ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  (Zwf 0 0 0))))))) /\
                                                            ((result < 0 ->
                                                              ((true = true ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  True)))) /\
                                                              ((false = true ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  (Zwf 0 0 0))))))))))))) /\
                                                      (valid alloc1 result))) /\
                                                    (valid alloc1 p))) /\
                                                  (valid alloc1 result))) /\
                                              (valid alloc1 p)) /\
                                              (valid alloc1
                                               (shift (acc forward p) k))) /\
                                              (valid alloc1
                                               (shift (acc forward p) k)))) /\
                                            (valid alloc1 q))))) /\
                                        ((false = true -> True))))))) /\
                                   (valid alloc1 result))))))) /\
                             (valid alloc1 result0))) /\
                           (valid alloc1 l))))))) /\
                     (valid alloc1 result))) /\
                   (valid alloc1 result))))) /\
              ((k <= (acc level l) ->
                (forall (result:unit),
                 (result = tt ->
                  (forall (q:pointer),
                   ((valid alloc1 q) /\
                    (block_length alloc1 (acc forward q)) = k ->
                    (forall (result:pointer),
                     (result = q ->
                      (forall (elt0:((memory) Z)),
                       (elt0 = (upd elt result v) ->
                        (forall (k:Z),
                         (forall (pointerP:((memory) pointer)),
                          (True ->
                           ((true = true ->
                             (forall (p:pointer),
                              (p = (acc pointerP (shift update k)) ->
                               (forall (result:pointer),
                                (result = (shift (acc forward q) k) ->
                                 (((forall (result0:pointer),
                                    (result0 = (acc pointerP
                                                (shift (acc forward p) k)) ->
                                     (forall (pointerP0:((memory) pointer)),
                                      (pointerP0 = (upd pointerP result
                                                    result0) ->
                                       (forall (result:pointer),
                                        (result = (shift (acc forward p) k) ->
                                         (forall (pointerP:((memory) pointer)),
                                          (pointerP = (upd pointerP0 result q) ->
                                           (forall (k0:Z),
                                            (k0 = (k - 1) ->
                                             (forall (result:Z),
                                              (result = k0 ->
                                               ((result >= 0 ->
                                                 ((true = false ->
                                                   (forall (result:unit),
                                                    (result = tt -> True)))) /\
                                                 ((false = false ->
                                                   (forall (result:unit),
                                                    (result = tt ->
                                                     (Zwf 0 0 0))))))) /\
                                               ((result < 0 ->
                                                 ((true = true ->
                                                   (forall (result:unit),
                                                    (result = tt -> True)))) /\
                                                 ((false = true ->
                                                   (forall (result:unit),
                                                    (result = tt ->
                                                     (Zwf 0 0 0))))))))))))) /\
                                         (valid alloc1 result))) /\
                                       (valid alloc1 p))) /\
                                     (valid alloc1 result))) /\
                                 (valid alloc1 p)) /\
                                 (valid alloc1 (shift (acc forward p) k))) /\
                                 (valid alloc1 (shift (acc forward p) k)))) /\
                               (valid alloc1 q))))) /\
                           ((false = true -> True))))))) /\
                      (valid alloc1 result)))))))))) /\
              (valid alloc1 l)))))) /\
          (valid alloc1 p2)))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 1649-1649 *)
Lemma insert_impl_po_9 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (p2: pointer),
  forall (pointerP1: ((memory) pointer)),
  forall (result3: bool),
  forall (Post11: result3 = true),
  (if result3
   then (forall (result:unit),
         (result = tt ->
          ((((acc elt p2) = v ->
             (forall (result:unit), (result = tt -> True)))) /\
          (((acc elt p2) <> v ->
            (forall (k:Z),
             (1 <= k /\ k <= 16 ->
              (((k > (acc level l) ->
                 (forall (result:pointer),
                  (result = l ->
                   (forall (result0:Z),
                    (result0 = ((acc level result) + 1) ->
                     (forall (level0:((memory) Z)),
                      (level0 = (upd level result result0) ->
                       (forall (result:Z),
                        (result = result0 ->
                         (forall (result0:pointer),
                          (result0 = (shift update result) ->
                           (forall (result1:pointer),
                            (result1 = (acc header l) ->
                             (forall (pointerP:((memory) pointer)),
                              (pointerP = (upd pointerP1 result0 result1) ->
                               (forall (q:pointer),
                                ((valid alloc1 q) /\
                                 (block_length alloc1 (acc forward q)) =
                                 result ->
                                 (forall (result:pointer),
                                  (result = q ->
                                   (forall (elt0:((memory) Z)),
                                    (elt0 = (upd elt result v) ->
                                     (forall (k:Z),
                                      (forall (pointerP:((memory) pointer)),
                                       (True ->
                                        ((true = true ->
                                          (forall (p:pointer),
                                           (p = (acc pointerP
                                                 (shift update k)) ->
                                            (forall (result:pointer),
                                             (result = (shift (acc forward q)
                                                        k) ->
                                              (((forall (result0:pointer),
                                                 (result0 = (acc pointerP
                                                             (shift (
                                                              acc forward p)
                                                              k)) ->
                                                  (forall (pointerP0:((memory) pointer)),
                                                   (pointerP0 = (upd pointerP
                                                                 result
                                                                 result0) ->
                                                    (forall (result:pointer),
                                                     (result = (shift (
                                                                acc forward p)
                                                                k) ->
                                                      (forall (pointerP:((memory) pointer)),
                                                       (pointerP = (upd pointerP0
                                                                    result q) ->
                                                        (forall (k0:Z),
                                                         (k0 = (k - 1) ->
                                                          (forall (result:Z),
                                                           (result = k0 ->
                                                            ((result >= 0 ->
                                                              ((true = false ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  True)))) /\
                                                              ((false = false ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  (Zwf 0 0 0))))))) /\
                                                            ((result < 0 ->
                                                              ((true = true ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  True)))) /\
                                                              ((false = true ->
                                                                (forall (result:unit),
                                                                 (result = tt ->
                                                                  (Zwf 0 0 0))))))))))))) /\
                                                      (valid alloc1 result))) /\
                                                    (valid alloc1 p))) /\
                                                  (valid alloc1 result))) /\
                                              (valid alloc1 p)) /\
                                              (valid alloc1
                                               (shift (acc forward p) k))) /\
                                              (valid alloc1
                                               (shift (acc forward p) k)))) /\
                                            (valid alloc1 q))))) /\
                                        ((false = true -> True))))))) /\
                                   (valid alloc1 result))))))) /\
                             (valid alloc1 result0))) /\
                           (valid alloc1 l))))))) /\
                     (valid alloc1 result))) /\
                   (valid alloc1 result))))) /\
              ((k <= (acc level l) ->
                (forall (result:unit),
                 (result = tt ->
                  (forall (q:pointer),
                   ((valid alloc1 q) /\
                    (block_length alloc1 (acc forward q)) = k ->
                    (forall (result:pointer),
                     (result = q ->
                      (forall (elt0:((memory) Z)),
                       (elt0 = (upd elt result v) ->
                        (forall (k:Z),
                         (forall (pointerP:((memory) pointer)),
                          (True ->
                           ((true = true ->
                             (forall (p:pointer),
                              (p = (acc pointerP (shift update k)) ->
                               (forall (result:pointer),
                                (result = (shift (acc forward q) k) ->
                                 (((forall (result0:pointer),
                                    (result0 = (acc pointerP
                                                (shift (acc forward p) k)) ->
                                     (forall (pointerP0:((memory) pointer)),
                                      (pointerP0 = (upd pointerP result
                                                    result0) ->
                                       (forall (result:pointer),
                                        (result = (shift (acc forward p) k) ->
                                         (forall (pointerP:((memory) pointer)),
                                          (pointerP = (upd pointerP0 result q) ->
                                           (forall (k0:Z),
                                            (k0 = (k - 1) ->
                                             (forall (result:Z),
                                              (result = k0 ->
                                               ((result >= 0 ->
                                                 ((true = false ->
                                                   (forall (result:unit),
                                                    (result = tt -> True)))) /\
                                                 ((false = false ->
                                                   (forall (result:unit),
                                                    (result = tt ->
                                                     (Zwf 0 0 0))))))) /\
                                               ((result < 0 ->
                                                 ((true = true ->
                                                   (forall (result:unit),
                                                    (result = tt -> True)))) /\
                                                 ((false = true ->
                                                   (forall (result:unit),
                                                    (result = tt ->
                                                     (Zwf 0 0 0))))))))))))) /\
                                         (valid alloc1 result))) /\
                                       (valid alloc1 p))) /\
                                     (valid alloc1 result))) /\
                                 (valid alloc1 p)) /\
                                 (valid alloc1 (shift (acc forward p) k))) /\
                                 (valid alloc1 (shift (acc forward p) k)))) /\
                               (valid alloc1 q))))) /\
                           ((false = true -> True))))))) /\
                      (valid alloc1 result)))))))))) /\
              (valid alloc1 l)))))) /\
          (valid alloc1 p2)))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 791-1693 *)
Lemma insert_impl_po_10 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre17: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post63: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 791-1693 *)
Lemma insert_impl_po_11 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (Variant1: Z),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre17: Variant1 = 0),
  forall (Test1: false = true),
  ((((acc elt p1) = v -> (forall (result:unit), (result = tt -> True)))) /\
  (((acc elt p1) <> v ->
    (forall (k:Z),
     (1 <= k /\ k <= 16 ->
      (((k > (acc level l) ->
         (forall (result:pointer),
          (result = l ->
           (forall (result0:Z),
            (result0 = ((acc level result) + 1) ->
             (forall (level0:((memory) Z)),
              (level0 = (upd level result result0) ->
               (forall (result:Z),
                (result = result0 ->
                 (forall (result0:pointer),
                  (result0 = (shift update result) ->
                   (forall (result1:pointer),
                    (result1 = (acc header l) ->
                     (forall (pointerP:((memory) pointer)),
                      (pointerP = (upd pointerP0 result0 result1) ->
                       (forall (q:pointer),
                        ((valid alloc1 q) /\
                         (block_length alloc1 (acc forward q)) = result ->
                         (forall (result:pointer),
                          (result = q ->
                           (forall (elt0:((memory) Z)),
                            (elt0 = (upd elt result v) ->
                             (forall (k:Z),
                              (forall (pointerP:((memory) pointer)),
                               (True ->
                                ((true = true ->
                                  (forall (p:pointer),
                                   (p = (acc pointerP (shift update k)) ->
                                    (forall (result:pointer),
                                     (result = (shift (acc forward q) k) ->
                                      (((forall (result0:pointer),
                                         (result0 = (acc pointerP
                                                     (shift (acc forward p) k)) ->
                                          (forall (pointerP0:((memory) pointer)),
                                           (pointerP0 = (upd pointerP result
                                                         result0) ->
                                            (forall (result:pointer),
                                             (result = (shift (acc forward p)
                                                        k) ->
                                              (forall (pointerP:((memory) pointer)),
                                               (pointerP = (upd pointerP0
                                                            result q) ->
                                                (forall (k0:Z),
                                                 (k0 = (k - 1) ->
                                                  (forall (result:Z),
                                                   (result = k0 ->
                                                    ((result >= 0 ->
                                                      ((true = false ->
                                                        (forall (result:unit),
                                                         (result = tt -> True)))) /\
                                                      ((false = false ->
                                                        (forall (result:unit),
                                                         (result = tt ->
                                                          (Zwf 0 0 0))))))) /\
                                                    ((result < 0 ->
                                                      ((true = true ->
                                                        (forall (result:unit),
                                                         (result = tt -> True)))) /\
                                                      ((false = true ->
                                                        (forall (result:unit),
                                                         (result = tt ->
                                                          (Zwf 0 0 0))))))))))))) /\
                                              (valid alloc1 result))) /\
                                            (valid alloc1 p))) /\
                                          (valid alloc1 result))) /\
                                      (valid alloc1 p)) /\
                                      (valid alloc1 (shift (acc forward p) k))) /\
                                      (valid alloc1 (shift (acc forward p) k)))) /\
                                    (valid alloc1 q))))) /\
                                ((false = true -> True))))))) /\
                           (valid alloc1 result))))))) /\
                     (valid alloc1 result0))) /\
                   (valid alloc1 l))))))) /\
             (valid alloc1 result))) /\
           (valid alloc1 result))))) /\
      ((k <= (acc level l) ->
        (forall (result:unit),
         (result = tt ->
          (forall (q:pointer),
           ((valid alloc1 q) /\ (block_length alloc1 (acc forward q)) = k ->
            (forall (result:pointer),
             (result = q ->
              (forall (elt0:((memory) Z)),
               (elt0 = (upd elt result v) ->
                (forall (k:Z),
                 (forall (pointerP:((memory) pointer)),
                  (True ->
                   ((true = true ->
                     (forall (p:pointer),
                      (p = (acc pointerP (shift update k)) ->
                       (forall (result:pointer),
                        (result = (shift (acc forward q) k) ->
                         (((forall (result0:pointer),
                            (result0 = (acc pointerP
                                        (shift (acc forward p) k)) ->
                             (forall (pointerP0:((memory) pointer)),
                              (pointerP0 = (upd pointerP result result0) ->
                               (forall (result:pointer),
                                (result = (shift (acc forward p) k) ->
                                 (forall (pointerP:((memory) pointer)),
                                  (pointerP = (upd pointerP0 result q) ->
                                   (forall (k0:Z),
                                    (k0 = (k - 1) ->
                                     (forall (result:Z),
                                      (result = k0 ->
                                       ((result >= 0 ->
                                         ((true = false ->
                                           (forall (result:unit),
                                            (result = tt -> True)))) /\
                                         ((false = false ->
                                           (forall (result:unit),
                                            (result = tt -> (Zwf 0 0 0))))))) /\
                                       ((result < 0 ->
                                         ((true = true ->
                                           (forall (result:unit),
                                            (result = tt -> True)))) /\
                                         ((false = true ->
                                           (forall (result:unit),
                                            (result = tt -> (Zwf 0 0 0))))))))))))) /\
                                 (valid alloc1 result))) /\
                               (valid alloc1 p))) /\
                             (valid alloc1 result))) /\
                         (valid alloc1 p)) /\
                         (valid alloc1 (shift (acc forward p) k))) /\
                         (valid alloc1 (shift (acc forward p) k)))) /\
                       (valid alloc1 q))))) /\
                   ((false = true -> True))))))) /\
              (valid alloc1 result)))))))))) /\
      (valid alloc1 l)))))) /\
  (valid alloc1 p1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2563-2600 *)
Lemma insert_impl_po_12 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre44: (valid alloc1 p1)),
  forall (Test9: (acc elt p1) <> v),
  forall (k2: Z),
  forall (Post16: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post33: (valid alloc1 q2) /\
                  (block_length alloc1 (acc forward q2)) = k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (Pre43: Variant5 = 0),
  forall (Test8: true = true),
  forall (aux_5: pointer),
  forall (Post121: aux_5 = (shift update k4)),
  (valid alloc1 aux_5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2563-2600 *)
Lemma insert_impl_po_13 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre44: (valid alloc1 p1)),
  forall (Test9: (acc elt p1) <> v),
  forall (k2: Z),
  forall (Post16: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post33: (valid alloc1 q2) /\
                  (block_length alloc1 (acc forward q2)) = k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (pointerP2: ((memory) pointer)),
  forall (Pre43: Variant5 = 0),
  forall (Test8: true = true),
  forall (aux_5: pointer),
  forall (Post121: aux_5 = (shift update k4)),
  forall (Pre30: (valid alloc1 aux_5)),
  forall (result6: pointer),
  forall (Post123: result6 = (acc pointerP2 aux_5)),
  result6 = (acc pointerP2 (shift update k4)).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3303-3303 *)
Lemma insert_impl_po_14 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre44: (valid alloc1 p1)),
  forall (Test9: (acc elt p1) <> v),
  forall (k2: Z),
  forall (Post16: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post33: (valid alloc1 q2) /\
                  (block_length alloc1 (acc forward q2)) = k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (pointerP2: ((memory) pointer)),
  forall (Pre43: Variant5 = 0),
  forall (Test8: true = true),
  forall (p3: pointer),
  forall (Post39: p3 = (acc pointerP2 (shift update k4))),
  forall (result9: bool),
  forall (Post49: result9 = false),
  (if result9 then (forall (result:unit), (result = tt -> True))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3303-3303 *)
Lemma insert_impl_po_15 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre44: (valid alloc1 p1)),
  forall (Test9: (acc elt p1) <> v),
  forall (k2: Z),
  forall (Post16: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post33: (valid alloc1 q2) /\
                  (block_length alloc1 (acc forward q2)) = k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (pointerP2: ((memory) pointer)),
  forall (Pre43: Variant5 = 0),
  forall (Test8: true = true),
  forall (p3: pointer),
  forall (Post39: p3 = (acc pointerP2 (shift update k4))),
  forall (result9: bool),
  forall (Post48: result9 = true),
  (if result9 then (forall (result:unit), (result = tt -> True))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2494-3365 *)
Lemma insert_impl_po_16 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre47: (valid alloc l)),
  forall (alloc0: alloc_table),
  forall (update: pointer),
  forall (Post71: ((valid_range alloc0 update 0 15) /\
                  (fresh alloc update)) /\ (alloc_extends alloc alloc0)),
  forall (Pre46: (valid alloc0 l)),
  forall (p: pointer),
  forall (Post56: p = (acc header l)),
  forall (alloc1: alloc_table),
  forall (Post75: (alloc_extends alloc0 alloc1)),
  forall (Pre45: (valid alloc1 l)),
  forall (k: Z),
  forall (Post55: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre44: (valid alloc1 p1)),
  forall (Test9: (acc elt p1) <> v),
  forall (k2: Z),
  forall (Post16: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post33: (valid alloc1 q2) /\
                  (block_length alloc1 (acc forward q2)) = k3),
  forall (Variant5: Z),
  forall (Pre43: Variant5 = 0),
  forall (Test8: true = true),
  forall (Post57: (Zwf 0 0 0)),
  (Zwf 0 0 Variant5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3790-3814 *)
Lemma random_level_impl_po_1 : 
  forall (prob0: R),
  forall (Post5: (eq R prob0 (0250000 / 1000000)%R)),
  forall (lvl: Z),
  forall (Post4: lvl = 1),
  forall (Variant1: Z),
  forall (lvl1: Z),
  forall (Pre4: Variant1 = 0),
  forall (Test2: (exists caduceus_1:R,
                  ((Rle (0000000 / 1000000)%R caduceus_1) /\
                  (Rle caduceus_1 (1000000 / 1000000)%R)) /\
                  (Rlt caduceus_1 prob0) /\ lvl1 < 16)),
  forall (lvl2: Z),
  forall (Post2: lvl2 = (lvl1 + 1)),
  (Zwf 0 0 0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3643-3819 *)
Lemma random_level_impl_po_2 : 
  forall (prob0: R),
  forall (Post5: (eq R prob0 (0250000 / 1000000)%R)),
  forall (lvl: Z),
  forall (Post4: lvl = 1),
  forall (Variant1: Z),
  forall (lvl1: Z),
  forall (Pre4: Variant1 = 0),
  forall (Test2: (exists caduceus_1:R,
                  ((Rle (0000000 / 1000000)%R caduceus_1) /\
                  (Rle caduceus_1 (1000000 / 1000000)%R)) /\
                  (Rlt caduceus_1 prob0) /\ lvl1 < 16)),
  forall (Post6: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3643-3819 *)
Lemma random_level_impl_po_3 : 
  forall (prob0: R),
  forall (Post5: (eq R prob0 (0250000 / 1000000)%R)),
  forall (lvl: Z),
  forall (Post4: lvl = 1),
  forall (Variant1: Z),
  forall (lvl1: Z),
  forall (Pre4: Variant1 = 0),
  forall (Test1: (exists caduceus_1:R,
                  ((Rle (0000000 / 1000000)%R caduceus_1) /\
                  (Rle caduceus_1 (1000000 / 1000000)%R)) /\
                  ((Rge caduceus_1 prob0) \/ (Rlt caduceus_1 prob0) /\
                  lvl1 >= 16))),
  (forall (result:Z), (result = lvl1 -> 1 <= result /\ result <= 16)).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4142-4157 *)
Lemma search_impl_po_1 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  (valid alloc0 l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4423-4441 *)
Lemma search_impl_po_2 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  (valid alloc0 p2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4353-4521 *)
Lemma search_impl_po_3 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (pointerP: ((memory) pointer)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (Pre5: (valid alloc0 p2)),
  forall (caduceus_4: pointer),
  forall (Post38: caduceus_4 = (acc forward p2)),
  forall (result1: pointer),
  forall (Post40: result1 = (shift caduceus_4 k1)),
  (forall (result:pointer),
   (result = (acc pointerP result1) ->
    result = (acc pointerP (shift (acc forward p2) k1)))) /\
  (valid alloc0 result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4554-4719 *)
Lemma search_impl_po_4 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (pointerP: ((memory) pointer)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (q3: pointer),
  forall (Post4: q3 = (acc pointerP (shift (acc forward p2) k1))),
  (valid alloc0 q3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4295-4749 *)
Lemma search_impl_po_5 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (pointerP: ((memory) pointer)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (q3: pointer),
  forall (Post4: q3 = (acc pointerP (shift (acc forward p2) k1))),
  forall (Pre8: (valid alloc0 q3)),
  forall (result2: Z),
  forall (Post5: (acc elt q3) < v /\ result2 = 1 \/ (acc elt q3) >= v /\
                 result2 = 0),
  ((result2 <> 0 -> (forall (p:pointer), (p = q3 -> (Zwf 0 0 0))))) /\
  ((result2 = 0 ->
    (forall (k:Z),
     (k = (k1 - 1) ->
      (forall (result:Z),
       (result = k ->
        ((result >= 0 ->
          ((true = false ->
            (forall (result:unit),
             (result = tt ->
              (forall (result:Z),
               ((acc elt p2) <> v /\ result = 0 \/ (acc elt p2) = v /\
                result = 1 -> True)) /\
              (valid alloc0 p2))))) /\
          ((false = false ->
            (forall (result:unit), (result = tt -> (Zwf 0 0 0))))))) /\
        ((result < 0 ->
          ((true = true ->
            (forall (result:unit),
             (result = tt ->
              (forall (result:Z),
               ((acc elt p2) <> v /\ result = 0 \/ (acc elt p2) = v /\
                result = 1 -> True)) /\
              (valid alloc0 p2))))) /\
          ((false = true ->
            (forall (result:unit), (result = tt -> (Zwf 0 0 0))))))))))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4272-4842 *)
Lemma search_impl_po_6 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (Pre12: Variant3 = 0),
  forall (Test3: true = true),
  forall (Post19: (Zwf 0 0 0)),
  (Zwf 0 0 Variant3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4954-4954 *)
Lemma search_impl_po_7 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (p2: pointer),
  forall (result2: bool),
  forall (Post9: result2 = false),
  (if result2
   then (forall (result:unit),
         (result = tt ->
          (forall (result:Z),
           ((acc elt p2) <> v /\ result = 0 \/ (acc elt p2) = v /\ result =
            1 -> True)) /\
          (valid alloc0 p2)))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4954-4954 *)
Lemma search_impl_po_8 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (p2: pointer),
  forall (result2: bool),
  forall (Post8: result2 = true),
  (if result2
   then (forall (result:unit),
         (result = tt ->
          (forall (result:Z),
           ((acc elt p2) <> v /\ result = 0 \/ (acc elt p2) = v /\ result =
            1 -> True)) /\
          (valid alloc0 p2)))
   else (forall (result:unit), (result = tt -> (Zwf 0 0 0)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4200-4998 *)
Lemma search_impl_po_9 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post16: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4200-4998 *)
Lemma search_impl_po_10 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre19: (valid alloc l)),
  forall (p: pointer),
  forall (Post15: p = (acc header l)),
  forall (alloc0: alloc_table),
  forall (Post25: (alloc_extends alloc alloc0)),
  forall (Pre18: (valid alloc0 l)),
  forall (k: Z),
  forall (Post14: k = (acc level l)),
  forall (Variant1: Z),
  forall (p1: pointer),
  forall (Pre14: Variant1 = 0),
  forall (Test1: false = true),
  (forall (result:Z),
   ((acc elt p1) <> v /\ result = 0 \/ (acc elt p1) = v /\ result = 1 -> True)) /\
  (valid alloc0 p1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

