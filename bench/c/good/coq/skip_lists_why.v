(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

Proof.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 138-168 *)
Lemma init_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (forward: ((memory) pointer)),
  forall (NIL0: pointer),
  forall (Post3: (valid alloc NIL0) /\
                 (block_length alloc (acc forward NIL0)) = 16),
  forall (caduceus_1: pointer),
  forall (Post1: caduceus_1 = NIL0),
  (valid alloc caduceus_1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 768-787 *)
Lemma insert_impl_po_1 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre21: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  (valid alloc p2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 696-869 *)
Lemma insert_impl_po_2 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (pointerP0: ((memory) pointer)),
  forall (Pre21: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  forall (Pre9: (valid alloc p2)),
  forall (caduceus_14: pointer),
  forall (Post42: caduceus_14 = (acc forward p2)),
  forall (result1: pointer),
  forall (Post44: result1 = (shift caduceus_14 k1)),
  (forall (result:pointer),
   (result = (acc pointerP0 result1) ->
    (forall (result0:Z),
     (result0 = (acc elt result) ->
      ((result0 < v ->
        ((1 <> 0 -> (forall (p:pointer), (p = result -> (Zwf 0 0 0))))) /\
        ((1 = 0 ->
          (forall (result:pointer),
           (result = (shift update k1) ->
            (forall (pointerP:((memory) pointer)),
             (pointerP = (upd pointerP0 result p2) ->
              (forall (k:Z),
               (k = (k1 - 1) -> ((k >= 0 -> (Zwf 0 0 0))) /\
                ((k < 0 ->
                  (forall (result:Z),
                   (result = (acc elt p2) -> ((result = v -> True)) /\
                    ((result <> v ->
                      (forall (k:Z),
                       (1 <= k /\ k <= 16 ->
                        (forall (result:Z),
                         (result = k ->
                          (forall (result0:Z),
                           (result0 = (acc level l) ->
                            ((result > result0 ->
                              (forall (result:pointer),
                               (result = l ->
                                (forall (result0:Z),
                                 (result0 = (acc level result) ->
                                  (forall (level0:((memory) Z)),
                                   (level0 = (upd level result (result0 + 1)) ->
                                    (forall (result:pointer),
                                     (result = (shift update (result0 + 1)) ->
                                      (forall (result1:pointer),
                                       (result1 = (acc header l) ->
                                        (forall (pointerP0:((memory) pointer)),
                                         (pointerP0 = (upd pointerP result
                                                       result1) ->
                                          (forall (q:pointer),
                                           ((valid alloc q) /\
                                            (block_length alloc
                                             (acc forward q)) =
                                            (result0 + 1) ->
                                            (forall (result:pointer),
                                             (result = q ->
                                              (forall (elt0:((memory) Z)),
                                               (elt0 = (upd elt result v) ->
                                                True)) /\
                                              (valid alloc result))))))) /\
                                        (valid alloc result))) /\
                                      (valid alloc l))))) /\
                                  (valid alloc result))) /\
                                (valid alloc result))))) /\
                            ((result <= result0 ->
                              (forall (q:pointer),
                               ((valid alloc q) /\
                                (block_length alloc (acc forward q)) = k ->
                                (forall (result:pointer),
                                 (result = q ->
                                  (forall (elt0:((memory) Z)),
                                   (elt0 = (upd elt result v) -> True)) /\
                                  (valid alloc result))))))))) /\
                          (valid alloc l))))))))) /\
                  (valid alloc p2))))))) /\
            (valid alloc result))))))) /\
      ((result0 >= v ->
        ((0 <> 0 -> (forall (p:pointer), (p = result -> (Zwf 0 0 0))))) /\
        ((0 = 0 ->
          (forall (result:pointer),
           (result = (shift update k1) ->
            (forall (pointerP:((memory) pointer)),
             (pointerP = (upd pointerP0 result p2) ->
              (forall (k:Z),
               (k = (k1 - 1) -> ((k >= 0 -> (Zwf 0 0 0))) /\
                ((k < 0 ->
                  (forall (result:Z),
                   (result = (acc elt p2) -> ((result = v -> True)) /\
                    ((result <> v ->
                      (forall (k:Z),
                       (1 <= k /\ k <= 16 ->
                        (forall (result:Z),
                         (result = k ->
                          (forall (result0:Z),
                           (result0 = (acc level l) ->
                            ((result > result0 ->
                              (forall (result:pointer),
                               (result = l ->
                                (forall (result0:Z),
                                 (result0 = (acc level result) ->
                                  (forall (level0:((memory) Z)),
                                   (level0 = (upd level result (result0 + 1)) ->
                                    (forall (result:pointer),
                                     (result = (shift update (result0 + 1)) ->
                                      (forall (result1:pointer),
                                       (result1 = (acc header l) ->
                                        (forall (pointerP0:((memory) pointer)),
                                         (pointerP0 = (upd pointerP result
                                                       result1) ->
                                          (forall (q:pointer),
                                           ((valid alloc q) /\
                                            (block_length alloc
                                             (acc forward q)) =
                                            (result0 + 1) ->
                                            (forall (result:pointer),
                                             (result = q ->
                                              (forall (elt0:((memory) Z)),
                                               (elt0 = (upd elt result v) ->
                                                True)) /\
                                              (valid alloc result))))))) /\
                                        (valid alloc result))) /\
                                      (valid alloc l))))) /\
                                  (valid alloc result))) /\
                                (valid alloc result))))) /\
                            ((result <= result0 ->
                              (forall (q:pointer),
                               ((valid alloc q) /\
                                (block_length alloc (acc forward q)) = k ->
                                (forall (result:pointer),
                                 (result = q ->
                                  (forall (elt0:((memory) Z)),
                                   (elt0 = (upd elt result v) -> True)) /\
                                  (valid alloc result))))))))) /\
                          (valid alloc l))))))))) /\
                  (valid alloc p2))))))) /\
            (valid alloc result))))))))) /\
    (valid alloc result))) /\
  (valid alloc result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 613-1201 *)
Lemma insert_impl_po_3 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre21: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  forall (Post21: (Zwf 0 0 0)),
  (Zwf 0 0 Variant3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 541-1447 *)
Lemma insert_impl_po_4 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre21: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post18: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2313-2351 *)
Lemma insert_impl_po_5 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (k2: Z),
  forall (Post69: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post88: (valid alloc q2) /\ (block_length alloc (acc forward q2)) =
                  k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (Pre62: Variant5 = 0),
  forall (Test6: true = true),
  forall (aux_5: pointer),
  forall (Post100: aux_5 = (shift update k4)),
  (valid alloc aux_5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2313-2351 *)
Lemma insert_impl_po_6 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (k2: Z),
  forall (Post69: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post88: (valid alloc q2) /\ (block_length alloc (acc forward q2)) =
                  k3),
  forall (Variant5: Z),
  forall (k4: Z),
  forall (pointerP2: ((memory) pointer)),
  forall (Pre62: Variant5 = 0),
  forall (Test6: true = true),
  forall (aux_5: pointer),
  forall (Post100: aux_5 = (shift update k4)),
  forall (Pre43: (valid alloc aux_5)),
  forall (result6: pointer),
  forall (Post102: result6 = (acc pointerP2 aux_5)),
  (forall (result:pointer),
   (result = (acc forward q2) ->
    (forall (result0:pointer),
     (result0 = (shift result k4) ->
      (forall (result:pointer),
       (result = (acc forward result6) ->
        (forall (result1:pointer),
         (result1 = (shift result k4) ->
          (forall (result:pointer),
           (result = (acc pointerP2 result1) ->
            (forall (pointerP:((memory) pointer)),
             (pointerP = (upd pointerP2 result0 result) ->
              (forall (result:pointer),
               (result = (acc forward result6) ->
                (forall (result0:pointer),
                 (result0 = (shift result k4) ->
                  (forall (pointerP0:((memory) pointer)),
                   (pointerP0 = (upd pointerP result0 q2) ->
                    (forall (k:Z),
                     (k = (k4 - 1) -> ((k >= 0 -> (Zwf 0 0 0))) /\
                      ((k < 0 -> True)))))) /\
                  (valid alloc result0))))) /\
              (valid alloc result6))) /\
            (valid alloc result0))) /\
          (valid alloc result1))))) /\
      (valid alloc result6))))) /\
  (valid alloc q2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 2244-3119 *)
Lemma insert_impl_po_7 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre65: (valid alloc l)),
  forall (update: pointer),
  forall (Post12: update = (any_pointer tt)),
  forall (Pre64: (valid alloc l)),
  forall (p: pointer),
  forall (Post26: p = (acc header l)),
  forall (q: pointer),
  forall (Post11: q = (any_pointer tt)),
  forall (Pre63: (valid alloc l)),
  forall (k: Z),
  forall (Post30: k = (acc level l)),
  forall (p1: pointer),
  forall (pointerP0: ((memory) pointer)),
  forall (k2: Z),
  forall (Post69: 1 <= k2 /\ k2 <= 16),
  forall (k3: Z),
  forall (q2: pointer),
  forall (Post88: (valid alloc q2) /\ (block_length alloc (acc forward q2)) =
                  k3),
  forall (Variant5: Z),
  forall (Pre62: Variant5 = 0),
  forall (Test6: true = true),
  forall (Post13: (Zwf 0 0 0)),
  (Zwf 0 0 Variant5).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3485-3503 *)
Lemma random_level_impl_po_1 : 
  forall (prob0: R),
  forall (Post3: prob0 = (0250000 / 1000000)%R),
  forall (lvl: Z),
  forall (Post2: lvl = 1),
  forall (Variant1: Z),
  forall (lvl1: Z),
  forall (Pre3: Variant1 = 0),
  forall (Test4: true = true),
  forall (caduceus_1: R),
  forall (Post15: (Rle (0000000 / 1000000)%R caduceus_1) /\
                  (Rle caduceus_1 (1000000 / 1000000)%R)),
  forall (Test3: (Rlt caduceus_1 prob0)),
  forall (result1: bool),
  forall (Post18: (if result1 then lvl1 < 16 else lvl1 >= 16)),
  (if result1 then (forall (lvl:Z), (lvl = (lvl1 + 1) -> (Zwf 0 0 0)))
   else 1 <= lvl1 /\ lvl1 <= 16).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3503-3503 *)
Lemma random_level_impl_po_2 : 
  forall (prob0: R),
  forall (Post3: prob0 = (0250000 / 1000000)%R),
  forall (lvl: Z),
  forall (Post2: lvl = 1),
  forall (Variant1: Z),
  forall (lvl1: Z),
  forall (Pre3: Variant1 = 0),
  forall (Test4: true = true),
  forall (caduceus_1: R),
  forall (Post15: (Rle (0000000 / 1000000)%R caduceus_1) /\
                  (Rle caduceus_1 (1000000 / 1000000)%R)),
  forall (Test2: (Rge caduceus_1 prob0)),
  1 <= lvl1 /\ lvl1 <= 16.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3393-3573 *)
Lemma random_level_impl_po_3 : 
  forall (prob0: R),
  forall (Post3: prob0 = (0250000 / 1000000)%R),
  forall (lvl: Z),
  forall (Post2: lvl = 1),
  forall (Variant1: Z),
  forall (Pre3: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post4: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4102-4121 *)
Lemma search_impl_po_1 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre24: (valid alloc l)),
  forall (Pre23: (valid alloc l)),
  forall (p: pointer),
  forall (Post14: p = (acc header l)),
  forall (q: pointer),
  forall (Post5: q = (any_pointer tt)),
  forall (Pre22: (valid alloc l)),
  forall (k: Z),
  forall (Post18: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre18: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  (valid alloc p2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 4032-4201 *)
Lemma search_impl_po_2 : 
  forall (l: pointer),
  forall (v: Z),
  forall (alloc: alloc_table),
  forall (elt: ((memory) Z)),
  forall (forward: ((memory) pointer)),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (pointerP: ((memory) pointer)),
  forall (Pre24: (valid alloc l)),
  forall (Pre23: (valid alloc l)),
  forall (p: pointer),
  forall (Post14: p = (acc header l)),
  forall (q: pointer),
  forall (Post5: q = (any_pointer tt)),
  forall (Pre22: (valid alloc l)),
  forall (k: Z),
  forall (Post18: k = (acc level l)),
  forall (Variant1: Z),
  forall (k1: Z),
  forall (Pre18: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (p2: pointer),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  forall (Pre9: (valid alloc p2)),
  forall (caduceus_4: pointer),
  forall (Post30: caduceus_4 = (acc forward p2)),
  forall (result1: pointer),
  forall (Post32: result1 = (shift caduceus_4 k1)),
  (forall (result:pointer),
   (result = (acc pointerP result1) ->
    (forall (result0:Z),
     (result0 = (acc elt result) ->
      ((result0 < v ->
        ((1 <> 0 -> (forall (p:pointer), (p = result -> (Zwf 0 0 0))))) /\
        ((1 = 0 ->
          (forall (k:Z),
           (k = (k1 - 1) -> ((k >= 0 -> (Zwf 0 0 0))) /\
            ((k < 0 ->
              (forall (result:Z),
               (result = (acc elt p2) -> ((result < v -> True)) /\
                ((result >= v -> True)))) /\
              (valid alloc p2))))))))) /\
      ((result0 >= v ->
        ((0 <> 0 -> (forall (p:pointer), (p = result -> (Zwf 0 0 0))))) /\
        ((0 = 0 ->
          (forall (k:Z),
           (k = (k1 - 1) -> ((k >= 0 -> (Zwf 0 0 0))) /\
            ((k < 0 ->
              (forall (result:Z),
               (result = (acc elt p2) -> ((result < v -> True)) /\
                ((result >= v -> True)))) /\
              (valid alloc p2))))))))))) /\
    (valid alloc result))) /\
  (valid alloc result1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3951-4525 *)
Lemma search_impl_po_3 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre24: (valid alloc l)),
  forall (Pre23: (valid alloc l)),
  forall (p: pointer),
  forall (Post14: p = (acc header l)),
  forall (q: pointer),
  forall (Post5: q = (any_pointer tt)),
  forall (Pre22: (valid alloc l)),
  forall (k: Z),
  forall (Post18: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre18: Variant1 = 0),
  forall (Test4: true = true),
  forall (Variant3: Z),
  forall (Pre16: Variant3 = 0),
  forall (Test3: true = true),
  forall (Post10: (Zwf 0 0 0)),
  (Zwf 0 0 Variant3).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/skip_lists.why", characters 3879-4681 *)
Lemma search_impl_po_4 : 
  forall (l: pointer),
  forall (alloc: alloc_table),
  forall (header: ((memory) pointer)),
  forall (level: ((memory) Z)),
  forall (Pre24: (valid alloc l)),
  forall (Pre23: (valid alloc l)),
  forall (p: pointer),
  forall (Post14: p = (acc header l)),
  forall (q: pointer),
  forall (Post5: q = (any_pointer tt)),
  forall (Pre22: (valid alloc l)),
  forall (k: Z),
  forall (Post18: k = (acc level l)),
  forall (Variant1: Z),
  forall (Pre18: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post7: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

