(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export array_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma getcell_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z5_Z4: ((memory) ((pointer) Z5) Z4)),
  forall (t: ((pointer) Z4)),
  forall (HW_1: (* File \"array.c\", line 4, characters 14-55:\n *)
                ((valid_index alloc t 1) /\
                (valid_index alloc (acc int_Z5_Z4 (shift t 1)) 2)) /\
                (valid_range alloc t 0 2) /\
                (forall (counter:Z),
                 (0 <= counter /\ counter < 2 ->
                  (valid_range alloc (shift t counter) 0 2)))),
  forall (result: ((pointer) Z4)),
  forall (HW_2: result = (shift t 1)),
  forall (result0: ((pointer) Z5)),
  forall (HW_3: result0 = (acc int_Z5_Z4 result)),
  forall (result1: ((pointer) Z5)),
  forall (HW_4: result1 = (shift result0 2)),
  (valid alloc result1).
Proof.
intuition; subst; auto with *.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma getcell_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z5_Z4: ((memory) ((pointer) Z5) Z4)),
  forall (t: ((pointer) Z4)),
  forall (HW_1: (* File \"array.c\", line 4, characters 14-55:\n *)
                ((valid_index alloc t 1) /\
                (valid_index alloc (acc int_Z5_Z4 (shift t 1)) 2)) /\
                (valid_range alloc t 0 2) /\
                (forall (counter:Z),
                 (0 <= counter /\ counter < 2 ->
                  (valid_range alloc (shift t counter) 0 2)))),
  forall (result: ((pointer) Z4)),
  forall (HW_2: result = (shift t 1)),
  (valid alloc result).
Proof.
intuition.
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

