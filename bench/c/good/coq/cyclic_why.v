(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/cyclic.why", characters 155-210 *)
Lemma cyclic_impl_po_1 : 
  forall (l: pointer),
  forall (alloc: alloc),
  forall (tl: ((memory) pointer)),
  forall (Pre16: (valid alloc l)),
  forall (l1: pointer),
  forall (Post6: l1 = l),
  forall (l2: pointer),
  forall (Post5: l2 = (any_pointer tt)),
  forall (caduceus_5: pointer),
  forall (Post1: caduceus_5 = l1),
  forall (result: bool),
  forall (Post17: (if result then ~(caduceus_5 = null) else caduceus_5 = null)),
  (if result then ((0 <> 0 -> (cyclic tl l))) /\ ((0 = 0 -> ~(cyclic tl l)))
   else (forall (l2:pointer), (l2 = (acc tl l1) -> True)) /\ (valid alloc l1)).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/cyclic.why", characters 292-346 *)
Lemma cyclic_impl_po_2 : 
  forall (l: pointer),
  forall (alloc: alloc),
  forall (tl: ((memory) pointer)),
  forall (Pre16: (valid alloc l)),
  forall (l1: pointer),
  forall (Post6: l1 = l),
  forall (l2: pointer),
  forall (Post5: l2 = (any_pointer tt)),
  forall (Pre15: (valid alloc l1)),
  forall (l2_1: pointer),
  forall (Post20: l2_1 = (acc tl l1)),
  forall (Variant1: Z),
  forall (l1_1: pointer),
  forall (l2_2: pointer),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (caduceus_4: pointer),
  forall (Post2: caduceus_4 = l1_1),
  forall (result2: bool),
  forall (Post30: (if result2 then ~(caduceus_4 = l2_2)
                   else caduceus_4 = l2_2)),
  (if result2
   then (forall (result:pointer),
         (result = l1_1 ->
          ((~(result = null) -> ((0 <> 0 -> (cyclic tl l))) /\
            ((0 = 0 -> ~(cyclic tl l))))) /\
          ((result = null ->
            (forall (result:pointer),
             (result = l2_2 ->
              ((~(result = null) -> ((0 <> 0 -> (cyclic tl l))) /\
                ((0 = 0 -> ~(cyclic tl l))))) /\
              ((result = null ->
                (forall (result:pointer),
                 (result = (acc tl l2_2) ->
                  ((~(result = null) -> ((0 <> 0 -> (cyclic tl l))) /\
                    ((0 = 0 -> ~(cyclic tl l))))) /\
                  ((result = null ->
                    (forall (l1:pointer),
                     (l1 = (acc tl l1) ->
                      (forall (result:pointer),
                       (result = (acc tl l2_2) ->
                        (forall (result0:pointer),
                         (result0 = (acc tl result) -> (Zwf 0 0 0))) /\
                        (valid alloc result))) /\
                      (valid alloc l2_2))) /\
                    (valid alloc l1_1))))) /\
                (valid alloc l2_2)))))))))
   else ((1 <> 0 -> (cyclic tl l))) /\ ((1 = 0 -> ~(cyclic tl l)))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/cyclic.why", characters 724-745 *)
Lemma cyclic_impl_po_3 : 
  forall (l: pointer),
  forall (alloc: alloc),
  forall (tl: ((memory) pointer)),
  forall (Pre16: (valid alloc l)),
  forall (l1: pointer),
  forall (Post6: l1 = l),
  forall (l2: pointer),
  forall (Post5: l2 = (any_pointer tt)),
  forall (Pre15: (valid alloc l1)),
  forall (l2_1: pointer),
  forall (Post20: l2_1 = (acc tl l1)),
  forall (Variant1: Z),
  forall (l1_1: pointer),
  forall (l2_2: pointer),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Pre12: (valid alloc l1_1)),
  forall (result4: pointer),
  forall (Post43: result4 = (acc tl l1_1)),
  result4 = (acc tl result4).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/cyclic.why", characters 286-796 *)
Lemma cyclic_impl_po_4 : 
  forall (l: pointer),
  forall (alloc: alloc),
  forall (tl: ((memory) pointer)),
  forall (Pre16: (valid alloc l)),
  forall (l1: pointer),
  forall (Post6: l1 = l),
  forall (l2: pointer),
  forall (Post5: l2 = (any_pointer tt)),
  forall (Pre15: (valid alloc l1)),
  forall (l2_1: pointer),
  forall (Post20: l2_1 = (acc tl l1)),
  forall (Variant1: Z),
  forall (Pre14: Variant1 = 0),
  forall (Test4: true = true),
  forall (Post7: (Zwf 0 0 0)),
  (Zwf 0 0 Variant1).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

