(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/sort.why", characters 396-434 *)
Lemma sort4_1_impl_po_1 : 
  forall (a: Z),
  forall (b: Z),
  forall (c: Z),
  forall (d: Z),
  forall (Test2: a > b),
  forall (tmp1: Z),
  forall (Post2: tmp1 = a),
  forall (a1: Z),
  forall (Post3: a1 = b),
  forall (b1: Z),
  forall (Post4: b1 = tmp1),
  ((c > d ->
    (forall (tmp:Z),
     (tmp = c ->
      (forall (c:Z),
       (c = d ->
        (forall (d:Z),
         (d = tmp ->
          ((a1 > c ->
            (forall (tmp:Z),
             (tmp = a1 ->
              (forall (a:Z),
               (a = c ->
                (forall (c:Z),
                 (c = tmp ->
                  ((b1 > d ->
                    (forall (tmp:Z),
                     (tmp = b1 ->
                      (forall (b:Z),
                       (b = d ->
                        (forall (d:Z),
                         (d = tmp ->
                          ((b > c ->
                            (forall (tmp:Z),
                             (tmp = b ->
                              (forall (b:Z),
                               (b = c ->
                                (forall (c:Z),
                                 (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                          ((b <= c ->
                            (forall (result:unit),
                             (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
                  ((b1 <= d ->
                    (forall (result:unit),
                     (result = tt ->
                      ((b1 > c ->
                        (forall (tmp:Z),
                         (tmp = b1 ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b1 <= c ->
                        (forall (result:unit),
                         (result = tt -> (a <= b1 /\ b1 <= c) /\ c <= d)))))))))))))))) /\
          ((a1 <= c ->
            (forall (result:unit),
             (result = tt ->
              ((b1 > d ->
                (forall (tmp:Z),
                 (tmp = b1 ->
                  (forall (b:Z),
                   (b = d ->
                    (forall (d:Z),
                     (d = tmp ->
                      ((b > c ->
                        (forall (tmp:Z),
                         (tmp = b ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a1 <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b <= c ->
                        (forall (result:unit),
                         (result = tt -> (a1 <= b /\ b <= c) /\ c <= d)))))))))))) /\
              ((b1 <= d ->
                (forall (result:unit),
                 (result = tt ->
                  ((b1 > c ->
                    (forall (tmp:Z),
                     (tmp = b1 ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a1 <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b1 <= c ->
                    (forall (result:unit),
                     (result = tt -> (a1 <= b1 /\ b1 <= c) /\ c <= d)))))))))))))))))))) /\
  ((c <= d ->
    (forall (result:unit),
     (result = tt ->
      ((a1 > c ->
        (forall (tmp:Z),
         (tmp = a1 ->
          (forall (a:Z),
           (a = c ->
            (forall (c:Z),
             (c = tmp ->
              ((b1 > d ->
                (forall (tmp:Z),
                 (tmp = b1 ->
                  (forall (b:Z),
                   (b = d ->
                    (forall (d:Z),
                     (d = tmp ->
                      ((b > c ->
                        (forall (tmp:Z),
                         (tmp = b ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b <= c ->
                        (forall (result:unit),
                         (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
              ((b1 <= d ->
                (forall (result:unit),
                 (result = tt ->
                  ((b1 > c ->
                    (forall (tmp:Z),
                     (tmp = b1 ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b1 <= c ->
                    (forall (result:unit),
                     (result = tt -> (a <= b1 /\ b1 <= c) /\ c <= d)))))))))))))))) /\
      ((a1 <= c ->
        (forall (result:unit),
         (result = tt ->
          ((b1 > d ->
            (forall (tmp:Z),
             (tmp = b1 ->
              (forall (b:Z),
               (b = d ->
                (forall (d:Z),
                 (d = tmp ->
                  ((b > c ->
                    (forall (tmp:Z),
                     (tmp = b ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a1 <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b <= c ->
                    (forall (result:unit),
                     (result = tt -> (a1 <= b /\ b <= c) /\ c <= d)))))))))))) /\
          ((b1 <= d ->
            (forall (result:unit),
             (result = tt ->
              ((b1 > c ->
                (forall (tmp:Z),
                 (tmp = b1 ->
                  (forall (b:Z),
                   (b = c ->
                    (forall (c:Z), (c = tmp -> (a1 <= b /\ b <= c) /\ c <= d)))))))) /\
              ((b1 <= c ->
                (forall (result:unit),
                 (result = tt -> (a1 <= b1 /\ b1 <= c) /\ c <= d)))))))))))))))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 458-458 *)
Lemma sort4_1_impl_po_2 : 
  forall (a: Z),
  forall (b: Z),
  forall (c: Z),
  forall (d: Z),
  forall (Test1: a <= b),
  forall (result0: unit),
  forall (Post1: result0 = tt),
  ((c > d ->
    (forall (tmp:Z),
     (tmp = c ->
      (forall (c:Z),
       (c = d ->
        (forall (d:Z),
         (d = tmp ->
          ((a > c ->
            (forall (tmp:Z),
             (tmp = a ->
              (forall (a:Z),
               (a = c ->
                (forall (c:Z),
                 (c = tmp ->
                  ((b > d ->
                    (forall (tmp:Z),
                     (tmp = b ->
                      (forall (b:Z),
                       (b = d ->
                        (forall (d:Z),
                         (d = tmp ->
                          ((b > c ->
                            (forall (tmp:Z),
                             (tmp = b ->
                              (forall (b:Z),
                               (b = c ->
                                (forall (c:Z),
                                 (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                          ((b <= c ->
                            (forall (result:unit),
                             (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
                  ((b <= d ->
                    (forall (result:unit),
                     (result = tt ->
                      ((b > c ->
                        (forall (tmp:Z),
                         (tmp = b ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b <= c ->
                        (forall (result:unit),
                         (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))))))) /\
          ((a <= c ->
            (forall (result:unit),
             (result = tt ->
              ((b > d ->
                (forall (tmp:Z),
                 (tmp = b ->
                  (forall (b:Z),
                   (b = d ->
                    (forall (d:Z),
                     (d = tmp ->
                      ((b > c ->
                        (forall (tmp:Z),
                         (tmp = b ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b <= c ->
                        (forall (result:unit),
                         (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
              ((b <= d ->
                (forall (result:unit),
                 (result = tt ->
                  ((b > c ->
                    (forall (tmp:Z),
                     (tmp = b ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b <= c ->
                    (forall (result:unit),
                     (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))))))))))) /\
  ((c <= d ->
    (forall (result:unit),
     (result = tt ->
      ((a > c ->
        (forall (tmp:Z),
         (tmp = a ->
          (forall (a:Z),
           (a = c ->
            (forall (c:Z),
             (c = tmp ->
              ((b > d ->
                (forall (tmp:Z),
                 (tmp = b ->
                  (forall (b:Z),
                   (b = d ->
                    (forall (d:Z),
                     (d = tmp ->
                      ((b > c ->
                        (forall (tmp:Z),
                         (tmp = b ->
                          (forall (b:Z),
                           (b = c ->
                            (forall (c:Z),
                             (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                      ((b <= c ->
                        (forall (result:unit),
                         (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
              ((b <= d ->
                (forall (result:unit),
                 (result = tt ->
                  ((b > c ->
                    (forall (tmp:Z),
                     (tmp = b ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b <= c ->
                    (forall (result:unit),
                     (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))))))) /\
      ((a <= c ->
        (forall (result:unit),
         (result = tt ->
          ((b > d ->
            (forall (tmp:Z),
             (tmp = b ->
              (forall (b:Z),
               (b = d ->
                (forall (d:Z),
                 (d = tmp ->
                  ((b > c ->
                    (forall (tmp:Z),
                     (tmp = b ->
                      (forall (b:Z),
                       (b = c ->
                        (forall (c:Z),
                         (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
                  ((b <= c ->
                    (forall (result:unit),
                     (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))) /\
          ((b <= d ->
            (forall (result:unit),
             (result = tt ->
              ((b > c ->
                (forall (tmp:Z),
                 (tmp = b ->
                  (forall (b:Z),
                   (b = c ->
                    (forall (c:Z), (c = tmp -> (a <= b /\ b <= c) /\ c <= d)))))))) /\
              ((b <= c ->
                (forall (result:unit),
                 (result = tt -> (a <= b /\ b <= c) /\ c <= d)))))))))))))))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 1526-1609 *)
Lemma sort4_3_impl_po_1 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  (valid alloc a).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 1526-1609 *)
Lemma sort4_3_impl_po_2 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (Pre11: (valid alloc a)),
  (valid alloc b).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 1684-1716 *)
Lemma sort4_3_impl_po_3 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (Pre11: (valid alloc a)),
  forall (Pre12: (valid alloc b)),
  forall (Test2: (acc intP a) > (acc intP b)),
  forall (tmp1: Z),
  forall (Post2: tmp1 = (acc intP a)),
  forall (Pre7: (valid alloc b)),
  forall (aux_2: Z),
  forall (Post5: aux_2 = (acc intP b)),
  forall (Pre5: (valid alloc a)),
  forall (intP0: ((memory) Z)),
  forall (Post54: intP0 = (upd intP a aux_2)),
  (forall (intP1:((memory) Z)),
   (intP1 = (upd intP0 b tmp1) ->
    (swap_ord (acc intP1 a) (acc intP1 b) (acc intP a) (acc intP b)) /\
    (not_assigns alloc intP intP1
     (pset_union (pset_singleton b) (pset_singleton a))))) /\
  (valid alloc b).
Proof.
intuition.
subst; caduceus.
apply assigns_trans with intP0.
red; subst; intuition.
generalize (unchanged_union_elim2 _ _ _ H10).
intro.
generalize (unchanged_pointer_elim _ _ H11).
intro; caduceus.
red; subst; intuition.
generalize (unchanged_union_elim1 _ _ _ H10).
intro.
generalize (unchanged_pointer_elim _ _ H11).
intro; caduceus.
Save.

(* Why obligation from file "why/sort.why", characters 1778-1778 *)
Lemma sort4_3_impl_po_4 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (Pre11: (valid alloc a)),
  forall (Pre12: (valid alloc b)),
  forall (Test1: (acc intP a) <= (acc intP b)),
  forall (result0: unit),
  forall (Post1: result0 = tt),
  (swap_ord (acc intP a) (acc intP b) (acc intP a) (acc intP b)) /\
  (not_assigns alloc intP intP
   (pset_union (pset_singleton b) (pset_singleton a))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sort.why", characters 1999-2081 *)
Lemma sort4_3_impl_po_5 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  (valid alloc c).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sort.why", characters 1999-2081 *)
Lemma sort4_3_impl_po_6 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (Pre23: (valid alloc c)),
  (valid alloc d).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2152-2184 *)
Lemma sort4_3_impl_po_7 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (Pre23: (valid alloc c)),
  forall (Pre24: (valid alloc d)),
  forall (Test4: (acc intP0 c) > (acc intP0 d)),
  forall (tmp2: Z),
  forall (Post10: tmp2 = (acc intP0 c)),
  forall (Pre19: (valid alloc d)),
  forall (aux_4: Z),
  forall (Post13: aux_4 = (acc intP0 d)),
  forall (Pre17: (valid alloc c)),
  forall (intP1: ((memory) Z)),
  forall (Post62: intP1 = (upd intP0 c aux_4)),
  (forall (intP:((memory) Z)),
   (intP = (upd intP1 d tmp2) ->
    (swap_ord (acc intP c) (acc intP d) (acc intP0 c) (acc intP0 d)) /\
    (not_assigns alloc intP0 intP
     (pset_union (pset_singleton d) (pset_singleton c))))) /\
  (valid alloc d).
Proof.
intuition.
subst; caduceus.
apply assigns_trans with intP1.
red; subst; intuition.
generalize (unchanged_union_elim2 _ _ _ H12).
intro.
generalize (unchanged_pointer_elim _ _ H13).
intro; caduceus.
red; subst; intuition.
generalize (unchanged_union_elim1 _ _ _ H12).
intro.
generalize (unchanged_pointer_elim _ _ H13).
intro; caduceus.
Save.

(* Why obligation from file "why/sort.why", characters 2243-2243 *)
Lemma sort4_3_impl_po_8 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (Pre23: (valid alloc c)),
  forall (Pre24: (valid alloc d)),
  forall (Test3: (acc intP0 c) <= (acc intP0 d)),
  forall (result1: unit),
  forall (Post9: result1 = tt),
  (swap_ord (acc intP0 c) (acc intP0 d) (acc intP0 c) (acc intP0 d)) /\
  (not_assigns alloc intP0 intP0
   (pset_union (pset_singleton d) (pset_singleton c))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2461-2543 *)
Lemma sort4_3_impl_po_9 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  (valid alloc a).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2461-2543 *)
Lemma sort4_3_impl_po_10 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (Pre35: (valid alloc a)),
  (valid alloc c).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2614-2646 *)
Lemma sort4_3_impl_po_11 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (Pre35: (valid alloc a)),
  forall (Pre36: (valid alloc c)),
  forall (Test6: (acc intP1 a) > (acc intP1 c)),
  forall (tmp3: Z),
  forall (Post18: tmp3 = (acc intP1 a)),
  forall (Pre31: (valid alloc c)),
  forall (aux_6: Z),
  forall (Post21: aux_6 = (acc intP1 c)),
  forall (Pre29: (valid alloc a)),
  forall (intP2: ((memory) Z)),
  forall (Post70: intP2 = (upd intP1 a aux_6)),
  (forall (intP:((memory) Z)),
   (intP = (upd intP2 c tmp3) ->
    (swap_ord (acc intP a) (acc intP c) (acc intP1 a) (acc intP1 c)) /\
    (not_assigns alloc intP1 intP
     (pset_union (pset_singleton c) (pset_singleton a))))) /\
  (valid alloc c).
Proof.
intuition.
subst; caduceus.
apply assigns_trans with intP2.
red; subst; intuition.
generalize (unchanged_union_elim2 _ _ _ H14).
intro.
generalize (unchanged_pointer_elim _ _ H15).
intro; caduceus.
red; subst; intuition.
generalize (unchanged_union_elim1 _ _ _ H14).
intro.
generalize (unchanged_pointer_elim _ _ H15).
intro; caduceus.
Save.

(* Why obligation from file "why/sort.why", characters 2705-2705 *)
Lemma sort4_3_impl_po_12 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (Pre35: (valid alloc a)),
  forall (Pre36: (valid alloc c)),
  forall (Test5: (acc intP1 a) <= (acc intP1 c)),
  forall (result2: unit),
  forall (Post17: result2 = tt),
  (swap_ord (acc intP1 a) (acc intP1 c) (acc intP1 a) (acc intP1 c)) /\
  (not_assigns alloc intP1 intP1
   (pset_union (pset_singleton c) (pset_singleton a))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2923-3005 *)
Lemma sort4_3_impl_po_13 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  (valid alloc b).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 2923-3005 *)
Lemma sort4_3_impl_po_14 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (Pre47: (valid alloc b)),
  (valid alloc d).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 3076-3108 *)
Lemma sort4_3_impl_po_15 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (Pre47: (valid alloc b)),
  forall (Pre48: (valid alloc d)),
  forall (Test8: (acc intP2 b) > (acc intP2 d)),
  forall (tmp4: Z),
  forall (Post26: tmp4 = (acc intP2 b)),
  forall (Pre43: (valid alloc d)),
  forall (aux_8: Z),
  forall (Post29: aux_8 = (acc intP2 d)),
  forall (Pre41: (valid alloc b)),
  forall (intP3: ((memory) Z)),
  forall (Post78: intP3 = (upd intP2 b aux_8)),
  (forall (intP:((memory) Z)),
   (intP = (upd intP3 d tmp4) ->
    (swap_ord (acc intP b) (acc intP d) (acc intP2 b) (acc intP2 d)) /\
    (not_assigns alloc intP2 intP
     (pset_union (pset_singleton d) (pset_singleton b))))) /\
  (valid alloc d).
Proof.
intuition.
subst; caduceus.
apply assigns_trans with intP3.
red; subst; intuition.
generalize (unchanged_union_elim2 _ _ _ H16).
intro.
generalize (unchanged_pointer_elim _ _ H17).
intro; caduceus.
red; subst; intuition.
generalize (unchanged_union_elim1 _ _ _ H16).
intro.
generalize (unchanged_pointer_elim _ _ H17).
intro; caduceus.
Save.

(* Why obligation from file "why/sort.why", characters 3167-3167 *)
Lemma sort4_3_impl_po_16 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (Pre47: (valid alloc b)),
  forall (Pre48: (valid alloc d)),
  forall (Test7: (acc intP2 b) <= (acc intP2 d)),
  forall (result3: unit),
  forall (Post25: result3 = tt),
  (swap_ord (acc intP2 b) (acc intP2 d) (acc intP2 b) (acc intP2 d)) /\
  (not_assigns alloc intP2 intP2
   (pset_union (pset_singleton d) (pset_singleton b))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 3385-3467 *)
Lemma sort4_3_impl_po_17 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (intP3: ((memory) Z)),
  forall (Post74: (swap_ord (acc intP3 b) (acc intP3 d) (acc intP2 b)
                   (acc intP2 d)) /\
                  (not_assigns alloc intP2 intP3
                   (pset_union (pset_singleton d) (pset_singleton b)))),
  (valid alloc b).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 3385-3467 *)
Lemma sort4_3_impl_po_18 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (intP3: ((memory) Z)),
  forall (Post74: (swap_ord (acc intP3 b) (acc intP3 d) (acc intP2 b)
                   (acc intP2 d)) /\
                  (not_assigns alloc intP2 intP3
                   (pset_union (pset_singleton d) (pset_singleton b)))),
  forall (Pre59: (valid alloc b)),
  (valid alloc c).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 3538-3570 *)
Lemma sort4_3_impl_po_19 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (intP3: ((memory) Z)),
  forall (Post74: (swap_ord (acc intP3 b) (acc intP3 d) (acc intP2 b)
                   (acc intP2 d)) /\
                  (not_assigns alloc intP2 intP3
                   (pset_union (pset_singleton d) (pset_singleton b)))),
  forall (Pre59: (valid alloc b)),
  forall (Pre60: (valid alloc c)),
  forall (Test10: (acc intP3 b) > (acc intP3 c)),
  forall (tmp5: Z),
  forall (Post34: tmp5 = (acc intP3 b)),
  forall (Pre55: (valid alloc c)),
  forall (aux_10: Z),
  forall (Post37: aux_10 = (acc intP3 c)),
  forall (Pre53: (valid alloc b)),
  forall (intP4: ((memory) Z)),
  forall (Post86: intP4 = (upd intP3 b aux_10)),
  (forall (intP:((memory) Z)),
   (intP = (upd intP4 c tmp5) ->
    (swap_ord (acc intP b) (acc intP c) (acc intP3 b) (acc intP3 c)) /\
    (not_assigns alloc intP3 intP
     (pset_union (pset_singleton c) (pset_singleton b))))) /\
  (valid alloc c).
Proof.
intuition.
subst; caduceus.
apply assigns_trans with intP4.
red; subst; intuition.
generalize (unchanged_union_elim2 _ _ _ H18).
intro.
generalize (unchanged_pointer_elim _ _ H19).
intro; caduceus.
red; subst; intuition.
generalize (unchanged_union_elim1 _ _ _ H18).
intro.
generalize (unchanged_pointer_elim _ _ H19).
intro; caduceus.
Save.

(* Why obligation from file "why/sort.why", characters 3629-3629 *)
Lemma sort4_3_impl_po_20 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (intP3: ((memory) Z)),
  forall (Post74: (swap_ord (acc intP3 b) (acc intP3 d) (acc intP2 b)
                   (acc intP2 d)) /\
                  (not_assigns alloc intP2 intP3
                   (pset_union (pset_singleton d) (pset_singleton b)))),
  forall (Pre59: (valid alloc b)),
  forall (Pre60: (valid alloc c)),
  forall (Test9: (acc intP3 b) <= (acc intP3 c)),
  forall (result4: unit),
  forall (Post33: result4 = tt),
  (swap_ord (acc intP3 b) (acc intP3 c) (acc intP3 b) (acc intP3 c)) /\
  (not_assigns alloc intP3 intP3
   (pset_union (pset_singleton c) (pset_singleton b))).
Proof.
intuition.
Save.

(* Why obligation from file "why/sort.why", characters 1493-3826 *)
Lemma sort4_3_impl_po_21 : 
  forall (a: pointer),
  forall (b: pointer),
  forall (c: pointer),
  forall (d: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre61: (((((((((valid alloc a) /\ (valid alloc b)) /\
                 (valid alloc c)) /\ (valid alloc d)) /\ ~(a = b)) /\
                 ~(a = c)) /\ ~(a = d)) /\ ~(b = c)) /\ ~(b = d)) /\ 
                 ~(c = d)),
  forall (intP0: ((memory) Z)),
  forall (Post50: (swap_ord (acc intP0 a) (acc intP0 b) (acc intP a)
                   (acc intP b)) /\
                  (not_assigns alloc intP intP0
                   (pset_union (pset_singleton b) (pset_singleton a)))),
  forall (intP1: ((memory) Z)),
  forall (Post58: (swap_ord (acc intP1 c) (acc intP1 d) (acc intP0 c)
                   (acc intP0 d)) /\
                  (not_assigns alloc intP0 intP1
                   (pset_union (pset_singleton d) (pset_singleton c)))),
  forall (intP2: ((memory) Z)),
  forall (Post66: (swap_ord (acc intP2 a) (acc intP2 c) (acc intP1 a)
                   (acc intP1 c)) /\
                  (not_assigns alloc intP1 intP2
                   (pset_union (pset_singleton c) (pset_singleton a)))),
  forall (intP3: ((memory) Z)),
  forall (Post74: (swap_ord (acc intP3 b) (acc intP3 d) (acc intP2 b)
                   (acc intP2 d)) /\
                  (not_assigns alloc intP2 intP3
                   (pset_union (pset_singleton d) (pset_singleton b)))),
  forall (intP4: ((memory) Z)),
  forall (Post82: (swap_ord (acc intP4 b) (acc intP4 c) (acc intP3 b)
                   (acc intP3 c)) /\
                  (not_assigns alloc intP3 intP4
                   (pset_union (pset_singleton c) (pset_singleton b)))),
  ((acc intP4 a) <= (acc intP4 b) /\ (acc intP4 b) <= (acc intP4 c)) /\
  (acc intP4 c) <= (acc intP4 d).
Proof.
intuition.

Save.

(* Why obligation from file "why/sort.why", characters 4140-4237 *)
Lemma sort4_4_impl_po_1 : 
  forall (t: pointer),
  forall (alloc: alloc_table),
  forall (Pre66: (valid_range alloc t 0 4)),
  (valid alloc t).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sort.why", characters 4140-4237 *)
Lemma sort4_4_impl_po_2 : 
  forall (t: pointer),
  forall (alloc: alloc_table),
  forall (Pre66: (valid_range alloc t 0 4)),
  forall (Pre11: (valid alloc t)),
  (valid alloc (shift t 1)).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sort.why", characters 4308-4353 *)
Lemma sort4_4_impl_po_3 : 
  forall (t: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre66: (valid_range alloc t 0 4)),
  forall (Pre11: (valid alloc t)),
  forall (Pre13: (valid alloc (shift t 1))),
  forall (Test2: (acc intP t) > (acc intP (shift t 1))),
  forall (tmp1: Z),
  forall (Post2: tmp1 = (acc intP t)),
  forall (Pre7: (valid alloc (shift t 1))),
  forall (aux_4: Z),
  forall (Post5: aux_4 = (acc intP (shift t 1))),
  forall (Pre4: (valid alloc t)),
  forall (intP0: ((memory) Z)),
  forall (Post60: intP0 = (upd intP t aux_4)),
  (forall (result:pointer),
   (result = (shift t 1) ->
    (forall (intP:((memory) Z)),
     (intP = (upd intP0 result tmp1) ->
      (((((((acc intP (shift t 2)) > (acc intP (shift t 3)) ->
            (forall (tmp:Z),
             (tmp = (acc intP (shift t 2)) ->
              (forall (result:pointer),
               (result = (shift t 2) ->
                ((forall (result0:Z),
                  (result0 = (acc intP (shift t 3)) ->
                   (forall (intP0:((memory) Z)),
                    (intP0 = (upd intP result result0) ->
                     (forall (result:pointer),
                      (result = (shift t 3) ->
                       (forall (intP:((memory) Z)),
                        (intP = (upd intP0 result tmp) ->
                         ((((((acc intP t) > (acc intP (shift t 2)) ->
                              (forall (tmp:Z),
                               (tmp = (acc intP t) ->
                                ((forall (result:Z),
                                  (result = (acc intP (shift t 2)) ->
                                   (forall (intP0:((memory) Z)),
                                    (intP0 = (upd intP t result) ->
                                     (forall (result:pointer),
                                      (result = (shift t 2) ->
                                       (forall (intP:((memory) Z)),
                                        (intP = (upd intP0 result tmp) ->
                                         (((((((acc intP (shift t 1)) >
                                               (acc intP (shift t 3)) ->
                                               (forall (tmp:Z),
                                                (tmp = (acc intP (shift t 1)) ->
                                                 (forall (result:pointer),
                                                  (result = (shift t 1) ->
                                                   ((forall (result0:Z),
                                                     (result0 = (acc intP
                                                                 (shift t 3)) ->
                                                      (forall (intP0:((memory) Z)),
                                                       (intP0 = (upd intP
                                                                 result
                                                                 result0) ->
                                                        (forall (result:pointer),
                                                         (result = (shift t 3) ->
                                                          (forall (intP:((memory) Z)),
                                                           (intP = (upd intP0
                                                                    result
                                                                    tmp) ->
                                                            (((((((acc intP
                                                                   (shift t 1)) >
                                                                  (acc intP
                                                                   (shift t 2)) ->
                                                                  (forall (tmp:Z),
                                                                   (tmp = (
                                                                    acc intP
                                                                    (
                                                                    shift t 1)) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift t 1) ->
                                                                    ((
                                                                    forall (result0:Z),
                                                                    (
                                                                    result0 = (
                                                                    acc intP
                                                                    (
                                                                    shift t 2)) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result
                                                                    result0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift t 2) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result
                                                                    tmp) ->
                                                                    ((
                                                                    acc intP
                                                                    t) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 1)) /\
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 1)) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 2))) /\
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 2)) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 3)))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    (
                                                                    shift t 2))) /\
                                                                    (
                                                                    valid alloc
                                                                    (
                                                                    shift t 2)))))))) /\
                                                            (((acc intP
                                                               (shift t 1)) <=
                                                              (acc intP
                                                               (shift t 2)) ->
                                                              (forall (result:unit),
                                                               (result = tt ->
                                                                ((acc intP t) <=
                                                                (acc intP
                                                                 (shift t 1)) /\
                                                                (acc intP
                                                                 (shift t 1)) <=
                                                                (acc intP
                                                                 (shift t 2))) /\
                                                                (acc intP
                                                                 (shift t 2)) <=
                                                                (acc intP
                                                                 (shift t 3))))))) /\
                                                            (valid alloc
                                                             (shift t 1))) /\
                                                            (valid alloc
                                                             (shift t 1))) /\
                                                            (valid alloc
                                                             (shift t 2))) /\
                                                            (valid alloc
                                                             (shift t 2)))) /\
                                                          (valid alloc result))))) /\
                                                      (valid alloc result))) /\
                                                   (valid alloc (shift t 3))) /\
                                                   (valid alloc (shift t 3)))))))) /\
                                         (((acc intP (shift t 1)) <=
                                           (acc intP (shift t 3)) ->
                                           (forall (result:unit),
                                            (result = tt ->
                                             (((((((acc intP (shift t 1)) >
                                                   (acc intP (shift t 2)) ->
                                                   (forall (tmp:Z),
                                                    (tmp = (acc intP
                                                            (shift t 1)) ->
                                                     (forall (result:pointer),
                                                      (result = (shift t 1) ->
                                                       ((forall (result0:Z),
                                                         (result0 = (
                                                          acc intP
                                                          (shift t 2)) ->
                                                          (forall (intP0:((memory) Z)),
                                                           (intP0 = (
                                                            upd intP result
                                                            result0) ->
                                                            (forall (result:pointer),
                                                             (result = (
                                                              shift t 2) ->
                                                              (forall (intP:((memory) Z)),
                                                               (intP = (
                                                                upd intP0
                                                                result tmp) ->
                                                                ((acc intP t) <=
                                                                (acc intP
                                                                 (shift t 1)) /\
                                                                (acc intP
                                                                 (shift t 1)) <=
                                                                (acc intP
                                                                 (shift t 2))) /\
                                                                (acc intP
                                                                 (shift t 2)) <=
                                                                (acc intP
                                                                 (shift t 3)))) /\
                                                              (valid alloc
                                                               result))))) /\
                                                          (valid alloc result))) /\
                                                       (valid alloc
                                                        (shift t 2))) /\
                                                       (valid alloc
                                                        (shift t 2)))))))) /\
                                             (((acc intP (shift t 1)) <=
                                               (acc intP (shift t 2)) ->
                                               (forall (result:unit),
                                                (result = tt ->
                                                 ((acc intP t) <=
                                                 (acc intP (shift t 1)) /\
                                                 (acc intP (shift t 1)) <=
                                                 (acc intP (shift t 2))) /\
                                                 (acc intP (shift t 2)) <=
                                                 (acc intP (shift t 3))))))) /\
                                             (valid alloc (shift t 1))) /\
                                             (valid alloc (shift t 1))) /\
                                             (valid alloc (shift t 2))) /\
                                             (valid alloc (shift t 2))))))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 3))) /\
                                         (valid alloc (shift t 3)))) /\
                                       (valid alloc result))))) /\
                                   (valid alloc t))) /\
                                (valid alloc (shift t 2))) /\
                                (valid alloc (shift t 2)))))) /\
                         (((acc intP t) <= (acc intP (shift t 2)) ->
                           (forall (result:unit),
                            (result = tt ->
                             (((((((acc intP (shift t 1)) >
                                   (acc intP (shift t 3)) ->
                                   (forall (tmp:Z),
                                    (tmp = (acc intP (shift t 1)) ->
                                     (forall (result:pointer),
                                      (result = (shift t 1) ->
                                       ((forall (result0:Z),
                                         (result0 = (acc intP (shift t 3)) ->
                                          (forall (intP0:((memory) Z)),
                                           (intP0 = (upd intP result result0) ->
                                            (forall (result:pointer),
                                             (result = (shift t 3) ->
                                              (forall (intP:((memory) Z)),
                                               (intP = (upd intP0 result tmp) ->
                                                (((((((acc intP (shift t 1)) >
                                                      (acc intP (shift t 2)) ->
                                                      (forall (tmp:Z),
                                                       (tmp = (acc intP
                                                               (shift t 1)) ->
                                                        (forall (result:pointer),
                                                         (result = (shift t 1) ->
                                                          ((forall (result0:Z),
                                                            (result0 = (
                                                             acc intP
                                                             (shift t 2)) ->
                                                             (forall (intP0:((memory) Z)),
                                                              (intP0 = (
                                                               upd intP
                                                               result result0) ->
                                                               (forall (result:pointer),
                                                                (result = (
                                                                 shift t 2) ->
                                                                 (forall (intP:((memory) Z)),
                                                                  (intP = (
                                                                   upd intP0
                                                                   result tmp) ->
                                                                   ((
                                                                   acc intP t) <=
                                                                   (acc intP
                                                                    (
                                                                    shift t 1)) /\
                                                                   (acc intP
                                                                    (
                                                                    shift t 1)) <=
                                                                   (acc intP
                                                                    (
                                                                    shift t 2))) /\
                                                                   (acc intP
                                                                    (
                                                                    shift t 2)) <=
                                                                   (acc intP
                                                                    (
                                                                    shift t 3)))) /\
                                                                 (valid alloc
                                                                  result))))) /\
                                                             (valid alloc
                                                              result))) /\
                                                          (valid alloc
                                                           (shift t 2))) /\
                                                          (valid alloc
                                                           (shift t 2)))))))) /\
                                                (((acc intP (shift t 1)) <=
                                                  (acc intP (shift t 2)) ->
                                                  (forall (result:unit),
                                                   (result = tt ->
                                                    ((acc intP t) <=
                                                    (acc intP (shift t 1)) /\
                                                    (acc intP (shift t 1)) <=
                                                    (acc intP (shift t 2))) /\
                                                    (acc intP (shift t 2)) <=
                                                    (acc intP (shift t 3))))))) /\
                                                (valid alloc (shift t 1))) /\
                                                (valid alloc (shift t 1))) /\
                                                (valid alloc (shift t 2))) /\
                                                (valid alloc (shift t 2)))) /\
                                              (valid alloc result))))) /\
                                          (valid alloc result))) /\
                                       (valid alloc (shift t 3))) /\
                                       (valid alloc (shift t 3)))))))) /\
                             (((acc intP (shift t 1)) <=
                               (acc intP (shift t 3)) ->
                               (forall (result:unit),
                                (result = tt ->
                                 (((((((acc intP (shift t 1)) >
                                       (acc intP (shift t 2)) ->
                                       (forall (tmp:Z),
                                        (tmp = (acc intP (shift t 1)) ->
                                         (forall (result:pointer),
                                          (result = (shift t 1) ->
                                           ((forall (result0:Z),
                                             (result0 = (acc intP (shift t 2)) ->
                                              (forall (intP0:((memory) Z)),
                                               (intP0 = (upd intP result
                                                         result0) ->
                                                (forall (result:pointer),
                                                 (result = (shift t 2) ->
                                                  (forall (intP:((memory) Z)),
                                                   (intP = (upd intP0 result
                                                            tmp) ->
                                                    ((acc intP t) <=
                                                    (acc intP (shift t 1)) /\
                                                    (acc intP (shift t 1)) <=
                                                    (acc intP (shift t 2))) /\
                                                    (acc intP (shift t 2)) <=
                                                    (acc intP (shift t 3)))) /\
                                                  (valid alloc result))))) /\
                                              (valid alloc result))) /\
                                           (valid alloc (shift t 2))) /\
                                           (valid alloc (shift t 2)))))))) /\
                                 (((acc intP (shift t 1)) <=
                                   (acc intP (shift t 2)) ->
                                   (forall (result:unit),
                                    (result = tt -> ((acc intP t) <=
                                     (acc intP (shift t 1)) /\
                                     (acc intP (shift t 1)) <=
                                     (acc intP (shift t 2))) /\
                                     (acc intP (shift t 2)) <=
                                     (acc intP (shift t 3))))))) /\
                                 (valid alloc (shift t 1))) /\
                                 (valid alloc (shift t 1))) /\
                                 (valid alloc (shift t 2))) /\
                                 (valid alloc (shift t 2))))))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 3))) /\
                             (valid alloc (shift t 3))))))) /\
                         (valid alloc t)) /\ (valid alloc (shift t 2))) /\
                         (valid alloc (shift t 2)))) /\
                       (valid alloc result))))) /\
                   (valid alloc result))) /\
                (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)))))))) /\
      (((acc intP (shift t 2)) <= (acc intP (shift t 3)) ->
        (forall (result:unit),
         (result = tt ->
          ((((((acc intP t) > (acc intP (shift t 2)) ->
               (forall (tmp:Z),
                (tmp = (acc intP t) ->
                 ((forall (result:Z),
                   (result = (acc intP (shift t 2)) ->
                    (forall (intP0:((memory) Z)),
                     (intP0 = (upd intP t result) ->
                      (forall (result:pointer),
                       (result = (shift t 2) ->
                        (forall (intP:((memory) Z)),
                         (intP = (upd intP0 result tmp) ->
                          (((((((acc intP (shift t 1)) >
                                (acc intP (shift t 3)) ->
                                (forall (tmp:Z),
                                 (tmp = (acc intP (shift t 1)) ->
                                  (forall (result:pointer),
                                   (result = (shift t 1) ->
                                    ((forall (result0:Z),
                                      (result0 = (acc intP (shift t 3)) ->
                                       (forall (intP0:((memory) Z)),
                                        (intP0 = (upd intP result result0) ->
                                         (forall (result:pointer),
                                          (result = (shift t 3) ->
                                           (forall (intP:((memory) Z)),
                                            (intP = (upd intP0 result tmp) ->
                                             (((((((acc intP (shift t 1)) >
                                                   (acc intP (shift t 2)) ->
                                                   (forall (tmp:Z),
                                                    (tmp = (acc intP
                                                            (shift t 1)) ->
                                                     (forall (result:pointer),
                                                      (result = (shift t 1) ->
                                                       ((forall (result0:Z),
                                                         (result0 = (
                                                          acc intP
                                                          (shift t 2)) ->
                                                          (forall (intP0:((memory) Z)),
                                                           (intP0 = (
                                                            upd intP result
                                                            result0) ->
                                                            (forall (result:pointer),
                                                             (result = (
                                                              shift t 2) ->
                                                              (forall (intP:((memory) Z)),
                                                               (intP = (
                                                                upd intP0
                                                                result tmp) ->
                                                                ((acc intP t) <=
                                                                (acc intP
                                                                 (shift t 1)) /\
                                                                (acc intP
                                                                 (shift t 1)) <=
                                                                (acc intP
                                                                 (shift t 2))) /\
                                                                (acc intP
                                                                 (shift t 2)) <=
                                                                (acc intP
                                                                 (shift t 3)))) /\
                                                              (valid alloc
                                                               result))))) /\
                                                          (valid alloc result))) /\
                                                       (valid alloc
                                                        (shift t 2))) /\
                                                       (valid alloc
                                                        (shift t 2)))))))) /\
                                             (((acc intP (shift t 1)) <=
                                               (acc intP (shift t 2)) ->
                                               (forall (result:unit),
                                                (result = tt ->
                                                 ((acc intP t) <=
                                                 (acc intP (shift t 1)) /\
                                                 (acc intP (shift t 1)) <=
                                                 (acc intP (shift t 2))) /\
                                                 (acc intP (shift t 2)) <=
                                                 (acc intP (shift t 3))))))) /\
                                             (valid alloc (shift t 1))) /\
                                             (valid alloc (shift t 1))) /\
                                             (valid alloc (shift t 2))) /\
                                             (valid alloc (shift t 2)))) /\
                                           (valid alloc result))))) /\
                                       (valid alloc result))) /\
                                    (valid alloc (shift t 3))) /\
                                    (valid alloc (shift t 3)))))))) /\
                          (((acc intP (shift t 1)) <=
                            (acc intP (shift t 3)) ->
                            (forall (result:unit),
                             (result = tt ->
                              (((((((acc intP (shift t 1)) >
                                    (acc intP (shift t 2)) ->
                                    (forall (tmp:Z),
                                     (tmp = (acc intP (shift t 1)) ->
                                      (forall (result:pointer),
                                       (result = (shift t 1) ->
                                        ((forall (result0:Z),
                                          (result0 = (acc intP (shift t 2)) ->
                                           (forall (intP0:((memory) Z)),
                                            (intP0 = (upd intP result result0) ->
                                             (forall (result:pointer),
                                              (result = (shift t 2) ->
                                               (forall (intP:((memory) Z)),
                                                (intP = (upd intP0 result tmp) ->
                                                 ((acc intP t) <=
                                                 (acc intP (shift t 1)) /\
                                                 (acc intP (shift t 1)) <=
                                                 (acc intP (shift t 2))) /\
                                                 (acc intP (shift t 2)) <=
                                                 (acc intP (shift t 3)))) /\
                                               (valid alloc result))))) /\
                                           (valid alloc result))) /\
                                        (valid alloc (shift t 2))) /\
                                        (valid alloc (shift t 2)))))))) /\
                              (((acc intP (shift t 1)) <=
                                (acc intP (shift t 2)) ->
                                (forall (result:unit),
                                 (result = tt -> ((acc intP t) <=
                                  (acc intP (shift t 1)) /\
                                  (acc intP (shift t 1)) <=
                                  (acc intP (shift t 2))) /\
                                  (acc intP (shift t 2)) <=
                                  (acc intP (shift t 3))))))) /\
                              (valid alloc (shift t 1))) /\
                              (valid alloc (shift t 1))) /\
                              (valid alloc (shift t 2))) /\
                              (valid alloc (shift t 2))))))) /\
                          (valid alloc (shift t 1))) /\
                          (valid alloc (shift t 1))) /\
                          (valid alloc (shift t 3))) /\
                          (valid alloc (shift t 3)))) /\
                        (valid alloc result))))) /\
                    (valid alloc t))) /\
                 (valid alloc (shift t 2))) /\ (valid alloc (shift t 2)))))) /\
          (((acc intP t) <= (acc intP (shift t 2)) ->
            (forall (result:unit),
             (result = tt ->
              (((((((acc intP (shift t 1)) > (acc intP (shift t 3)) ->
                    (forall (tmp:Z),
                     (tmp = (acc intP (shift t 1)) ->
                      (forall (result:pointer),
                       (result = (shift t 1) ->
                        ((forall (result0:Z),
                          (result0 = (acc intP (shift t 3)) ->
                           (forall (intP0:((memory) Z)),
                            (intP0 = (upd intP result result0) ->
                             (forall (result:pointer),
                              (result = (shift t 3) ->
                               (forall (intP:((memory) Z)),
                                (intP = (upd intP0 result tmp) ->
                                 (((((((acc intP (shift t 1)) >
                                       (acc intP (shift t 2)) ->
                                       (forall (tmp:Z),
                                        (tmp = (acc intP (shift t 1)) ->
                                         (forall (result:pointer),
                                          (result = (shift t 1) ->
                                           ((forall (result0:Z),
                                             (result0 = (acc intP (shift t 2)) ->
                                              (forall (intP0:((memory) Z)),
                                               (intP0 = (upd intP result
                                                         result0) ->
                                                (forall (result:pointer),
                                                 (result = (shift t 2) ->
                                                  (forall (intP:((memory) Z)),
                                                   (intP = (upd intP0 result
                                                            tmp) ->
                                                    ((acc intP t) <=
                                                    (acc intP (shift t 1)) /\
                                                    (acc intP (shift t 1)) <=
                                                    (acc intP (shift t 2))) /\
                                                    (acc intP (shift t 2)) <=
                                                    (acc intP (shift t 3)))) /\
                                                  (valid alloc result))))) /\
                                              (valid alloc result))) /\
                                           (valid alloc (shift t 2))) /\
                                           (valid alloc (shift t 2)))))))) /\
                                 (((acc intP (shift t 1)) <=
                                   (acc intP (shift t 2)) ->
                                   (forall (result:unit),
                                    (result = tt -> ((acc intP t) <=
                                     (acc intP (shift t 1)) /\
                                     (acc intP (shift t 1)) <=
                                     (acc intP (shift t 2))) /\
                                     (acc intP (shift t 2)) <=
                                     (acc intP (shift t 3))))))) /\
                                 (valid alloc (shift t 1))) /\
                                 (valid alloc (shift t 1))) /\
                                 (valid alloc (shift t 2))) /\
                                 (valid alloc (shift t 2)))) /\
                               (valid alloc result))))) /\
                           (valid alloc result))) /\
                        (valid alloc (shift t 3))) /\
                        (valid alloc (shift t 3)))))))) /\
              (((acc intP (shift t 1)) <= (acc intP (shift t 3)) ->
                (forall (result:unit),
                 (result = tt ->
                  (((((((acc intP (shift t 1)) > (acc intP (shift t 2)) ->
                        (forall (tmp:Z),
                         (tmp = (acc intP (shift t 1)) ->
                          (forall (result:pointer),
                           (result = (shift t 1) ->
                            ((forall (result0:Z),
                              (result0 = (acc intP (shift t 2)) ->
                               (forall (intP0:((memory) Z)),
                                (intP0 = (upd intP result result0) ->
                                 (forall (result:pointer),
                                  (result = (shift t 2) ->
                                   (forall (intP:((memory) Z)),
                                    (intP = (upd intP0 result tmp) ->
                                     ((acc intP t) <=
                                     (acc intP (shift t 1)) /\
                                     (acc intP (shift t 1)) <=
                                     (acc intP (shift t 2))) /\
                                     (acc intP (shift t 2)) <=
                                     (acc intP (shift t 3)))) /\
                                   (valid alloc result))))) /\
                               (valid alloc result))) /\
                            (valid alloc (shift t 2))) /\
                            (valid alloc (shift t 2)))))))) /\
                  (((acc intP (shift t 1)) <= (acc intP (shift t 2)) ->
                    (forall (result:unit),
                     (result = tt -> ((acc intP t) <=
                      (acc intP (shift t 1)) /\ (acc intP (shift t 1)) <=
                      (acc intP (shift t 2))) /\ (acc intP (shift t 2)) <=
                      (acc intP (shift t 3))))))) /\
                  (valid alloc (shift t 1))) /\ (valid alloc (shift t 1))) /\
                  (valid alloc (shift t 2))) /\ (valid alloc (shift t 2))))))) /\
              (valid alloc (shift t 1))) /\ (valid alloc (shift t 1))) /\
              (valid alloc (shift t 3))) /\ (valid alloc (shift t 3))))))) /\
          (valid alloc t)) /\ (valid alloc (shift t 2))) /\
          (valid alloc (shift t 2))))))) /\
      (valid alloc (shift t 2))) /\ (valid alloc (shift t 2))) /\
      (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)))) /\
    (valid alloc result))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sort.why", characters 4458-4458 *)
Lemma sort4_4_impl_po_4 : 
  forall (t: pointer),
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (Pre66: (valid_range alloc t 0 4)),
  forall (Pre11: (valid alloc t)),
  forall (Pre13: (valid alloc (shift t 1))),
  forall (Test1: (acc intP t) <= (acc intP (shift t 1))),
  forall (result0: unit),
  forall (Post1: result0 = tt),
  (((((((acc intP (shift t 2)) > (acc intP (shift t 3)) ->
        (forall (tmp:Z),
         (tmp = (acc intP (shift t 2)) ->
          (forall (result:pointer),
           (result = (shift t 2) ->
            ((forall (result0:Z),
              (result0 = (acc intP (shift t 3)) ->
               (forall (intP0:((memory) Z)),
                (intP0 = (upd intP result result0) ->
                 (forall (result:pointer),
                  (result = (shift t 3) ->
                   (forall (intP:((memory) Z)),
                    (intP = (upd intP0 result tmp) ->
                     ((((((acc intP t) > (acc intP (shift t 2)) ->
                          (forall (tmp:Z),
                           (tmp = (acc intP t) ->
                            ((forall (result:Z),
                              (result = (acc intP (shift t 2)) ->
                               (forall (intP0:((memory) Z)),
                                (intP0 = (upd intP t result) ->
                                 (forall (result:pointer),
                                  (result = (shift t 2) ->
                                   (forall (intP:((memory) Z)),
                                    (intP = (upd intP0 result tmp) ->
                                     (((((((acc intP (shift t 1)) >
                                           (acc intP (shift t 3)) ->
                                           (forall (tmp:Z),
                                            (tmp = (acc intP (shift t 1)) ->
                                             (forall (result:pointer),
                                              (result = (shift t 1) ->
                                               ((forall (result0:Z),
                                                 (result0 = (acc intP
                                                             (shift t 3)) ->
                                                  (forall (intP0:((memory) Z)),
                                                   (intP0 = (upd intP result
                                                             result0) ->
                                                    (forall (result:pointer),
                                                     (result = (shift t 3) ->
                                                      (forall (intP:((memory) Z)),
                                                       (intP = (upd intP0
                                                                result tmp) ->
                                                        (((((((acc intP
                                                               (shift t 1)) >
                                                              (acc intP
                                                               (shift t 2)) ->
                                                              (forall (tmp:Z),
                                                               (tmp = (
                                                                acc intP
                                                                (shift t 1)) ->
                                                                (forall (result:pointer),
                                                                 (result = (
                                                                  shift t 1) ->
                                                                  ((forall (result0:Z),
                                                                    (
                                                                    result0 = (
                                                                    acc intP
                                                                    (
                                                                    shift t 2)) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result
                                                                    result0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift t 2) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result
                                                                    tmp) ->
                                                                    ((
                                                                    acc intP
                                                                    t) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 1)) /\
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 1)) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 2))) /\
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 2)) <=
                                                                    (
                                                                    acc intP
                                                                    (
                                                                    shift t 3)))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                  (valid alloc
                                                                   (shift t 2))) /\
                                                                  (valid alloc
                                                                   (shift t 2)))))))) /\
                                                        (((acc intP
                                                           (shift t 1)) <=
                                                          (acc intP
                                                           (shift t 2)) ->
                                                          (forall (result:unit),
                                                           (result = tt ->
                                                            ((acc intP t) <=
                                                            (acc intP
                                                             (shift t 1)) /\
                                                            (acc intP
                                                             (shift t 1)) <=
                                                            (acc intP
                                                             (shift t 2))) /\
                                                            (acc intP
                                                             (shift t 2)) <=
                                                            (acc intP
                                                             (shift t 3))))))) /\
                                                        (valid alloc
                                                         (shift t 1))) /\
                                                        (valid alloc
                                                         (shift t 1))) /\
                                                        (valid alloc
                                                         (shift t 2))) /\
                                                        (valid alloc
                                                         (shift t 2)))) /\
                                                      (valid alloc result))))) /\
                                                  (valid alloc result))) /\
                                               (valid alloc (shift t 3))) /\
                                               (valid alloc (shift t 3)))))))) /\
                                     (((acc intP (shift t 1)) <=
                                       (acc intP (shift t 3)) ->
                                       (forall (result:unit),
                                        (result = tt ->
                                         (((((((acc intP (shift t 1)) >
                                               (acc intP (shift t 2)) ->
                                               (forall (tmp:Z),
                                                (tmp = (acc intP (shift t 1)) ->
                                                 (forall (result:pointer),
                                                  (result = (shift t 1) ->
                                                   ((forall (result0:Z),
                                                     (result0 = (acc intP
                                                                 (shift t 2)) ->
                                                      (forall (intP0:((memory) Z)),
                                                       (intP0 = (upd intP
                                                                 result
                                                                 result0) ->
                                                        (forall (result:pointer),
                                                         (result = (shift t 2) ->
                                                          (forall (intP:((memory) Z)),
                                                           (intP = (upd intP0
                                                                    result
                                                                    tmp) ->
                                                            ((acc intP t) <=
                                                            (acc intP
                                                             (shift t 1)) /\
                                                            (acc intP
                                                             (shift t 1)) <=
                                                            (acc intP
                                                             (shift t 2))) /\
                                                            (acc intP
                                                             (shift t 2)) <=
                                                            (acc intP
                                                             (shift t 3)))) /\
                                                          (valid alloc result))))) /\
                                                      (valid alloc result))) /\
                                                   (valid alloc (shift t 2))) /\
                                                   (valid alloc (shift t 2)))))))) /\
                                         (((acc intP (shift t 1)) <=
                                           (acc intP (shift t 2)) ->
                                           (forall (result:unit),
                                            (result = tt -> ((acc intP t) <=
                                             (acc intP (shift t 1)) /\
                                             (acc intP (shift t 1)) <=
                                             (acc intP (shift t 2))) /\
                                             (acc intP (shift t 2)) <=
                                             (acc intP (shift t 3))))))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 2))) /\
                                         (valid alloc (shift t 2))))))) /\
                                     (valid alloc (shift t 1))) /\
                                     (valid alloc (shift t 1))) /\
                                     (valid alloc (shift t 3))) /\
                                     (valid alloc (shift t 3)))) /\
                                   (valid alloc result))))) /\
                               (valid alloc t))) /\
                            (valid alloc (shift t 2))) /\
                            (valid alloc (shift t 2)))))) /\
                     (((acc intP t) <= (acc intP (shift t 2)) ->
                       (forall (result:unit),
                        (result = tt ->
                         (((((((acc intP (shift t 1)) >
                               (acc intP (shift t 3)) ->
                               (forall (tmp:Z),
                                (tmp = (acc intP (shift t 1)) ->
                                 (forall (result:pointer),
                                  (result = (shift t 1) ->
                                   ((forall (result0:Z),
                                     (result0 = (acc intP (shift t 3)) ->
                                      (forall (intP0:((memory) Z)),
                                       (intP0 = (upd intP result result0) ->
                                        (forall (result:pointer),
                                         (result = (shift t 3) ->
                                          (forall (intP:((memory) Z)),
                                           (intP = (upd intP0 result tmp) ->
                                            (((((((acc intP (shift t 1)) >
                                                  (acc intP (shift t 2)) ->
                                                  (forall (tmp:Z),
                                                   (tmp = (acc intP
                                                           (shift t 1)) ->
                                                    (forall (result:pointer),
                                                     (result = (shift t 1) ->
                                                      ((forall (result0:Z),
                                                        (result0 = (acc intP
                                                                    (
                                                                    shift t 2)) ->
                                                         (forall (intP0:((memory) Z)),
                                                          (intP0 = (upd intP
                                                                    result
                                                                    result0) ->
                                                           (forall (result:pointer),
                                                            (result = (
                                                             shift t 2) ->
                                                             (forall (intP:((memory) Z)),
                                                              (intP = (
                                                               upd intP0
                                                               result tmp) ->
                                                               ((acc intP t) <=
                                                               (acc intP
                                                                (shift t 1)) /\
                                                               (acc intP
                                                                (shift t 1)) <=
                                                               (acc intP
                                                                (shift t 2))) /\
                                                               (acc intP
                                                                (shift t 2)) <=
                                                               (acc intP
                                                                (shift t 3)))) /\
                                                             (valid alloc
                                                              result))))) /\
                                                         (valid alloc result))) /\
                                                      (valid alloc
                                                       (shift t 2))) /\
                                                      (valid alloc
                                                       (shift t 2)))))))) /\
                                            (((acc intP (shift t 1)) <=
                                              (acc intP (shift t 2)) ->
                                              (forall (result:unit),
                                               (result = tt ->
                                                ((acc intP t) <=
                                                (acc intP (shift t 1)) /\
                                                (acc intP (shift t 1)) <=
                                                (acc intP (shift t 2))) /\
                                                (acc intP (shift t 2)) <=
                                                (acc intP (shift t 3))))))) /\
                                            (valid alloc (shift t 1))) /\
                                            (valid alloc (shift t 1))) /\
                                            (valid alloc (shift t 2))) /\
                                            (valid alloc (shift t 2)))) /\
                                          (valid alloc result))))) /\
                                      (valid alloc result))) /\
                                   (valid alloc (shift t 3))) /\
                                   (valid alloc (shift t 3)))))))) /\
                         (((acc intP (shift t 1)) <=
                           (acc intP (shift t 3)) ->
                           (forall (result:unit),
                            (result = tt ->
                             (((((((acc intP (shift t 1)) >
                                   (acc intP (shift t 2)) ->
                                   (forall (tmp:Z),
                                    (tmp = (acc intP (shift t 1)) ->
                                     (forall (result:pointer),
                                      (result = (shift t 1) ->
                                       ((forall (result0:Z),
                                         (result0 = (acc intP (shift t 2)) ->
                                          (forall (intP0:((memory) Z)),
                                           (intP0 = (upd intP result result0) ->
                                            (forall (result:pointer),
                                             (result = (shift t 2) ->
                                              (forall (intP:((memory) Z)),
                                               (intP = (upd intP0 result tmp) ->
                                                ((acc intP t) <=
                                                (acc intP (shift t 1)) /\
                                                (acc intP (shift t 1)) <=
                                                (acc intP (shift t 2))) /\
                                                (acc intP (shift t 2)) <=
                                                (acc intP (shift t 3)))) /\
                                              (valid alloc result))))) /\
                                          (valid alloc result))) /\
                                       (valid alloc (shift t 2))) /\
                                       (valid alloc (shift t 2)))))))) /\
                             (((acc intP (shift t 1)) <=
                               (acc intP (shift t 2)) ->
                               (forall (result:unit),
                                (result = tt -> ((acc intP t) <=
                                 (acc intP (shift t 1)) /\
                                 (acc intP (shift t 1)) <=
                                 (acc intP (shift t 2))) /\
                                 (acc intP (shift t 2)) <=
                                 (acc intP (shift t 3))))))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 2))) /\
                             (valid alloc (shift t 2))))))) /\
                         (valid alloc (shift t 1))) /\
                         (valid alloc (shift t 1))) /\
                         (valid alloc (shift t 3))) /\
                         (valid alloc (shift t 3))))))) /\
                     (valid alloc t)) /\ (valid alloc (shift t 2))) /\
                     (valid alloc (shift t 2)))) /\
                   (valid alloc result))))) /\
               (valid alloc result))) /\
            (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)))))))) /\
  (((acc intP (shift t 2)) <= (acc intP (shift t 3)) ->
    (forall (result:unit),
     (result = tt ->
      ((((((acc intP t) > (acc intP (shift t 2)) ->
           (forall (tmp:Z),
            (tmp = (acc intP t) ->
             ((forall (result:Z),
               (result = (acc intP (shift t 2)) ->
                (forall (intP0:((memory) Z)),
                 (intP0 = (upd intP t result) ->
                  (forall (result:pointer),
                   (result = (shift t 2) ->
                    (forall (intP:((memory) Z)),
                     (intP = (upd intP0 result tmp) ->
                      (((((((acc intP (shift t 1)) >
                            (acc intP (shift t 3)) ->
                            (forall (tmp:Z),
                             (tmp = (acc intP (shift t 1)) ->
                              (forall (result:pointer),
                               (result = (shift t 1) ->
                                ((forall (result0:Z),
                                  (result0 = (acc intP (shift t 3)) ->
                                   (forall (intP0:((memory) Z)),
                                    (intP0 = (upd intP result result0) ->
                                     (forall (result:pointer),
                                      (result = (shift t 3) ->
                                       (forall (intP:((memory) Z)),
                                        (intP = (upd intP0 result tmp) ->
                                         (((((((acc intP (shift t 1)) >
                                               (acc intP (shift t 2)) ->
                                               (forall (tmp:Z),
                                                (tmp = (acc intP (shift t 1)) ->
                                                 (forall (result:pointer),
                                                  (result = (shift t 1) ->
                                                   ((forall (result0:Z),
                                                     (result0 = (acc intP
                                                                 (shift t 2)) ->
                                                      (forall (intP0:((memory) Z)),
                                                       (intP0 = (upd intP
                                                                 result
                                                                 result0) ->
                                                        (forall (result:pointer),
                                                         (result = (shift t 2) ->
                                                          (forall (intP:((memory) Z)),
                                                           (intP = (upd intP0
                                                                    result
                                                                    tmp) ->
                                                            ((acc intP t) <=
                                                            (acc intP
                                                             (shift t 1)) /\
                                                            (acc intP
                                                             (shift t 1)) <=
                                                            (acc intP
                                                             (shift t 2))) /\
                                                            (acc intP
                                                             (shift t 2)) <=
                                                            (acc intP
                                                             (shift t 3)))) /\
                                                          (valid alloc result))))) /\
                                                      (valid alloc result))) /\
                                                   (valid alloc (shift t 2))) /\
                                                   (valid alloc (shift t 2)))))))) /\
                                         (((acc intP (shift t 1)) <=
                                           (acc intP (shift t 2)) ->
                                           (forall (result:unit),
                                            (result = tt -> ((acc intP t) <=
                                             (acc intP (shift t 1)) /\
                                             (acc intP (shift t 1)) <=
                                             (acc intP (shift t 2))) /\
                                             (acc intP (shift t 2)) <=
                                             (acc intP (shift t 3))))))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 1))) /\
                                         (valid alloc (shift t 2))) /\
                                         (valid alloc (shift t 2)))) /\
                                       (valid alloc result))))) /\
                                   (valid alloc result))) /\
                                (valid alloc (shift t 3))) /\
                                (valid alloc (shift t 3)))))))) /\
                      (((acc intP (shift t 1)) <= (acc intP (shift t 3)) ->
                        (forall (result:unit),
                         (result = tt ->
                          (((((((acc intP (shift t 1)) >
                                (acc intP (shift t 2)) ->
                                (forall (tmp:Z),
                                 (tmp = (acc intP (shift t 1)) ->
                                  (forall (result:pointer),
                                   (result = (shift t 1) ->
                                    ((forall (result0:Z),
                                      (result0 = (acc intP (shift t 2)) ->
                                       (forall (intP0:((memory) Z)),
                                        (intP0 = (upd intP result result0) ->
                                         (forall (result:pointer),
                                          (result = (shift t 2) ->
                                           (forall (intP:((memory) Z)),
                                            (intP = (upd intP0 result tmp) ->
                                             ((acc intP t) <=
                                             (acc intP (shift t 1)) /\
                                             (acc intP (shift t 1)) <=
                                             (acc intP (shift t 2))) /\
                                             (acc intP (shift t 2)) <=
                                             (acc intP (shift t 3)))) /\
                                           (valid alloc result))))) /\
                                       (valid alloc result))) /\
                                    (valid alloc (shift t 2))) /\
                                    (valid alloc (shift t 2)))))))) /\
                          (((acc intP (shift t 1)) <=
                            (acc intP (shift t 2)) ->
                            (forall (result:unit),
                             (result = tt -> ((acc intP t) <=
                              (acc intP (shift t 1)) /\
                              (acc intP (shift t 1)) <=
                              (acc intP (shift t 2))) /\
                              (acc intP (shift t 2)) <=
                              (acc intP (shift t 3))))))) /\
                          (valid alloc (shift t 1))) /\
                          (valid alloc (shift t 1))) /\
                          (valid alloc (shift t 2))) /\
                          (valid alloc (shift t 2))))))) /\
                      (valid alloc (shift t 1))) /\
                      (valid alloc (shift t 1))) /\
                      (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)))) /\
                    (valid alloc result))))) /\
                (valid alloc t))) /\
             (valid alloc (shift t 2))) /\ (valid alloc (shift t 2)))))) /\
      (((acc intP t) <= (acc intP (shift t 2)) ->
        (forall (result:unit),
         (result = tt ->
          (((((((acc intP (shift t 1)) > (acc intP (shift t 3)) ->
                (forall (tmp:Z),
                 (tmp = (acc intP (shift t 1)) ->
                  (forall (result:pointer),
                   (result = (shift t 1) ->
                    ((forall (result0:Z),
                      (result0 = (acc intP (shift t 3)) ->
                       (forall (intP0:((memory) Z)),
                        (intP0 = (upd intP result result0) ->
                         (forall (result:pointer),
                          (result = (shift t 3) ->
                           (forall (intP:((memory) Z)),
                            (intP = (upd intP0 result tmp) ->
                             (((((((acc intP (shift t 1)) >
                                   (acc intP (shift t 2)) ->
                                   (forall (tmp:Z),
                                    (tmp = (acc intP (shift t 1)) ->
                                     (forall (result:pointer),
                                      (result = (shift t 1) ->
                                       ((forall (result0:Z),
                                         (result0 = (acc intP (shift t 2)) ->
                                          (forall (intP0:((memory) Z)),
                                           (intP0 = (upd intP result result0) ->
                                            (forall (result:pointer),
                                             (result = (shift t 2) ->
                                              (forall (intP:((memory) Z)),
                                               (intP = (upd intP0 result tmp) ->
                                                ((acc intP t) <=
                                                (acc intP (shift t 1)) /\
                                                (acc intP (shift t 1)) <=
                                                (acc intP (shift t 2))) /\
                                                (acc intP (shift t 2)) <=
                                                (acc intP (shift t 3)))) /\
                                              (valid alloc result))))) /\
                                          (valid alloc result))) /\
                                       (valid alloc (shift t 2))) /\
                                       (valid alloc (shift t 2)))))))) /\
                             (((acc intP (shift t 1)) <=
                               (acc intP (shift t 2)) ->
                               (forall (result:unit),
                                (result = tt -> ((acc intP t) <=
                                 (acc intP (shift t 1)) /\
                                 (acc intP (shift t 1)) <=
                                 (acc intP (shift t 2))) /\
                                 (acc intP (shift t 2)) <=
                                 (acc intP (shift t 3))))))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 1))) /\
                             (valid alloc (shift t 2))) /\
                             (valid alloc (shift t 2)))) /\
                           (valid alloc result))))) /\
                       (valid alloc result))) /\
                    (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)))))))) /\
          (((acc intP (shift t 1)) <= (acc intP (shift t 3)) ->
            (forall (result:unit),
             (result = tt ->
              (((((((acc intP (shift t 1)) > (acc intP (shift t 2)) ->
                    (forall (tmp:Z),
                     (tmp = (acc intP (shift t 1)) ->
                      (forall (result:pointer),
                       (result = (shift t 1) ->
                        ((forall (result0:Z),
                          (result0 = (acc intP (shift t 2)) ->
                           (forall (intP0:((memory) Z)),
                            (intP0 = (upd intP result result0) ->
                             (forall (result:pointer),
                              (result = (shift t 2) ->
                               (forall (intP:((memory) Z)),
                                (intP = (upd intP0 result tmp) ->
                                 ((acc intP t) <= (acc intP (shift t 1)) /\
                                 (acc intP (shift t 1)) <=
                                 (acc intP (shift t 2))) /\
                                 (acc intP (shift t 2)) <=
                                 (acc intP (shift t 3)))) /\
                               (valid alloc result))))) /\
                           (valid alloc result))) /\
                        (valid alloc (shift t 2))) /\
                        (valid alloc (shift t 2)))))))) /\
              (((acc intP (shift t 1)) <= (acc intP (shift t 2)) ->
                (forall (result:unit),
                 (result = tt -> ((acc intP t) <= (acc intP (shift t 1)) /\
                  (acc intP (shift t 1)) <= (acc intP (shift t 2))) /\
                  (acc intP (shift t 2)) <= (acc intP (shift t 3))))))) /\
              (valid alloc (shift t 1))) /\ (valid alloc (shift t 1))) /\
              (valid alloc (shift t 2))) /\ (valid alloc (shift t 2))))))) /\
          (valid alloc (shift t 1))) /\ (valid alloc (shift t 1))) /\
          (valid alloc (shift t 3))) /\ (valid alloc (shift t 3))))))) /\
      (valid alloc t)) /\ (valid alloc (shift t 2))) /\
      (valid alloc (shift t 2))))))) /\
  (valid alloc (shift t 2))) /\ (valid alloc (shift t 2))) /\
  (valid alloc (shift t 3))) /\ (valid alloc (shift t 3)).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

