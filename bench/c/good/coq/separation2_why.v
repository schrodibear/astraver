(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export caduceus_spec_why.

(* Why obligation from file "why/separation2.why", characters 4756-4771 *)
Lemma f_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre13: ((((forall (x:pointer),
                     (((x = u \/ x = v) \/ x = w) \/ x = m ->
                      (((((valid alloc x) /\ (valid alloc (acc p1 x))) /\
                      (valid alloc (acc p2 x))) /\
                      (valid_range alloc (acc p1 x) 0 5)) /\
                      (valid_range alloc (acc p2 x) 0 5)) /\
                      (valid alloc (acc pp1 x)))) /\
                 (valid alloc (acc pp2 u2))) /\
                 (valid alloc (acc pp2 v2_0))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))) /\
                 (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                 (separation_w_v alloc p1 p2 v w) /\
                 (separation_u2_w alloc p1 p2 w u2) /\
                 (valid_range alloc u 0 1) /\
                 (separation_w_u alloc p1 p2 u w) /\
                 (separation_u2_v alloc p1 p2 v u2) /\
                 (separation_u2_u alloc p1 p2 u u2) /\
                 (valid_range alloc m 0 1) /\
                 (separation_u2_m alloc p1 p2 m u2) /\
                 (separation_v2_u2 u2 v2_0) /\
                 (separation_m_w alloc p1 p2 w m) /\
                 (separation_m_v alloc p1 p2 v m) /\
                 (separation_m_u alloc p1 p2 u m) /\
                 (separation_v2_w alloc p1 p2 w v2_0) /\
                 (separation_v2_v alloc p1 p2 v v2_0) /\
                 (separation_v2_u alloc p1 p2 u v2_0) /\
                 (separation_v2_m alloc p1 p2 m v2_0) /\
                 (valid_range alloc v2_0 0 1) /\
                 (separation_v_u alloc p1 p2 u v) /\
                 (valid_range alloc u2 0 1)),
  ((((((valid alloc u) /\ (valid alloc (acc p1 u))) /\
  (valid alloc (acc p2 u))) /\ (valid alloc (acc pp1 u))) /\
  (valid_range alloc (acc p1 u) 0 5)) /\
  (valid_range alloc (acc p2 u) 0 5)) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
    ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
    ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
     ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
     ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y)))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 4777-4792 *)
Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v1: ((memory) Z)),
  forall (v2: ((memory) Z)),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre13: ((((forall (x:pointer),
                     (((x = u \/ x = v) \/ x = w) \/ x = m ->
                      (((((valid alloc x) /\ (valid alloc (acc p1 x))) /\
                      (valid alloc (acc p2 x))) /\
                      (valid_range alloc (acc p1 x) 0 5)) /\
                      (valid_range alloc (acc p2 x) 0 5)) /\
                      (valid alloc (acc pp1 x)))) /\
                 (valid alloc (acc pp2 u2))) /\
                 (valid alloc (acc pp2 v2_0))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))) /\
                 (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                 (separation_w_v alloc p1 p2 v w) /\
                 (separation_u2_w alloc p1 p2 w u2) /\
                 (valid_range alloc u 0 1) /\
                 (separation_w_u alloc p1 p2 u w) /\
                 (separation_u2_v alloc p1 p2 v u2) /\
                 (separation_u2_u alloc p1 p2 u u2) /\
                 (valid_range alloc m 0 1) /\
                 (separation_u2_m alloc p1 p2 m u2) /\
                 (separation_v2_u2 u2 v2_0) /\
                 (separation_m_w alloc p1 p2 w m) /\
                 (separation_m_v alloc p1 p2 v m) /\
                 (separation_m_u alloc p1 p2 u m) /\
                 (separation_v2_w alloc p1 p2 w v2_0) /\
                 (separation_v2_v alloc p1 p2 v v2_0) /\
                 (separation_v2_u alloc p1 p2 u v2_0) /\
                 (separation_v2_m alloc p1 p2 m v2_0) /\
                 (valid_range alloc v2_0 0 1) /\
                 (separation_v_u alloc p1 p2 u v) /\
                 (valid_range alloc u2 0 1)),
  forall (Pre12: ((((((valid alloc u) /\ (valid alloc (acc p1 u))) /\
                 (valid alloc (acc p2 u))) /\ (valid alloc (acc pp1 u))) /\
                 (valid_range alloc (acc p1 u) 0 5)) /\
                 (valid_range alloc (acc p2 u) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP0: ((memory) Z)),
  forall (v1_0: ((memory) Z)),
  forall (v2_1: ((memory) Z)),
  forall (Post5: (acc intP0 (shift (acc p1 u) 1)) <= (acc v1_0 u) /\
                 ((assigns alloc v2 v2_1 (pointer_loc u)) /\
                 (assigns alloc v1 v1_0 (pointer_loc u))) /\
                 (assigns alloc intP intP0
                  (union_loc (pointer_loc (acc pp1 u))
                   (union_loc (range_loc (acc p2 u) 0 5)
                    (range_loc (acc p1 u) 0 5))))),
  ((((((valid alloc v) /\ (valid alloc (acc p1 v))) /\
  (valid alloc (acc p2 v))) /\ (valid alloc (acc pp1 v))) /\
  (valid_range alloc (acc p1 v) 0 5)) /\
  (valid_range alloc (acc p2 v) 0 5)) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
    ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
    ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
     ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
     ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y)))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 4798-4813 *)
Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v1: ((memory) Z)),
  forall (v2: ((memory) Z)),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre13: ((((forall (x:pointer),
                     (((x = u \/ x = v) \/ x = w) \/ x = m ->
                      (((((valid alloc x) /\ (valid alloc (acc p1 x))) /\
                      (valid alloc (acc p2 x))) /\
                      (valid_range alloc (acc p1 x) 0 5)) /\
                      (valid_range alloc (acc p2 x) 0 5)) /\
                      (valid alloc (acc pp1 x)))) /\
                 (valid alloc (acc pp2 u2))) /\
                 (valid alloc (acc pp2 v2_0))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))) /\
                 (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                 (separation_w_v alloc p1 p2 v w) /\
                 (separation_u2_w alloc p1 p2 w u2) /\
                 (valid_range alloc u 0 1) /\
                 (separation_w_u alloc p1 p2 u w) /\
                 (separation_u2_v alloc p1 p2 v u2) /\
                 (separation_u2_u alloc p1 p2 u u2) /\
                 (valid_range alloc m 0 1) /\
                 (separation_u2_m alloc p1 p2 m u2) /\
                 (separation_v2_u2 u2 v2_0) /\
                 (separation_m_w alloc p1 p2 w m) /\
                 (separation_m_v alloc p1 p2 v m) /\
                 (separation_m_u alloc p1 p2 u m) /\
                 (separation_v2_w alloc p1 p2 w v2_0) /\
                 (separation_v2_v alloc p1 p2 v v2_0) /\
                 (separation_v2_u alloc p1 p2 u v2_0) /\
                 (separation_v2_m alloc p1 p2 m v2_0) /\
                 (valid_range alloc v2_0 0 1) /\
                 (separation_v_u alloc p1 p2 u v) /\
                 (valid_range alloc u2 0 1)),
  forall (Pre12: ((((((valid alloc u) /\ (valid alloc (acc p1 u))) /\
                 (valid alloc (acc p2 u))) /\ (valid alloc (acc pp1 u))) /\
                 (valid_range alloc (acc p1 u) 0 5)) /\
                 (valid_range alloc (acc p2 u) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP0: ((memory) Z)),
  forall (v1_0: ((memory) Z)),
  forall (v2_1: ((memory) Z)),
  forall (Post5: (acc intP0 (shift (acc p1 u) 1)) <= (acc v1_0 u) /\
                 ((assigns alloc v2 v2_1 (pointer_loc u)) /\
                 (assigns alloc v1 v1_0 (pointer_loc u))) /\
                 (assigns alloc intP intP0
                  (union_loc (pointer_loc (acc pp1 u))
                   (union_loc (range_loc (acc p2 u) 0 5)
                    (range_loc (acc p1 u) 0 5))))),
  forall (Pre11: ((((((valid alloc v) /\ (valid alloc (acc p1 v))) /\
                 (valid alloc (acc p2 v))) /\ (valid alloc (acc pp1 v))) /\
                 (valid_range alloc (acc p1 v) 0 5)) /\
                 (valid_range alloc (acc p2 v) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP1: ((memory) Z)),
  forall (v1_1: ((memory) Z)),
  forall (v2_2: ((memory) Z)),
  forall (Post7: (acc intP1 (shift (acc p1 v) 1)) <= (acc v1_1 v) /\
                 ((assigns alloc v2_1 v2_2 (pointer_loc v)) /\
                 (assigns alloc v1_0 v1_1 (pointer_loc v))) /\
                 (assigns alloc intP0 intP1
                  (union_loc (pointer_loc (acc pp1 v))
                   (union_loc (range_loc (acc p2 v) 0 5)
                    (range_loc (acc p1 v) 0 5))))),
  ((((((valid alloc w) /\ (valid alloc (acc p1 w))) /\
  (valid alloc (acc p2 w))) /\ (valid alloc (acc pp1 w))) /\
  (valid_range alloc (acc p1 w) 0 5)) /\
  (valid_range alloc (acc p2 w) 0 5)) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
    ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
    ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
     ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
     ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y)))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 4819-4834 *)
Lemma f_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v1: ((memory) Z)),
  forall (v2: ((memory) Z)),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre13: ((((forall (x:pointer),
                     (((x = u \/ x = v) \/ x = w) \/ x = m ->
                      (((((valid alloc x) /\ (valid alloc (acc p1 x))) /\
                      (valid alloc (acc p2 x))) /\
                      (valid_range alloc (acc p1 x) 0 5)) /\
                      (valid_range alloc (acc p2 x) 0 5)) /\
                      (valid alloc (acc pp1 x)))) /\
                 (valid alloc (acc pp2 u2))) /\
                 (valid alloc (acc pp2 v2_0))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))) /\
                 (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                 (separation_w_v alloc p1 p2 v w) /\
                 (separation_u2_w alloc p1 p2 w u2) /\
                 (valid_range alloc u 0 1) /\
                 (separation_w_u alloc p1 p2 u w) /\
                 (separation_u2_v alloc p1 p2 v u2) /\
                 (separation_u2_u alloc p1 p2 u u2) /\
                 (valid_range alloc m 0 1) /\
                 (separation_u2_m alloc p1 p2 m u2) /\
                 (separation_v2_u2 u2 v2_0) /\
                 (separation_m_w alloc p1 p2 w m) /\
                 (separation_m_v alloc p1 p2 v m) /\
                 (separation_m_u alloc p1 p2 u m) /\
                 (separation_v2_w alloc p1 p2 w v2_0) /\
                 (separation_v2_v alloc p1 p2 v v2_0) /\
                 (separation_v2_u alloc p1 p2 u v2_0) /\
                 (separation_v2_m alloc p1 p2 m v2_0) /\
                 (valid_range alloc v2_0 0 1) /\
                 (separation_v_u alloc p1 p2 u v) /\
                 (valid_range alloc u2 0 1)),
  forall (Pre12: ((((((valid alloc u) /\ (valid alloc (acc p1 u))) /\
                 (valid alloc (acc p2 u))) /\ (valid alloc (acc pp1 u))) /\
                 (valid_range alloc (acc p1 u) 0 5)) /\
                 (valid_range alloc (acc p2 u) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP0: ((memory) Z)),
  forall (v1_0: ((memory) Z)),
  forall (v2_1: ((memory) Z)),
  forall (Post5: (acc intP0 (shift (acc p1 u) 1)) <= (acc v1_0 u) /\
                 ((assigns alloc v2 v2_1 (pointer_loc u)) /\
                 (assigns alloc v1 v1_0 (pointer_loc u))) /\
                 (assigns alloc intP intP0
                  (union_loc (pointer_loc (acc pp1 u))
                   (union_loc (range_loc (acc p2 u) 0 5)
                    (range_loc (acc p1 u) 0 5))))),
  forall (Pre11: ((((((valid alloc v) /\ (valid alloc (acc p1 v))) /\
                 (valid alloc (acc p2 v))) /\ (valid alloc (acc pp1 v))) /\
                 (valid_range alloc (acc p1 v) 0 5)) /\
                 (valid_range alloc (acc p2 v) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP1: ((memory) Z)),
  forall (v1_1: ((memory) Z)),
  forall (v2_2: ((memory) Z)),
  forall (Post7: (acc intP1 (shift (acc p1 v) 1)) <= (acc v1_1 v) /\
                 ((assigns alloc v2_1 v2_2 (pointer_loc v)) /\
                 (assigns alloc v1_0 v1_1 (pointer_loc v))) /\
                 (assigns alloc intP0 intP1
                  (union_loc (pointer_loc (acc pp1 v))
                   (union_loc (range_loc (acc p2 v) 0 5)
                    (range_loc (acc p1 v) 0 5))))),
  forall (Pre10: ((((((valid alloc w) /\ (valid alloc (acc p1 w))) /\
                 (valid alloc (acc p2 w))) /\ (valid alloc (acc pp1 w))) /\
                 (valid_range alloc (acc p1 w) 0 5)) /\
                 (valid_range alloc (acc p2 w) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP2: ((memory) Z)),
  forall (v1_2: ((memory) Z)),
  forall (v2_3: ((memory) Z)),
  forall (Post9: (acc intP2 (shift (acc p1 w) 1)) <= (acc v1_2 w) /\
                 ((assigns alloc v2_2 v2_3 (pointer_loc w)) /\
                 (assigns alloc v1_1 v1_2 (pointer_loc w))) /\
                 (assigns alloc intP1 intP2
                  (union_loc (pointer_loc (acc pp1 w))
                   (union_loc (range_loc (acc p2 w) 0 5)
                    (range_loc (acc p1 w) 0 5))))),
  ((((((valid alloc m) /\ (valid alloc (acc p1 m))) /\
  (valid alloc (acc p2 m))) /\ (valid alloc (acc pp1 m))) /\
  (valid_range alloc (acc p1 m) 0 5)) /\
  (valid_range alloc (acc p2 m) 0 5)) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
    ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
    ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
  (forall (x:pointer),
   (forall (y:pointer),
    (~(x = y) -> (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
     ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
     ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y)))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 35-6127 *)
Lemma f_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v1: ((memory) Z)),
  forall (v2: ((memory) Z)),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre13: ((((forall (x:pointer),
                     (((x = u \/ x = v) \/ x = w) \/ x = m ->
                      (((((valid alloc x) /\ (valid alloc (acc p1 x))) /\
                      (valid alloc (acc p2 x))) /\
                      (valid_range alloc (acc p1 x) 0 5)) /\
                      (valid_range alloc (acc p2 x) 0 5)) /\
                      (valid alloc (acc pp1 x)))) /\
                 (valid alloc (acc pp2 u2))) /\
                 (valid alloc (acc pp2 v2_0))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))) /\
                 (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                 (separation_w_v alloc p1 p2 v w) /\
                 (separation_u2_w alloc p1 p2 w u2) /\
                 (valid_range alloc u 0 1) /\
                 (separation_w_u alloc p1 p2 u w) /\
                 (separation_u2_v alloc p1 p2 v u2) /\
                 (separation_u2_u alloc p1 p2 u u2) /\
                 (valid_range alloc m 0 1) /\
                 (separation_u2_m alloc p1 p2 m u2) /\
                 (separation_v2_u2 u2 v2_0) /\
                 (separation_m_w alloc p1 p2 w m) /\
                 (separation_m_v alloc p1 p2 v m) /\
                 (separation_m_u alloc p1 p2 u m) /\
                 (separation_v2_w alloc p1 p2 w v2_0) /\
                 (separation_v2_v alloc p1 p2 v v2_0) /\
                 (separation_v2_u alloc p1 p2 u v2_0) /\
                 (separation_v2_m alloc p1 p2 m v2_0) /\
                 (valid_range alloc v2_0 0 1) /\
                 (separation_v_u alloc p1 p2 u v) /\
                 (valid_range alloc u2 0 1)),
  forall (Pre12: ((((((valid alloc u) /\ (valid alloc (acc p1 u))) /\
                 (valid alloc (acc p2 u))) /\ (valid alloc (acc pp1 u))) /\
                 (valid_range alloc (acc p1 u) 0 5)) /\
                 (valid_range alloc (acc p2 u) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP0: ((memory) Z)),
  forall (v1_0: ((memory) Z)),
  forall (v2_1: ((memory) Z)),
  forall (Post5: (acc intP0 (shift (acc p1 u) 1)) <= (acc v1_0 u) /\
                 ((assigns alloc v2 v2_1 (pointer_loc u)) /\
                 (assigns alloc v1 v1_0 (pointer_loc u))) /\
                 (assigns alloc intP intP0
                  (union_loc (pointer_loc (acc pp1 u))
                   (union_loc (range_loc (acc p2 u) 0 5)
                    (range_loc (acc p1 u) 0 5))))),
  forall (Pre11: ((((((valid alloc v) /\ (valid alloc (acc p1 v))) /\
                 (valid alloc (acc p2 v))) /\ (valid alloc (acc pp1 v))) /\
                 (valid_range alloc (acc p1 v) 0 5)) /\
                 (valid_range alloc (acc p2 v) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP1: ((memory) Z)),
  forall (v1_1: ((memory) Z)),
  forall (v2_2: ((memory) Z)),
  forall (Post7: (acc intP1 (shift (acc p1 v) 1)) <= (acc v1_1 v) /\
                 ((assigns alloc v2_1 v2_2 (pointer_loc v)) /\
                 (assigns alloc v1_0 v1_1 (pointer_loc v))) /\
                 (assigns alloc intP0 intP1
                  (union_loc (pointer_loc (acc pp1 v))
                   (union_loc (range_loc (acc p2 v) 0 5)
                    (range_loc (acc p1 v) 0 5))))),
  forall (Pre10: ((((((valid alloc w) /\ (valid alloc (acc p1 w))) /\
                 (valid alloc (acc p2 w))) /\ (valid alloc (acc pp1 w))) /\
                 (valid_range alloc (acc p1 w) 0 5)) /\
                 (valid_range alloc (acc p2 w) 0 5)) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                 (forall (x:pointer),
                  (forall (y:pointer),
                   (~(x = y) ->
                    (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                    ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                    ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP2: ((memory) Z)),
  forall (v1_2: ((memory) Z)),
  forall (v2_3: ((memory) Z)),
  forall (Post9: (acc intP2 (shift (acc p1 w) 1)) <= (acc v1_2 w) /\
                 ((assigns alloc v2_2 v2_3 (pointer_loc w)) /\
                 (assigns alloc v1_1 v1_2 (pointer_loc w))) /\
                 (assigns alloc intP1 intP2
                  (union_loc (pointer_loc (acc pp1 w))
                   (union_loc (range_loc (acc p2 w) 0 5)
                    (range_loc (acc p1 w) 0 5))))),
  forall (Pre9: ((((((valid alloc m) /\ (valid alloc (acc p1 m))) /\
                (valid alloc (acc p2 m))) /\ (valid alloc (acc pp1 m))) /\
                (valid_range alloc (acc p1 m) 0 5)) /\
                (valid_range alloc (acc p2 m) 0 5)) /\
                (forall (x:pointer),
                 (forall (y:pointer),
                  (~(x = y) ->
                   ~((base_addr (acc pp2 x)) = (base_addr (acc pp2 y)))))) /\
                (forall (x:pointer),
                 (forall (y:pointer),
                  (~((base_addr (acc p1 x)) = (base_addr (acc pp2 y))) /\
                  ~((base_addr (acc p2 x)) = (base_addr (acc pp2 y)))) /\
                  ~((base_addr (acc pp1 x)) = (base_addr (acc pp2 y))))) /\
                (forall (x:pointer),
                 (forall (y:pointer),
                  (~(x = y) ->
                   (~((base_addr (acc p1 x)) = (base_addr (acc pp1 y))) /\
                   ~((base_addr (acc p2 x)) = (base_addr (acc pp1 y)))) /\
                   ~((base_addr (acc pp1 x)) = (base_addr (acc pp1 y))))))),
  forall (intP3: ((memory) Z)),
  forall (v1_3: ((memory) Z)),
  forall (v2_4: ((memory) Z)),
  forall (Post11: (acc intP3 (shift (acc p1 m) 1)) <= (acc v1_3 m) /\
                  ((assigns alloc v2_3 v2_4 (pointer_loc m)) /\
                  (assigns alloc v1_2 v1_3 (pointer_loc m))) /\
                  (assigns alloc intP2 intP3
                   (union_loc (pointer_loc (acc pp1 m))
                    (union_loc (range_loc (acc p2 m) 0 5)
                     (range_loc (acc p1 m) 0 5))))),
  (forall (x:pointer),
   (exists i:Z,
    (((x = u \/ x = v) \/ x = w) \/ x = m ->
     (acc intP3 (shift (acc p1 x) i)) <= (acc v1_3 x)))) /\
  ((assigns alloc v2 v2_4
    (union_loc (pointer_loc m)
     (union_loc (pointer_loc w) (union_loc (pointer_loc v) (pointer_loc u))))) /\
  (assigns alloc v1 v1_3
   (union_loc (pointer_loc m)
    (union_loc (pointer_loc w) (union_loc (pointer_loc v) (pointer_loc u)))))) /\
  (assigns alloc intP intP3
   (union_loc (pointer_loc (acc pp2 v2_0))
    (union_loc (pointer_loc (acc pp2 u2))
     (union_loc (pointer_loc (acc pp1 m))
      (union_loc (range_loc (acc p2 m) 0 5)
       (union_loc (range_loc (acc p1 m) 0 5)
        (union_loc (pointer_loc (acc pp1 w))
         (union_loc (range_loc (acc p2 w) 0 5)
          (union_loc (range_loc (acc p1 w) 0 5)
           (union_loc (pointer_loc (acc pp1 v))
            (union_loc (range_loc (acc p2 v) 0 5)
             (union_loc (range_loc (acc p1 v) 0 5)
              (union_loc (pointer_loc (acc pp1 u))
               (union_loc (range_loc (acc p2 u) 0 5)
                (range_loc (acc p1 u) 0 5))))))))))))))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 9463-9476 *)
Lemma invariants_initially_established_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre203: (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                  (separation_w_v alloc p1 p2 v w) /\
                  (separation_u2_w alloc p1 p2 w u2) /\
                  (valid_range alloc u 0 1) /\
                  (separation_w_u alloc p1 p2 u w) /\
                  (separation_u2_v alloc p1 p2 v u2) /\
                  (separation_u2_u alloc p1 p2 u u2) /\
                  (valid_range alloc m 0 1) /\
                  (separation_u2_m alloc p1 p2 m u2) /\
                  (separation_v2_u2 u2 v2_0) /\
                  (separation_m_w alloc p1 p2 w m) /\
                  (separation_m_v alloc p1 p2 v m) /\
                  (separation_m_u alloc p1 p2 u m) /\
                  (separation_v2_w alloc p1 p2 w v2_0) /\
                  (separation_v2_v alloc p1 p2 v v2_0) /\
                  (separation_v2_u alloc p1 p2 u v2_0) /\
                  (separation_v2_m alloc p1 p2 m v2_0) /\
                  (valid_range alloc v2_0 0 1) /\
                  (separation_v_u alloc p1 p2 u v) /\
                  (valid_range alloc u2 0 1)),
  (valid alloc u).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 9481-9509 *)
Lemma invariants_initially_established_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre203: (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                  (separation_w_v alloc p1 p2 v w) /\
                  (separation_u2_w alloc p1 p2 w u2) /\
                  (valid_range alloc u 0 1) /\
                  (separation_w_u alloc p1 p2 u w) /\
                  (separation_u2_v alloc p1 p2 v u2) /\
                  (separation_u2_u alloc p1 p2 u u2) /\
                  (valid_range alloc m 0 1) /\
                  (separation_u2_m alloc p1 p2 m u2) /\
                  (separation_v2_u2 u2 v2_0) /\
                  (separation_m_w alloc p1 p2 w m) /\
                  (separation_m_v alloc p1 p2 v m) /\
                  (separation_m_u alloc p1 p2 u m) /\
                  (separation_v2_w alloc p1 p2 w v2_0) /\
                  (separation_v2_v alloc p1 p2 v v2_0) /\
                  (separation_v2_u alloc p1 p2 u v2_0) /\
                  (separation_v2_m alloc p1 p2 m v2_0) /\
                  (valid_range alloc v2_0 0 1) /\
                  (separation_v_u alloc p1 p2 u v) /\
                  (valid_range alloc u2 0 1)),
  forall (Pre4: (valid alloc u)),
  forall (caduceus_86: pointer),
  forall (Post3: caduceus_86 = (acc p1 u)),
  (valid alloc caduceus_86).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation2.why", characters 9445-9509 *)
Lemma invariants_initially_established_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (intP: ((memory) Z)),
  forall (m: pointer),
  forall (p1: ((memory) pointer)),
  forall (p2: ((memory) pointer)),
  forall (pp1: ((memory) pointer)),
  forall (pp2: ((memory) pointer)),
  forall (u: pointer),
  forall (u2: pointer),
  forall (v: pointer),
  forall (v1: ((memory) Z)),
  forall (v2: ((memory) Z)),
  forall (v2_0: pointer),
  forall (w: pointer),
  forall (Pre203: (valid_range alloc w 0 1) /\ (valid_range alloc v 0 1) /\
                  (separation_w_v alloc p1 p2 v w) /\
                  (separation_u2_w alloc p1 p2 w u2) /\
                  (valid_range alloc u 0 1) /\
                  (separation_w_u alloc p1 p2 u w) /\
                  (separation_u2_v alloc p1 p2 v u2) /\
                  (separation_u2_u alloc p1 p2 u u2) /\
                  (valid_range alloc m 0 1) /\
                  (separation_u2_m alloc p1 p2 m u2) /\
                  (separation_v2_u2 u2 v2_0) /\
                  (separation_m_w alloc p1 p2 w m) /\
                  (separation_m_v alloc p1 p2 v m) /\
                  (separation_m_u alloc p1 p2 u m) /\
                  (separation_v2_w alloc p1 p2 w v2_0) /\
                  (separation_v2_v alloc p1 p2 v v2_0) /\
                  (separation_v2_u alloc p1 p2 u v2_0) /\
                  (separation_v2_m alloc p1 p2 m v2_0) /\
                  (valid_range alloc v2_0 0 1) /\
                  (separation_v_u alloc p1 p2 u v) /\
                  (valid_range alloc u2 0 1)),
  forall (Pre4: (valid alloc u)),
  forall (caduceus_86: pointer),
  forall (Post3: caduceus_86 = (acc p1 u)),
  forall (Pre3: (valid alloc caduceus_86)),
  forall (intP0: ((memory) Z)),
  forall (Post163: intP0 = (upd intP caduceus_86 0)),
  (forall (result:pointer),
   (result = (shift (acc p1 u) 1) ->
    (forall (intP:((memory) Z)),
     (intP = (upd intP0 result 0) ->
      (forall (result:pointer),
       (result = (shift (acc p1 u) 2) ->
        (forall (intP0:((memory) Z)),
         (intP0 = (upd intP result 0) ->
          (forall (result:pointer),
           (result = (shift (acc p1 u) 3) ->
            (forall (intP:((memory) Z)),
             (intP = (upd intP0 result 0) ->
              (forall (result:pointer),
               (result = (shift (acc p1 u) 4) ->
                (forall (intP0:((memory) Z)),
                 (intP0 = (upd intP result 0) ->
                  (forall (result:pointer),
                   (result = (acc p2 u) ->
                    (forall (intP:((memory) Z)),
                     (intP = (upd intP0 result 0) ->
                      (forall (result:pointer),
                       (result = (shift (acc p2 u) 1) ->
                        (forall (intP0:((memory) Z)),
                         (intP0 = (upd intP result 0) ->
                          (forall (result:pointer),
                           (result = (shift (acc p2 u) 2) ->
                            (forall (intP:((memory) Z)),
                             (intP = (upd intP0 result 0) ->
                              (forall (result:pointer),
                               (result = (shift (acc p2 u) 3) ->
                                (forall (intP0:((memory) Z)),
                                 (intP0 = (upd intP result 0) ->
                                  (forall (result:pointer),
                                   (result = (shift (acc p2 u) 4) ->
                                    (forall (intP:((memory) Z)),
                                     (intP = (upd intP0 result 0) ->
                                      (forall (result:pointer),
                                       (result = u ->
                                        (forall (v1_0:((memory) Z)),
                                         (v1_0 = (upd v1 result 0) ->
                                          (forall (result:pointer),
                                           (result = u ->
                                            (forall (v2_1:((memory) Z)),
                                             (v2_1 = (upd v2 result 0) ->
                                              (forall (result:pointer),
                                               (result = u ->
                                                (forall (pp1_0:((memory) pointer)),
                                                 (pp1_0 = (upd pp1 result
                                                           null) ->
                                                  (forall (result:pointer),
                                                   (result = (acc p1 v) ->
                                                    (forall (intP0:((memory) Z)),
                                                     (intP0 = (upd intP
                                                               result 0) ->
                                                      (forall (result:pointer),
                                                       (result = (shift (
                                                                  acc p1 v) 1) ->
                                                        (forall (intP:((memory) Z)),
                                                         (intP = (upd intP0
                                                                  result 0) ->
                                                          (forall (result:pointer),
                                                           (result = (
                                                            shift (acc p1 v)
                                                            2) ->
                                                            (forall (intP0:((memory) Z)),
                                                             (intP0 = (
                                                              upd intP result
                                                              0) ->
                                                              (forall (result:pointer),
                                                               (result = (
                                                                shift (
                                                                acc p1 v) 3) ->
                                                                (forall (intP:((memory) Z)),
                                                                 (intP = (
                                                                  upd intP0
                                                                  result 0) ->
                                                                  (forall (result:pointer),
                                                                   (result = (
                                                                    shift (
                                                                    acc p1 v)
                                                                    4) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    acc p2 v) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 v)
                                                                    1) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 v)
                                                                    2) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 v)
                                                                    3) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 v)
                                                                    4) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = v ->
                                                                    (
                                                                    forall (v1:((memory) Z)),
                                                                    (
                                                                    v1 = (
                                                                    upd v1_0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = v ->
                                                                    (
                                                                    forall (v2:((memory) Z)),
                                                                    (
                                                                    v2 = (
                                                                    upd v2_1
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = v ->
                                                                    (
                                                                    forall (pp1:((memory) pointer)),
                                                                    (
                                                                    pp1 = (
                                                                    upd pp1_0
                                                                    result
                                                                    null) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    acc p1 w) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 w)
                                                                    1) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 w)
                                                                    2) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 w)
                                                                    3) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 w)
                                                                    4) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    acc p2 w) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 w)
                                                                    1) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 w)
                                                                    2) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 w)
                                                                    3) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 w)
                                                                    4) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = w ->
                                                                    (
                                                                    forall (v1_0:((memory) Z)),
                                                                    (
                                                                    v1_0 = (
                                                                    upd v1
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = w ->
                                                                    (
                                                                    forall (v2_1:((memory) Z)),
                                                                    (
                                                                    v2_1 = (
                                                                    upd v2
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = w ->
                                                                    (
                                                                    forall (pp1_0:((memory) pointer)),
                                                                    (
                                                                    pp1_0 = (
                                                                    upd pp1
                                                                    result
                                                                    null) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    acc p1 m) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 m)
                                                                    1) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 m)
                                                                    2) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 m)
                                                                    3) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p1 m)
                                                                    4) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    acc p2 m) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 m)
                                                                    1) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 m)
                                                                    2) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 m)
                                                                    3) ->
                                                                    (
                                                                    forall (intP0:((memory) Z)),
                                                                    (
                                                                    intP0 = (
                                                                    upd intP
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = (
                                                                    shift (
                                                                    acc p2 m)
                                                                    4) ->
                                                                    (
                                                                    forall (intP:((memory) Z)),
                                                                    (
                                                                    intP = (
                                                                    upd intP0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = m ->
                                                                    (
                                                                    forall (v1:((memory) Z)),
                                                                    (
                                                                    v1 = (
                                                                    upd v1_0
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = m ->
                                                                    (
                                                                    forall (v2:((memory) Z)),
                                                                    (
                                                                    v2 = (
                                                                    upd v2_1
                                                                    result 0) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = m ->
                                                                    (
                                                                    forall (pp1:((memory) pointer)),
                                                                    (
                                                                    pp1 = (
                                                                    upd pp1_0
                                                                    result
                                                                    null) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = u2 ->
                                                                    (
                                                                    forall (pp2_0:((memory) pointer)),
                                                                    (
                                                                    pp2_0 = (
                                                                    upd pp2
                                                                    result
                                                                    null) ->
                                                                    (
                                                                    forall (result:pointer),
                                                                    (
                                                                    result = v2_0 ->
                                                                    (
                                                                    forall (pp2:((memory) pointer)),
                                                                    (
                                                                    pp2 = (
                                                                    upd pp2_0
                                                                    result
                                                                    null) ->
                                                                    (
                                                                    forall (x:pointer),
                                                                    (
                                                                    forall (y:pointer),
                                                                    (
                                                                    ~(x = y) ->
                                                                    (
                                                                    ~((
                                                                    base_addr (
                                                                    acc p1 x)) = (
                                                                    base_addr (
                                                                    acc pp1 y))) /\
                                                                    ~((
                                                                    base_addr (
                                                                    acc p2 x)) = (
                                                                    base_addr (
                                                                    acc pp1 y)))) /\
                                                                    ~((
                                                                    base_addr (
                                                                    acc pp1 x)) = (
                                                                    base_addr (
                                                                    acc pp1 y)))))) /\
                                                                    (
                                                                    forall (x:pointer),
                                                                    (
                                                                    forall (y:pointer),
                                                                    (
                                                                    ~((
                                                                    base_addr (
                                                                    acc p1 x)) = (
                                                                    base_addr (
                                                                    acc pp2 y))) /\
                                                                    ~((
                                                                    base_addr (
                                                                    acc p2 x)) = (
                                                                    base_addr (
                                                                    acc pp2 y)))) /\
                                                                    ~((
                                                                    base_addr (
                                                                    acc pp1 x)) = (
                                                                    base_addr (
                                                                    acc pp2 y))))) /\
                                                                    (
                                                                    forall (x:pointer),
                                                                    (
                                                                    forall (y:pointer),
                                                                    (
                                                                    ~(x = y) ->
                                                                    ~((
                                                                    base_addr (
                                                                    acc pp2 x)) = (
                                                                    base_addr (
                                                                    acc pp2 y)))))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    m))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    w))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    v))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    v))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    v))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    v))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                    (
                                                                    valid alloc
                                                                    v))) /\
                                                                    (
                                                                    valid alloc
                                                                    result))) /\
                                                                  (valid alloc
                                                                   v))) /\
                                                                (valid alloc
                                                                 result))) /\
                                                              (valid alloc v))) /\
                                                            (valid alloc
                                                             result))) /\
                                                          (valid alloc v))) /\
                                                        (valid alloc result))) /\
                                                      (valid alloc v))) /\
                                                    (valid alloc result))) /\
                                                  (valid alloc v))) /\
                                                (valid alloc result))))) /\
                                            (valid alloc result))))) /\
                                        (valid alloc result))))) /\
                                    (valid alloc result))) /\
                                  (valid alloc u))) /\
                                (valid alloc result))) /\
                              (valid alloc u))) /\
                            (valid alloc result))) /\
                          (valid alloc u))) /\
                        (valid alloc result))) /\
                      (valid alloc u))) /\
                    (valid alloc result))) /\
                  (valid alloc u))) /\
                (valid alloc result))) /\
              (valid alloc u))) /\
            (valid alloc result))) /\
          (valid alloc u))) /\
        (valid alloc result))) /\
      (valid alloc u))) /\
    (valid alloc result))) /\
  (valid alloc u).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

