(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export separation3_spec_why.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (l: pointer),
  forall (p: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (p0: ((memory) pointer)),
  forall (HW_5: p0 = (upd p l s0)),
  forall (result1: pointer),
  forall (HW_6: result1 = (acc p0 l)),
  forall (result2: pointer),
  forall (HW_7: result2 = (acc b result1)),
  forall (result3: pointer),
  forall (HW_8: result3 = (shift result2 2)),
  forall (result4: Z),
  forall (HW_9: result4 = (acc intP0 result3)),
  (* File \"separation3.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result4 = 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (l: pointer),
  forall (p: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (p0: ((memory) pointer)),
  forall (HW_5: p0 = (upd p l s0)),
  forall (result1: pointer),
  forall (HW_6: result1 = (acc p0 l)),
  forall (result2: pointer),
  forall (HW_7: result2 = (acc b result1)),
  forall (result3: pointer),
  forall (HW_8: result3 = (shift result2 2)),
  (valid alloc result3).
Proof.
intuition; subst.
unfold valid1_range in H8.
generalize (H4 s0 alloc Pre4); intuition.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (l: pointer),
  forall (p: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (p0: ((memory) pointer)),
  forall (HW_5: p0 = (upd p l s0)),
  forall (result1: pointer),
  forall (HW_6: result1 = (acc p0 l)),
  (valid alloc result1).
Proof.
intuition; subst; try caduceus.
valid.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (l: pointer),
  forall (p: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (p0: ((memory) pointer)),
  forall (HW_5: p0 = (upd p l s0)),
  (valid alloc l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (l: pointer),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  (valid alloc l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (l: pointer),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  (valid alloc result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (l: pointer),
  forall (s0: pointer),
  forall (HW_1: (valid1 b) /\ (valid_range alloc l 0 0) /\
                (valid_range alloc s0 0 0) /\
                (~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))) /\
                (valid1_range b 5)),
  (valid alloc s0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (result1: pointer),
  forall (HW_5: result1 = (acc c s0)),
  forall (result2: pointer),
  forall (HW_6: result2 = (shift result1 2)),
  forall (intP1: ((memory) Z)),
  forall (HW_7: intP1 = (upd intP0 result2 2)),
  forall (result3: pointer),
  forall (HW_8: result3 = (acc b s0)),
  forall (result4: pointer),
  forall (HW_9: result4 = (shift result3 2)),
  forall (result5: Z),
  forall (HW_10: result5 = (acc intP1 result4)),
  (* File \"separation3.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result5 = 1.
Proof.
intuition.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (result1: pointer),
  forall (HW_5: result1 = (acc c s0)),
  forall (result2: pointer),
  forall (HW_6: result2 = (shift result1 2)),
  forall (intP1: ((memory) Z)),
  forall (HW_7: intP1 = (upd intP0 result2 2)),
  forall (result3: pointer),
  forall (HW_8: result3 = (acc b s0)),
  forall (result4: pointer),
  forall (HW_9: result4 = (shift result3 2)),
  (valid alloc result4).
Proof.
intuition; subst.
generalize (H5 s0 alloc Pre4);
 intuition.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (result1: pointer),
  forall (HW_5: result1 = (acc c s0)),
  forall (result2: pointer),
  forall (HW_6: result2 = (shift result1 2)),
  forall (intP1: ((memory) Z)),
  forall (HW_7: intP1 = (upd intP0 result2 2)),
  (valid alloc s0).
Proof.
intuition; subst; caduceus; auto.
rewrite acc_upd_neq.
caduceus.
generalize (H2 s0 alloc Pre4).
intros;apply neq_base_addr_neq_shift;intuition.
generalize (neq_base_addr_neq_shift (s0#c) (s0#b) 2 2).
intuition.
generalize (H3 s0 alloc Pre4);  intuition.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_4 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  forall (result1: pointer),
  forall (HW_5: result1 = (acc c s0)),
  forall (result2: pointer),
  forall (HW_6: result2 = (shift result1 2)),
  (valid alloc result2).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (intP: ((memory) Z)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  forall (intP0: ((memory) Z)),
  forall (HW_4: intP0 = (upd intP result0 1)),
  (valid alloc s0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_6 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  forall (result: pointer),
  forall (HW_2: result = (acc b s0)),
  forall (result0: pointer),
  forall (HW_3: result0 = (shift result 2)),
  (valid alloc result0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_7 : 
  forall (alloc: alloc_table),
  forall (b: ((memory) pointer)),
  forall (c: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (valid1 c) /\ (valid1 b) /\ (valid_range alloc s0 0 0) /\
                (separation1 c b) /\ (valid1_range c 5) /\ (valid1_range b 5)),
  (valid alloc s0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (a: ((memory) Z)),
  forall (alloc: alloc_table),
  forall (l: pointer),
  forall (q: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (separation2 q q) /\ (valid_range alloc l 0 0) /\
                (valid1 q) /\ (valid_range alloc s0 0 0) /\
                ~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))),
  forall (a0: ((memory) Z)),
  forall (HW_2: a0 = (upd a s0 1)),
  forall (result: pointer),
  forall (HW_3: result = (acc q l)),
  forall (a1: ((memory) Z)),
  forall (HW_4: a1 = (upd a0 result 2)),
  forall (result0: Z),
  forall (HW_5: result0 = (acc a1 s0)),
  (* File \"separation3.c819618234.c1069824147.i\", line 0, characters 9-21 *)
  result0 = 1.
Proof.
intuition; subst; valid.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (a: ((memory) Z)),
  forall (alloc: alloc_table),
  forall (l: pointer),
  forall (q: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (separation2 q q) /\ (valid_range alloc l 0 0) /\
                (valid1 q) /\ (valid_range alloc s0 0 0) /\
                ~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))),
  forall (a0: ((memory) Z)),
  forall (HW_2: a0 = (upd a s0 1)),
  forall (result: pointer),
  forall (HW_3: result = (acc q l)),
  forall (a1: ((memory) Z)),
  forall (HW_4: a1 = (upd a0 result 2)),
  (valid alloc s0).
Proof.
intuition; subst; caduceus.
rewrite acc_upd_neq; caduceus.
rewrite <- (shift_zero (l#q)).
rewrite <- (shift_zero s0).
apply neq_base_addr_neq_shift.
auto.
red in H0.
apply H0.
apply valid_range_valid with 0 0;auto with *.
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_3 : 
  forall (a: ((memory) Z)),
  forall (alloc: alloc_table),
  forall (l: pointer),
  forall (q: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (separation2 q q) /\ (valid_range alloc l 0 0) /\
                (valid1 q) /\ (valid_range alloc s0 0 0) /\
                ~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))),
  forall (a0: ((memory) Z)),
  forall (HW_2: a0 = (upd a s0 1)),
  forall (result: pointer),
  forall (HW_3: result = (acc q l)),
  (valid alloc result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_4 : 
  forall (a: ((memory) Z)),
  forall (alloc: alloc_table),
  forall (l: pointer),
  forall (q: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (separation2 q q) /\ (valid_range alloc l 0 0) /\
                (valid1 q) /\ (valid_range alloc s0 0 0) /\
                ~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))),
  forall (a0: ((memory) Z)),
  forall (HW_2: a0 = (upd a s0 1)),
  (valid alloc l).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/separation3.why", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_5 : 
  forall (alloc: alloc_table),
  forall (l: pointer),
  forall (q: ((memory) pointer)),
  forall (s0: pointer),
  forall (HW_1: (separation2 q q) /\ (valid_range alloc l 0 0) /\
                (valid1 q) /\ (valid_range alloc s0 0 0) /\
                ~((base_addr l) = (base_addr s0)) /\
                (~((base_addr s0) = (base_addr (acc q l))) /\
                ~((base_addr s0) = (base_addr (acc r l)))) /\
                ~((base_addr l) = (base_addr (acc b s0))) /\
                ~((base_addr l) = (base_addr (acc c s0)))),
  (valid alloc s0).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

