(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export separation3_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (b_struct_S_3: ((memory) ((pointer) Z0) struct_S_3)),
  forall (int_Z0: ((memory) Z Z0)),
  forall (l: ((pointer) struct_L_12)),
  forall (p_struct_L_12: ((memory) ((pointer) struct_S_3) struct_L_12)),
  forall (s0: ((pointer) struct_S_3)),
  forall (HW_1: (valid alloc l) /\ (valid alloc s0) /\
                (valid1 b_struct_S_3) /\ (valid1_range b_struct_S_3 5)),
  forall (result: ((pointer) Z0)),
  forall (HW_2: result = (acc b_struct_S_3 s0)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 2)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result0 1)),
  forall (p_struct_L_12_0: ((memory) ((pointer) struct_S_3) struct_L_12)),
  forall (HW_5: p_struct_L_12_0 = (upd p_struct_L_12 l s0)),
  forall (result1: ((pointer) struct_S_3)),
  forall (HW_6: result1 = (acc p_struct_L_12_0 l)),
  (valid alloc result1).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (b_struct_S_3: ((memory) ((pointer) Z0) struct_S_3)),
  forall (int_Z0: ((memory) Z Z0)),
  forall (l: ((pointer) struct_L_12)),
  forall (p_struct_L_12: ((memory) ((pointer) struct_S_3) struct_L_12)),
  forall (s0: ((pointer) struct_S_3)),
  forall (HW_1: (valid alloc l) /\ (valid alloc s0) /\
                (valid1 b_struct_S_3) /\ (valid1_range b_struct_S_3 5)),
  forall (result: ((pointer) Z0)),
  forall (HW_2: result = (acc b_struct_S_3 s0)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 2)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result0 1)),
  forall (p_struct_L_12_0: ((memory) ((pointer) struct_S_3) struct_L_12)),
  forall (HW_5: p_struct_L_12_0 = (upd p_struct_L_12 l s0)),
  forall (result1: ((pointer) struct_S_3)),
  forall (HW_6: result1 = (acc p_struct_L_12_0 l)),
  forall (HW_7: (valid alloc result1)),
  forall (result2: ((pointer) Z0)),
  forall (HW_8: result2 = (acc b_struct_S_3 result1)),
  forall (result3: ((pointer) Z0)),
  forall (HW_9: result3 = (shift result2 2)),
  forall (result4: Z),
  forall (HW_10: result4 = (acc int_Z0_0 result3)),
  (* File "separation3.c", line 17, characters 13-25 *) result4 = 1.
Proof.
intuition; subst.
generalize (H3 s0 alloc HW_2);intro.
apply valid_range_valid_shift with 0 (5-1);auto.
omega.
Save.

Proof.
intuition; subst; try caduceus.
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
subst.
caduceus.
Save.

Proof.
intuition.
subst;caduceus.
Save.

Proof.
intuition.
subst.
caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f3_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (b_struct_S_3: ((memory) ((pointer) Z0) struct_S_3)),
  forall (c_struct_S_3: ((memory) ((pointer) Z1) struct_S_3)),
  forall (int_Z0: ((memory) Z Z0)),
  forall (int_Z1: ((memory) Z Z1)),
  forall (l: ((pointer) struct_L_12)),
  forall (s0: ((pointer) struct_S_3)),
  forall (HW_1: (valid alloc l) /\ (valid alloc s0) /\
                (valid1 c_struct_S_3) /\ (valid1 b_struct_S_3) /\
                (valid1_range c_struct_S_3 5) /\
                (valid1_range b_struct_S_3 5)),
  forall (result: ((pointer) Z0)),
  forall (HW_2: result = (acc b_struct_S_3 s0)),
  forall (result0: ((pointer) Z0)),
  forall (HW_3: result0 = (shift result 2)),
  forall (int_Z0_0: ((memory) Z Z0)),
  forall (HW_4: int_Z0_0 = (upd int_Z0 result0 1)),
  forall (result1: ((pointer) Z1)),
  forall (HW_5: result1 = (acc c_struct_S_3 s0)),
  forall (result2: ((pointer) Z1)),
  forall (HW_6: result2 = (shift result1 2)),
  forall (int_Z1_0: ((memory) Z Z1)),
  forall (HW_7: int_Z1_0 = (upd int_Z1 result2 2)),
  forall (result3: ((pointer) Z0)),
  forall (HW_8: result3 = (acc b_struct_S_3 s0)),
  forall (result4: ((pointer) Z0)),
  forall (HW_9: result4 = (shift result3 2)),
  forall (result5: Z),
  forall (HW_10: result5 = (acc int_Z0_0 result4)),
  (* File "separation3.c", line 25, characters 13-25 *) result5 = 1.
Proof.
intuition.
Save.

Proof.
intuition; subst.
generalize (H2 s0 alloc HW_2);
 intuition.
apply valid_range_valid_shift with 0 (5-1);auto.
omega.
Save.

Proof.
intuition; subst; caduceus; auto.
Save.

Proof.
intuition.
subst.
generalize (H2 s0 alloc HW_2).
intro.
apply valid_range_valid_shift with 0 (5-1).
auto.
omega.
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
subst.
auto.
Save.

Proof.
intuition.
subst;caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (a_struct_S_2: ((memory) Z struct_S_2)),
  forall (a_struct_S_3: ((memory) Z struct_S_3)),
  forall (alloc: alloc_table),
  forall (l: ((pointer) struct_L_12)),
  forall (q_struct_L_12: ((memory) ((pointer) struct_S_2) struct_L_12)),
  forall (s0: ((pointer) struct_S_3)),
  forall (HW_1: (valid alloc l) /\ (valid alloc s0) /\
                (separation2 q_struct_L_12 q_struct_L_12) /\
                (valid1 q_struct_L_12)),
  forall (a_struct_S_3_0: ((memory) Z struct_S_3)),
  forall (HW_2: a_struct_S_3_0 = (upd a_struct_S_3 s0 1)),
  forall (result: ((pointer) struct_S_2)),
  forall (HW_3: result = (acc q_struct_L_12 l)),
  forall (a_struct_S_2_0: ((memory) Z struct_S_2)),
  forall (HW_4: a_struct_S_2_0 = (upd a_struct_S_2 result 2)),
  forall (result0: Z),
  forall (HW_5: result0 = (acc a_struct_S_3_0 s0)),
  (* File "separation3.c", line 9, characters 13-25 *) result0 = 1.
Proof.
intuition; subst; valid.
Save.

Proof.
intuition; subst; caduceus.
Save.

Proof.
intuition.
subst.
red in H3;auto.
Save.

Proof.
intuition.
(* FILL PROOF HERE *)
Save.

Proof.
intuition.
subst;caduceus.
Save.

