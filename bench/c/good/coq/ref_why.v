(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export ref_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (alloc: alloc_table),
  forall (int_Z2: ((memory) Z Z2)),
  forall (result: ((pointer) Z2)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z2_0: ((memory) Z Z2)),
  forall (HW_2: (* File \"ref.c\", line 6, characters 13-20:\n *)
                (acc int_Z2_0 result) = 1 /\
                (not_assigns alloc0 int_Z2 int_Z2_0 (pset_singleton result))),
  forall (result0: Z),
  forall (HW_3: result0 = (acc int_Z2_0 result)),
  (* File \"ref.c\", line 13, characters 13-25:\n *) result0 = 1 /\
  (not_assigns alloc int_Z2 int_Z2_0 pset_empty).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (alloc: alloc_table),
  forall (int_Z2: ((memory) Z Z2)),
  forall (result: ((pointer) Z2)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (int_Z2_0: ((memory) Z Z2)),
  forall (HW_2: (* File \"ref.c\", line 6, characters 13-20:\n *)
                (acc int_Z2_0 result) = 1 /\
                (not_assigns alloc0 int_Z2 int_Z2_0 (pset_singleton result))),
  (valid alloc0 result).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_3 : 
  forall (alloc: alloc_table),
  forall (result: ((pointer) Z2)),
  forall (alloc0: alloc_table),
  forall (HW_1: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  (* File \"ref.c\", line 4, characters 14-23:\n *) (valid alloc0 result).
Proof.
intuition.
subst; auto.
red.
intros.
red in H7.
apply H7.
apply alloc_stack_valid with i alloc;auto.
apply pset_singleton_intro.
intro;subst.
generalize (fresh_not_valid _ _ H3 0);rewrite shift_zero.
tauto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_4 : 
  1 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  forall (p: ((pointer) Z2)),
  forall (alloc: alloc_table),
  forall (int_Z2: ((memory) Z Z2)),
  forall (HW_1: (* File \"ref.c\", line 4, characters 14-23:\n *)
                (valid alloc p)),
  forall (int_Z2_0: ((memory) Z Z2)),
  forall (HW_2: int_Z2_0 = (upd int_Z2 p 1)),
  (* File \"ref.c\", line 6, characters 13-20:\n *) (acc int_Z2_0 p) = 1 /\
  (not_assigns alloc int_Z2 int_Z2_0 (pset_singleton p)).
Proof.
intuition; subst; caduceus.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_2 : 
  forall (p: ((pointer) Z2)),
  forall (alloc: alloc_table),
  forall (HW_1: (* File \"ref.c\", line 4, characters 14-23:\n *)
                (valid alloc p)),
  (valid alloc p).
Proof.
intuition; subst; caduceus.
Save.

