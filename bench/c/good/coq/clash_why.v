(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export clash_spec_why.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f1_impl_po_1 : 
  forall (ma_structure: ((pointer) Z4)),
  forall (alloc: alloc_table),
  forall (toto_Z4: ((memory) Z Z4)),
  forall (HW_1: (valid alloc ma_structure)),
  forall (toto_0: Z),
  forall (HW_3: toto_0 = 0),
  forall (toto_Z4_0: ((memory) Z Z4)),
  forall (HW_4: toto_Z4_0 = (upd toto_Z4 ma_structure toto_0)),
  (not_assigns alloc toto_Z4 toto_Z4_0 (pset_singleton ma_structure)).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f1_impl_po_2 : 
  forall (ma_structure: ((pointer) Z4)),
  forall (alloc: alloc_table),
  forall (toto_Z4: ((memory) Z Z4)),
  forall (HW_1: (valid alloc ma_structure)),
  forall (toto_0: Z),
  forall (HW_3: toto_0 = 0),
  forall (HW_5: (forall (toto_Z4_0:((memory) Z Z4)),
                 (toto_Z4_0 = (upd toto_Z4 ma_structure toto_0) ->
                  (not_assigns alloc toto_Z4 toto_Z4_0
                   (pset_singleton ma_structure))))),
  (valid alloc ma_structure).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_1 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (fst_Z6_0: ((memory) Z Z6)),
  forall (HW_3: fst_Z6_0 = (upd fst_Z6 result 0)),
  forall (result0: ((pointer) Z1)),
  forall (HW_4: result0 = (acc substruct_Z5 ma_structure)),
  forall (result1: Z),
  forall (HW_5: result1 = (acc fst_Z6_0 result)),
  forall (fst_Z1_0: ((memory) Z Z1)),
  forall (HW_6: fst_Z1_0 = (upd fst_Z1 result0 result1)),
  (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
  (not_assigns alloc fst_Z1 fst_Z1_0
   (pset_singleton (acc substruct_Z5 ma_structure))).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_2 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (fst_Z6_0: ((memory) Z Z6)),
  forall (HW_3: fst_Z6_0 = (upd fst_Z6 result 0)),
  forall (result0: ((pointer) Z1)),
  forall (HW_4: result0 = (acc substruct_Z5 ma_structure)),
  forall (result1: Z),
  forall (HW_5: result1 = (acc fst_Z6_0 result)),
  forall (HW_7: (forall (fst_Z1_0:((memory) Z Z1)),
                 (fst_Z1_0 = (upd fst_Z1 result0 result1) ->
                  (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
                  (not_assigns alloc fst_Z1 fst_Z1_0
                   (pset_singleton (acc substruct_Z5 ma_structure)))))),
  (valid alloc0 result0).
Proof.
intuition.
apply alloc_stack_valid with substruct_0 alloc; auto.

Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_3 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (fst_Z6_0: ((memory) Z Z6)),
  forall (HW_3: fst_Z6_0 = (upd fst_Z6 result 0)),
  forall (result0: ((pointer) Z1)),
  forall (HW_4: result0 = (acc substruct_Z5 ma_structure)),
  forall (HW_8: (forall (result1:Z),
                 (result1 = (acc fst_Z6_0 result) ->
                  (forall (fst_Z1_0:((memory) Z Z1)),
                   (fst_Z1_0 = (upd fst_Z1 result0 result1) ->
                    (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
                    (not_assigns alloc fst_Z1 fst_Z1_0
                     (pset_singleton (acc substruct_Z5 ma_structure))))) /\
                  (valid alloc0 result0)))),
  (valid alloc0 result).
Proof.
intuition.
subst; apply alloc_stack_valid with substruct_0 alloc; auto.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_4 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (fst_Z6_0: ((memory) Z Z6)),
  forall (HW_3: fst_Z6_0 = (upd fst_Z6 result 0)),
  forall (HW_9: (forall (result0:((pointer) Z1)),
                 (result0 = (acc substruct_Z5 ma_structure) ->
                  (forall (result1:Z),
                   (result1 = (acc fst_Z6_0 result) ->
                    (forall (fst_Z1_0:((memory) Z Z1)),
                     (fst_Z1_0 = (upd fst_Z1 result0 result1) ->
                      (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
                      (not_assigns alloc fst_Z1 fst_Z1_0
                       (pset_singleton (acc substruct_Z5 ma_structure))))) /\
                    (valid alloc0 result0))) /\
                  (valid alloc0 result)))),
  (valid alloc0 ma_structure).
Proof.
intros.
unfold not_assigns.
intros.
subst.
caduceus.
rewrite acc_upd_neq;generalize (pset_singleton_elim p (ma_structure # substruct) H0);auto.
intro.
rewrite acc_upd_neq;auto.
inversion_clear Post9.
inversion_clear H3.
inversion_clear H5.
inversion_clear H6.
inversion_clear H7.
inversion_clear H8.
generalize (fresh_not_valid _ _ H6 0).
intros.
intro.
rewrite shift_zero in H8.
apply H8;subst;auto.
Save.



(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_5 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (result: ((pointer) Z6)),
  forall (alloc0: alloc_table),
  forall (HW_2: (valid alloc0 result) /\ (offset result) = 0 /\
                (block_length alloc0 result) = 1 /\
                (valid_range alloc0 result 0 (1 - 1)) /\
                (fresh alloc result) /\ (on_stack alloc0 result) /\
                (alloc_stack result alloc alloc0)),
  forall (HW_10: (forall (fst_Z6_0:((memory) Z Z6)),
                  (fst_Z6_0 = (upd fst_Z6 result 0) ->
                   (forall (result0:((pointer) Z1)),
                    (result0 = (acc substruct_Z5 ma_structure) ->
                     (forall (result1:Z),
                      (result1 = (acc fst_Z6_0 result) ->
                       (forall (fst_Z1_0:((memory) Z Z1)),
                        (fst_Z1_0 = (upd fst_Z1 result0 result1) ->
                         (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
                         (not_assigns alloc fst_Z1 fst_Z1_0
                          (pset_singleton (acc substruct_Z5 ma_structure))))) /\
                       (valid alloc0 result0))) /\
                     (valid alloc0 result))) /\
                   (valid alloc0 ma_structure)))),
  (valid alloc0 result).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f2_impl_po_6 : 
  forall (ma_structure: ((pointer) Z5)),
  forall (alloc: alloc_table),
  forall (fst_Z1: ((memory) Z Z1)),
  forall (fst_Z6: ((memory) Z Z6)),
  forall (substruct_Z5: ((memory) ((pointer) Z1) Z5)),
  forall (HW_1: (valid alloc ma_structure) /\ (valid alloc ma_structure) /\
                (valid alloc (acc substruct_Z5 ma_structure))),
  forall (HW_11: (forall (result:((pointer) Z6)),
                  (forall (alloc0:alloc_table),
                   ((valid alloc0 result) /\ (offset result) = 0 /\
                    (block_length alloc0 result) = 1 /\
                    (valid_range alloc0 result 0 (1 - 1)) /\
                    (fresh alloc result) /\ (on_stack alloc0 result) /\
                    (alloc_stack result alloc alloc0) ->
                    (forall (fst_Z6_0:((memory) Z Z6)),
                     (fst_Z6_0 = (upd fst_Z6 result 0) ->
                      (forall (result0:((pointer) Z1)),
                       (result0 = (acc substruct_Z5 ma_structure) ->
                        (forall (result1:Z),
                         (result1 = (acc fst_Z6_0 result) ->
                          (forall (fst_Z1_0:((memory) Z Z1)),
                           (fst_Z1_0 = (upd fst_Z1 result0 result1) ->
                            (not_assigns alloc fst_Z6 fst_Z6_0 pset_empty) /\
                            (not_assigns alloc fst_Z1 fst_Z1_0
                             (pset_singleton (acc substruct_Z5 ma_structure))))) /\
                          (valid alloc0 result0))) /\
                        (valid alloc0 result))) /\
                      (valid alloc0 ma_structure))) /\
                    (valid alloc0 result))))),
  1 >= 1.
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_1 : 
  forall (x: Z),
  forall (HW_1: x = 0),
  forall (y_0: Z),
  forall (HW_3: y_0 = 1),
  (* File "clash.c", line 12, characters 13-62 *) (((x = 0 -> y_0 = 1)) /\
  ((x <> 0 -> y_0 = 2))).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma f_impl_po_2 : 
  forall (x: Z),
  forall (HW_4: x <> 0),
  forall (y_0: Z),
  forall (HW_6: y_0 = 2),
  (* File "clash.c", line 12, characters 13-62 *) (((x = 0 -> y_0 = 1)) /\
  ((x <> 0 -> y_0 = 2))).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma g_impl_po_1 : 
  forall (y: Z),
  forall (y_0: Z),
  forall (HW_2: y_0 = 0),
  (* File "clash.c", line 5, characters 13-41 *) (y_0 = 0 /\ y = y).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_1 : 
  forall (x: Z),
  forall (y_0: Z),
  forall (HW_2: y_0 = 2),
  forall (HW_3: x = 0),
  forall (y_1: Z),
  forall (HW_5: y_1 = 1),
  (* File "clash.c", line 27, characters 13-65 *) (((x = 0 -> y_1 = 1)) /\
  ((x <> 0 -> y_1 = 2))).
Proof.
intuition.
Save.

(* Why obligation from file "", line 0, characters 0-0: *)
(*Why goal*) Lemma h_impl_po_2 : 
  forall (x: Z),
  forall (y_0: Z),
  forall (HW_2: y_0 = 2),
  forall (HW_6: x <> 0),
  (* File "clash.c", line 27, characters 13-65 *) (((x = 0 -> y_0 = 1)) /\
  ((x <> 0 -> y_0 = 2))).
Proof.
intuition.
Save.

