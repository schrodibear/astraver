(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Export jessie_why.
Require Export Reals.
(*Require Export JessieGappa.*) 
Require Import tactics. 
(*Require Export JessieFloats.*) 

(* minimal set of defs for using gappa *)

Require Export Reals.
Require Export Gappa_tactic.
Require Export tactics.


Inductive float_format : Set :=  Single | Double.

Definition max_gen_float (f : float_format) :=
match f with 
| Single => (* ((2-powerRZ 2 (-23))*powerRZ 2 127)%R *)
(16777215*powerRZ 2 104)%R
| Double => 
  (* (2 - 2 ^ (-52)) * 2 ^ 1023 = 2 ^ 1024 - 2 ^ 971 = (2^53 - 1) * 2^ 971 *)
  (9007199254740991 * powerRZ 2 971)%R
end.

Definition mode := round_dir.

Definition nearest_even := roundNE.
Definition to_zero := roundZR.
Definition up := roundUP.
Definition down := roundDN.
Definition nearest_away :=roundNA.



(* generic floats*)

Definition gen_float :=float2.

Parameter exact_value : gen_float -> R.
Parameter model_value : gen_float -> R.


Definition float_value (x : gen_float) := float2R x.

Definition gen_round_error (x:gen_float) := 
    (Rabs ((exact_value x) - (float_value x))).

Definition gen_total_error (x:gen_float):= 
    (Rabs ((model_value x) - (float_value x))).
(*
Definition gen_set_model (x:gen_float) (r:R) :=
    model_value x =r.
*)


Definition gen_float_of_real_logic (f : float_format) (m : mode) (x :R) :=
 match f with
  |  Single => (rounding_float m 24 149) x
  | Double => (rounding_float m 53 1074) x
 end.


Definition round_float (f : float_format) (m : mode) (x:R) :=
match f with
| Single => gappa_rounding (rounding_float m 24 149) x
| Double => gappa_rounding (rounding_float m 53 1074) x
end.

Definition no_overflow (f : float_format) (m : mode) (x:R) :=
(Rabs (round_float f m x) <= max_gen_float f)%R.




(* formalization of the full model *)

Inductive Float_class  : Set :=  
Finite
| Infinite 
| Nan.

Inductive sign : Set := 
Negative 
| Positive.

Parameter float_class : gen_float -> Float_class.

Parameter float_sign : gen_float -> sign.
(*
Definition float_sign (x : gen_float) :=
match (Fnum x >=0)%Z with
| false => Negative
| true=> Positive
end.
*)


Parameter real_sign : R -> sign.
(*
Definition real_sign (x : R) :=
match (x >=0)%R with
| False => Negative
| True => Positive
end.
*)

Definition int_of_float_sign (x : gen_float) :=
match (float_sign x) with
| Negative => (-1)%Z
| Positive => 1%Z
end.




(*
Proof.
w2g.
intros.
subst.
w2g.
apply Rle_antisym.
apply Rminus_le.
gappa.
assert (f <=f1 - f0 <= f)%R.
split.
apply Rminus_le.
Admitted.

Proof.
w2g.
intros.
assert (7 <= df why__return <= 7)%R.
subst.
w2g.
gappa.
change (float2R (rounding_float roundNE 53 1074 (2 * (35 / 10))))
with (gappa_rounding (rounding_float roundNE 53 1074) (2 * (35/10))).
gappa.
destruct H.
now apply Rle_antisym.
Admitted.
*)


(*
(*Why logic*) Definition cos : R -> R.
Admitted.
*)

(*
(*Why logic*) Definition power : R -> Z -> R.
Admitted.
*)

Definition power (x:R) (n:Z) := powerRZ x n.



(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 239, characters 9-12: *)
(*Why goal*) Lemma Sterbenz_ensures_default_po_1 : 
  forall (x_3: gen_float),
  forall (y: gen_float),
  forall (HW_1: (Rle (Rdiv (float_value y) (2)%R) (float_value x_3)) /\
                (Rle (float_value x_3) (Rmult (2)%R (float_value y))) /\
                (eq (gen_round_error x_3) (0)%R) /\
                (eq (gen_round_error y) (0)%R)),
  (no_overflow Double nearest_even (Rminus (float_value x_3) (float_value y))).
Proof.
intuition.
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 237, characters 11-45: *)
(*Why goal*) Lemma Sterbenz_ensures_default_po_2 : 
  forall (x_3: gen_float),
  forall (y: gen_float),
  forall (HW_1: (Rle (Rdiv (float_value y) (2)%R) (float_value x_3)) /\
                (Rle (float_value x_3) (Rmult (2)%R (float_value y))) /\
                (eq (gen_round_error x_3) (0)%R) /\
                (eq (gen_round_error y) (0)%R)),
  forall (HW_2: (no_overflow
                 Double nearest_even (Rminus
                                      (float_value x_3) (float_value y)))),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Double nearest_even (Rminus
                                                               (float_value
                                                                x_3) (
                                                               float_value y)))) /\
                (eq (exact_value result) (Rminus
                                          (exact_value x_3) (exact_value y))) /\
                (eq (model_value result) (Rminus
                                          (model_value x_3) (model_value y)))),
  forall (why__return: gen_float),
  forall (HW_4: why__return = result),
  (* JC_41 *) (eq (gen_round_error why__return) (0)%R).
Proof.
intuition.
unfold gen_round_error.
subst; rewrite H2,H5.


(* FILL PROOF HERE *)
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 239, characters 9-12: *)
(*Why goal*) Lemma Sterbenz_safety_po_1 : 
  forall (x_3: gen_float),
  forall (y: gen_float),
  forall (HW_1: (* JC_40 *) True),
  (no_overflow Double nearest_even (Rminus (float_value x_3) (float_value y))).
Proof.
intuition.
(* FILL PROOF HERE *)
Save.

(* Why obligation from file "why/sterbenz.why", line 102, characters 57-102: *)
(*Why goal*) Lemma moncos_ensures_default_po_1 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  (no_overflow Single nearest_even (1)%R).
Proof.
intuition.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 26-29: *)
(*Why goal*) Lemma moncos_ensures_default_po_2 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value x_2) (float_value x_2))).
Proof.
intuition.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "why/sterbenz.why", line 106, characters 19-64: *)
(*Why goal*) Lemma moncos_ensures_default_po_3 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  (no_overflow Single nearest_even (05 / 10)%R).
Proof.
intuition.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 26-43: *)
(*Why goal*) Lemma moncos_ensures_default_po_4 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  forall (HW_6: (no_overflow Single nearest_even (05 / 10)%R)),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (05 / 10)%R)) /\
                (eq (exact_value result1) (05 / 10)%R) /\
                (eq (model_value result1) (05 / 10)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value result0) (float_value result1))).
Proof.
intuition.
rewrite H0,H3.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 9-43: *)
(*Why goal*) Lemma moncos_ensures_default_po_5 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  forall (HW_6: (no_overflow Single nearest_even (05 / 10)%R)),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (05 / 10)%R)) /\
                (eq (exact_value result1) (05 / 10)%R) /\
                (eq (model_value result1) (05 / 10)%R)),
  forall (HW_8: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value
                                                             result1)))),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value
                                                                result1)))) /\
                (eq (exact_value result2) (Rmult
                                           (exact_value result0) (exact_value
                                                                  result1))) /\
                (eq (model_value result2) (Rmult
                                           (model_value result0) (model_value
                                                                  result1)))),
  (no_overflow
   Single nearest_even (Rminus (float_value result) (float_value result2))).
Proof.
intuition.
rewrite H,H6;rewrite H0,H3.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.



(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 92, characters 9-72: *)
(*Why goal*) Lemma moncos_ensures_default_po_6 : 
  forall (x_2: gen_float),
  forall (HW_1: (Rle (Rabs (float_value x_2)) (Rdiv (1)%R (32)%R))),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  forall (HW_6: (no_overflow Single nearest_even (05 / 10)%R)),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (05 / 10)%R)) /\
                (eq (exact_value result1) (05 / 10)%R) /\
                (eq (model_value result1) (05 / 10)%R)),
  forall (HW_8: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value
                                                             result1)))),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value
                                                                result1)))) /\
                (eq (exact_value result2) (Rmult
                                           (exact_value result0) (exact_value
                                                                  result1))) /\
                (eq (model_value result2) (Rmult
                                           (model_value result0) (model_value
                                                                  result1)))),
  forall (HW_10: (no_overflow
                  Single nearest_even (Rminus
                                       (float_value result) (float_value
                                                             result2)))),
  forall (result3: gen_float),
  forall (HW_11: (eq (float_value result3) (round_float
                                            Single nearest_even (Rminus
                                                                 (float_value
                                                                  result) (
                                                                 float_value
                                                                 result2)))) /\
                 (eq (exact_value result3) (Rminus
                                            (exact_value result) (exact_value
                                                                  result2))) /\
                 (eq (model_value result3) (Rminus
                                            (model_value result) (model_value
                                                                  result2)))),
  forall (why__return: gen_float),
  forall (HW_12: why__return = result3),
  (* JC_23 *)
  (Rle (Rabs (Rminus (float_value why__return) (cos (float_value x_2))))
   (power (2)%R (Zopp 23))).
Proof.
intuition.
rewrite HW_12; rewrite H9;rewrite H6, H;rewrite H0,H3.
unfold power; unfold round_float, max_gen_float, nearest_even.
assert (Rabs ((1 - ( (float_value x_2) * 
(float_value x_2) ) *(5/10) ) - cos (float_value x_2) ) 
<= 7/134217728)%R.
interval with (i_bisect_diff (float_value x_2), i_nocheck).
rewrite <- (generic_proof.exp_factor_powerRZ 2).
simpl.
gappa.
(*
interval_intro (Rabs ((1 - ( (float_value x_3) * 
(float_value x_3) ) *(5/10) ) - Rtrigo_def.cos (float_value x_3) )) 
upper with (i_bisect_diff (float_value x_3) ).
rewrite <- (generic_proof.exp_factor_powerRZ 2).
simpl.
gappa.
*)
Save.

(* Why obligation from file "why/sterbenz.why", line 125, characters 57-102: *)
(*Why goal*) Lemma moncos_safety_po_1 : 
  forall (HW_1: (* JC_22 *) True),
  (no_overflow Single nearest_even (1)%R).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 26-29: *)
(*Why goal*) Lemma moncos_safety_po_2 : 
  forall (x_2: gen_float),
  forall (HW_1: (* JC_22 *) True),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value x_2) (float_value x_2))).
Proof.
intuition.
Admitted.
(* FILL PROOF HERE *)


(* Why obligation from file "why/sterbenz.why", line 129, characters 19-64: *)
(*Why goal*) Lemma moncos_safety_po_3 : 
  forall (x_2: gen_float),
  forall (HW_1: (* JC_22 *) True),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  (no_overflow Single nearest_even (05 / 10)%R).
Proof.
intuition.
Admitted.
(* FILL PROOF HERE *)


(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 26-43: *)
(*Why goal*) Lemma moncos_safety_po_4 : 
  forall (x_2: gen_float),
  forall (HW_1: (* JC_22 *) True),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  forall (HW_6: (no_overflow Single nearest_even (05 / 10)%R)),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (05 / 10)%R)) /\
                (eq (exact_value result1) (05 / 10)%R) /\
                (eq (model_value result1) (05 / 10)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value result0) (float_value result1))).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 94, characters 9-43: *)
(*Why goal*) Lemma moncos_safety_po_5 : 
  forall (x_2: gen_float),
  forall (HW_1: (* JC_22 *) True),
  forall (HW_2: (no_overflow Single nearest_even (1)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (1)%R)) /\
                (eq (exact_value result) (1)%R) /\
                (eq (model_value result) (1)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value x_2) (float_value x_2)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 x_2) (
                                                                float_value
                                                                x_2)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value x_2) (exact_value x_2))) /\
                (eq (model_value result0) (Rmult
                                           (model_value x_2) (model_value x_2)))),
  forall (HW_6: (no_overflow Single nearest_even (05 / 10)%R)),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (05 / 10)%R)) /\
                (eq (exact_value result1) (05 / 10)%R) /\
                (eq (model_value result1) (05 / 10)%R)),
  forall (HW_8: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value
                                                             result1)))),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value
                                                                result1)))) /\
                (eq (exact_value result2) (Rmult
                                           (exact_value result0) (exact_value
                                                                  result1))) /\
                (eq (model_value result2) (Rmult
                                           (model_value result0) (model_value
                                                                  result1)))),
  (no_overflow
   Single nearest_even (Rminus (float_value result) (float_value result2))).
Proof.
intuition.
(* FILL PROOF HERE *)
Admitted.


(* Why obligation from file "why/sterbenz.why", line 150, characters 61-106: *)
(*Why goal*) Lemma poly_ensures_default_po_1 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  (no_overflow Single nearest_even (2)%R).
Proof.
intuition.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-23: *)
(*Why goal*) Lemma poly_ensures_default_po_2 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value result) (float_value x))).
Proof.
intuition.
rewrite HW_1,H.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-25: *)
(*Why goal*) Lemma poly_ensures_default_po_3 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  (no_overflow
   Single nearest_even (Rmult (float_value result0) (float_value x))).
Proof.
intuition.
rewrite H0.
rewrite HW_1,H.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "why/sterbenz.why", line 151, characters 18-63: *)
(*Why goal*) Lemma poly_ensures_default_po_4 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  forall (HW_6: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value x)))),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value x)))) /\
                (eq (exact_value result1) (Rmult
                                           (exact_value result0) (exact_value
                                                                  x))) /\
                (eq (model_value result1) (Rmult
                                           (model_value result0) (model_value
                                                                  x)))),
  (no_overflow Single nearest_even (1)%R).
Proof.
intuition.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-40: *)
(*Why goal*) Lemma poly_ensures_default_po_5 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  forall (HW_6: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value x)))),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value x)))) /\
                (eq (exact_value result1) (Rmult
                                           (exact_value result0) (exact_value
                                                                  x))) /\
                (eq (model_value result1) (Rmult
                                           (model_value result0) (model_value
                                                                  x)))),
  forall (HW_8: (no_overflow Single nearest_even (1)%R)),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (1)%R)) /\
                (eq (exact_value result2) (1)%R) /\
                (eq (model_value result2) (1)%R)),
  (no_overflow
   Single nearest_even (Rminus (float_value result1) (float_value result2))).
Proof.
intuition.
rewrite H3,H6;rewrite H0;rewrite H, HW_1.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 72, characters 9-31: *)
(*Why goal*) Lemma poly_ensures_default_po_6 : 
  forall (x: gen_float),
  forall (HW_1: (eq (float_value x) (Rdiv (sqrt (2)%R) (2)%R))),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  forall (HW_6: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value x)))),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value x)))) /\
                (eq (exact_value result1) (Rmult
                                           (exact_value result0) (exact_value
                                                                  x))) /\
                (eq (model_value result1) (Rmult
                                           (model_value result0) (model_value
                                                                  x)))),
  forall (HW_8: (no_overflow Single nearest_even (1)%R)),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (1)%R)) /\
                (eq (exact_value result2) (1)%R) /\
                (eq (model_value result2) (1)%R)),
  forall (HW_10: (no_overflow
                  Single nearest_even (Rminus
                                       (float_value result1) (float_value
                                                              result2)))),
  forall (result3: gen_float),
  forall (HW_11: (eq (float_value result3) (round_float
                                            Single nearest_even (Rminus
                                                                 (float_value
                                                                  result1) (
                                                                 float_value
                                                                 result2)))) /\
                 (eq (exact_value result3) (Rminus
                                            (exact_value result1) (exact_value
                                                                   result2))) /\
                 (eq (model_value result3) (Rminus
                                            (model_value result1) (model_value
                                                                   result2)))),
  forall (why__return: gen_float),
  forall (HW_12: why__return = result3),
  (* JC_5 *) (eq (float_value why__return) (0)%R).
Proof.
intuition.
rewrite HW_12;rewrite H9;rewrite H3,H6;rewrite H0;rewrite H, HW_1.
unfold round_float, max_gen_float, nearest_even.
gappa.
Save.


(* Why obligation from file "why/sterbenz.why", line 172, characters 61-106: *)
(*Why goal*) Lemma poly_safety_po_1 : 
  forall (HW_1: (* JC_4 *) True),
  (no_overflow Single nearest_even (2)%R).
Proof.
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-23: *)
(*Why goal*) Lemma poly_safety_po_2 : 
  forall (x: gen_float),
  forall (HW_1: (* JC_4 *) True),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  (no_overflow
   Single nearest_even (Rmult (float_value result) (float_value x))).
Proof.
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-25: *)
(*Why goal*) Lemma poly_safety_po_3 : 
  forall (x: gen_float),
  forall (HW_1: (* JC_4 *) True),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  (no_overflow
   Single nearest_even (Rmult (float_value result0) (float_value x))).
Proof.
Admitted.

(* Why obligation from file "why/sterbenz.why", line 173, characters 18-63: *)
(*Why goal*) Lemma poly_safety_po_4 : 
  forall (x: gen_float),
  forall (HW_1: (* JC_4 *) True),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  forall (HW_6: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value x)))),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value x)))) /\
                (eq (exact_value result1) (Rmult
                                           (exact_value result0) (exact_value
                                                                  x))) /\
                (eq (model_value result1) (Rmult
                                           (model_value result0) (model_value
                                                                  x)))),
  (no_overflow Single nearest_even (1)%R).
Proof.
Admitted.

(* Why obligation from file "/users/demons/ayad/ppc/why/bench/jc/good/sterbenz.jc", line 74, characters 7-40: *)
(*Why goal*) Lemma poly_safety_po_5 : 
  forall (x: gen_float),
  forall (HW_1: (* JC_4 *) True),
  forall (HW_2: (no_overflow Single nearest_even (2)%R)),
  forall (result: gen_float),
  forall (HW_3: (eq (float_value result) (round_float
                                          Single nearest_even (2)%R)) /\
                (eq (exact_value result) (2)%R) /\
                (eq (model_value result) (2)%R)),
  forall (HW_4: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result) (float_value x)))),
  forall (result0: gen_float),
  forall (HW_5: (eq (float_value result0) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result) (
                                                                float_value x)))) /\
                (eq (exact_value result0) (Rmult
                                           (exact_value result) (exact_value
                                                                 x))) /\
                (eq (model_value result0) (Rmult
                                           (model_value result) (model_value
                                                                 x)))),
  forall (HW_6: (no_overflow
                 Single nearest_even (Rmult
                                      (float_value result0) (float_value x)))),
  forall (result1: gen_float),
  forall (HW_7: (eq (float_value result1) (round_float
                                           Single nearest_even (Rmult
                                                                (float_value
                                                                 result0) (
                                                                float_value x)))) /\
                (eq (exact_value result1) (Rmult
                                           (exact_value result0) (exact_value
                                                                  x))) /\
                (eq (model_value result1) (Rmult
                                           (model_value result0) (model_value
                                                                  x)))),
  forall (HW_8: (no_overflow Single nearest_even (1)%R)),
  forall (result2: gen_float),
  forall (HW_9: (eq (float_value result2) (round_float
                                           Single nearest_even (1)%R)) /\
                (eq (exact_value result2) (1)%R) /\
                (eq (model_value result2) (1)%R)),
  (no_overflow
   Single nearest_even (Rminus (float_value result1) (float_value result2))).
Proof.
Admitted.


