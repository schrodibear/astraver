


type realP = {
  real realM;
}

/* permut{Lab1,Lab2}(t1,t2,n) is true whenever t1[0..n-1] in state Lab1 
 * is a permutation of  t2[0..n-1] in state Lab2 
 */

logic permut{Lab1,Lab2}(realP[..] t1,realP[..] t2,integer n)
    reads \at((t1+[..]).realM,Lab1), \at((t2+[..]).realM,Lab2) ;

axiom permut_refl{L} :
   \forall realP[..] t; \forall integer n; permut{L,L}(t,t,n)
 
axiom permut_sym{L1,L2} :
   \forall realP[..] t1, t2; \forall integer n; 
     permut{L1,L2}(t1,t2,n) ==> permut{L2,L1}(t2,t1,n) 
 
axiom permut_trans{L1,L2,L3} :
   \forall realP[..] t1, t2, t3; \forall integer n;
     permut{L1,L2}(t1,t2,n) && permut{L2,L3}(t2,t3,n) 
     ==> permut{L1,L3}(t1,t3,n) 

  
axiom permut_exchange{L1,L2} :
   \forall realP[..] t1, t2; \forall integer i, j, n;
       \at((t1+i).realM,L1) == \at((t2+j).realM,L2) &&
       \at((t1+j).realM,L1) == \at((t2+i).realM,L2) &&
       (\forall integer k; 0 <= k && k < n && k != i && k != j ==>
            \at((t1+k).realM,L1) == \at((t2+k).realM,L2)) 
       ==> permut{L1,L2}(t1,t2,n) 


unit swap(realP[0..] t, integer i, integer j) 
  requires 0 <= i && i <= \offset_max(t); 
  requires 0 <= j && j <= \offset_max(t);
  behavior default:
    ensures 
	permut{Old,Here}(t,t,\offset_max(t)+1);
{
    (L: {
     var real tmp = (t+i).realM;
     (t+i).realM = (t+j).realM;
     (t+j).realM = tmp;
     assert (t+i).realM == \at((t+j).realM,L) &&
	 (t+j).realM == \at((t+i).realM,L) &&
       \forall integer k; 
          0 <= k && k <= \offset_max(t) && k != i && k != j ==>
	      (t+k).realM == \at((t+k).realM,L)
     })
}



/*
Local Variables: 
mode: java
compile-command: "make insert_sort"
End: 
*/
