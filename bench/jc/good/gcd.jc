
logic divides(integer x, integer y) = \exists integer q; y == q * x

logic isGcd(integer a, integer b, integer d) =
 divides(d, a) && divides(d, b) &&
  \forall integer z;
    divides(z, a) && divides(z, b) ==> divides(z, d)

lemma gcd_zero: \forall integer a; isGcd(a, 0, a)

lemma distr_left_minus :
 \forall integer x,y,z;(x - y) * z == x * z - y * z

lemma mul_comm : \forall integer x, y; x * y == y * x

lemma gcd_property:
 \forall integer a, b, d;
   (\forall integer q; b > 0 && isGcd(b, a % b, d)) ==>
       isGcd(a, b, d)

lemma distr_left :
 \forall integer x,y,z; (x + y) * z == x * z + y * z

lemma distr_right :
 \forall integer x,y,z; x * (y + z) == x * y + x * z

lemma div_mod_property:
 \forall integer x,y; x >= 0 && y > 0 ==> x % y == x - y * (x / y)

lemma mul_assoc : \forall integer x,y,z; x * (y * z) == (x * y) * z

lemma mod_property :
(\forall integer x_6;
  (\forall integer y_6;
    (((x_6 >= 0) && (y_6 > 0)) ==>
      ((0 <= (x_6 % y_6)) && ((x_6 % y_6) < y_6)))))

integer gcd(integer x, integer y)
  requires x >= 0 && y >= 0;
behavior resultIsGcd:
  ensures isGcd(x, y, \result);
behavior bezoutProperty:
  ensures \exists integer a,b; a * x + b * y == \result;
{  
var integer a = 1;
var integer b = 0;
var integer c = 0;
var integer d = 1;
    
invariant x >= 0 && y >= 0;
invariant for resultIsGcd:
  \forall integer d; isGcd(x, y, d) ==> \at(isGcd(x, y, d),Pre);
invariant for bezoutProperty:
  a * \at(x,Pre) + b * \at(y,Pre) == x &&
  c * \at(x,Pre) + d * \at(y,Pre) == y;
variant y;
while (y > 0) {
  var integer r = x % y;
  var integer q = x / y;
  x = y;
  y = r;
  var integer ta = a;
  var integer tb = b;
  a = c;
  b = d;
  c = ta - c * q;
  d = tb - d * q;
};
return x;
}

/*
Local Variables:
mode: java
compile-command: "jessie gcd.jc && make -f gcd.makefile gui"
End:
*/
