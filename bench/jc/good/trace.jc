
/* Example 1 
 * We want the message: 
 *  "assertion `x < 9' cannot be established"
 * localized on `x < 9' 
 */

integer f1(integer x)
  requires x > 0;
{
  assert x >= 0 && x < 9; 
  return x+1;
}

/* Example 2 
 * We want the message: 
 *  "post-condition `\result > 10' of function f2 cannot be established"
 * localized on `return x+1'
 * all lines involved in the execution path should be ~underlined 
 */
integer f2 (integer x) 
  requires x > 0 && x < 100;
  behavior ok:
    ensures \result != 0 && \result > 10;  
{
  integer y;
  if (x<50) 
     return x+1;
  else 
     y = x-1;
  return y;
}


/* Example 3 
 * We want the message: 
 *  "pre-condition `x > 0' for call to function f3 cannot be established"
 * localized on `(f2 x)' 
 */
integer f3 (integer x)  
  requires x >= 0 && x < 50;
{
    return f2(x);
}


/* Example 4 
 * Explanation expected: 
 *   "validity of loop invariant `0 <= y' at loop entrance"
 * localized on `0 <= y' 
 */

unit f4 (integer x) 
{ 
 integer y = x;
 while (y > 0)
     invariant 0 <= y && y <= x;
 {
     y = y - 1;
 }
}


/* Example 5 
 * Explanation expected:
 *   "preservation of loop invariant `y = x'"
 * localized on `y=x' 
 */

unit f5 (integer x)  
{
 integer y = x;
 while (y > 0)
 invariant y == x;
 {
 y = y - 1;
 }
}






/*
Local Variables: 
mode: java
compile-command: "make trace.goals"
End: 
*/
