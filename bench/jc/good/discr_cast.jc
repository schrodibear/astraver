# InvariantPolicy = Arguments

/*

hand-made from C program:

struct header {
    int discr;
};
struct packet1 {
    int discr;
    int val1;
};
struct packet2 {
    struct header head;
    float val2;
};
void get(struct header *p, int *v1, float *v2) {
    switch (p->discr) {
        case 0: *v1 = ((struct packet1*) p)->val1; break;
        case 1: *v2 = ((struct packet2*) p)->val2; break;
    }
}

*/

type integerT = { integer i; }
type realT = { real r; }

type header = {
    integer discr;
    invariant discr0(this) = this.discr == 0 ==> this <: packet1;
    invariant discr1(this) = this.discr == 1 ==> this <: packet2;
}

tag packet1 = header with {
    integer val1;
}

tag packet2 = header with {
    real val2;
}

unit get(header[0] p, integerT[0] v1, realT[0] v2) 
    requires discr0(p) && discr1(p);
    behavior normal: ensures  discr0(p) && discr1(p);
{
    switch (p.discr) {
        case 0: v1.i = (p :> packet1).val1; break;
        case 1: v2.r = (p :> packet2).val2; break;
    }
}

/*
Local Variables: 
mode: C
compile-command: "make discr_cast"
End: 
*/
