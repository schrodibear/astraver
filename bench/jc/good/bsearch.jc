
axiom mean_1 : \forall integer x,y; x <= y ==> x <= (x+y)/2 && (x+y)/2 <= y 

type byte = -128..127

type short = -32768..32767

type shortT = { short shortM; }

byte binary_search(shortT[0..] t, byte n, short v) 
 requires 
   n >= 0 && \offset_max(t) >= n-1 &&
    (\forall byte k1, k2; 0 <= k1 && k1 <= k2 && k2 <= n-1 ==>
     (t+k1).shortM <= (t+k2).shortM);
 behavior search_ok:
    ensures
      (\result >= 0 && (t+\result).shortM == v) ||
      (\result == -1 && (\forall byte k; 0 <= k && k < n ==> (t+k).shortM != v));
{
  var byte l = 0;
  var byte u = n-1;
  invariant 
      0 <= l && u <= n-1 &&  
      \forall byte k; 0 <= k && k < n ==> 
			  (t+k).shortM == v ==> l <= k && k <= u;
  variant u-l; 
  while (l <= u ) 
  {
    var byte m = (l + u :> byte) / 2;
    // @ assert l <= m <= u
    if (t+m).shortM < v then l = m + 1
    else if (t+m).shortM > v then u = m - 1
    else return m
  };
  return -1
}


/*
Local Variables: 
mode: java
compile-command: "make bsearch"
End: 
*/
