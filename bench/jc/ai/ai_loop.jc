
type integerT = { integer integerM; }


unit test0(integerT[0..10] t) {
  integer x = 0;
  while (x <= 9) 
    invariant true;
    variant 10 - x;
  {
    (t + x).integerM = x;
    x++;
  }
}

unit test0bis(integerT[0..10] t) {
  integer x = 0;
  while (x < 10) 
    invariant true;
    variant 10 - x;
  {
    (t + x).integerM = x;
    x++;
  }
}

integer v;

unit test0ter() {
    v = 0;
  while (v <= 9) 
    variant 10 - v;
  {
    v++;
  }
}

unit test1(integerT[0..] t, integer max) requires \offset_max(t) == max; {
  integer x = 0;
  while (x < max) 
    invariant true;
    variant max - x;
  {
    (t + x).integerM = x;
    x++;
  }
}

/*
Local Variables: 
mode: java
compile-command: "make loop"
End: 
*/
