type Sword = {
    integer damage;
    invariant damage_inv(this) = this.damage > 0;
}

type Hero = {
    integer life;
    boolean dead;
    Sword[0] sword;
    invariant life_inv(this) =
        (this.life >= 0) &&
        (this.life <= 100) &&
        (this.life == 0 ==> this.dead);
    // Devrait être rajouté automatiquement (déduit du [0] dans la définition
    // de sword)
    invariant sword_inv(this) =
        \offset_min(this.sword) <= 0 &&
        \offset_max(this.sword) >= 0;
    invariant test(this) = (this.sword+4).damage == 5;
}

type Sorcerer = Hero with {
    integer mana;
    invariant mana_inv(this) = this.mana >= 0;
}

unit attack(Hero[0] this, Hero[0] target)
  requires
    \mutable(this, Hero) && \mutable(target, Hero) && target.committed == false &&
    // Devraient être déductibles de la ligne précédente :
    //    \mutable(this.sword, Sword) && \mutable(target.sword, Sword);
    true;
behavior ok:
  ensures
    life_inv(target);
{
    unpack(target);
    target.life = target.life - this.sword.damage;
    if (target.life <= 0) {
	target.life = 0;
	target.dead = true;
    }
    pack(target);
}

unit test_fun(Hero[0] this)
    requires \mutable(this, Hero) && this.committed == false;
{
    unpack(this);
    unpack(this.sword);
    this.sword.damage = 1;
    pack(this.sword);
    pack(this);
}

/*
Local Variables: 
mode: java
compile-command: "make game"
End: 
*/
