
/*
example taken from "Coping with Type Casts in C"
*/

type shape_kind = 0..1

type Circle = Shape with {
  integer radius;
  invariant circle_inv(this) = this.radius >= 0;
}

and type Rectangle = Shape with {
  integer length;
  integer width;
  invariant rectangle_inv(this) = this.length >= 0 && this.width >= 0;
}

and type Shape = {
  shape_kind kind;
  invariant dicr(s) = (s.kind == 0 => s <: Circle && circle_inv(s :> Circle))
		   && (s.kind == 1 => s <: Rectangle && rectangle_inv(s :> Rectangle));
}

integer circ_area(Circle[0] s)
  behavior safety: 
    ensures true;
{
  return s.radius * s.radius * 3;
}

integer rect_area(Rectangle[0] s)
  behavior safety: 
    ensures true;
{
  return s.length * s.width;
}

integer area(Shape[0] s) 
  behavior safety: 
    ensures true;
{
  if (s.kind == 0) {
    return circ_area(s:>Circle);
  } else if (s.kind == 1) {
    return rect_area(s:>Rectangle);
  }
  else return 0;
}

/*
Local Variables: 
mode: java
compile-command: "make shape"
End: 
*/
