#!/bin/sh

# auto bench for why

pgm=$1
option=$2
coqc="coqc -R ../lib/coq Coq.why"

pvstc () {
    context=`dirname $1`
    theory=`basename $1`
    cd $context
    echo "(typecheck "'"'$theory'"'")" > pvstc.el
    pvs -q -batch -l pvstc.el
    cd ..
}

provers () {
    file=$1
    base=$2
    dir=`dirname $1`
    # running Coq
    if ! $coqc "$base"_why.v > /dev/null 2>&1; then
	echo "coq FAILED"
	$coqc "$base"_why.v
	exit 1
    fi
    if ! $coqc -I $dir "$base"_valid.v > /dev/null 2>&1; then
	echo "coq validation FAILED"
	$coqc "$base"_valid.v
	exit 1
    fi
    echo -n "coq ok... "
    # running PVS
    if ! $pgm --pvs $f > /dev/null 2>&1; then
	echo "pvs generation FAILED"
	$pgm --pvs $f
	exit 1
    fi
    if test "$option" == "pvs"; then 
    if ! pvstc "$base"_why > /dev/null 2>&1; then
	echo "pvs typecheck FAILED"
	pvs -q -v 3 -batch -l pvstc.el
	exit 1
    fi
    echo "pvs ok"
    else
    echo
    fi
}

good_ml () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	base=$1/`basename $f .mlw`
	# running Why
	if ! $pgm @COQVER@ $f > /dev/null 2>&1; then
	    echo "why FAILED"
	    $pgm @COQVER@ $f
	    exit 1
	fi
	echo -n "why ok... "
	provers $f $base
#  		echo -n "coq ok..."
#  		$pgm --ocaml --ocaml-ext $f > $base.ml 2>/dev/null
#  		if ocamlc -c $base.ml > /dev/null 2>&1; then
#  		    echo "ocaml ok"
#  		else
#  		    echo "ocaml FAILED"
#  		fi
    done
}

good_c () {
    for f in $1/*.c; do
	echo -n "  "$f"... "
	base=$1/`basename $f .c`
	if ! gcc -c $f > /dev/null 2>&1; then
	    echo "GCC failed"
	    gcc -c $f
	    exit 1
	fi
	echo -n "GCC ok... "
	if ! $pgm @COQVER@ $f > /dev/null 2>&1; then
	    echo "why FAILED"
	    $pgm @COQVER@ $f
	    exit 1
	fi
	echo -n "why ok... "
	provers $f $base
    done
}

bads () {
    for f in $1/*.mlw; do
	echo -n "  "$f"... "
	if $pgm $2 $f > /dev/null 2>&1; then 
	    echo "$pgm $2 $f"
	    echo "FAILED!"
	    exit 1 
        else 
	    echo "ok"
	fi
    done
}

if test "$2" == "c"; then good_c good-c; exit 0; fi

# 1. Syntax
echo "=== Checking parsing errors ==="
bads bad/syntax --parse-only
echo ""

# 2. Typing
echo "=== Checking typing errors ==="
bads bad/typing --type-only
echo ""

# 2. Other
echo "=== Checking other errors ==="
bads bad/other
echo ""

# 3. ML benchmark
echo "=== Checking good files ==="
good_ml good
echo ""

# 4. C benchmark
echo "=== Checking good C files ==="
good_c good-c

