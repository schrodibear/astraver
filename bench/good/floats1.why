
parameter one:gen_float ref

parameter z1:gen_float ref
parameter z2:gen_float ref

let tes1 (x:gen_float) (y:gen_float) =
{ is_finite(x) and is_finite(y) and 
  float_value(x) <> 0.0 and float_value(y) <> 0.0 and float_value(x) = float_value(y)
}
begin
  one := gen_float_of_real Double nearest_even 1.0;
  z1 := (div_gen_float Double nearest_even !one x);
  z2 := (div_gen_float Double nearest_even !one y)
end   
{ float_eq_float(z1,z2)
}






parameter t1:gen_float ref
parameter t2:gen_float ref

let tes2 (x:gen_float) (y:gen_float) =
{ is_gen_zero_plus(x) and is_gen_zero_minus(y)
}
begin
assert { min_gen_float(Double) <= 1.0 <= max_gen_float(Double) } ;
assert {float_class(one) = Finite and float_sign(one) = Positive and float_value(one) <> 0.0} ;
t1 := div_gen_float Double nearest_even !one x; 
t2 := div_gen_float Double nearest_even !one y
end
{ is_plus_infinity(t1) and is_minus_infinity(t2)
}

