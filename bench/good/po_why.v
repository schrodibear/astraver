(* Load Programs. *)(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)

Require Import Why.
Require Import Omega.

Parameter q : Z -> Prop.

(* Why obligation from file , characters 153-194 *)
Lemma p1_po_1 :
 forall (x:Z) (Pre1:q (x + 1)) (x0:Z) (Post1:x0 = (x + 1)%Z), q x0.
 Proof.
 intros; rewrite Post1; assumption.
Qed.




(* Why obligation from file , characters 205-243 *)
Lemma p2_po_1 : forall (Pre1:q 7) (x0:Z) (Post1:x0 = (3 + 4)%Z), q x0.
Proof.
intros; rewrite Post1; assumption.
Qed.




(* Why obligation from file , characters 254-306 *)
Lemma p3_po_1 :
 forall (x x0:Z) (Post1:x0 = (x + 1)%Z) (x1:Z) (Post2:x1 = (x0 + 2)%Z),
   x1 = (x + 3)%Z.
 Proof.
 intros; omega.
Qed.




(* Why obligation from file , characters 317-360 *)
Lemma p4_po_1 :
 forall (x0:Z) (Post1:x0 = 7%Z) (x1:Z) (Post2:x1 = (2 * x0)%Z),
   x1 = 14%Z.
 Proof.
 intros; omega.
Qed.




(* Why obligation from file , characters 371-396 *)
Lemma p5_po_1 : (3 + 4)%Z = 7%Z.
Proof.
omega.
Qed.




(* Why obligation from file , characters 424-429 *)
Lemma p6_po_1 : forall (a:Z) (Post1:a = 3%Z), (a + 4)%Z = 7%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 478-483 *)
Lemma p7_po_1 : forall (a:Z) (Post1:a = 4%Z), (3 + (a + a))%Z = 11%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 592-594 *)
Lemma p8_po_1 :
 forall (x:Z) (Pre1:q (x + 1)) (x0:Z) (Post1:x0 = (x + 1)%Z),
   q x0 /\ (3 + x0)%Z = (x + 4)%Z.
Proof.
intuition; rewrite Post1; assumption.
Qed.




(* Why obligation from file , characters 723-724 *)
Lemma p9_po_1 :
 forall (x0:Z) (Post3:x0 = 2%Z) (x:Z),
   x = 1%Z -> (1 + 1)%Z = 2%Z /\ x = 1%Z.
Proof.
intuition.
Qed.


(* Why obligation from file , characters 784-785 *)
Lemma p9a_po_1 :
 forall (x0:Z) (Post2:x0 = 1%Z), (1 + 1)%Z = 2%Z /\ x0 = 1%Z.
Proof.
intuition.
Qed.




(*Why*) Parameter
          fsucc :
            forall x:Z, sig_1 Z (fun result:Z => result = (x + 1)%Z).

(* Why obligation from file , characters 924-951 *)
Lemma p10_po_1 :
 forall (result1:Z) (Post1:result1 = (0 + 1)%Z), result1 = 1%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 963-1004 *)
Lemma p11_po_1 :
 forall (aux_2:Z) (Post1:aux_2 = (3 + 1)%Z) (aux_1:Z)
   (Post4:aux_1 = (0 + 1)%Z), (aux_1 + aux_2)%Z = 5%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 1042-1047 *)
Lemma p11a_po_1 : forall (a:Z) (Post1:a = (1 + 1)%Z), (a + a)%Z = 4%Z.
Proof.
intros; omega.
Qed.




(*Why*) Parameter
          incrx :
            forall (x_:unit) (x:Z),
              sig_2 Z unit (fun (x0:Z) (result:unit) => x0 = (x + 1)%Z).

(* Why obligation from file , characters 1190-1222 *)
Lemma p12_po_1 :
 forall (x:Z) (Pre1:x = 0%Z) (x0:Z) (Post1:x0 = (x + 1)%Z), x0 = 1%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 1234-1288 *)
Lemma p13_po_1 :
 forall (x x0:Z) (Post1:x0 = (x + 1)%Z) (x1:Z) (Post3:x1 = (x0 + 1)%Z),
   x1 = (x + 2)%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 1301-1339 *)
Lemma p13a_po_1 :
 forall (x x0:Z) (Post1:x0 = (x + 1)%Z) (x1:Z) (Post3:x1 = (x0 + 1)%Z),
   x1 = (x + 2)%Z.
Proof.
intros; omega.
Qed.




(*Why*) Parameter
          incrx2 :
            forall (x_:unit) (x:Z),
              sig_2 Z Z
                (fun x0 result:Z => x0 = (x + 1)%Z /\ result = x0).

(* Why obligation from file , characters 1487-1525 *)
Lemma p14_po_1 :
 forall (x:Z) (Pre1:x = 0%Z) (x0 result1:Z)
   (Post1:x0 = (x + 1)%Z /\ result1 = x0), result1 = 1%Z.
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 1576-1608 *)
Lemma p15_po_1 :
 forall (t:array Z) (Pre2:array_length t = 10%Z),
   (0 <= 0)%Z /\ (0 < array_length t)%Z.
 (* p15_po_1 *)
Proof.
intros; omega.
Qed.




(* Why obligation from file , characters 1621-1658 *)
Lemma p16_po_1 :
 forall (t:array Z) (Pre2:array_length t = 10%Z),
   (0 <= 9)%Z /\ (9 < array_length t)%Z.
 (* p16_po_1 *)
Proof.
intros; simpl; omega.
Qed.




(* Why obligation from file , characters 1671-1730 *)
Lemma p17_po_1 :
 forall (t:array Z)
   (Pre3:array_length t = 10%Z /\
         (0 <= access t 0)%Z /\ (access t 0 < 10)%Z),
   (0 <= access t 0)%Z /\ (access t 0 < array_length t)%Z.
 (* p17_po_1 *)
Proof.
intros; omega.
Qed.


(* 
 Local Variables:
 mode: coq 
  coq-prog-name: 
 End:
*)


(* Why obligation from file , characters 1717-1721 *)
Lemma p17_po_2 :
 forall (t:array Z)
   (Pre3:array_length t = 10%Z /\
         (0 <= access t 0)%Z /\ (access t 0 < 10)%Z)
   (Pre2:(0 <= access t 0)%Z /\ (access t 0 < array_length t)%Z),
   (0 <= 0)%Z /\ (0 < array_length t)%Z.
Proof.
intros; simpl; omega.
Qed.


(* Why obligation from file , characters 1788-1790 *)
Lemma p18_po_1 :
 forall (t:array Z) (x:Z) (Pre2:array_length t = 10%Z) (aux_2:Z)
   (Post2:aux_2 = x) (x0:Z) (Post1:x0 = 0%Z),
   access (store t x0 aux_2) 0 = x /\
   (0 <= x0)%Z /\ (x0 < array_length t)%Z.
Proof.
intuition.
subst x0; AccessSame.
Qed.


