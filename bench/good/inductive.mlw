inductive isfib: int, int -> prop =
| isfib0: isfib(0,0) 
| isfib1: isfib(1,1)
| isfibn: forall n:int. forall r:int. forall p:int.
            n >= 0 and isfib(n,r) and isfib(n+1,p) -> isfib(n+2, p+r)

goal fib2: isfib(2,1)
goal fib6: isfib(6,8)
goal neg_fib2: not isfib(2,2)
goal neg_fib5: not isfib(5,6)

let rec fib (n:int) : int { variant n } =
  { n >= 0 }
  if 0<=n && n<=1 then n else
    (fib (n-1)) + (fib (n-2))
  { isfib(n,result) }
