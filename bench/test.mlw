
(***
parameter x,y,z : int ref

let p () =
  if !x <> 0 then x := 0;
  if !y <> 0 then y := 0;
  if !z <> 0 then z := 0
  { x = 0 and y = 0 and z = 0 }

***)

(***

parameter x : int ref

let p () =
  x := 0;
  while !x < 10 do { invariant 0 <= x <= 10 }
    x := !x + 10
  done
  { x = 10 }

***)

parameter x : int ref
exception E
exception F of int
logic q : int -> prop

let p10 = (try raise E : int with E -> assert {1=2}; 0 end) { result = 1 }

let p11 = (try raise (F 1) : int with F x -> x end) { result = 2 }

let p12 = 
  try 
    begin raise E; raise (F 1); 1 end
  with E -> 2
     | F x -> 3
  end
  { result = 4 }

