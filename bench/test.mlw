
(***
predicate p() = true

exception Return

let f = fun (n : int) ->
  try
    let found = ref false in
    let i = ref 0 in
    while (lt_int_ !i 10) do
    { invariant true variant 0 }
        if (eq_int_ !i n)
        then begin found := true; raise Return end
        else i := add_int !i 1
    done;
    raise Return
  with
    Return -> void
  end
  { p }
***)
