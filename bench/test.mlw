
type t

logic acc : t, int -> int
logic upd : t, int, int -> t

axiom acc_upd_eq : 
  forall a:t. forall i,v:int [upd(a,i,v)]. acc(upd(a,i,v),i) = v
axiom acc_upd_neq : 
  forall a:t. forall i,j,v:int [upd(a,i,v),acc(a,j)]. i<>j -> acc(upd(a,i,v),j) = acc(a,j)

(*
predicate sorted(a:t, l:int, u:int) = 
  forall i,j:int. l <= i <= j <= u -> acc(a,i) <= acc(a,j)
*)

predicate sorted(a:t, l:int, u:int) = 
  forall i:int. l <= i < u -> acc(a,i) <= acc(a,i+1)
(*
logic sorted : t,int,int -> prop
axiom sorted_def : 
  forall a:t. forall l,u:int. sorted(a,l,u) <->
  (forall i:int. l <= i < u -> acc(a,i) <= acc(a,i+1))
*)


goal test : 
  forall a:t.
  sorted(upd(upd(a,0,0),5,1), 0, 5) ->
  sorted(upd(upd(a,0,10),5,11), 0, 5) ->
  false
  (* acc(a,4) <= 1 and acc(a,4) >= 10 *)



