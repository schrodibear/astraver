
logic N,X : int 

parameter mem : int array

parameter i1,i2,i3 : int ref

let seq1 () =
  i2 := (neg_int (access !mem (add_int X !i1)));
  (assert { 1 <= i1 <= N and 1 <= -i2 <= N and -N <= i3 <= -1 }; void)

(***
predicate p() = true

exception Return

let f = fun (n : int) ->
  try
    let found = ref false in
    let i = ref 0 in
    while (lt_int_ !i 10) do
    { invariant true variant 0 }
        if (eq_int_ !i n)
        then begin found := true; raise Return end
        else i := add_int !i 1
    done;
    raise Return
  with
    Return -> void
  end
  { p }
***)
