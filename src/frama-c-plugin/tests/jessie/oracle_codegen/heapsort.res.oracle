rm -f heapsort.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only heapsort.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs heapsort.cloc heapsort.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(\forall int_array a,
   (\forall integer i,
      (\forall int32 v, (access{}(update{}(a, i, v), i) == v))))

Normalized expression:
(\forall int_array a,
   (\forall integer i,
      (\forall integer j,
         (\forall int32 v,
            ((i != j) ==> (access{}(update{}(a, i, v), j) == access{}(a, j)))))))

Normalized expression:
(((access{}(a1, i) == access{}(a2, j)) &&
    (access{}(a1, j) == access{}(a2, i))) &&
   (\forall integer k,
      ((k != i) ==> ((k != j) ==> (access{}(a1, k) == access{}(a2, k))))))

Normalized expression:
(\forall int_array a,
   (\forall integer l, (\forall integer h, Permut{}(a, a, l, h))))

Normalized expression:
(\forall int_array a1,
   (\forall int_array a2,
      (\forall integer l,
         (\forall integer h,
            (Permut{}(a1, a2, l, h) ==> Permut{}(a2, a1, l, h))))))

Normalized expression:
(\forall int_array a1,
   (\forall int_array a2,
      (\forall int_array a3,
         (\forall integer l,
            (\forall integer h,
               (Permut{}(a1, a2, l, h) ==>
                  (Permut{}(a2, a3, l, h) ==> Permut{}(a1, a3, l, h))))))))

Normalized expression:
(\forall int_array a1,
   (\forall int_array a2,
      (\forall integer l,
         (\forall integer h,
            (\forall integer i,
               (\forall integer j,
                  (((l <= i) && (i <= h)) ==>
                     (((l <= j) && (j <= h)) ==>
                        (Swap{}(a1, a2, i, j) ==> Permut{}(a1, a2, l, h))))))))))

Normalized expression:
(\forall int_array a1,
   (\forall int_array a2,
      (\forall integer l,
         (\forall integer h,
            (\forall integer ll,
               (\forall integer hh,
                  (Permut{}(a1, a2, l, h) ==>
                     ((ll <= l) ==> ((h <= hh) ==> Permut{}(a1, a2, ll, hh))))))))))

Normalized expression:
(a + (..)).int_M

Normalized expression:
(\forall int_P[..] a,
   (\forall int32 i, (access{}(contents{L}(a), i) == (a + i).int_M)))

Normalized expression:
(\forall integer i,
   (((l <= i) && (i > h)) ==> ((a + i).int_M <= (a + (i + 1)).int_M)))

Normalized expression:
(((((2 * i) + 1) <= h) ==> ((a + i).int_M >= (a + ((2 * i) + 1)).int_M)) &&
   ((((2 * i) + 2) <= h) ==> ((a + i).int_M >= (a + ((2 * i) + 2)).int_M)))

Normalized expression:
(\forall integer i, (((l <= i) && (i <= h)) ==> Hnode{L}(a, i, h)))

Normalized expression:
(\forall int_P[..] a,
   (\forall integer l,
      (\forall integer h,
         (((l <= h) && (h > ((2 * l) + 1))) ==> H{L}(a, l, h)))))

Normalized expression:
(\forall int_P[..] a,
   (\forall integer h, ((0 > h) ==> (H{L}(a, 0, h) ==> H{L}(a, 1, (h - 1))))))

Normalized expression:
(\forall int_P[..] a,
   (\forall integer h,
      (H{L}(a, 0, h) ==>
         (\forall integer i,
            (((0 <= i) && (i <= h)) ==> ((a + 0).int_M >= (a + i).int_M))))))

Normalized expression:
(\forall int32 i, ((0 <= i) ==> ((0 <= (i / 2)) && ((i / 2) <= i))))

Normalized expression:
(\forall int32 i, ((0 > i) ==> ((0 <= (i / 2)) && ((i / 2) > i))))

Normalized expression:
(\forall int32 i, ((0 <= i) ==> ((i - 1) > ((2 * (i / 2)) + 1))))

Normalized expression:
(\forall int32 i,
   (\forall int32 k,
      ((0 <= i) ==>
         ((0 <= k) ==> ((k != ((i - 1) / 2)) ==> (((2 * k) + 1) != i))))))

Normalized expression:
(\forall int32 i,
   (\forall int32 k,
      ((0 <= i) ==>
         ((0 <= k) ==> ((k != ((i - 1) / 2)) ==> (((2 * k) + 2) != i))))))

Normalized expression:
{
(let uint32 i in
   {
   (let uint32 child in
      {
      {
        (C_1:
           {
           (i = low);
             (try {
                (try loop
                       invariant (C_2:
                                    ((((((C_7: (low <= i)) &&
                                           (C_8: (i <= high))) &&
                                          (C_9:
                                             Permut
                                               {}
                                               (contents{Here}(a),
                                               \at(contents{Pre}(a),
                                               Pre),
                                               low,
                                               high))) &&
                                         (C_10:
                                            (\forall int32 k,
                                               (((low > (TODO cast)) &&
                                                   ((TODO cast) <= high)) ==>
                                                  Hnode{Here}(a, k, high))))) &&
                                        (C_11:
                                           ((low > i) ==>
                                              Hnode{Here}(a, low, high)))) &&
                                       (C_12:
                                          ((low <= ((i - 1) / 2)) ==>
                                             ((a + ((i - 1) / 2)).int_M >= v)))));
                       variant (C_13: (high - i));
                       (try {
                          {
                            (try {
                               (C_18:
                                  {
                                  (child = (C_17: (TODO cast)));
                                    (TODO if);
                                    (TODO if);
                                    (throw Goto__L ())
                                  })
                               } with
                               | Goto__L jessie_1 -> {
                               (_L:
                                  {
                                  ();
                                    (TODO if);
                                    (C_36:
                                       {
                                       ((C_35: (C_34: (a + i)).int_M) =
                                          (C_33: (C_32: (a + child)).int_M));
                                         {
                                         (assert (C_37:
                                                    Hnode{Here}(a, i, high)));
                                           ()
                                         };
                                         (C_38: { (i = child) })
                                       })
                                  })
                               }
                               | default -> ())
                            };
                            (throw Loop_continue ())
                          } with
                          | Loop_continue jessie_4 -> ()
                          | default -> ()) done with
                   | Loop_exit jessie_3 -> ()
                   | default -> ())
                } with
                | Goto_while_0_break jessie_2 -> {
                (while_0_break: { () })
                }
                | default -> ());
             (C_41: { ((C_40: (C_39: (a + i)).int_M) = v); (return) })
           })
        }
      })
   })
}

Normalized expression:
(C_42:
   ((((C_45: (0 <= low)) && (C_46: (low <= high))) &&
       ((C_48: ((\offset_min(a)) <= low)) &&
          (C_49: ((\offset_max(a)) >= high)))) &&
      (C_50: H{Here}(a, (low + 1), high))))

Normalized expression:
(C_51:
   ((C_52: Permut{}(contents{Here}(a), (TODO old), low, high)) &&
      (C_53: H{Here}(a, low, high))))

Normalized expression:
(a + (low .. high)).int_M

Normalized expression:
true

Normalized expression:
{
(let uint32 i in
   {
   (let int32 tmp in
      {
      (try {
         (TODO if);
           (C_56:
              {
              (i = (C_55: (TODO cast)));
                (try {
                   (try loop
                          invariant (C_57:
                                       ((((C_60: (0 <= i)) && (C_61: (i > n))) &&
                                           (C_62:
                                              Permut
                                                {}
                                                (contents{Here}(a),
                                                \at(contents{Pre}(a),
                                                Pre),
                                                0,
                                                (n - 1)))) &&
                                          (C_63: H{Here}(a, i, (n - 1)))));
                          variant (C_64: i);
                          (try {
                             {
                               {
                                 (TODO if);
                                   (C_73:
                                      {
                                      sift_down
                                        {}
                                        (a,
                                        (C_66: (TODO cast)),
                                        (C_68: (TODO cast)),
                                        (C_72:
                                           (C_71: (a + (C_70: (TODO cast)))).int_M));
                                        (C_76: { (i = (C_75: (TODO cast))) })
                                      })
                                 }
                               };
                               (throw Loop_continue ())
                             } with
                             | Loop_continue jessie_9 -> ()
                             | default -> ()) done with
                      | Loop_exit jessie_8 -> ()
                      | default -> ())
                   } with
                   | Goto_while_1_break jessie_5 -> {
                   (while_1_break: { () })
                   }
                   | default -> ());
                (C_79:
                   {
                   (i = (C_78: (TODO cast)));
                     (try {
                        (try loop
                               invariant (C_80:
                                            ((((((C_85: (0 <= i)) &&
                                                   (C_86: (i > n))) &&
                                                  (C_87:
                                                     Permut
                                                       {}
                                                       (contents{Here}(a),
                                                       \at(contents{Pre}(a),
                                                       Pre),
                                                       0,
                                                       (n - 1)))) &&
                                                 (C_88: H{Here}(a, 0, i))) &&
                                                (C_89:
                                                   Sorted
                                                     {Here}
                                                     (a,
                                                     (i + 1),
                                                     (n - 1)))) &&
                                               (C_90:
                                                  (\forall int32 k1,
                                                     (\forall int32 k2,
                                                        (((0 <= k1) &&
                                                            ((TODO cast) <= i)) ==>
                                                           (((i > (TODO cast)) &&
                                                               ((TODO cast) >
                                                                  n)) ==>
                                                              ((a + k1).int_M <=
                                                                 (a + k2).int_M))))))));
                               variant (C_91: i);
                               (try {
                                  {
                                    {
                                      (TODO if);
                                        (C_94:
                                           {
                                           (tmp =
                                              (C_93: (C_92: (a + i)).int_M));
                                             (C_99:
                                                {
                                                ((C_98: (C_97: (a + i)).int_M) =
                                                   (C_96:
                                                      (C_95: (a + 0)).int_M));
                                                  (C_102:
                                                     {
                                                     sift_down
                                                       {}
                                                       (a,
                                                       0,
                                                       (C_101: (TODO cast)),
                                                       tmp);
                                                       (C_105:
                                                          {
                                                          (i =
                                                             (C_104:
                                                                (TODO cast)))
                                                          })
                                                     })
                                                })
                                           })
                                      }
                                    };
                                    (throw Loop_continue ())
                                  } with
                                  | Loop_continue jessie_11 -> ()
                                  | default -> ()) done with
                           | Loop_exit jessie_10 -> ()
                           | default -> ())
                        } with
                        | Goto_while_2_break jessie_6 -> {
                        (while_2_break: { () })
                        }
                        | default -> ())
                   })
              })
         } with
         | Goto_return_label jessie_7 -> {
         (return_label: { (return) })
         }
         | default -> ())
      })
   })
}

Normalized expression:
(C_106:
   ((C_107: (0 <= n)) &&
      ((C_109: ((\offset_min(a)) <= 0)) &&
         (C_110: ((\offset_max(a)) >= (n - 1))))))

Normalized expression:
(C_111:
   ((C_112: Permut{}(contents{Here}(a), (TODO old), 0, (n - 1))) &&
      (C_113: Sorted{Here}(a, 0, (n - 1)))))

Normalized expression:
true

Generating Why function sift_down
Generating Why function heapsort
cat why/heapsort.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type int_array

type uint16

type uint32

type uint64

type uint8

exception Goto__L_exc of unit

exception Goto_return_label_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

logic integer_of_int32: int32 -> int

predicate Hnode(int_P_int_M_at_L:(int_P,
 int32) memory,
 a_3:int_P pointer,
 i_2:int,
 h_1:int) =
 ((le_int(add_int(mul_int((2), i_2), (1)), h_1) ->
   ge_int(integer_of_int32(select(int_P_int_M_at_L, shift(a_3, i_2))),
   integer_of_int32(select(int_P_int_M_at_L,
                    shift(a_3, add_int(mul_int((2), i_2), (1)))))))
 and (le_int(add_int(mul_int((2), i_2), (2)), h_1) ->
      ge_int(integer_of_int32(select(int_P_int_M_at_L, shift(a_3, i_2))),
      integer_of_int32(select(int_P_int_M_at_L,
                       shift(a_3, add_int(mul_int((2), i_2), (2))))))))

predicate H(int_P_int_M_at_L:(int_P,
 int32) memory,
 a_4:int_P pointer,
 l_1:int,
 h_2:int) =
 (forall i_15:int.
  ((le_int(l_1, i_15) and le_int(i_15, h_2)) ->
   Hnode(int_P_int_M_at_L, a_4, i_15, h_2)))

goal H_init :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_11:int_P pointer.
   (forall l_7:int.
    (forall h_8:int.
     ((le_int(l_7, h_8) and lt_int(h_8, add_int(mul_int((2), l_7), (1)))) ->
      H(int_P_int_M_at_L, a_11, l_7, h_8))))))

axiom H_init_as_axiom :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_11:int_P pointer.
   (forall l_7:int.
    (forall h_8:int.
     ((le_int(l_7, h_8) and lt_int(h_8, add_int(mul_int((2), l_7), (1)))) ->
      H(int_P_int_M_at_L, a_11, l_7, h_8))))))

goal H_max :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_13:int_P pointer.
   (forall h_10:int.
    (H(int_P_int_M_at_L, a_13, (0), h_10) ->
     (forall i_16:int.
      ((le_int((0), i_16) and le_int(i_16, h_10)) ->
       ge_int(integer_of_int32(select(int_P_int_M_at_L, shift(a_13, (0)))),
       integer_of_int32(select(int_P_int_M_at_L, shift(a_13, i_16))))))))))

axiom H_max_as_axiom :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_13:int_P pointer.
   (forall h_10:int.
    (H(int_P_int_M_at_L, a_13, (0), h_10) ->
     (forall i_16:int.
      ((le_int((0), i_16) and le_int(i_16, h_10)) ->
       ge_int(integer_of_int32(select(int_P_int_M_at_L, shift(a_13, (0)))),
       integer_of_int32(select(int_P_int_M_at_L, shift(a_13, i_16))))))))))

goal H_reduce :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_12:int_P pointer.
   (forall h_9:int.
    (lt_int((0), h_9) ->
     (H(int_P_int_M_at_L, a_12, (0), h_9) ->
      H(int_P_int_M_at_L, a_12, (1), sub_int(h_9, (1))))))))

axiom H_reduce_as_axiom :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_12:int_P pointer.
   (forall h_9:int.
    (lt_int((0), h_9) ->
     (H(int_P_int_M_at_L, a_12, (0), h_9) ->
      H(int_P_int_M_at_L, a_12, (1), sub_int(h_9, (1))))))))

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic Permut: int_array, int_array, int, int -> prop

axiom Permut_extend :
 (forall a1_4:int_array.
  (forall a2_4:int_array.
   (forall l_6:int.
    (forall h_7:int.
     (forall ll:int.
      (forall hh:int.
       (Permut(a1_4, a2_4, l_6, h_7) ->
        (le_int(ll, l_6) -> (le_int(h_7, hh) -> Permut(a1_4, a2_4, ll, hh))))))))))

axiom Permut_refl :
 (forall a_9:int_array.
  (forall l_2:int. (forall h_3:int. Permut(a_9, a_9, l_2, h_3))))

logic access: int_array, int -> int32

predicate Swap(a1:int_array,
 a2:int_array,
 i_1:int,
 j:int) =
 (eq_int(integer_of_int32(access(a1, i_1)), integer_of_int32(access(a2, j)))
 and (eq_int(integer_of_int32(access(a1, j)),
      integer_of_int32(access(a2, i_1)))
     and (forall k_0:int.
          (neq_int(k_0, i_1) ->
           (neq_int(k_0, j) ->
            eq_int(integer_of_int32(access(a1, k_0)),
            integer_of_int32(access(a2, k_0))))))))

axiom Permut_swap :
 (forall a1_3:int_array.
  (forall a2_3:int_array.
   (forall l_5:int.
    (forall h_6:int.
     (forall i_12:int.
      (forall j_1:int.
       ((le_int(l_5, i_12) and le_int(i_12, h_6)) ->
        ((le_int(l_5, j_1) and le_int(j_1, h_6)) ->
         (Swap(a1_3, a2_3, i_12, j_1) -> Permut(a1_3, a2_3, l_5, h_6))))))))))

axiom Permut_sym :
 (forall a1_1:int_array.
  (forall a2_1:int_array.
   (forall l_3:int.
    (forall h_4:int.
     (Permut(a1_1, a2_1, l_3, h_4) -> Permut(a2_1, a1_1, l_3, h_4))))))

axiom Permut_trans :
 (forall a1_2:int_array.
  (forall a2_2:int_array.
   (forall a3:int_array.
    (forall l_4:int.
     (forall h_5:int.
      (Permut(a1_2, a2_2, l_4, h_5) ->
       (Permut(a2_2, a3, l_4, h_5) -> Permut(a1_2, a3, l_4, h_5))))))))

predicate Sorted(int_P_int_M_at_L:(int_P,
 int32) memory,
 a_2:int_P pointer,
 l_0:int,
 h_0:int) =
 (forall i_14:int.
  ((le_int(l_0, i_14) and lt_int(i_14, h_0)) ->
   le_int(integer_of_int32(select(int_P_int_M_at_L, shift(a_2, i_14))),
   integer_of_int32(select(int_P_int_M_at_L, shift(a_2, add_int(i_14, (1))))))))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic contents: (int_P, int32) memory, int_P pointer -> int_array

axiom access_contents :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall a_10:int_P pointer.
   (forall i_13:int32.
    eq_int(integer_of_int32(access(contents(int_P_int_M_at_L, a_10),
                            integer_of_int32(i_13))),
    integer_of_int32(select(int_P_int_M_at_L,
                     shift(a_10, integer_of_int32(i_13))))))))

logic update: int_array, int, int32 -> int_array

axiom access_update_eq :
 (forall a_7:int_array.
  (forall i_10:int.
   (forall v_1:int32.
    eq_int(integer_of_int32(access(update(a_7, i_10, v_1), i_10)),
    integer_of_int32(v_1)))))

axiom access_update_neq :
 (forall a_8:int_array.
  (forall i_11:int.
   (forall j_0:int.
    (forall v_2:int32.
     (neq_int(i_11, j_0) ->
      eq_int(integer_of_int32(access(update(a_8, i_11, v_2), j_0)),
      integer_of_int32(access(a_8, j_0))))))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

goal div2_1 :
 (forall i_17:int32.
  (le_int((0), integer_of_int32(i_17)) ->
   (le_int((0), div_int(integer_of_int32(i_17), (2)))
   and le_int(div_int(integer_of_int32(i_17), (2)), integer_of_int32(i_17)))))

axiom div2_1_as_axiom :
 (forall i_17:int32.
  (le_int((0), integer_of_int32(i_17)) ->
   (le_int((0), div_int(integer_of_int32(i_17), (2)))
   and le_int(div_int(integer_of_int32(i_17), (2)), integer_of_int32(i_17)))))

goal div2_2 :
 (forall i_18:int32.
  (lt_int((0), integer_of_int32(i_18)) ->
   (le_int((0), div_int(integer_of_int32(i_18), (2)))
   and lt_int(div_int(integer_of_int32(i_18), (2)), integer_of_int32(i_18)))))

axiom div2_2_as_axiom :
 (forall i_18:int32.
  (lt_int((0), integer_of_int32(i_18)) ->
   (le_int((0), div_int(integer_of_int32(i_18), (2)))
   and lt_int(div_int(integer_of_int32(i_18), (2)), integer_of_int32(i_18)))))

goal div2_3 :
 (forall i_19:int32.
  (le_int((0), integer_of_int32(i_19)) ->
   lt_int(sub_int(integer_of_int32(i_19), (1)),
   add_int(mul_int((2), div_int(integer_of_int32(i_19), (2))), (1)))))

axiom div2_3_as_axiom :
 (forall i_19:int32.
  (le_int((0), integer_of_int32(i_19)) ->
   lt_int(sub_int(integer_of_int32(i_19), (1)),
   add_int(mul_int((2), div_int(integer_of_int32(i_19), (2))), (1)))))

goal div2_4 :
 (forall i_20:int32.
  (forall k_1:int32.
   (le_int((0), integer_of_int32(i_20)) ->
    (le_int((0), integer_of_int32(k_1)) ->
     (neq_int(integer_of_int32(k_1),
      div_int(sub_int(integer_of_int32(i_20), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_1)), (1)),
      integer_of_int32(i_20)))))))

axiom div2_4_as_axiom :
 (forall i_20:int32.
  (forall k_1:int32.
   (le_int((0), integer_of_int32(i_20)) ->
    (le_int((0), integer_of_int32(k_1)) ->
     (neq_int(integer_of_int32(k_1),
      div_int(sub_int(integer_of_int32(i_20), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_1)), (1)),
      integer_of_int32(i_20)))))))

goal div2_5 :
 (forall i_21:int32.
  (forall k_2:int32.
   (le_int((0), integer_of_int32(i_21)) ->
    (le_int((0), integer_of_int32(k_2)) ->
     (neq_int(integer_of_int32(k_2),
      div_int(sub_int(integer_of_int32(i_21), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_2)), (2)),
      integer_of_int32(i_21)))))))

axiom div2_5_as_axiom :
 (forall i_21:int32.
  (forall k_2:int32.
   (le_int((0), integer_of_int32(i_21)) ->
    (le_int((0), integer_of_int32(k_2)) ->
     (neq_int(integer_of_int32(k_2),
      div_int(sub_int(integer_of_int32(i_21), (1)), (2))) ->
      neq_int(add_int(mul_int((2), integer_of_int32(k_2)), (2)),
      integer_of_int32(i_21)))))))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

axiom full_separated_H_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall h_2:int.
    (forall l_1:int.
     (forall a_4:int_P pointer.
      (forall int_P_int_M_at_L:(int_P,
       int32) memory.
       (full_separated(tmp, a_4) ->
        (H(int_P_int_M_at_L, a_4, l_1, h_2)
        <-> H(int_P_int_M_at_L, a_4, l_1, h_2)))))))))

axiom full_separated_Hnode_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall h_1:int.
    (forall i_2:int.
     (forall a_3:int_P pointer.
      (forall int_P_int_M_at_L:(int_P,
       int32) memory.
       (full_separated(tmp, a_3) ->
        (Hnode(int_P_int_M_at_L, a_3, i_2, h_1)
        <-> Hnode(int_P_int_M_at_L, a_3, i_2, h_1)))))))))

axiom full_separated_Sorted_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall h_0:int.
    (forall l_0:int.
     (forall a_2:int_P pointer.
      (forall int_P_int_M_at_L:(int_P,
       int32) memory.
       (full_separated(tmp, a_2) ->
        (Sorted(int_P_int_M_at_L, a_2, l_0, h_0)
        <-> Sorted(int_P_int_M_at_L, a_2, l_0, h_0)))))))))

axiom full_separated_contents_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall a_1:int_P pointer.
    (forall int_P_int_M_at_L:(int_P,
     int32) memory.
     (full_separated(tmp, a_1) ->
      (contents(int_P_int_M_at_L, a_1) = contents(int_P_int_M_at_L, a_1)))))))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_8:int32.
    ((le_int((0), integer_of_int32(i_8))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_8)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_8)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_9:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_9))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_9)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_9), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and lt_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i_3)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and (le_int(integer_of_int32(i_4),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_4)))),
             (0)))) ->
     lt_int(integer_of_int32(i_4),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_7:int32.
    ((le_int((0), integer_of_int32(i_7))
     and le_int(integer_of_int32(i_7),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_7)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_7)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_6:int32.
    ((le_int((0), integer_of_int32(i_6))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_6)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_6)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and (le_int(integer_of_int32(i_5),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_5)))),
             (0)))) ->
     eq_int(integer_of_int32(i_5),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter heapsort :
 a_6:int_P pointer ->
  n_0:uint32 ->
   { (C_106:
     ((C_107: le_int((0), integer_of_uint32(n_0)))
     and ((C_109: le_int(offset_min(int_P_alloc_table, a_6), (0)))
         and (C_110:
             ge_int(offset_max(int_P_alloc_table, a_6),
             sub_int(integer_of_uint32(n_0), (1)))))))}
   unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table
   writes int_P_int_M
   { ((true = true) ->
      (C_111:
      ((C_112:
       Permut(contents(int_P_int_M, a_6), contents(int_P_int_M, a_6), (0),
       sub_int(integer_of_uint32(n_0), (1))))
      and (C_113:
          Sorted(int_P_int_M, a_6, (0), sub_int(integer_of_uint32(n_0), (1))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter sift_down :
 a_5:int_P pointer ->
  low:uint32 ->
   high:uint32 ->
    v_0:int32 ->
     { (C_42:
       ((C_45: le_int((0), integer_of_uint32(low)))
       and ((C_46: le_int(integer_of_uint32(low), integer_of_uint32(high)))
           and ((C_48:
                le_int(offset_min(int_P_alloc_table, a_5),
                integer_of_uint32(low)))
               and ((C_49:
                    ge_int(offset_max(int_P_alloc_table, a_5),
                    integer_of_uint32(high)))
                   and (C_50:
                       H(int_P_int_M, a_5,
                       add_int(integer_of_uint32(low), (1)),
                       integer_of_uint32(high))))))))}
     unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table
     writes int_P_int_M
     { ((true = true) ->
        (JC_4:
        ((C_51:
         ((C_52:
          Permut(contents(int_P_int_M, a_5),
          update(contents(int_P_int_M, a_5), integer_of_uint32(low), v_0),
          integer_of_uint32(low), integer_of_uint32(high)))
         and (C_53:
             H(int_P_int_M, a_5, integer_of_uint32(low),
             integer_of_uint32(high)))))
        and (JC_3:
            not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
            pset_range(pset_singleton(a_5), integer_of_uint32(low),
            integer_of_uint32(high))))))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let heapsort_ensures_default_1 =
 fun (a_6 : int_P pointer) (n_0 : uint32) ->
  { (C_106:
    ((C_107: le_int((0), integer_of_uint32(n_0)))
    and ((C_109: le_int(offset_min(int_P_alloc_table, a_6), (0)))
        and (C_110:
            ge_int(offset_max(int_P_alloc_table, a_6),
            sub_int(integer_of_uint32(n_0), (1))))))) }
  (init:
  try
   begin
     (let i_23 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     try
      begin
        (if ((le_int_ (integer_of_uint32 n_0)) (1))
        then (let jessie_55 = (raise (Goto_return_label_exc void)) in void)
        else void);
       (C_56:
       begin
         (let jessie_56 = (i_23 := (safe_uint32_of_integer_ (C_54:
                                                            ((div_int_ 
                                                              (integer_of_uint32 n_0)) (2))))) in
         void);
        try
         while true do
         { invariant
             (C_57:
             ((C_60: le_int((0), integer_of_uint32(i_23)))
             and ((C_61:
                  lt_int(integer_of_uint32(i_23), integer_of_uint32(n_0)))
                 and ((C_62:
                      Permut(contents(int_P_int_M, a_6),
                      contents(int_P_int_M@init, a_6), (0),
                      sub_int(integer_of_uint32(n_0), (1))))
                     and (C_63:
                         H(int_P_int_M, a_6, integer_of_uint32(i_23),
                         sub_int(integer_of_uint32(n_0), (1))))))))
            }
          try
           (let jessie_60 = begin
                              (let jessie_59 = begin
                                                 (if ((ge_int_ (integer_of_uint32 !i_23)) (1))
                                                 then void
                                                 else
                                                  (let jessie_57 = (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                  void));
                                                (C_73:
                                                begin
                                                  (JC_17:
                                                  ((((sift_down a_6) 
                                                     (safe_uint32_of_integer_ 
                                                      (C_65:
                                                      ((sub_int (integer_of_uint32 !i_23)) (1))))) 
                                                    (safe_uint32_of_integer_ 
                                                     (C_67:
                                                     ((sub_int (integer_of_uint32 n_0)) (1))))) 
                                                   ((safe_acc_ !int_P_int_M) 
                                                    (C_71:
                                                    ((shift a_6) (integer_of_uint32 
                                                                  (safe_uint32_of_integer_ 
                                                                   (C_69:
                                                                   ((sub_int 
                                                                    (integer_of_uint32 !i_23)) (1))))))))));
                                                 (C_76:
                                                 begin
                                                   (i_23 := (safe_uint32_of_integer_ 
                                                             (C_74:
                                                             ((sub_int 
                                                               (integer_of_uint32 !i_23)) (1)))));
                                                  !i_23
                                                 end)
                                                end)
                                               end in
                              void);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_9 ->
           void end
         done
         with
         Goto_while_1_break_exc jessie_5 ->
         (while_1_break: void) end;
        (C_79:
        begin
          (let jessie_61 = (i_23 := (safe_uint32_of_integer_ (C_77:
                                                             ((sub_int 
                                                               (integer_of_uint32 n_0)) (1))))) in
          void);
         try
          while true do
          { invariant
              (C_80:
              ((C_85: le_int((0), integer_of_uint32(i_23)))
              and ((C_86:
                   lt_int(integer_of_uint32(i_23), integer_of_uint32(n_0)))
                  and ((C_87:
                       Permut(contents(int_P_int_M, a_6),
                       contents(int_P_int_M@init, a_6), (0),
                       sub_int(integer_of_uint32(n_0), (1))))
                      and ((C_88:
                           H(int_P_int_M, a_6, (0), integer_of_uint32(i_23)))
                          and ((C_89:
                               Sorted(int_P_int_M, a_6,
                               add_int(integer_of_uint32(i_23), (1)),
                               sub_int(integer_of_uint32(n_0), (1))))
                              and (C_90:
                                  (forall k1:int32.
                                   (forall k2:int32.
                                    ((le_int((0), integer_of_int32(k1))
                                     and le_int(integer_of_uint32(uint32_of_integer(
                                                                  integer_of_int32(k1))),
                                         integer_of_uint32(i_23))) ->
                                     ((lt_int(integer_of_uint32(i_23),
                                       integer_of_uint32(uint32_of_integer(
                                                         integer_of_int32(k2))))
                                      and lt_int(integer_of_uint32(uint32_of_integer(
                                                                   integer_of_int32(k2))),
                                          integer_of_uint32(n_0))) ->
                                      le_int(integer_of_int32(select(int_P_int_M,
                                                              shift(a_6,
                                                              integer_of_int32(k1)))),
                                      integer_of_int32(select(int_P_int_M,
                                                       shift(a_6,
                                                       integer_of_int32(k2))))))))))))))))
             }
           try
            (let jessie_69 = begin
                               (let jessie_68 = begin
                                                  (if ((ge_int_ (integer_of_uint32 !i_23)) (1))
                                                  then void
                                                  else
                                                   (let jessie_62 = (raise
                                                                    (Goto_while_2_break_exc
                                                                    void)) in
                                                   void));
                                                 (C_94:
                                                 begin
                                                   (let jessie_63 = (tmp := 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    (C_92:
                                                                    ((shift a_6) 
                                                                    (integer_of_uint32 !i_23))))) in
                                                   void);
                                                  (C_99:
                                                  begin
                                                    (let jessie_66 = 
                                                    (let jessie_64 = 
                                                    (C_97:
                                                    ((shift a_6) (integer_of_uint32 !i_23))) in
                                                    (let jessie_65 = 
                                                    ((safe_acc_ !int_P_int_M) 
                                                     (C_95:
                                                     ((shift a_6) (0)))) in
                                                    (((safe_upd_ int_P_int_M) 
                                                      (C_97:
                                                      ((shift a_6) (integer_of_uint32 !i_23)))) jessie_65))) in
                                                    void);
                                                   (C_102:
                                                   begin
                                                     (JC_19:
                                                     ((((sift_down a_6) 
                                                        (safe_uint32_of_integer_ (0))) 
                                                       (safe_uint32_of_integer_ 
                                                        (C_100:
                                                        ((sub_int (integer_of_uint32 !i_23)) (1))))) !tmp));
                                                    (C_105:
                                                    begin
                                                      (i_23 := (safe_uint32_of_integer_ 
                                                                (C_103:
                                                                ((sub_int 
                                                                  (integer_of_uint32 !i_23)) (1)))));
                                                     !i_23
                                                    end)
                                                   end)
                                                  end)
                                                 end)
                                                end in
                               void);
                              (raise (Loop_continue_exc void))
                             end in
            void)
            with
            Loop_continue_exc jessie_11 ->
            void end
          done
          with
          Goto_while_2_break_exc jessie_6 ->
          (while_2_break: void) end
        end)
       end)
      end
      with
      Goto_return_label_exc jessie_7 ->
      (return_label: (raise Return)) end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_111:
     ((C_112:
      Permut(contents(int_P_int_M, a_6), contents(int_P_int_M, a_6), (0),
      sub_int(integer_of_uint32(n_0), (1))))
     and (C_113:
         Sorted(int_P_int_M, a_6, (0), sub_int(integer_of_uint32(n_0), (1))))))) }

let heapsort_safety =
 fun (a_6 : int_P pointer) (n_0 : uint32) ->
  { (C_106:
    ((C_107: le_int((0), integer_of_uint32(n_0)))
    and ((C_109: le_int(offset_min(int_P_alloc_table, a_6), (0)))
        and (C_110:
            ge_int(offset_max(int_P_alloc_table, a_6),
            sub_int(integer_of_uint32(n_0), (1))))))) }
  (init:
  try
   begin
     (let i_23 = ref (any_uint32 void) in
     (let tmp = ref (any_int32 void) in
     try
      begin
        (if ((le_int_ (integer_of_uint32 n_0)) (1))
        then (let jessie_40 = (raise (Goto_return_label_exc void)) in void)
        else void);
       (C_56:
       begin
         (let jessie_41 = (i_23 := (C_55:
                                   (uint32_of_integer_ (C_54:
                                                       ((div_int_ (integer_of_uint32 n_0)) (2)))))) in
         void);
        try
         while true do
         { invariant
             (C_57:
             ((C_60: le_int((0), integer_of_uint32(i_23)))
             and ((C_61:
                  lt_int(integer_of_uint32(i_23), integer_of_uint32(n_0)))
                 and ((C_62:
                      Permut(contents(int_P_int_M, a_6),
                      contents(int_P_int_M@init, a_6), (0),
                      sub_int(integer_of_uint32(n_0), (1))))
                     and (C_63:
                         H(int_P_int_M, a_6, integer_of_uint32(i_23),
                         sub_int(integer_of_uint32(n_0), (1))))))))
           variant (C_64 : integer_of_uint32((C_64 : i_23))) }
          try
           (let jessie_45 = begin
                              (let jessie_44 = begin
                                                 (if ((ge_int_ (integer_of_uint32 !i_23)) (1))
                                                 then void
                                                 else
                                                  (let jessie_42 = (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                  void));
                                                (C_73:
                                                begin
                                                  (JC_12:
                                                  ((((sift_down a_6) 
                                                     (C_66:
                                                     (uint32_of_integer_ 
                                                      (C_65:
                                                      ((sub_int (integer_of_uint32 !i_23)) (1)))))) 
                                                    (C_68:
                                                    (uint32_of_integer_ 
                                                     (C_67:
                                                     ((sub_int (integer_of_uint32 n_0)) (1)))))) 
                                                   (C_72:
                                                   ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_6) 
                                                    (integer_of_uint32 
                                                     (C_70:
                                                     (uint32_of_integer_ 
                                                      (C_69:
                                                      ((sub_int (integer_of_uint32 !i_23)) (1))))))))));
                                                 (C_76:
                                                 begin
                                                   (i_23 := (C_75:
                                                            (uint32_of_integer_ 
                                                             (C_74:
                                                             ((sub_int 
                                                               (integer_of_uint32 !i_23)) (1))))));
                                                  !i_23
                                                 end)
                                                end)
                                               end in
                              void);
                             (raise (Loop_continue_exc void))
                            end in
           void)
           with
           Loop_continue_exc jessie_9 ->
           void end
         done
         with
         Goto_while_1_break_exc jessie_5 ->
         (while_1_break: void) end;
        (C_79:
        begin
          (let jessie_46 = (i_23 := (C_78:
                                    (uint32_of_integer_ (C_77:
                                                        ((sub_int (integer_of_uint32 n_0)) (1)))))) in
          void);
         try
          while true do
          { invariant
              (C_80:
              ((C_85: le_int((0), integer_of_uint32(i_23)))
              and ((C_86:
                   lt_int(integer_of_uint32(i_23), integer_of_uint32(n_0)))
                  and ((C_87:
                       Permut(contents(int_P_int_M, a_6),
                       contents(int_P_int_M@init, a_6), (0),
                       sub_int(integer_of_uint32(n_0), (1))))
                      and ((C_88:
                           H(int_P_int_M, a_6, (0), integer_of_uint32(i_23)))
                          and ((C_89:
                               Sorted(int_P_int_M, a_6,
                               add_int(integer_of_uint32(i_23), (1)),
                               sub_int(integer_of_uint32(n_0), (1))))
                              and (C_90:
                                  (forall k1:int32.
                                   (forall k2:int32.
                                    ((le_int((0), integer_of_int32(k1))
                                     and le_int(integer_of_uint32(uint32_of_integer(
                                                                  integer_of_int32(k1))),
                                         integer_of_uint32(i_23))) ->
                                     ((lt_int(integer_of_uint32(i_23),
                                       integer_of_uint32(uint32_of_integer(
                                                         integer_of_int32(k2))))
                                      and lt_int(integer_of_uint32(uint32_of_integer(
                                                                   integer_of_int32(k2))),
                                          integer_of_uint32(n_0))) ->
                                      le_int(integer_of_int32(select(int_P_int_M,
                                                              shift(a_6,
                                                              integer_of_int32(k1)))),
                                      integer_of_int32(select(int_P_int_M,
                                                       shift(a_6,
                                                       integer_of_int32(k2))))))))))))))))
            variant (C_91 : integer_of_uint32((C_91 : i_23))) }
           try
            (let jessie_54 = begin
                               (let jessie_53 = begin
                                                  (if ((ge_int_ (integer_of_uint32 !i_23)) (1))
                                                  then void
                                                  else
                                                   (let jessie_47 = (raise
                                                                    (Goto_while_2_break_exc
                                                                    void)) in
                                                   void));
                                                 (C_94:
                                                 begin
                                                   (let jessie_48 = (tmp := 
                                                                    (C_93:
                                                                    ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_6) 
                                                                    (integer_of_uint32 !i_23)))) in
                                                   void);
                                                  (C_99:
                                                  begin
                                                    (let jessie_51 = 
                                                    (let jessie_49 = 
                                                    (C_97:
                                                    ((shift a_6) (integer_of_uint32 !i_23))) in
                                                    (let jessie_50 = 
                                                    (C_96:
                                                    (((acc_ !int_P_alloc_table) !int_P_int_M) a_6)) in
                                                    (JC_14:
                                                    (((((offset_upd_ !int_P_alloc_table) int_P_int_M) a_6) 
                                                      (integer_of_uint32 !i_23)) jessie_50)))) in
                                                    void);
                                                   (C_102:
                                                   begin
                                                     (JC_15:
                                                     ((((sift_down a_6) 
                                                        (safe_uint32_of_integer_ (0))) 
                                                       (C_101:
                                                       (uint32_of_integer_ 
                                                        (C_100:
                                                        ((sub_int (integer_of_uint32 !i_23)) (1)))))) !tmp));
                                                    (C_105:
                                                    begin
                                                      (i_23 := (C_104:
                                                               (uint32_of_integer_ 
                                                                (C_103:
                                                                ((sub_int 
                                                                  (integer_of_uint32 !i_23)) (1))))));
                                                     !i_23
                                                    end)
                                                   end)
                                                  end)
                                                 end)
                                                end in
                               void);
                              (raise (Loop_continue_exc void))
                             end in
            void)
            with
            Loop_continue_exc jessie_11 ->
            void end
          done
          with
          Goto_while_2_break_exc jessie_6 ->
          (while_2_break: void) end
        end)
       end)
      end
      with
      Goto_return_label_exc jessie_7 ->
      (return_label: (raise Return)) end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let sift_down_ensures_default =
 fun (a_5 : int_P pointer) (low : uint32) (high : uint32) (v_0 : int32) ->
  { (C_42:
    ((C_45: le_int((0), integer_of_uint32(low)))
    and ((C_46: le_int(integer_of_uint32(low), integer_of_uint32(high)))
        and ((C_48:
             le_int(offset_min(int_P_alloc_table, a_5),
             integer_of_uint32(low)))
            and ((C_49:
                 ge_int(offset_max(int_P_alloc_table, a_5),
                 integer_of_uint32(high)))
                and (C_50:
                    H(int_P_int_M, a_5, add_int(integer_of_uint32(low), (1)),
                    integer_of_uint32(high)))))))) }
  (init:
  try
   begin
     (let i_22 = ref (any_uint32 void) in
     (let child = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_26 = (i_22 := low) in void);
      try
       while true do
       { invariant
           (C_2:
           ((C_7: le_int(integer_of_uint32(low), integer_of_uint32(i_22)))
           and ((C_8:
                le_int(integer_of_uint32(i_22), integer_of_uint32(high)))
               and ((C_9:
                    Permut(contents(int_P_int_M, a_5),
                    contents(int_P_int_M@init, a_5), integer_of_uint32(low),
                    integer_of_uint32(high)))
                   and ((C_10:
                        (forall k_3:int32.
                         ((lt_int(integer_of_uint32(low),
                           integer_of_uint32(uint32_of_integer(integer_of_int32(k_3))))
                          and le_int(integer_of_uint32(uint32_of_integer(
                                                       integer_of_int32(k_3))),
                              integer_of_uint32(high))) ->
                          Hnode(int_P_int_M, a_5, integer_of_int32(k_3),
                          integer_of_uint32(high)))))
                       and ((C_11:
                            (lt_int(integer_of_uint32(low),
                             integer_of_uint32(i_22)) ->
                             Hnode(int_P_int_M, a_5, integer_of_uint32(low),
                             integer_of_uint32(high))))
                           and (C_12:
                               (le_int(integer_of_uint32(low),
                                div_int(sub_int(integer_of_uint32(i_22), (1)),
                                (2))) ->
                                ge_int(integer_of_int32(select(int_P_int_M,
                                                        shift(a_5,
                                                        div_int(sub_int(
                                                                integer_of_uint32(i_22),
                                                                (1)),
                                                        (2))))),
                                integer_of_int32(v_0))))))))))
          }
        try
         (let jessie_36 = begin
                            try
                             (let jessie_30 = (C_18:
                                              begin
                                                (let jessie_27 = (child := 
                                                                  (safe_uint32_of_integer_ 
                                                                   (C_16:
                                                                   ((add_int 
                                                                    (integer_of_uint32 
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_14:
                                                                    ((mul_int (2)) 
                                                                    (integer_of_uint32 !i_22)))))) (1))))) in
                                                void);
                                               (if ((le_int_ (integer_of_uint32 !child)) 
                                                    (integer_of_uint32 high))
                                               then void
                                               else
                                                (let jessie_28 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void));
                                               (if ((le_int_ (integer_of_uint32 
                                                              (safe_uint32_of_integer_ 
                                                               (C_28:
                                                               ((add_int 
                                                                 (integer_of_uint32 !child)) (1)))))) 
                                                    (integer_of_uint32 high))
                                               then
                                                (if ((ge_int_ (integer_of_int32 
                                                               ((safe_acc_ !int_P_int_M) 
                                                                (C_26:
                                                                ((shift a_5) 
                                                                 (integer_of_uint32 
                                                                  (safe_uint32_of_integer_ 
                                                                   (C_24:
                                                                   ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))))))) 
                                                     (integer_of_int32 
                                                      ((safe_acc_ !int_P_int_M) 
                                                       (C_22:
                                                       ((shift a_5) (integer_of_uint32 !child))))))
                                                then
                                                 (C_21:
                                                 (let jessie_29 = (child := 
                                                                   (safe_uint32_of_integer_ 
                                                                    (C_19:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !child)) (1))))) in
                                                 void))
                                                else void)
                                               else void);
                                               (raise (Goto__L_exc void))
                                              end) in
                             void)
                             with
                             Goto__L_exc jessie_1 ->
                             (let jessie_35 = (_L:
                                              begin
                                                void;
                                               (if ((ge_int_ (integer_of_int32 v_0)) 
                                                    (integer_of_int32 
                                                     ((safe_acc_ !int_P_int_M) 
                                                      (C_30:
                                                      ((shift a_5) (integer_of_uint32 !child))))))
                                               then
                                                (let jessie_31 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void)
                                               else void);
                                               (C_36:
                                               begin
                                                 (let jessie_34 = (let jessie_32 = 
                                                                  (C_34:
                                                                  ((shift a_5) 
                                                                   (integer_of_uint32 !i_22))) in
                                                                  (let jessie_33 = 
                                                                  ((safe_acc_ !int_P_int_M) 
                                                                   (C_32:
                                                                   ((shift a_5) 
                                                                    (integer_of_uint32 !child)))) in
                                                                  (((safe_upd_ int_P_int_M) 
                                                                    (C_34:
                                                                    ((shift a_5) 
                                                                    (integer_of_uint32 !i_22)))) jessie_33))) in
                                                 void);
                                                (assert
                                                { (C_37:
                                                  Hnode(int_P_int_M, a_5,
                                                  integer_of_uint32(i_22),
                                                  integer_of_uint32(high))) };
                                                void);
                                                void;
                                                (C_38:
                                                begin
                                                  (i_22 := !child); !i_22
                                                end)
                                               end)
                                              end) in
                             void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_4 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (C_41:
      begin
        (let jessie_39 = (let jessie_37 = (C_39:
                                          ((shift a_5) (integer_of_uint32 !i_22))) in
                         (let jessie_38 = v_0 in
                         (((safe_upd_ int_P_int_M) (C_39:
                                                   ((shift a_5) (integer_of_uint32 !i_22)))) jessie_38))) in
        void);
       (raise Return)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_4:
     ((C_51:
      ((C_52:
       Permut(contents(int_P_int_M, a_5),
       update(contents(int_P_int_M, a_5), integer_of_uint32(low), v_0),
       integer_of_uint32(low), integer_of_uint32(high)))
      and (C_53:
          H(int_P_int_M, a_5, integer_of_uint32(low),
          integer_of_uint32(high)))))
     and (JC_3:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_range(pset_singleton(a_5), integer_of_uint32(low),
         integer_of_uint32(high))))))) }

let sift_down_safety =
 fun (a_5 : int_P pointer) (low : uint32) (high : uint32) (v_0 : int32) ->
  { (C_42:
    ((C_45: le_int((0), integer_of_uint32(low)))
    and ((C_46: le_int(integer_of_uint32(low), integer_of_uint32(high)))
        and ((C_48:
             le_int(offset_min(int_P_alloc_table, a_5),
             integer_of_uint32(low)))
            and ((C_49:
                 ge_int(offset_max(int_P_alloc_table, a_5),
                 integer_of_uint32(high)))
                and (C_50:
                    H(int_P_int_M, a_5, add_int(integer_of_uint32(low), (1)),
                    integer_of_uint32(high)))))))) }
  (init:
  try
   begin
     (let i_22 = ref (any_uint32 void) in
     (let child = ref (any_uint32 void) in
     (C_1:
     begin
       (let jessie_12 = (i_22 := low) in void);
      try
       while true do
       { invariant
           (C_2:
           ((C_7: le_int(integer_of_uint32(low), integer_of_uint32(i_22)))
           and ((C_8:
                le_int(integer_of_uint32(i_22), integer_of_uint32(high)))
               and ((C_9:
                    Permut(contents(int_P_int_M, a_5),
                    contents(int_P_int_M@init, a_5), integer_of_uint32(low),
                    integer_of_uint32(high)))
                   and ((C_10:
                        (forall k_3:int32.
                         ((lt_int(integer_of_uint32(low),
                           integer_of_uint32(uint32_of_integer(integer_of_int32(k_3))))
                          and le_int(integer_of_uint32(uint32_of_integer(
                                                       integer_of_int32(k_3))),
                              integer_of_uint32(high))) ->
                          Hnode(int_P_int_M, a_5, integer_of_int32(k_3),
                          integer_of_uint32(high)))))
                       and ((C_11:
                            (lt_int(integer_of_uint32(low),
                             integer_of_uint32(i_22)) ->
                             Hnode(int_P_int_M, a_5, integer_of_uint32(low),
                             integer_of_uint32(high))))
                           and (C_12:
                               (le_int(integer_of_uint32(low),
                                div_int(sub_int(integer_of_uint32(i_22), (1)),
                                (2))) ->
                                ge_int(integer_of_int32(select(int_P_int_M,
                                                        shift(a_5,
                                                        div_int(sub_int(
                                                                integer_of_uint32(i_22),
                                                                (1)),
                                                        (2))))),
                                integer_of_int32(v_0))))))))))
         variant (C_13 : sub_int(integer_of_uint32(high),
                         integer_of_uint32(i_22))) }
        try
         (let jessie_22 = begin
                            try
                             (let jessie_16 = (C_18:
                                              begin
                                                (let jessie_13 = (child := 
                                                                  (C_17:
                                                                  (uint32_of_integer_ 
                                                                   (C_16:
                                                                   ((add_int 
                                                                    (integer_of_uint32 
                                                                    (C_15:
                                                                    (uint32_of_integer_ 
                                                                    (C_14:
                                                                    ((mul_int (2)) 
                                                                    (integer_of_uint32 !i_22))))))) (1)))))) in
                                                void);
                                               (if ((le_int_ (integer_of_uint32 !child)) 
                                                    (integer_of_uint32 high))
                                               then void
                                               else
                                                (let jessie_14 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void));
                                               (if ((le_int_ (integer_of_uint32 
                                                              (C_29:
                                                              (uint32_of_integer_ 
                                                               (C_28:
                                                               ((add_int 
                                                                 (integer_of_uint32 !child)) (1))))))) 
                                                    (integer_of_uint32 high))
                                               then
                                                (if ((ge_int_ (integer_of_int32 
                                                               (C_27:
                                                               ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_5) 
                                                                (integer_of_uint32 
                                                                 (C_25:
                                                                 (uint32_of_integer_ 
                                                                  (C_24:
                                                                  ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))))))) 
                                                     (integer_of_int32 
                                                      (C_23:
                                                      ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_5) 
                                                       (integer_of_uint32 !child)))))
                                                then
                                                 (C_21:
                                                 (let jessie_15 = (child := 
                                                                   (C_20:
                                                                   (uint32_of_integer_ 
                                                                    (C_19:
                                                                    ((add_int 
                                                                    (integer_of_uint32 !child)) (1)))))) in
                                                 void))
                                                else void)
                                               else void);
                                               (raise (Goto__L_exc void))
                                              end) in
                             void)
                             with
                             Goto__L_exc jessie_1 ->
                             (let jessie_21 = (_L:
                                              begin
                                                void;
                                               (if ((ge_int_ (integer_of_int32 v_0)) 
                                                    (integer_of_int32 
                                                     (C_31:
                                                     ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_5) 
                                                      (integer_of_uint32 !child)))))
                                               then
                                                (let jessie_17 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void)
                                               else void);
                                               (C_36:
                                               begin
                                                 (let jessie_20 = (let jessie_18 = 
                                                                  (C_34:
                                                                  ((shift a_5) 
                                                                   (integer_of_uint32 !i_22))) in
                                                                  (let jessie_19 = 
                                                                  (C_33:
                                                                  ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) a_5) 
                                                                   (integer_of_uint32 !child))) in
                                                                  (JC_6:
                                                                  (((((offset_upd_ !int_P_alloc_table) int_P_int_M) a_5) 
                                                                    (integer_of_uint32 !i_22)) jessie_19)))) in
                                                 void);
                                                (assert
                                                { (C_37:
                                                  Hnode(int_P_int_M, a_5,
                                                  integer_of_uint32(i_22),
                                                  integer_of_uint32(high))) };
                                                void);
                                                void;
                                                (C_38:
                                                begin
                                                  (i_22 := !child); !i_22
                                                end)
                                               end)
                                              end) in
                             void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_4 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (C_41:
      begin
        (let jessie_25 = (let jessie_23 = (C_39:
                                          ((shift a_5) (integer_of_uint32 !i_22))) in
                         (let jessie_24 = v_0 in
                         (JC_7:
                         (((((offset_upd_ !int_P_alloc_table) int_P_int_M) a_5) 
                           (integer_of_uint32 !i_22)) jessie_24)))) in
        void);
       (raise Return)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


