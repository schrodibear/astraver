rm -f struct.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only struct.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs struct.cloc struct.jc
Normalized expression:
(((\offset_min(s)) <= 0) && ((\offset_max(s)) >= 0))

Normalized expression:
(((\offset_min(pps)) <= 0) && ((\offset_max(pps)) >= 0))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 tmp in
   {
   {
     (C_5:
        {
        ((C_4: t2.x) = (C_3: (TODO cast)));
          (C_7:
             {
             (tmp = (C_6: t2.x));
               (C_12: { ((C_11: t2.x) = (C_10: (TODO cast))); (return tmp) })
             })
        })
     }
   })
}

Normalized expression:
(C_13:
   (((C_15: ((\offset_min(t2)) <= 0)) && (C_16: ((\offset_max(t2)) >= 0))) &&
      (C_17: (t2.x == 0))))

Normalized expression:
(C_18:
   (((C_20: (\result == 1)) && (C_21: (t2.x == 2))) &&
      (C_22: (t2.y == (TODO old)))))

Normalized expression:
t2.x

Normalized expression:
true

Normalized expression:
{
(let T[..] p in
   {
   (let int32 __retres in
      {
      {
        (C_23:
           {
           (ps = s);
             (C_25:
                {
                ((C_24: (pps + 0).struct_S_xM) = ps);
                  (C_27:
                     {
                     (p = (C_26: s.t));
                       (C_30:
                          {
                          ((C_29: (C_28: ps.t).x) = 1);
                            (C_33:
                               {
                               (__retres = (C_32: (C_31: s.t).x));
                                 (return __retres)
                               })
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_34: ((C_35: ((\offset_min(ps)) <= 0)) && (C_36: ((\offset_max(ps)) >= 0))))

Normalized expression:
(C_37: (\result == 1))

Normalized expression:
true

Generating Why function f
Generating Why function g
cat why/struct.why
type S

type T

type _bool

type char_P

type int16

type int32

type int64

type int8

type struct_S_xP

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic T_tag:  -> T tag_id

axiom T_int : (int_of_tag(T_tag) = (1))

axiom T_parenttag_bottom : parenttag(T_tag, bottom_tag)

axiom T_tags :
 (forall x:T pointer.
  (forall T_tag_table:T tag_table. instanceof(T_tag_table, x, T_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s_0:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s_0) ->
      (strlen(char_P_char_M_at_L, s_0) = strlen(char_P_char_M_at_L, s_0)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic pps:  -> struct_S_xP pointer

logic s:  -> S pointer

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_7, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_7)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_7)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_8:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_8, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_8, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_8, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_1)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_1, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_2,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_2))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_3, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_6)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_6, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_5, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_5)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_4, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_4)))))))

logic struct_S_xP_tag:  -> struct_S_xP tag_id

axiom struct_S_xP_int : (int_of_tag(struct_S_xP_tag) = (1))

axiom struct_S_xP_parenttag_bottom : parenttag(struct_S_xP_tag, bottom_tag)

axiom struct_S_xP_tags :
 (forall x:struct_S_xP pointer.
  (forall struct_S_xP_tag_table:struct_S_xP tag_table.
   instanceof(struct_S_xP_tag_table, x, struct_S_xP_tag)))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_pps(pps:struct_S_xP pointer,
 struct_S_xP_alloc_table:struct_S_xP alloc_table,
 pps:struct_S_xP pointer,
 ps:S pointer,
 s:S pointer) =
 (le_int(offset_min(struct_S_xP_alloc_table, pps), (0))
 and ge_int(offset_max(struct_S_xP_alloc_table, pps), (0)))

predicate valid_s(s:S pointer,
 S_alloc_table:S alloc_table,
 pps:struct_S_xP pointer,
 ps:S pointer,
 s:S pointer) =
 (le_int(offset_min(S_alloc_table, s), (0))
 and ge_int(offset_max(S_alloc_table, s), (0)))

predicate valid_struct_T(p:T pointer,
 a:int,
 b:int,
 T_alloc_table:T alloc_table) =
 ((offset_min(T_alloc_table, p) = a) and (offset_max(T_alloc_table, p) = b))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table,
 T_alloc_table:T alloc_table,
 S_t:(S,
 T pointer) memory) =
 ((offset_min(S_alloc_table, p) = a)
 and ((offset_max(S_alloc_table, p) = b)
     and valid_struct_T(select(S_t, p), (0), (0), T_alloc_table)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_struct_S_xP(p:struct_S_xP pointer,
 a:int,
 b:int,
 struct_S_xP_alloc_table:struct_S_xP alloc_table) =
 ((offset_min(struct_S_xP_alloc_table, p) = a)
 and (offset_max(struct_S_xP_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_T(p:T pointer,
 a:int,
 b:int,
 T_alloc_table:T alloc_table) =
 ((offset_min(T_alloc_table, p) = a) and (offset_max(T_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_struct_S_xP(p:struct_S_xP pointer,
 a:int,
 b:int,
 struct_S_xP_alloc_table:struct_S_xP alloc_table) =
 ((offset_min(struct_S_xP_alloc_table, p) = a)
 and (offset_max(struct_S_xP_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter S_alloc_table : S alloc_table ref

parameter S_t : (S, T pointer) memory ref

parameter S_tag_table : S tag_table ref

parameter S_z : (S, int32) memory ref

parameter T_alloc_table : T alloc_table ref

parameter T_tag_table : T tag_table ref

parameter T_x : (T, int32) memory ref

parameter T_y : (T, int32) memory ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    T_alloc_table:T alloc_table ref ->
     S_t:(S,
      T pointer) memory ref ->
      { ge_int(n, (0))} S pointer reads S_alloc_table,S_t,T_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table,
         T_alloc_table, S_t)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_T :
 n:int ->
  T_alloc_table:T alloc_table ref ->
   T_alloc_table:T alloc_table ref ->
    { ge_int(n, (0))} T pointer reads T_alloc_table
    writes T_alloc_table,T_tag_table
    { (valid_struct_T(result, (0), sub_int(n, (1)), T_alloc_table)
      and (instanceof(T_tag_table, result, T_tag)
          and (alloc_extends(T_alloc_table@, T_alloc_table)
              and alloc_extern(T_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    T_alloc_table:T alloc_table ref ->
     S_t:(S,
      T pointer) memory ref ->
      { } S pointer reads S_alloc_table,S_t,T_alloc_table
      writes S_alloc_table,S_tag_table
      { (valid_struct_S(result, (0), (0), S_alloc_table, T_alloc_table, S_t)
        and (instanceof(S_tag_table, result, S_tag)
            and (alloc_extends(S_alloc_table@, S_alloc_table)
                and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_T :
 tt:unit ->
  T_alloc_table:T alloc_table ref ->
   T_alloc_table:T alloc_table ref ->
    { } T pointer reads T_alloc_table writes T_alloc_table,T_tag_table
    { (valid_struct_T(result, (0), (0), T_alloc_table)
      and (instanceof(T_tag_table, result, T_tag)
          and (alloc_extends(T_alloc_table@, T_alloc_table)
              and alloc_extern(T_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter struct_S_xP_alloc_table : struct_S_xP alloc_table ref

parameter struct_S_xP_tag_table : struct_S_xP tag_table ref

parameter alloc_one_struct_S_xP :
 tt:unit ->
  struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
   struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
    { } struct_S_xP pointer reads struct_S_xP_alloc_table
    writes struct_S_xP_alloc_table,struct_S_xP_tag_table
    { (valid_struct_struct_S_xP(result, (0), (0), struct_S_xP_alloc_table)
      and (instanceof(struct_S_xP_tag_table, result, struct_S_xP_tag)
          and (alloc_extends(struct_S_xP_alloc_table@,
               struct_S_xP_alloc_table)
              and alloc_extern(struct_S_xP_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_struct_S_xP :
 n:int ->
  struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
   struct_S_xP_alloc_table:struct_S_xP alloc_table ref ->
    { ge_int(n, (0))} struct_S_xP pointer reads struct_S_xP_alloc_table
    writes struct_S_xP_alloc_table,struct_S_xP_tag_table
    { (valid_struct_struct_S_xP(result, (0), sub_int(n, (1)),
       struct_S_xP_alloc_table)
      and (instanceof(struct_S_xP_tag_table, result, struct_S_xP_tag)
          and (alloc_extends(struct_S_xP_alloc_table@,
               struct_S_xP_alloc_table)
              and alloc_extern(struct_S_xP_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter ps : S pointer ref

parameter f :
 t2:T pointer ->
  { (JC_1:
    ((C_13:
     ((C_15: le_int(offset_min(T_alloc_table, t2), (0)))
     and ((C_16: ge_int(offset_max(T_alloc_table, t2), (0)))
         and (C_17: eq_int(integer_of_int32(select(T_x, t2)), (0))))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))))}
  int32
  reads S_alloc_table,T_alloc_table,T_tag_table,T_x,T_y,ps,struct_S_xP_alloc_table
  writes T_x
  { ((JC_3:
     (valid_s(s, S_alloc_table, pps, ps, s)
     and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))
    and ((true = true) ->
         (JC_6:
         ((JC_5:
          ((C_18:
           ((C_20: eq_int(integer_of_int32(result), (1)))
           and ((C_21: eq_int(integer_of_int32(select(T_x, t2)), (2)))
               and (C_22:
                   eq_int(integer_of_int32(select(T_y, t2)),
                   integer_of_int32(select(T_y@, t2)))))))
          and (valid_s(s, S_alloc_table, pps, ps, s)
              and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))))
         and (JC_4:
             not_assigns(T_alloc_table@, T_x@, T_x, pset_singleton(t2))))))) }

parameter struct_S_xP_struct_S_xM : (struct_S_xP, S pointer) memory ref

parameter g :
 tt:unit ->
  { (JC_9:
    ((C_34:
     ((C_35: le_int(offset_min(S_alloc_table, ps), (0)))
     and (C_36: ge_int(offset_max(S_alloc_table, ps), (0)))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))))}
  int32 reads S_alloc_table,S_t,T_alloc_table,T_x,struct_S_xP_alloc_table
  writes T_x,ps,struct_S_xP_struct_S_xM
  { ((JC_11:
     (valid_s(s, S_alloc_table, pps, ps, s)
     and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))
    and ((true = true) ->
         (JC_12:
         ((C_37: eq_int(integer_of_int32(result), (1)))
         and (valid_s(s, S_alloc_table, pps, ps, s)
             and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f_ensures_default =
 fun (t2 : T pointer) ->
  { (JC_1:
    ((C_13:
     ((C_15: le_int(offset_min(T_alloc_table, t2), (0)))
     and ((C_16: ge_int(offset_max(T_alloc_table, t2), (0)))
         and (C_17: eq_int(integer_of_int32(select(T_x, t2)), (0))))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_5:
     begin
       (let jessie_10 = (let jessie_8 = t2 in
                        (let jessie_9 = (safe_int32_of_integer_ (C_2:
                                                                ((add_int 
                                                                  (integer_of_int32 
                                                                   ((safe_acc_ !T_x) t2))) (1)))) in
                        (((safe_upd_ T_x) t2) jessie_9))) in
       void);
      (C_7:
      begin
        (let jessie_11 = (tmp := ((safe_acc_ !T_x) t2)) in void);
       (C_12:
       begin
         (let jessie_14 = (let jessie_12 = t2 in
                          (let jessie_13 = (safe_int32_of_integer_ (C_9:
                                                                   ((add_int 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !T_x) t2))) (1)))) in
                          (((safe_upd_ T_x) t2) jessie_13))) in
         void);
        (jessie_returned_value := !tmp);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_6:
     ((JC_5:
      ((C_18:
       ((C_20: eq_int(integer_of_int32(result), (1)))
       and ((C_21: eq_int(integer_of_int32(select(T_x, t2)), (2)))
           and (C_22:
               eq_int(integer_of_int32(select(T_y, t2)),
               integer_of_int32(select(T_y@, t2)))))))
      and (valid_s(s, S_alloc_table, pps, ps, s)
          and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))))
     and (JC_4: not_assigns(T_alloc_table@, T_x@, T_x, pset_singleton(t2)))))) }

let f_safety =
 fun (t2 : T pointer) ->
  { (JC_1:
    ((C_13:
     ((C_15: le_int(offset_min(T_alloc_table, t2), (0)))
     and ((C_16: ge_int(offset_max(T_alloc_table, t2), (0)))
         and (C_17: eq_int(integer_of_int32(select(T_x, t2)), (0))))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_5:
     begin
       (let jessie_3 = (let jessie_1 = t2 in
                       (let jessie_2 = (C_3:
                                       (int32_of_integer_ (C_2:
                                                          ((add_int (integer_of_int32 
                                                                    (C_1:
                                                                    (((acc_ !T_alloc_table) !T_x) t2)))) (1))))) in
                       (JC_7: ((((upd_ !T_alloc_table) T_x) t2) jessie_2)))) in
       void);
      (C_7:
      begin
        (let jessie_4 = (tmp := (C_6: (((acc_ !T_alloc_table) !T_x) t2))) in
        void);
       (C_12:
       begin
         (let jessie_7 = (let jessie_5 = t2 in
                         (let jessie_6 = (C_10:
                                         (int32_of_integer_ (C_9:
                                                            ((add_int 
                                                              (integer_of_int32 
                                                               (C_8:
                                                               (((acc_ !T_alloc_table) !T_x) t2)))) (1))))) in
                         (JC_8: ((((upd_ !T_alloc_table) T_x) t2) jessie_6)))) in
         void);
        (jessie_returned_value := !tmp);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_3:
    (valid_s(s, S_alloc_table, pps, ps, s)
    and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))) }

let g_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_9:
    ((C_34:
     ((C_35: le_int(offset_min(S_alloc_table, ps), (0)))
     and (C_36: ge_int(offset_max(S_alloc_table, ps), (0)))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let p = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_23:
     begin
       (let jessie_28 = (ps := s) in void);
      (C_25:
      begin
        (let jessie_32 = (let jessie_29 = ((shift pps) (0)) in
                         (let jessie_30 = !ps in
                         (((safe_upd_ struct_S_xP_struct_S_xM) ((shift pps) (0))) jessie_30))) in
        void);
       (C_27:
       begin
         (let jessie_34 = (p := ((safe_acc_ !S_t) s)) in void);
        (C_30:
        begin
          (let jessie_37 = (let jessie_35 = ((safe_acc_ !S_t) !ps) in
                           (let jessie_36 = (safe_int32_of_integer_ (1)) in
                           (((safe_upd_ T_x) ((safe_acc_ !S_t) !ps)) jessie_36))) in
          void);
         (C_33:
         begin
           (let jessie_38 = (__retres := ((safe_acc_ !T_x) ((safe_acc_ !S_t) s))) in
           void);
          (jessie_returned_value := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_12:
     ((C_37: eq_int(integer_of_int32(result), (1)))
     and (valid_s(s, S_alloc_table, pps, ps, s)
         and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))))) }

let g_safety =
 fun (tt : unit) ->
  { (JC_9:
    ((C_34:
     ((C_35: le_int(offset_min(S_alloc_table, ps), (0)))
     and (C_36: ge_int(offset_max(S_alloc_table, ps), (0)))))
    and (valid_s(s, S_alloc_table, pps, ps, s)
        and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s)))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let p = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_23:
     begin
       (let jessie_16 = (ps := s) in void);
      (C_25:
      begin
        (let jessie_20 = (let jessie_17 = ((shift pps) (0)) in
                         (let jessie_18 = !ps in
                         (((safe_upd_ struct_S_xP_struct_S_xM) ((shift pps) (0))) jessie_18))) in
        void);
       (C_27:
       begin
         (let jessie_22 = (p := ((safe_acc_ !S_t) s)) in void);
        (C_30:
        begin
          (let jessie_25 = (let jessie_23 = (C_28:
                                            (((acc_ !S_alloc_table) !S_t) !ps)) in
                           (let jessie_24 = (safe_int32_of_integer_ (1)) in
                           (((safe_upd_ T_x) (C_28:
                                             (((acc_ !S_alloc_table) !S_t) !ps))) jessie_24))) in
          void);
         (C_33:
         begin
           (let jessie_26 = (__retres := ((safe_acc_ !T_x) ((safe_acc_ !S_t) s))) in
           void);
          (jessie_returned_value := !__retres);
          (raise Return)
         end)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_11:
    (valid_s(s, S_alloc_table, pps, ps, s)
    and valid_pps(pps, struct_S_xP_alloc_table, pps, ps, s))) }


