rm -f all_zeros.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only all_zeros.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs all_zeros.cloc all_zeros.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int32 __retres in
   {
   {
     (try {
        (try loop
               invariant (C_1:
                            (((C_3: (0 <= n)) && (C_4: (n <= \at(n, Pre)))) &&
                               (C_5:
                                  (\forall int32 i,
                                     (((n <= i) && (i > \at(n, Pre))) ==>
                                        ((t + i).int_M == 0))))));
               variant (C_6: n);
               (try {
                  {
                    (try {
                       (C_9:
                          {
                          (n = (C_8: (TODO cast)));
                            (TODO if);
                            (throw Goto__L ());
                            (throw Goto_while_0_break ())
                          })
                       } with
                       | Goto__L jessie_1 -> {
                       (_L: { () })
                       }
                       | default -> ())
                    };
                    (throw Loop_continue ())
                  } with
                  | Loop_continue jessie_4 -> ()
                  | default -> ()) done with
           | Loop_exit jessie_3 -> ()
           | default -> ())
        } with
        | Goto_while_0_break jessie_2 -> {
        (while_0_break: { () })
        }
        | default -> ());
       (C_13: { (__retres = (C_12: (TODO cast))); (return __retres) })
     }
   })
}

Normalized expression:
(C_14:
   (((C_16: ((\offset_min(t)) <= 0)) && (C_17: ((\offset_max(t)) >= n))) &&
      (C_18: (n >= 0))))

Normalized expression:
(C_19:
   ((\result != 0) <=>
      (\forall int32 i, (((0 <= i) && (i > n)) ==> ((t + i).int_M == 0)))))

Normalized expression:
true

Normalized expression:
{
(let int32 k in
   {
   (let int32 tmp in
      {
      (let int32 __retres in
         {
         {
           (C_20:
              {
              (k = 0);
                (try {
                   (try loop
                          invariant (C_21:
                                       (((C_23: (0 <= k)) && (C_24: (k <= n))) &&
                                          (C_25:
                                             (\forall int32 i,
                                                (((0 <= i) && (i > k)) ==>
                                                   ((t + i).int_M == 0))))));
                          variant (C_26: (n - k));
                          (try {
                             {
                               (try {
                                  (TODO if);
                                    (throw Goto__L ());
                                    (throw Goto_while_1_break ())
                                  } with
                                  | Goto__L jessie_5 -> {
                                  (_L: { () })
                                  }
                                  | default -> ())
                               };
                               (throw Loop_continue ())
                             } with
                             | Loop_continue jessie_8 -> ()
                             | default -> ()) done with
                      | Loop_exit jessie_7 -> ()
                      | default -> ())
                   } with
                   | Goto_while_1_break jessie_6 -> {
                   (while_1_break: { () })
                   }
                   | default -> ());
                (C_34:
                   {
                   (__retres = (C_33: (TODO cast))); (return __retres)
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_35:
   (((C_37: ((\offset_min(t)) <= 0)) && (C_38: ((\offset_max(t)) >= n))) &&
      (C_39: (n >= 0))))

Normalized expression:
(C_40:
   ((\result != 0) <=>
      (\forall int32 i, (((0 <= i) && (i > n)) ==> ((t + i).int_M == 0)))))

Normalized expression:
true

Normalized expression:
{
(let int32 k in
   {
   (let int32 __retres in
      {
      (try {
         (C_41:
            {
            (k = 0);
              (try {
                 (try loop
                        invariant (C_42:
                                     (((C_44: (0 <= k)) && (C_45: (k <= n))) &&
                                        (C_46:
                                           (\forall int32 i,
                                              (((0 <= i) && (i > k)) ==>
                                                 ((t + i).int_M == 0))))));
                        variant (C_47: (n - k));
                        (try {
                           {
                             {
                               (TODO if);
                                 (TODO if);
                                 (C_53: { (k = (C_52: (TODO cast))) })
                               }
                             };
                             (throw Loop_continue ())
                           } with
                           | Loop_continue jessie_12 -> ()
                           | default -> ()) done with
                    | Loop_exit jessie_11 -> ()
                    | default -> ())
                 } with
                 | Goto_while_2_break jessie_9 -> {
                 (while_2_break: { () })
                 }
                 | default -> ());
              (C_54: { (__retres = 1) })
            })
         } with
         | Goto_return_label jessie_10 -> {
         (return_label: { (return __retres) })
         }
         | default -> ())
      })
   })
}

Normalized expression:
(C_55:
   (((C_57: ((\offset_min(t)) <= 0)) && (C_58: ((\offset_max(t)) >= n))) &&
      (C_59: (n >= 0))))

Normalized expression:
(C_60:
   ((\result != 0) <=>
      (\forall int32 i, (((0 <= i) && (i > n)) ==> ((t + i).int_M == 0)))))

Normalized expression:
true

Generating Why function all_zeros
Generating Why function all_zeros_1
Generating Why function all_zeros_0
cat why/all_zeros.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

exception Goto__L_exc of unit

exception Goto_return_label_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Goto_while_2_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter all_zeros :
 t:int_P pointer ->
  n_0:int32 ->
   { (C_14:
     ((C_16: le_int(offset_min(int_P_alloc_table, t), (0)))
     and ((C_17:
          ge_int(offset_max(int_P_alloc_table, t), integer_of_int32(n_0)))
         and (C_18: ge_int(integer_of_int32(n_0), (0))))))}
   int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table
   { ((true = true) ->
      (C_19:
      (neq_int(integer_of_int32(result), (0))
      <-> (forall i_6:int32.
           ((le_int((0), integer_of_int32(i_6))
            and lt_int(integer_of_int32(i_6), integer_of_int32(n_0))) ->
            eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(t, integer_of_int32(i_6)))),
            (0))))))) }

parameter all_zeros_0 :
 t_1:int_P pointer ->
  n_2:int32 ->
   { (C_55:
     ((C_57: le_int(offset_min(int_P_alloc_table, t_1), (0)))
     and ((C_58:
          ge_int(offset_max(int_P_alloc_table, t_1), integer_of_int32(n_2)))
         and (C_59: ge_int(integer_of_int32(n_2), (0))))))}
   int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table
   { ((true = true) ->
      (C_60:
      (neq_int(integer_of_int32(result), (0))
      <-> (forall i_10:int32.
           ((le_int((0), integer_of_int32(i_10))
            and lt_int(integer_of_int32(i_10), integer_of_int32(n_2))) ->
            eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(t_1, integer_of_int32(i_10)))),
            (0))))))) }

parameter all_zeros_1 :
 t_0:int_P pointer ->
  n_1:int32 ->
   { (C_35:
     ((C_37: le_int(offset_min(int_P_alloc_table, t_0), (0)))
     and ((C_38:
          ge_int(offset_max(int_P_alloc_table, t_0), integer_of_int32(n_1)))
         and (C_39: ge_int(integer_of_int32(n_1), (0))))))}
   int32 reads int_P_alloc_table,int_P_int_M,int_P_tag_table
   { ((true = true) ->
      (C_40:
      (neq_int(integer_of_int32(result), (0))
      <-> (forall i_8:int32.
           ((le_int((0), integer_of_int32(i_8))
            and lt_int(integer_of_int32(i_8), integer_of_int32(n_1))) ->
            eq_int(integer_of_int32(select(int_P_int_M,
                                    shift(t_0, integer_of_int32(i_8)))),
            (0))))))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let all_zeros_0_ensures_default_2 =
 fun (t_1 : int_P pointer) (n_2 : int32) ->
  { (C_55:
    ((C_57: le_int(offset_min(int_P_alloc_table, t_1), (0)))
    and ((C_58:
         ge_int(offset_max(int_P_alloc_table, t_1), integer_of_int32(n_2)))
        and (C_59: ge_int(integer_of_int32(n_2), (0)))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let k_1 = ref (any_int32 void) in
     (let __retres_1 = ref (any_int32 void) in
     try
      (let jessie_58 = (C_41:
                       begin
                         (let jessie_52 = (k_1 := (safe_int32_of_integer_ (0))) in
                         void);
                        try
                         while true do
                         { invariant
                             (C_42:
                             ((C_44: le_int((0), integer_of_int32(k_1)))
                             and ((C_45:
                                  le_int(integer_of_int32(k_1),
                                  integer_of_int32(n_2)))
                                 and (C_46:
                                     (forall i_11:int32.
                                      ((le_int((0), integer_of_int32(i_11))
                                       and lt_int(integer_of_int32(i_11),
                                           integer_of_int32(k_1))) ->
                                       eq_int(integer_of_int32(select(int_P_int_M,
                                                               shift(t_1,
                                                               integer_of_int32(i_11)))),
                                       (0))))))))
                            }
                          try
                           (let jessie_57 = begin
                                              (let jessie_56 = begin
                                                                 (if 
                                                                 ((lt_int_ 
                                                                   (integer_of_int32 !k_1)) 
                                                                  (integer_of_int32 n_2))
                                                                 then void
                                                                 else
                                                                  (let jessie_53 = 
                                                                  (raise
                                                                   (Goto_while_2_break_exc
                                                                   void)) in
                                                                  void));
                                                                (if ((neq_int_ 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    (C_49:
                                                                    ((shift t_1) 
                                                                    (integer_of_int32 !k_1)))))) (0))
                                                                then
                                                                 (let jessie_55 = 
                                                                 (C_48:
                                                                 begin
                                                                   (let jessie_54 = 
                                                                   (__retres_1 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                                   void);
                                                                  (raise
                                                                   (Goto_return_label_exc
                                                                   void))
                                                                 end) in
                                                                 void)
                                                                else void);
                                                                (C_53:
                                                                begin
                                                                  (k_1 := 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_51:
                                                                    ((add_int 
                                                                    (integer_of_int32 !k_1)) (1)))));
                                                                 !k_1
                                                                end)
                                                               end in
                                              void);
                                             (raise (Loop_continue_exc void))
                                            end in
                           void)
                           with
                           Loop_continue_exc jessie_12 ->
                           void end
                         done
                         with
                         Goto_while_2_break_exc jessie_9 ->
                         (while_2_break: void) end;
                        (C_54:
                        begin
                          (__retres_1 := (safe_int32_of_integer_ (1)));
                         !__retres_1
                        end)
                       end) in
      void)
      with
      Goto_return_label_exc jessie_10 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_1); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_60:
     (neq_int(integer_of_int32(result), (0))
     <-> (forall i_10:int32.
          ((le_int((0), integer_of_int32(i_10))
           and lt_int(integer_of_int32(i_10), integer_of_int32(n_2))) ->
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(t_1, integer_of_int32(i_10)))),
           (0))))))) }

let all_zeros_0_safety =
 fun (t_1 : int_P pointer) (n_2 : int32) ->
  { (C_55:
    ((C_57: le_int(offset_min(int_P_alloc_table, t_1), (0)))
    and ((C_58:
         ge_int(offset_max(int_P_alloc_table, t_1), integer_of_int32(n_2)))
        and (C_59: ge_int(integer_of_int32(n_2), (0)))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let k_1 = ref (any_int32 void) in
     (let __retres_1 = ref (any_int32 void) in
     try
      (let jessie_51 = (C_41:
                       begin
                         (let jessie_45 = (k_1 := (safe_int32_of_integer_ (0))) in
                         void);
                        try
                         while true do
                         { invariant
                             (C_42:
                             ((C_44: le_int((0), integer_of_int32(k_1)))
                             and ((C_45:
                                  le_int(integer_of_int32(k_1),
                                  integer_of_int32(n_2)))
                                 and (C_46:
                                     (forall i_11:int32.
                                      ((le_int((0), integer_of_int32(i_11))
                                       and lt_int(integer_of_int32(i_11),
                                           integer_of_int32(k_1))) ->
                                       eq_int(integer_of_int32(select(int_P_int_M,
                                                               shift(t_1,
                                                               integer_of_int32(i_11)))),
                                       (0))))))))
                           variant (C_47 : sub_int(integer_of_int32(n_2),
                                           integer_of_int32(k_1))) }
                          try
                           (let jessie_50 = begin
                                              (let jessie_49 = begin
                                                                 (if 
                                                                 ((lt_int_ 
                                                                   (integer_of_int32 !k_1)) 
                                                                  (integer_of_int32 n_2))
                                                                 then void
                                                                 else
                                                                  (let jessie_46 = 
                                                                  (raise
                                                                   (Goto_while_2_break_exc
                                                                   void)) in
                                                                  void));
                                                                (if ((neq_int_ 
                                                                    (integer_of_int32 
                                                                    (C_50:
                                                                    ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) t_1) 
                                                                    (integer_of_int32 !k_1))))) (0))
                                                                then
                                                                 (let jessie_48 = 
                                                                 (C_48:
                                                                 begin
                                                                   (let jessie_47 = 
                                                                   (__retres_1 := 
                                                                    (safe_int32_of_integer_ (0))) in
                                                                   void);
                                                                  (raise
                                                                   (Goto_return_label_exc
                                                                   void))
                                                                 end) in
                                                                 void)
                                                                else void);
                                                                (C_53:
                                                                begin
                                                                  (k_1 := 
                                                                   (C_52:
                                                                   (int32_of_integer_ 
                                                                    (C_51:
                                                                    ((add_int 
                                                                    (integer_of_int32 !k_1)) (1))))));
                                                                 !k_1
                                                                end)
                                                               end in
                                              void);
                                             (raise (Loop_continue_exc void))
                                            end in
                           void)
                           with
                           Loop_continue_exc jessie_12 ->
                           void end
                         done
                         with
                         Goto_while_2_break_exc jessie_9 ->
                         (while_2_break: void) end;
                        (C_54:
                        begin
                          (__retres_1 := (safe_int32_of_integer_ (1)));
                         !__retres_1
                        end)
                       end) in
      void)
      with
      Goto_return_label_exc jessie_10 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_1); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let all_zeros_1_ensures_default_1 =
 fun (t_0 : int_P pointer) (n_1 : int32) ->
  { (C_35:
    ((C_37: le_int(offset_min(int_P_alloc_table, t_0), (0)))
    and ((C_38:
         ge_int(offset_max(int_P_alloc_table, t_0), integer_of_int32(n_1)))
        and (C_39: ge_int(integer_of_int32(n_1), (0)))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let k_0 = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_20:
     begin
       (let jessie_36 = (k_0 := (safe_int32_of_integer_ (0))) in void);
      try
       while true do
       { invariant
           (C_21:
           ((C_23: le_int((0), integer_of_int32(k_0)))
           and ((C_24: le_int(integer_of_int32(k_0), integer_of_int32(n_1)))
               and (C_25:
                   (forall i_9:int32.
                    ((le_int((0), integer_of_int32(i_9))
                     and lt_int(integer_of_int32(i_9), integer_of_int32(k_0))) ->
                     eq_int(integer_of_int32(select(int_P_int_M,
                                             shift(t_0,
                                             integer_of_int32(i_9)))),
                     (0))))))))
          }
        try
         (let jessie_43 = begin
                            try
                             (let jessie_42 = begin
                                                (if ((lt_int_ (integer_of_int32 !k_0)) 
                                                     (integer_of_int32 n_1))
                                                then
                                                 (C_27:
                                                 begin
                                                   (let jessie_37 = (tmp := !k_0) in
                                                   void);
                                                  (C_30:
                                                  begin
                                                    (let jessie_38 = 
                                                    (k_0 := (safe_int32_of_integer_ 
                                                             (C_28:
                                                             ((add_int 
                                                               (integer_of_int32 !k_0)) (1))))) in
                                                    void);
                                                   (if ((neq_int_ (integer_of_int32 
                                                                   ((safe_acc_ !int_P_int_M) 
                                                                    (C_31:
                                                                    ((shift t_0) 
                                                                    (integer_of_int32 !tmp)))))) (0))
                                                   then
                                                    (let jessie_39 = 
                                                    (raise
                                                     (Goto_while_1_break_exc
                                                     void)) in
                                                    void)
                                                   else void)
                                                  end)
                                                 end)
                                                else
                                                 (let jessie_40 = (raise
                                                                   (Goto_while_1_break_exc
                                                                   void)) in
                                                 void));
                                               (let jessie_41 = (raise
                                                                 (Goto__L_exc
                                                                 void)) in
                                               void);
                                               (raise
                                                (Goto_while_1_break_exc
                                                void))
                                              end in
                             void)
                             with
                             Goto__L_exc jessie_5 ->
                             (_L: void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_8 ->
         void end
       done
       with
       Goto_while_1_break_exc jessie_6 ->
       (while_1_break: void) end;
      (C_34:
      begin
        (let jessie_44 = (__retres_0 := (safe_int32_of_integer_ (if ((eq_int_ 
                                                                    (integer_of_int32 !k_0)) 
                                                                    (integer_of_int32 n_1))
                                                                then (1)
                                                                else (0)))) in
        void);
       (jessie_returned_value := !__retres_0);
       (raise Return)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_40:
     (neq_int(integer_of_int32(result), (0))
     <-> (forall i_8:int32.
          ((le_int((0), integer_of_int32(i_8))
           and lt_int(integer_of_int32(i_8), integer_of_int32(n_1))) ->
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(t_0, integer_of_int32(i_8)))),
           (0))))))) }

let all_zeros_1_safety =
 fun (t_0 : int_P pointer) (n_1 : int32) ->
  { (C_35:
    ((C_37: le_int(offset_min(int_P_alloc_table, t_0), (0)))
    and ((C_38:
         ge_int(offset_max(int_P_alloc_table, t_0), integer_of_int32(n_1)))
        and (C_39: ge_int(integer_of_int32(n_1), (0)))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let k_0 = ref (any_int32 void) in
     (let tmp = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     (C_20:
     begin
       (let jessie_27 = (k_0 := (safe_int32_of_integer_ (0))) in void);
      try
       while true do
       { invariant
           (C_21:
           ((C_23: le_int((0), integer_of_int32(k_0)))
           and ((C_24: le_int(integer_of_int32(k_0), integer_of_int32(n_1)))
               and (C_25:
                   (forall i_9:int32.
                    ((le_int((0), integer_of_int32(i_9))
                     and lt_int(integer_of_int32(i_9), integer_of_int32(k_0))) ->
                     eq_int(integer_of_int32(select(int_P_int_M,
                                             shift(t_0,
                                             integer_of_int32(i_9)))),
                     (0))))))))
         variant (C_26 : sub_int(integer_of_int32(n_1),
                         integer_of_int32(k_0))) }
        try
         (let jessie_34 = begin
                            try
                             (let jessie_33 = begin
                                                (if ((lt_int_ (integer_of_int32 !k_0)) 
                                                     (integer_of_int32 n_1))
                                                then
                                                 (C_27:
                                                 begin
                                                   (let jessie_28 = (tmp := !k_0) in
                                                   void);
                                                  (C_30:
                                                  begin
                                                    (let jessie_29 = 
                                                    (k_0 := (C_29:
                                                            (int32_of_integer_ 
                                                             (C_28:
                                                             ((add_int 
                                                               (integer_of_int32 !k_0)) (1)))))) in
                                                    void);
                                                   (if ((neq_int_ (integer_of_int32 
                                                                   (C_32:
                                                                   ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) t_0) 
                                                                    (integer_of_int32 !tmp))))) (0))
                                                   then
                                                    (let jessie_30 = 
                                                    (raise
                                                     (Goto_while_1_break_exc
                                                     void)) in
                                                    void)
                                                   else void)
                                                  end)
                                                 end)
                                                else
                                                 (let jessie_31 = (raise
                                                                   (Goto_while_1_break_exc
                                                                   void)) in
                                                 void));
                                               (let jessie_32 = (raise
                                                                 (Goto__L_exc
                                                                 void)) in
                                               void);
                                               (raise
                                                (Goto_while_1_break_exc
                                                void))
                                              end in
                             void)
                             with
                             Goto__L_exc jessie_5 ->
                             (_L: void) end;
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_8 ->
         void end
       done
       with
       Goto_while_1_break_exc jessie_6 ->
       (while_1_break: void) end;
      (C_34:
      begin
        (let jessie_35 = (__retres_0 := (C_33:
                                        (int32_of_integer_ (if ((eq_int_ 
                                                                 (integer_of_int32 !k_0)) 
                                                                (integer_of_int32 n_1))
                                                           then (1)
                                                           else (0))))) in
        void);
       (jessie_returned_value := !__retres_0);
       (raise Return)
      end)
     end))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let all_zeros_ensures_default =
 fun (t : int_P pointer) (n_0 : int32) ->
  { (C_14:
    ((C_16: le_int(offset_min(int_P_alloc_table, t), (0)))
    and ((C_17:
         ge_int(offset_max(int_P_alloc_table, t), integer_of_int32(n_0)))
        and (C_18: ge_int(integer_of_int32(n_0), (0)))))) }
  (let mutable_n_0 = ref n_0 in
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       try
        while true do
        { invariant
            (C_1:
            ((C_3: le_int((0), integer_of_int32(mutable_n_0)))
            and ((C_4:
                 le_int(integer_of_int32(mutable_n_0),
                 integer_of_int32(mutable_n_0@init)))
                and (C_5:
                    (forall i_7:int32.
                     ((le_int(integer_of_int32(mutable_n_0),
                       integer_of_int32(i_7))
                      and lt_int(integer_of_int32(i_7),
                          integer_of_int32(mutable_n_0@init))) ->
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(t, integer_of_int32(i_7)))),
                      (0))))))))
           }
         try
          (let jessie_25 = begin
                             try
                              (let jessie_24 = (C_9:
                                               begin
                                                 (let jessie_20 = (mutable_n_0 := 
                                                                   (safe_int32_of_integer_ 
                                                                    (C_7:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !mutable_n_0)) (1))))) in
                                                 void);
                                                (if ((ge_int_ (integer_of_int32 !mutable_n_0)) (0))
                                                then
                                                 (if (not ((neq_int_ 
                                                            (integer_of_int32 
                                                             ((safe_acc_ !int_P_int_M) 
                                                              (C_10:
                                                              ((shift t) 
                                                               (integer_of_int32 !mutable_n_0)))))) (0)))
                                                 then void
                                                 else
                                                  (let jessie_21 = (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                  void))
                                                else
                                                 (let jessie_22 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                                (let jessie_23 = (raise
                                                                  (Goto__L_exc
                                                                  void)) in
                                                void);
                                                (raise
                                                 (Goto_while_0_break_exc
                                                 void))
                                               end) in
                              void)
                              with
                              Goto__L_exc jessie_1 ->
                              (_L: void) end;
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_4 ->
          void end
        done
        with
        Goto_while_0_break_exc jessie_2 ->
        (while_0_break: void) end;
      (C_13:
      begin
        (let jessie_26 = (__retres := (safe_int32_of_integer_ (if ((lt_int_ 
                                                                    (integer_of_int32 !mutable_n_0)) (0))
                                                              then (1)
                                                              else (0)))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { ((true = true) ->
     (C_19:
     (neq_int(integer_of_int32(result), (0))
     <-> (forall i_6:int32.
          ((le_int((0), integer_of_int32(i_6))
           and lt_int(integer_of_int32(i_6), integer_of_int32(n_0))) ->
           eq_int(integer_of_int32(select(int_P_int_M,
                                   shift(t, integer_of_int32(i_6)))),
           (0))))))) }

let all_zeros_safety =
 fun (t : int_P pointer) (n_0 : int32) ->
  { (C_14:
    ((C_16: le_int(offset_min(int_P_alloc_table, t), (0)))
    and ((C_17:
         ge_int(offset_max(int_P_alloc_table, t), integer_of_int32(n_0)))
        and (C_18: ge_int(integer_of_int32(n_0), (0)))))) }
  (let mutable_n_0 = ref n_0 in
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       try
        while true do
        { invariant
            (C_1:
            ((C_3: le_int((0), integer_of_int32(mutable_n_0)))
            and ((C_4:
                 le_int(integer_of_int32(mutable_n_0),
                 integer_of_int32(mutable_n_0@init)))
                and (C_5:
                    (forall i_7:int32.
                     ((le_int(integer_of_int32(mutable_n_0),
                       integer_of_int32(i_7))
                      and lt_int(integer_of_int32(i_7),
                          integer_of_int32(mutable_n_0@init))) ->
                      eq_int(integer_of_int32(select(int_P_int_M,
                                              shift(t, integer_of_int32(i_7)))),
                      (0))))))))
          variant (C_6 : integer_of_int32((C_6 : mutable_n_0))) }
         try
          (let jessie_18 = begin
                             try
                              (let jessie_17 = (C_9:
                                               begin
                                                 (let jessie_13 = (mutable_n_0 := 
                                                                   (C_8:
                                                                   (int32_of_integer_ 
                                                                    (C_7:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !mutable_n_0)) (1)))))) in
                                                 void);
                                                (if ((ge_int_ (integer_of_int32 !mutable_n_0)) (0))
                                                then
                                                 (if (not ((neq_int_ 
                                                            (integer_of_int32 
                                                             (C_11:
                                                             ((((offset_acc_ !int_P_alloc_table) !int_P_int_M) t) 
                                                              (integer_of_int32 !mutable_n_0))))) (0)))
                                                 then void
                                                 else
                                                  (let jessie_14 = (raise
                                                                    (Goto_while_0_break_exc
                                                                    void)) in
                                                  void))
                                                else
                                                 (let jessie_15 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                                (let jessie_16 = (raise
                                                                  (Goto__L_exc
                                                                  void)) in
                                                void);
                                                (raise
                                                 (Goto_while_0_break_exc
                                                 void))
                                               end) in
                              void)
                              with
                              Goto__L_exc jessie_1 ->
                              (_L: void) end;
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_4 ->
          void end
        done
        with
        Goto_while_0_break_exc jessie_2 ->
        (while_0_break: void) end;
      (C_13:
      begin
        (let jessie_19 = (__retres := (C_12:
                                      (int32_of_integer_ (if ((lt_int_ 
                                                               (integer_of_int32 !mutable_n_0)) (0))
                                                         then (1)
                                                         else (0))))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { true }


