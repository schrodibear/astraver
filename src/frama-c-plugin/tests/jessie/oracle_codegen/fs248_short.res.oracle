rm -f fs248_short.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only fs248_short.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs fs248_short.cloc fs248_short.jc
Normalized expression:
(((\offset_min(g)) <= 0) && ((\offset_max(g)) >= 0))

Normalized expression:
(((\offset_min(e)) <= 0) && ((\offset_max(e)) >= 0))

Normalized expression:
(((\offset_min(q2)) <= 0) && ((\offset_max(q2)) >= 4))

Normalized expression:
(((\offset_min(p2)) <= 0) && ((\offset_max(p2)) >= 4))

Normalized expression:
(((\offset_min(q)) <= 0) && ((\offset_max(q)) >= 4))

Normalized expression:
(((\offset_min(p)) <= 0) && ((\offset_max(p)) >= 4))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let char_P[..] tmp in
   {
   (let int32 __jc_off_x_0 in
      {
      (let int32 __jc_off_tmp in
         {
         {
           (C_1:
              {
              (__jc_off_x_0 = 0);
                (C_9:
                   {
                   ((C_8: (C_7: (x_0 + __jc_off_x_0)).char_M) =
                      (C_6: (TODO cast)));
                     (C_10:
                        {
                        (__jc_off_tmp = __jc_off_x_0);
                          (C_13:
                             {
                             (__jc_off_x_0 = (C_12: (TODO cast)));
                               (C_21:
                                  {
                                  ((C_20: (C_19: (x_0 + __jc_off_x_0)).char_M) =
                                     (C_18: (TODO cast)));
                                    (C_26:
                                       {
                                       ((C_25: y_0.int_M) =
                                          (C_24: (TODO cast)));
                                         (return)
                                       })
                                  })
                             })
                        })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
{
(let char_P[..] q_0 in
   {
   (let int32 __jc_off_q_0 in
      {
      {
        (C_32:
           {
           ((C_31: x_0.char_M) = (C_30: (TODO cast)));
             (C_33:
                {
                (__jc_off_q_0 = 1);
                  (C_41:
                     {
                     ((C_40: (C_39: (x_0 + __jc_off_q_0)).char_M) =
                        (C_38: (TODO cast)));
                       (return)
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
{
(let S[..] p_0 in
   {
   (let S[0] s1 in
      {
      (let S[0] s2 in
         {
         (let int32 tmp_2 in
            {
            (let int32 tmp_8 in
               {
               {
                 (C_43:
                    {
                    (s1 = (C_42: (TODO alloc)));
                      (C_45:
                         {
                         (s2 = (C_44: (TODO alloc)));
                           (C_47:
                              {
                              ((C_46: s1.a) = 2);
                                (C_49:
                                   {
                                   ((C_48: s1.b) = 4);
                                     (C_51:
                                        {
                                        ((C_50: s1.c) = 6);
                                          (C_53:
                                             {
                                             ((C_52: s2.a) = 1);
                                               (C_55:
                                                  {
                                                  ((C_54: s2.b) = 3);
                                                    (C_57:
                                                       {
                                                       ((C_56: s2.c) = 5);
                                                         (TODO if);
                                                         (C_61:
                                                            {
                                                            ((C_60: p_0.a) =
                                                               7);
                                                              (C_63:
                                                                 {
                                                                 (t =
                                                                    (
                                                                    C_62:
                                                                    p_0.b));
                                                                   (C_64:
                                                                    {
                                                                    (z = 2);
                                                                    (TODO if);
                                                                    (C_70:
                                                                    {
                                                                    (v = u);
                                                                    (TODO if);
                                                                    (TODO if);
                                                                    (C_82:
                                                                    {
                                                                    (PTR1 =
                                                                    (C_81:
                                                                    (p2 +
                                                                    tmp_2)));
                                                                    (C_84:
                                                                    {
                                                                    (PTR2 =
                                                                    (C_83:
                                                                    (PTR1 + 1)));
                                                                    (TODO if);
                                                                    (TODO if);
                                                                    (C_107:
                                                                    {
                                                                    (PTR3 =
                                                                    (C_106:
                                                                    (p2 +
                                                                    tmp_8)));
                                                                    (C_109:
                                                                    {
                                                                    ((C_108:
                                                                    PTR3.int_M) =
                                                                    99);
                                                                    (C_110:
                                                                    {
                                                                    (PTR4 =
                                                                    PTR3);
                                                                    (C_112:
                                                                    {
                                                                    (x =
                                                                    (C_111:
                                                                    PTR1.int_M));
                                                                    (TODO if);
                                                                    {
                                                                    (C_120:
                                                                    {
                                                                    (TODO free);
                                                                    (C_121:
                                                                    {
                                                                    (TODO free);
                                                                    (return)
                                                                    })
                                                                    })
                                                                    }
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                    })
                                                                 })
                                                            })
                                                       })
                                                  })
                                             })
                                        })
                                   })
                              })
                         })
                    })
                 }
               })
            })
         })
      })
   })
}

Generating Why function f
Generating Why function f2
Generating Why function main3
cat why/fs248_short.why
type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

type void_P

logic A:  -> int32

logic B:  -> int32

logic C:  -> int32

logic D:  -> int32

logic E:  -> int32

logic F:  -> int32

logic G:  -> int32

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic c:  -> int32

logic c1:  -> int32

logic c2:  -> int32

logic c3:  -> int32

logic c4:  -> int32

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

logic e:  -> S pointer

logic y:  -> int32

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic g:  -> S pointer

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

logic p:  -> int_P pointer

logic p2:  -> int_P pointer

logic q:  -> int_P pointer

logic q2:  -> int_P pointer

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic tx:  -> int32

logic ty:  -> int32

logic tz:  -> int32

logic tz1:  -> int32

logic tz2:  -> int32

logic tz3:  -> int32

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_e(e:S pointer,
 S_alloc_table:S alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(S_alloc_table, e), (0))
 and ge_int(offset_max(S_alloc_table, e), (0)))

predicate valid_g(g:S pointer,
 S_alloc_table:S alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(S_alloc_table, g), (0))
 and ge_int(offset_max(S_alloc_table, g), (0)))

predicate valid_p(p:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(int_P_alloc_table, p), (0))
 and ge_int(offset_max(int_P_alloc_table, p), (4)))

predicate valid_p2(p2:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(int_P_alloc_table, p2), (0))
 and ge_int(offset_max(int_P_alloc_table, p2), (4)))

predicate valid_q(q:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(int_P_alloc_table, q), (0))
 and ge_int(offset_max(int_P_alloc_table, q), (4)))

predicate valid_q2(q2:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 tz:int32,
 ty:int32,
 tx:int32,
 tz3:int32,
 tz2:int32,
 tz1:int32,
 g:S pointer,
 e:S pointer,
 c4:int32,
 c3:int32,
 c2:int32,
 c1:int32,
 c:int32,
 PTR4:int_P pointer,
 PTR3:int_P pointer,
 PTR2:int_P pointer,
 PTR1:int_P pointer,
 v2:int32,
 t2:int32,
 z:int32,
 y:int32,
 x:int32,
 w:int32,
 v:int32,
 u:int32,
 t:int32,
 q2:int_P pointer,
 p2:int_P pointer,
 q:int_P pointer,
 p:int_P pointer,
 G:int32,
 F:int32,
 E:int32,
 D:int32,
 C:int32,
 B:int32,
 A:int32) =
 (le_int(offset_min(int_P_alloc_table, q2), (0))
 and ge_int(offset_max(int_P_alloc_table, q2), (4)))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

logic w:  -> int32

parameter PTR1 : int_P pointer ref

parameter PTR2 : int_P pointer ref

parameter PTR3 : int_P pointer ref

parameter PTR4 : int_P pointer ref

parameter S_a : (S, int32) memory ref

parameter S_alloc_table : S alloc_table ref

parameter S_b : (S, int32) memory ref

parameter S_c : (S, int32) memory ref

parameter S_tag_table : S tag_table ref

parameter x : int32 ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter v2 : int32 ref

parameter t2 : int32 ref

parameter z : int32 ref

parameter v : int32 ref

parameter u : int32 ref

parameter t : int32 ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f :
 x_0:char_P pointer ->
  y_0:int_P pointer ->
   { (JC_1:
     (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
      c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
      p, G, F, E, D, C, B, A)
     and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
          c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
          p2, q, p, G, F, E, D, C, B, A)
         and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g,
              e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x,
              w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
             and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                  g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                  y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                 and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                      tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                      v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D,
                      C, B, A)
                     and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                         tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2,
                         PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G,
                         F, E, D, C, B, A)))))))}
   unit
   reads PTR1,PTR2,PTR3,PTR4,S_alloc_table,char_P_alloc_table,char_P_char_M,char_P_tag_table,int_P_alloc_table,int_P_int_M,int_P_tag_table,t,t2,u,v,v2,x,z
   writes char_P_char_M,int_P_int_M
   { (JC_3:
     (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
      c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
      p, G, F, E, D, C, B, A)
     and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
          c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
          p2, q, p, G, F, E, D, C, B, A)
         and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g,
              e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x,
              w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
             and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                  g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                  y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                 and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                      tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                      v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D,
                      C, B, A)
                     and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                         tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2,
                         PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G,
                         F, E, D, C, B, A))))))) }

parameter f2 :
 x_0_0:char_P pointer ->
  { (JC_7:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A)))))))}
  unit
  reads PTR1,PTR2,PTR3,PTR4,S_alloc_table,char_P_alloc_table,char_P_char_M,char_P_tag_table,int_P_alloc_table,t,t2,u,v,v2,x,z
  writes char_P_char_M
  { (JC_9:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter main3 :
 tt:unit ->
  { (JC_12:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A)))))))}
  unit reads S_alloc_table,S_b,int_P_alloc_table,int_P_int_M
  writes PTR1,PTR2,PTR3,PTR4,S_a,S_alloc_table,S_b,S_c,S_tag_table,int_P_int_M,t,t2,u,v,v2,x,z
  { (JC_14:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f2_safety =
 fun (x_0_0 : char_P pointer) ->
  { (JC_7:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }
  (init:
  try
   begin
     (let q_0 = (any_pointer void) in
     (let __jc_off_q_0 = ref (any_int32 void) in
     (C_32:
     begin
       (let jessie_27 = (let jessie_25 = x_0_0 in
                        (let jessie_26 = (C_30:
                                         (int8_of_integer_ (C_29:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (C_28:
                                                              (int32_of_integer_ 
                                                               (integer_of_int8 
                                                                (C_27:
                                                                (((acc_ !char_P_alloc_table) !char_P_char_M) x_0_0))))))) (1))))) in
                        (JC_10:
                        ((((upd_ !char_P_alloc_table) char_P_char_M) x_0_0) jessie_26)))) in
       void);
      (C_33:
      begin
        (let jessie_28 = (__jc_off_q_0 := (safe_int32_of_integer_ (1))) in
        void);
       (C_41:
       begin
         (let jessie_31 = (let jessie_29 = (C_39:
                                           ((shift x_0_0) (integer_of_int32 !__jc_off_q_0))) in
                          (let jessie_30 = (C_38:
                                           (int8_of_integer_ (C_37:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (C_36:
                                                                (int32_of_integer_ 
                                                                 (integer_of_int8 
                                                                  (C_35:
                                                                  ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) x_0_0) 
                                                                   (integer_of_int32 !__jc_off_q_0)))))))) (1))))) in
                          (JC_11:
                          (((((offset_upd_ !char_P_alloc_table) char_P_char_M) x_0_0) 
                            (integer_of_int32 !__jc_off_q_0)) jessie_30)))) in
         void);
        (raise Return)
       end)
      end)
     end)));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_9:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }

let f_safety =
 fun (x_0 : char_P pointer) (y_0 : int_P pointer) ->
  { (JC_1:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }
  (init:
  try
   begin
     (let tmp = (any_pointer void) in
     (let __jc_off_x_0 = ref (any_int32 void) in
     (let __jc_off_tmp = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_1 = (__jc_off_x_0 := (safe_int32_of_integer_ (0))) in
       void);
      (C_9:
      begin
        (let jessie_4 = (let jessie_2 = (C_7:
                                        ((shift x_0) (integer_of_int32 !__jc_off_x_0))) in
                        (let jessie_3 = (C_6:
                                        (int8_of_integer_ (C_5:
                                                          ((add_int (integer_of_int32 
                                                                    (C_4:
                                                                    (int32_of_integer_ 
                                                                    (integer_of_int8 
                                                                    (C_3:
                                                                    ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) x_0) 
                                                                    (integer_of_int32 !__jc_off_x_0)))))))) (1))))) in
                        (JC_4:
                        (((((offset_upd_ !char_P_alloc_table) char_P_char_M) x_0) 
                          (integer_of_int32 !__jc_off_x_0)) jessie_3)))) in
        void);
       (C_10:
       begin
         (let jessie_5 = (__jc_off_tmp := !__jc_off_x_0) in void);
        (C_13:
        begin
          (let jessie_6 = (__jc_off_x_0 := (C_12:
                                           (int32_of_integer_ (C_11:
                                                              ((add_int 
                                                                (integer_of_int32 !__jc_off_x_0)) (1)))))) in
          void);
         (C_21:
         begin
           (let jessie_9 = (let jessie_7 = (C_19:
                                           ((shift x_0) (integer_of_int32 !__jc_off_x_0))) in
                           (let jessie_8 = (C_18:
                                           (int8_of_integer_ (C_17:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (C_16:
                                                                (int32_of_integer_ 
                                                                 (integer_of_int8 
                                                                  (C_15:
                                                                  ((((offset_acc_ !char_P_alloc_table) !char_P_char_M) x_0) 
                                                                   (integer_of_int32 !__jc_off_x_0)))))))) (1))))) in
                           (JC_5:
                           (((((offset_upd_ !char_P_alloc_table) char_P_char_M) x_0) 
                             (integer_of_int32 !__jc_off_x_0)) jessie_8)))) in
           void);
          (C_26:
          begin
            (let jessie_12 = (let jessie_10 = y_0 in
                             (let jessie_11 = (C_24:
                                              (int32_of_integer_ (C_23:
                                                                 ((add_int 
                                                                   (integer_of_int32 
                                                                    (C_22:
                                                                    (((acc_ !int_P_alloc_table) !int_P_int_M) y_0)))) (1))))) in
                             (JC_6:
                             ((((upd_ !int_P_alloc_table) int_P_int_M) y_0) jessie_11)))) in
            void);
           (raise Return)
          end)
         end)
        end)
       end)
      end)
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }

let main3_safety =
 fun (tt : unit) ->
  { (JC_12:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }
  (init:
  try
   begin
     (let p_0 = ref (any_pointer void) in
     (let s1 = ref (any_pointer void) in
     (let s2 = ref (any_pointer void) in
     (let tmp_2 = ref (any_int32 void) in
     (let tmp_8 = ref (any_int32 void) in
     (C_43:
     begin
       (let jessie_40 = (let jessie_39 = (C_42:
                                         (((alloc_one_S void) S_alloc_table) S_alloc_table)) in
                        (assert
                        { ge_int(offset_max(S_alloc_table, jessie_39), (0)) };
                        (s1 := (C_42:
                               (((alloc_one_S void) S_alloc_table) S_alloc_table))))) in
       void);
      (C_45:
      begin
        (let jessie_42 = (let jessie_41 = (C_44:
                                          (((alloc_one_S void) S_alloc_table) S_alloc_table)) in
                         (assert
                         { ge_int(offset_max(S_alloc_table, jessie_41), (0)) };
                         (s2 := (C_44:
                                (((alloc_one_S void) S_alloc_table) S_alloc_table))))) in
        void);
       (C_47:
       begin
         (let jessie_45 = (let jessie_43 = !s1 in
                          (let jessie_44 = (safe_int32_of_integer_ (2)) in
                          (((safe_upd_ S_a) !s1) jessie_44))) in
         void);
        (C_49:
        begin
          (let jessie_48 = (let jessie_46 = !s1 in
                           (let jessie_47 = (safe_int32_of_integer_ (4)) in
                           (((safe_upd_ S_b) !s1) jessie_47))) in
          void);
         (C_51:
         begin
           (let jessie_51 = (let jessie_49 = !s1 in
                            (let jessie_50 = (safe_int32_of_integer_ (6)) in
                            (((safe_upd_ S_c) !s1) jessie_50))) in
           void);
          (C_53:
          begin
            (let jessie_54 = (let jessie_52 = !s2 in
                             (let jessie_53 = (safe_int32_of_integer_ (1)) in
                             (((safe_upd_ S_a) !s2) jessie_53))) in
            void);
           (C_55:
           begin
             (let jessie_57 = (let jessie_55 = !s2 in
                              (let jessie_56 = (safe_int32_of_integer_ (3)) in
                              (((safe_upd_ S_b) !s2) jessie_56))) in
             void);
            (C_57:
            begin
              (let jessie_60 = (let jessie_58 = !s2 in
                               (let jessie_59 = (safe_int32_of_integer_ (5)) in
                               (((safe_upd_ S_c) !s2) jessie_59))) in
              void);
             (let jessie_63 = (if ((neq_int_ (integer_of_int32 c)) (0))
                              then (C_59: begin   (p_0 := !s1); !p_0 end)
                              else (C_58: begin   (p_0 := !s2); !p_0 end)) in
             void);
             (C_61:
             begin
               (let jessie_66 = (let jessie_64 = !p_0 in
                                (let jessie_65 = (safe_int32_of_integer_ (7)) in
                                (JC_15:
                                ((((upd_ !S_alloc_table) S_a) !p_0) jessie_65)))) in
               void);
              (C_63:
              begin
                (let jessie_67 = (t := (C_62:
                                       (((acc_ !S_alloc_table) !S_b) !p_0))) in
                void);
               (C_64:
               begin
                 (let jessie_68 = (z := (safe_int32_of_integer_ (2))) in
                 void);
                (let jessie_69 = (if ((neq_int_ (integer_of_int32 (C_69:
                                                                  (int32_of_integer_ 
                                                                   (C_68:
                                                                   ((add_int 
                                                                    (integer_of_int32 c)) 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ (1))))))))) (0))
                                 then
                                  (C_66:
                                  begin
                                    (u := (safe_int32_of_integer_ (0))); !u
                                  end)
                                 else
                                  (C_65:
                                  begin
                                    (u := (safe_int32_of_integer_ (1))); !u
                                  end)) in
                void);
                (C_70:
                begin
                  (let jessie_70 = (v := !u) in void);
                 (if ((eq_int_ (integer_of_int32 w)) (integer_of_int32 !v))
                 then (C_71: (let jessie_71 = (z := !u) in void))
                 else void);
                 (if ((neq_int_ (integer_of_int32 (C_80:
                                                  (int32_of_integer_ 
                                                   (C_79:
                                                   ((add_int (integer_of_int32 c)) 
                                                    (integer_of_int32 
                                                     (safe_int32_of_integer_ (1))))))))) (0))
                 then
                  (C_77:
                  (let jessie_72 = (tmp_2 := (safe_int32_of_integer_ (0))) in
                  void))
                 else
                  (let jessie_73 = (if ((neq_int_ (integer_of_int32 (C_76:
                                                                    (int32_of_integer_ 
                                                                    (C_75:
                                                                    ((add_int 
                                                                    (integer_of_int32 c)) 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ (2))))))))) (0))
                                   then
                                    (C_73:
                                    begin
                                      (tmp_2 := (safe_int32_of_integer_ (1)));
                                     !tmp_2
                                    end)
                                   else
                                    (C_72:
                                    begin
                                      (tmp_2 := (safe_int32_of_integer_ (2)));
                                     !tmp_2
                                    end)) in
                  void));
                 (C_82:
                 begin
                   (let jessie_75 = (PTR1 := (C_81:
                                             ((shift p2) (integer_of_int32 !tmp_2)))) in
                   void);
                  (C_84:
                  begin
                    (let jessie_77 = (PTR2 := (C_83: ((shift !PTR1) (1)))) in
                    void);
                   (if ((neq_int_ (integer_of_int32 (C_96:
                                                    (int32_of_integer_ 
                                                     (C_95:
                                                     ((add_int (integer_of_int32 c)) 
                                                      (integer_of_int32 
                                                       (safe_int32_of_integer_ (10))))))))) (0))
                   then
                    (let jessie_80 = (let jessie_78 = !PTR1 in
                                     (let jessie_79 = (safe_int32_of_integer_ (96)) in
                                     (C_93:
                                     ((((upd_ !int_P_alloc_table) int_P_int_M) !PTR1) jessie_79)))) in
                    void)
                   else
                    (let jessie_85 = (if ((neq_int_ (integer_of_int32 
                                                     (C_91:
                                                     (int32_of_integer_ 
                                                      (C_90:
                                                      ((add_int (integer_of_int32 c)) 
                                                       (integer_of_int32 
                                                        (safe_int32_of_integer_ (11))))))))) (0))
                                     then
                                      (let jessie_81 = !PTR1 in
                                      (let jessie_82 = (safe_int32_of_integer_ (97)) in
                                      begin
                                        (C_88:
                                        ((((upd_ !int_P_alloc_table) int_P_int_M) !PTR1) jessie_82));
                                       ((safe_acc_ !int_P_int_M) jessie_81)
                                      end))
                                     else
                                      (let jessie_83 = !PTR1 in
                                      (let jessie_84 = (safe_int32_of_integer_ (98)) in
                                      begin
                                        (C_86:
                                        ((((upd_ !int_P_alloc_table) int_P_int_M) !PTR1) jessie_84));
                                       ((safe_acc_ !int_P_int_M) jessie_83)
                                      end))) in
                    void));
                   (if ((neq_int_ (integer_of_int32 (C_105:
                                                    (int32_of_integer_ 
                                                     (C_104:
                                                     ((add_int (integer_of_int32 c)) 
                                                      (integer_of_int32 
                                                       (safe_int32_of_integer_ (3))))))))) (0))
                   then
                    (C_102:
                    (let jessie_86 = (tmp_8 := (safe_int32_of_integer_ (1))) in
                    void))
                   else
                    (let jessie_87 = (if ((neq_int_ (integer_of_int32 
                                                     (C_101:
                                                     (int32_of_integer_ 
                                                      (C_100:
                                                      ((add_int (integer_of_int32 c)) 
                                                       (integer_of_int32 
                                                        (safe_int32_of_integer_ (4))))))))) (0))
                                     then
                                      (C_98:
                                      begin
                                        (tmp_8 := (safe_int32_of_integer_ (2)));
                                       !tmp_8
                                      end)
                                     else
                                      (C_97:
                                      begin
                                        (tmp_8 := (safe_int32_of_integer_ (4)));
                                       !tmp_8
                                      end)) in
                    void));
                   (C_107:
                   begin
                     (let jessie_89 = (PTR3 := (C_106:
                                               ((shift p2) (integer_of_int32 !tmp_8)))) in
                     void);
                    (C_109:
                    begin
                      (let jessie_92 = (let jessie_90 = !PTR3 in
                                       (let jessie_91 = (safe_int32_of_integer_ (99)) in
                                       (JC_16:
                                       ((((upd_ !int_P_alloc_table) int_P_int_M) !PTR3) jessie_91)))) in
                      void);
                     (C_110:
                     begin
                       (let jessie_94 = (PTR4 := !PTR3) in void);
                      (C_112:
                      begin
                        (let jessie_95 = (x := (C_111:
                                               (((acc_ !int_P_alloc_table) !int_P_int_M) !PTR1))) in
                        void);
                       (if ((eq_int_ (integer_of_int32 (C_119:
                                                       (int32_of_integer_ 
                                                        (C_118:
                                                        ((sub_pointer !PTR4) !PTR2)))))) (0))
                       then
                        (let jessie_97 = (C_114:
                                         begin
                                           (let jessie_96 = (t2 := (C_113:
                                                                   (((acc_ !int_P_alloc_table) !int_P_int_M) !PTR1))) in
                                           void);
                                          (C_117:
                                          begin
                                            (v2 := (C_116:
                                                   (int32_of_integer_ 
                                                    (C_115:
                                                    ((sub_pointer !PTR3) !PTR1)))));
                                           !v2
                                          end)
                                         end) in
                        void)
                       else void);
                       (C_120:
                       begin
                         ((free_parameter S_alloc_table) !s1);
                        (C_121:
                        begin
                          ((free_parameter S_alloc_table) !s2);
                         (raise Return)
                        end)
                       end)
                      end)
                     end)
                    end)
                   end)
                  end)
                 end)
                end)
               end)
              end)
             end)
            end)
           end)
          end)
         end)
        end)
       end)
      end)
     end))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_14:
    (valid_g(g, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3, c2,
     c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2, p2, q,
     p, G, F, E, D, C, B, A)
    and (valid_e(e, S_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e, c4, c3,
         c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w, v, u, t, q2,
         p2, q, p, G, F, E, D, C, B, A)
        and (valid_q2(q2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1, g, e,
             c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z, y, x, w,
             v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
            and (valid_p2(p2, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                 g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2, z,
                 y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                and (valid_q(q, int_P_alloc_table, tz, ty, tx, tz3, tz2, tz1,
                     g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1, v2, t2,
                     z, y, x, w, v, u, t, q2, p2, q, p, G, F, E, D, C, B, A)
                    and valid_p(p, int_P_alloc_table, tz, ty, tx, tz3, tz2,
                        tz1, g, e, c4, c3, c2, c1, c, PTR4, PTR3, PTR2, PTR1,
                        v2, t2, z, y, x, w, v, u, t, q2, p2, q, p, G, F, E,
                        D, C, B, A))))))) }


