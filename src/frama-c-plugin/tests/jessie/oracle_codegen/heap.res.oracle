rm -f heap.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only heap.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs heap.cloc heap.jc
Normalized expression:
(((\offset_min(heap)) <= 0) && ((\offset_max(heap)) >= 99))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(\forall int32 x, ((0 <= x) ==> ((0 <= (x / 2)) && ((x / 2) <= x))))

Normalized expression:
union_bag{}(b, singleton_bag{}(x))

Normalized expression:
((occ_bag{}(m, b) >= 1) &&
   (\forall integer x, ((occ_bag{}(x, b) >= 1) ==> (x <= m))))

Normalized expression:
(bag_of_tree{}(Empty{}()) == empty_bag{}())

Normalized expression:
(\forall tree l,
   (\forall int32 x,
      (\forall tree r,
         (bag_of_tree{}(Node{}(l, x, r)) ==
            add_bag{}(x, union_bag{}(bag_of_tree{}(l), bag_of_tree{}(r)))))))

Normalized expression:
is_heap{}(Empty{}())

Normalized expression:
(\forall integer x, is_heap{}(Node{}(Empty{}(), x, Empty{}())))

Normalized expression:
(\forall tree ll,
   (\forall int32 lx,
      (\forall tree lr,
         (\forall int32 x,
            ((x >= lx) ==>
               (is_heap{}(Node{}(ll, lx, lr)) ==>
                  is_heap{}(Node{}(Node{}(ll, lx, lr), x, Empty{}()))))))))

Normalized expression:
(\forall tree rl,
   (\forall int32 rx,
      (\forall tree rr,
         (\forall int32 x,
            ((x >= rx) ==>
               (is_heap{}(Node{}(rl, rx, rr)) ==>
                  is_heap{}(Node{}(Empty{}(), x, Node{}(rl, rx, rr)))))))))

Normalized expression:
(\forall tree ll,
   (\forall int32 lx,
      (\forall tree lr,
         (\forall int32 x,
            (\forall tree rl,
               (\forall int32 rx,
                  (\forall tree rr,
                     ((x >= lx) ==>
                        (is_heap{}(Node{}(ll, lx, lr)) ==>
                           ((x >= rx) ==>
                              (is_heap{}(Node{}(rl, rx, rr)) ==>
                                 is_heap
                                   {}
                                   (Node
                                      {}
                                      (Node{}(ll, lx, lr),
                                      x,
                                      Node{}(rl, rx, rr))))))))))))))

Normalized expression:
(t + (..)).int_M

Normalized expression:
(\forall int_P[..] t,
   (\forall integer root,
      (\forall integer bound,
         ((root >= bound) ==> (tree_of_array{L}(t, root, bound) == Empty{}())))))

Normalized expression:
(\forall int_P[..] t,
   (\forall integer root,
      (\forall integer bound,
         (((0 <= root) && (root > bound)) ==>
            (tree_of_array{L}(t, root, bound) ==
               Node
                 {}
                 (tree_of_array{L}(t, ((2 * root) + 1), bound),
                 (t + root).int_M,
                 tree_of_array{L}(t, ((2 * root) + 2), bound)))))))

Normalized expression:
((0 <= size) && (size > 100))

Normalized expression:
is_heap{}(tree_of_array{Here}(heap, 0, size))

Normalized expression:
bag_of_tree{}(tree_of_array{L}(heap, 0, size))

Normalized expression:
{ { (C_1: { (size = 0); (return) }) }
}

Normalized expression:
(C_2: (model{Here}() == empty_bag{}()))

Normalized expression:
size

Normalized expression:
true

Normalized expression:
{
(let int32 i in
   {
   (let int32 parent in
      {
      (let int32 p in
         {
         {
           (C_3:
              {
              (i = size);
                (try {
                   (try loop
                          invariant (C_4:
                                       ((((C_7: (0 <= i)) &&
                                            (C_8: (i <= size))) &&
                                           (C_9:
                                              ((i == size) ==>
                                                 (is_heap
                                                    {}
                                                    (tree_of_array
                                                       {Here}
                                                       (heap,
                                                       0,
                                                       size)) &&
                                                    (model{Here}() ==
                                                       model{Pre}()))))) &&
                                          (C_10:
                                             ((i > size) ==>
                                                (is_heap
                                                   {}
                                                   (tree_of_array
                                                      {Here}
                                                      (heap,
                                                      0,
                                                      (size + 1))) &&
                                                   (bag_of_tree
                                                      {}
                                                      (tree_of_array
                                                         {Here}
                                                         (heap,
                                                         0,
                                                         (size + 1))) ==
                                                      add_bag
                                                        {}
                                                        ((heap + i).int_M,
                                                        \at(model{Pre}(),
                                                        Pre))))))));
                          variant (C_11: i);
                          (try {
                             {
                               {
                                 (TODO if);
                                   (C_16:
                                      {
                                      (parent = (C_15: (TODO cast)));
                                        (C_18:
                                           {
                                           (p = (C_17: (heap + parent).int_M));
                                             (TODO if);
                                             (C_20:
                                                {
                                                ((C_19: (heap + i).int_M) = p);
                                                  (C_21: { (i = parent) })
                                                })
                                           })
                                      })
                                 }
                               };
                               (throw Loop_continue ())
                             } with
                             | Loop_continue jessie_3 -> ()
                             | default -> ()) done with
                      | Loop_exit jessie_2 -> ()
                      | default -> ())
                   } with
                   | Goto_while_0_break jessie_1 -> {
                   (while_0_break: { () })
                   }
                   | default -> ());
                (C_23:
                   {
                   ((C_22: (heap + i).int_M) = x);
                     (C_26: { (size = (C_25: (TODO cast))); (return) })
                   })
              })
           }
         })
      })
   })
}

Normalized expression:
(C_27: (size > (100 - 1)))

Normalized expression:
(C_28: (model{Here}() == add_bag{}(x, (TODO old))))

Normalized expression:
(heap + (..)).int_M

Normalized expression:
size

Normalized expression:
true

Normalized expression:
{
(let int32 __retres in
   {
   { (C_30: { (__retres = (C_29: (heap + 0).int_M)); (return __retres) }) }
   })
}

Normalized expression:
(C_31: (size < 0))

Normalized expression:
(C_32: is_max_bag{}(model{Here}(), \result))

Normalized expression:
true

Normalized expression:
{
(let int32 res in
   {
   (let int32 v in
      {
      (let int32 i in
         {
         (let int32 j in
            {
            {
              (C_34:
                 {
                 (res = (C_33: (heap + 0).int_M));
                   (C_37:
                      {
                      (size = (C_36: (TODO cast))); (TODO if); (return res)
                      })
                 })
              }
            })
         })
      })
   })
}

Normalized expression:
(C_66: (size < 0))

Normalized expression:
(C_67:
   (((C_69: (size == ((TODO old) - 1))) &&
       (C_70: is_max_bag{}((TODO old), \result))) &&
      (C_71: ((TODO old) == add_bag{}(\result, model{Here}())))))

Normalized expression:
(heap + (..)).int_M

Normalized expression:
size

Normalized expression:
true

Generating Why function clear
Generating Why function push
Generating Why function max
Generating Why function pop
cat why/heap.why
type _bool

type bag

type char_P

type int16

type int32

type int64

type int8

type int_P

type tree

type uint16

type uint32

type uint64

type uint8

type void_P

logic Empty_0:  -> tree

exception Goto__L_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic Node: tree, int, tree -> tree

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic union_bag: bag, bag -> bag

logic singleton_bag: int -> bag

function add_bag(x_0:int, b:bag) : bag = union_bag(b, singleton_bag(x_0))

logic bag_of_tree: tree -> bag

logic empty_bag_0:  -> bag

axiom bag_of_tree_def_1 : (bag_of_tree(Empty_0) = empty_bag_0)

logic integer_of_int32: int32 -> int

axiom bag_of_tree_def_2 :
 (forall l_0:tree.
  (forall x_6:int32.
   (forall r_0:tree.
    (bag_of_tree(Node(l_0, integer_of_int32(x_6), r_0)) = add_bag(integer_of_int32(x_6),
                                                          union_bag(bag_of_tree(l_0),
                                                          bag_of_tree(r_0)))))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

axiom div2_1 :
 (forall x_4:int32.
  (le_int((0), integer_of_int32(x_4)) ->
   (le_int((0), div_int(integer_of_int32(x_4), (2)))
   and le_int(div_int(integer_of_int32(x_4), (2)), integer_of_int32(x_4)))))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic heap:  -> int_P pointer

logic is_heap: tree -> prop

logic tree_of_array: (int_P, int32) memory, int_P pointer, int, int -> tree

predicate is_heap_0(size:int32,
 heap:int_P pointer,
 int_P_int_M:(int_P,
 int32) memory,
 size:int32,
 heap:int_P pointer) =
 is_heap(tree_of_array(int_P_int_M, heap, (0), integer_of_int32(size)))

axiom full_separated_is_heap_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall heap:int_P pointer.
    (forall size:int32.
     (forall int_P_int_M:(int_P,
      int32) memory.
      (forall heap:int_P pointer.
       (forall size:int32.
        (full_separated(tmp, heap) ->
         (is_heap_0(size, heap, int_P_int_M, size, heap)
         <-> is_heap_0(size, heap, store(int_P_int_M, tmp, tmpval), size,
             heap))))))))))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

axiom full_separated_tree_of_array_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall bound:int.
    (forall root:int.
     (forall t_1:int_P pointer.
      (forall int_P_int_M_at_L:(int_P,
       int32) memory.
       (full_separated(tmp, t_1) ->
        (tree_of_array(int_P_int_M_at_L, t_1, root, bound) = tree_of_array(int_P_int_M_at_L,
                                                             t_1, root,
                                                             bound)))))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom is_heap_def_1 : is_heap(Empty_0)

axiom is_heap_def_2 : (forall x_7:int. is_heap(Node(Empty_0, x_7, Empty_0)))

axiom is_heap_def_3 :
 (forall ll:tree.
  (forall lx:int32.
   (forall lr:tree.
    (forall x_8:int32.
     (ge_int(integer_of_int32(x_8), integer_of_int32(lx)) ->
      (is_heap(Node(ll, integer_of_int32(lx), lr)) ->
       is_heap(Node(Node(ll, integer_of_int32(lx), lr),
               integer_of_int32(x_8), Empty_0))))))))

axiom is_heap_def_4 :
 (forall rl:tree.
  (forall rx:int32.
   (forall rr:tree.
    (forall x_9:int32.
     (ge_int(integer_of_int32(x_9), integer_of_int32(rx)) ->
      (is_heap(Node(rl, integer_of_int32(rx), rr)) ->
       is_heap(Node(Empty_0, integer_of_int32(x_9),
               Node(rl, integer_of_int32(rx), rr)))))))))

axiom is_heap_def_5 :
 (forall ll_0:tree.
  (forall lx_0:int32.
   (forall lr_0:tree.
    (forall x_10:int32.
     (forall rl_0:tree.
      (forall rx_0:int32.
       (forall rr_0:tree.
        (ge_int(integer_of_int32(x_10), integer_of_int32(lx_0)) ->
         (is_heap(Node(ll_0, integer_of_int32(lx_0), lr_0)) ->
          (ge_int(integer_of_int32(x_10), integer_of_int32(rx_0)) ->
           (is_heap(Node(rl_0, integer_of_int32(rx_0), rr_0)) ->
            is_heap(Node(Node(ll_0, integer_of_int32(lx_0), lr_0),
                    integer_of_int32(x_10),
                    Node(rl_0, integer_of_int32(rx_0), rr_0))))))))))))))

logic occ_bag: int, bag -> int

predicate is_max_bag(b_1:bag,
 m:int) =
 (ge_int(occ_bag(m, b_1), (1))
 and (forall x_5:int. (ge_int(occ_bag(x_5, b_1), (1)) -> le_int(x_5, m))))

function model_0(size:int32,
 heap:int_P pointer,
 int_P_int_M_at_L:(int_P,
 int32) memory) : bag =
 bag_of_tree(tree_of_array(int_P_int_M_at_L, heap, (0),
             integer_of_int32(size)))

predicate size_inv(size:int32,
 size:int32,
 heap:int_P pointer) =
 (le_int((0), integer_of_int32(size))
 and lt_int(integer_of_int32(size), (100)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

axiom tree_of_array_def_1 :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall t_2:int_P pointer.
   (forall root_0:int.
    (forall bound_0:int.
     (ge_int(root_0, bound_0) ->
      (tree_of_array(int_P_int_M_at_L, t_2, root_0, bound_0) = Empty_0))))))

axiom tree_of_array_def_2 :
 (forall int_P_int_M_at_L:(int_P,
  int32) memory.
  (forall t_3:int_P pointer.
   (forall root_1:int.
    (forall bound_1:int.
     ((le_int((0), root_1) and lt_int(root_1, bound_1)) ->
      (tree_of_array(int_P_int_M_at_L, t_3, root_1, bound_1) = Node(tree_of_array(int_P_int_M_at_L,
                                                                    t_3,
                                                                    add_int(
                                                                    mul_int((2),
                                                                    root_1),
                                                                    (1)),
                                                                    bound_1),
                                                               integer_of_int32(
                                                               select(int_P_int_M_at_L,
                                                               shift(t_3,
                                                               root_1))),
                                                               tree_of_array(int_P_int_M_at_L,
                                                               t_3,
                                                               add_int(
                                                               mul_int((2),
                                                               root_1), (2)),
                                                               bound_1))))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_heap(heap:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 size:int32,
 heap:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, heap), (0))
 and ge_int(offset_max(int_P_alloc_table, heap), (99)))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter size : int32 ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter clear :
 tt:unit ->
  { (JC_1:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap))))}
  unit reads int_P_alloc_table,int_P_int_M writes size
  { ((JC_3:
     (valid_heap(heap, int_P_alloc_table, size, heap)
     and (size_inv(size, size, heap)
         and is_heap_0(size, heap, int_P_int_M, size, heap))))
    and ((true = true) ->
         (JC_5:
         ((C_2: (model_0(size, heap, int_P_int_M) = empty_bag_0))
         and (valid_heap(heap, int_P_alloc_table, size, heap)
             and (size_inv(size, size, heap)
                 and is_heap_0(size, heap, int_P_int_M, size, heap))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter max :
 tt:unit ->
  { (JC_16:
    ((C_31: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap)))))}
  int32 reads int_P_alloc_table,int_P_int_M,size
  { ((JC_18:
     (valid_heap(heap, int_P_alloc_table, size, heap)
     and (size_inv(size, size, heap)
         and is_heap_0(size, heap, int_P_int_M, size, heap))))
    and ((true = true) ->
         (JC_20:
         ((C_32:
          is_max_bag(model_0(size, heap, int_P_int_M),
          integer_of_int32(result)))
         and (valid_heap(heap, int_P_alloc_table, size, heap)
             and (size_inv(size, size, heap)
                 and is_heap_0(size, heap, int_P_int_M, size, heap))))))) }

parameter pop :
 tt:unit ->
  { (JC_21:
    ((C_66: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap)))))}
  int32 reads int_P_alloc_table,int_P_int_M writes int_P_int_M,size
  { ((JC_23:
     (valid_heap(heap, int_P_alloc_table, size, heap)
     and (size_inv(size, size, heap)
         and is_heap_0(size, heap, int_P_int_M, size, heap))))
    and ((true = true) ->
         (JC_26:
         ((JC_25:
          ((C_67:
           ((C_69:
            eq_int(integer_of_int32(size),
            sub_int(integer_of_int32(size@), (1))))
           and ((C_70:
                is_max_bag(model_0(size, heap, int_P_int_M),
                integer_of_int32(result)))
               and (C_71:
                   (model_0(size, heap, int_P_int_M) = add_bag(integer_of_int32(result),
                                                       model_0(size, heap,
                                                       int_P_int_M)))))))
          and (valid_heap(heap, int_P_alloc_table, size, heap)
              and (size_inv(size, size, heap)
                  and is_heap_0(size, heap, int_P_int_M, size, heap)))))
         and (JC_24:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_all(pset_singleton(heap)))))))) }

parameter push :
 x_3:int32 ->
  { (JC_6:
    ((C_27: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap)))))}
  unit reads int_P_alloc_table,int_P_int_M writes int_P_int_M,size
  { ((JC_8:
     (valid_heap(heap, int_P_alloc_table, size, heap)
     and (size_inv(size, size, heap)
         and is_heap_0(size, heap, int_P_int_M, size, heap))))
    and ((true = true) ->
         (JC_11:
         ((JC_10:
          ((C_28:
           (model_0(size, heap, int_P_int_M) = add_bag(integer_of_int32(x_3),
                                               model_0(size, heap,
                                               int_P_int_M))))
          and (valid_heap(heap, int_P_alloc_table, size, heap)
              and (size_inv(size, size, heap)
                  and is_heap_0(size, heap, int_P_int_M, size, heap)))))
         and (JC_9:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_all(pset_singleton(heap)))))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let clear_ensures_default =
 fun (tt : unit) ->
  { (JC_1:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }
  (init:
  try
   begin
     (C_1:
     begin
       (let jessie_9 = (size := (safe_int32_of_integer_ (0))) in void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_5:
     ((C_2: (model_0(size, heap, int_P_int_M) = empty_bag_0))
     and (valid_heap(heap, int_P_alloc_table, size, heap)
         and (size_inv(size, size, heap)
             and is_heap_0(size, heap, int_P_int_M, size, heap)))))) }

let clear_safety =
 fun (tt : unit) ->
  { (JC_1:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }
  (init:
  try
   begin
     (C_1:
     begin
       (let jessie_8 = (size := (safe_int32_of_integer_ (0))) in void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }

let max_ensures_default_2 =
 fun (tt : unit) ->
  { (JC_16:
    ((C_31: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_30:
     begin
       (let jessie_39 = (__retres := ((safe_acc_ !int_P_int_M) ((shift heap) (0)))) in
       void);
      (jessie_returned_value := !__retres);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_20:
     ((C_32:
      is_max_bag(model_0(size, heap, int_P_int_M), integer_of_int32(result)))
     and (valid_heap(heap, int_P_alloc_table, size, heap)
         and (size_inv(size, size, heap)
             and is_heap_0(size, heap, int_P_int_M, size, heap)))))) }

let max_safety =
 fun (tt : unit) ->
  { (JC_16:
    ((C_31: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     (C_30:
     begin
       (let jessie_38 = (__retres := ((safe_acc_ !int_P_int_M) ((shift heap) (0)))) in
       void);
      (jessie_returned_value := !__retres);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_18:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }

let pop_ensures_default_3 =
 fun (tt : unit) ->
  { (JC_21:
    ((C_66: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let res = ref (any_int32 void) in
     (let v = ref (any_int32 void) in
     (let i_7 = ref (any_int32 void) in
     (let j = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_57 = (res := ((safe_acc_ !int_P_int_M) ((shift heap) (0)))) in
       void);
      (C_37:
      begin
        (let jessie_58 = (size := (safe_int32_of_integer_ (C_35:
                                                          ((sub_int (integer_of_int32 !size)) (1))))) in
        void);
       (if ((neq_int_ (integer_of_int32 !size)) (0))
       then
        (let jessie_73 = (C_39:
                         begin
                           (let jessie_59 = (v := ((safe_acc_ !int_P_int_M) 
                                                   ((shift heap) (integer_of_int32 !size)))) in
                           void);
                          (C_40:
                          begin
                            (let jessie_60 = (i_7 := (safe_int32_of_integer_ (0))) in
                            void);
                           try
                            while true do
                            { invariant
                                (C_41:
                                ((C_42: le_int((0), integer_of_int32(i_7)))
                                and (C_43:
                                    le_int(integer_of_int32(i_7),
                                    integer_of_int32(size)))))
                               }
                             try
                              (let jessie_70 = begin
                                                 try
                                                  (let jessie_64 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_7)) 
                                                                    (integer_of_int32 !size))
                                                                    then void
                                                                    else
                                                                    (let jessie_61 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_49:
                                                                    begin
                                                                      
                                                                    (let jessie_62 = 
                                                                    (j := 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_47:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_45:
                                                                    ((mul_int (2)) 
                                                                    (integer_of_int32 !i_7)))))) (1))))) in
                                                                    void);
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j)) 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_57:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !size)) (1))))))
                                                                    then
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !j))))) 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_53:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1)))))))))
                                                                    then
                                                                    (C_52:
                                                                    (let jessie_63 = 
                                                                    (j := 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_50:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1))))) in
                                                                    void))
                                                                    else void)
                                                                    else void);
                                                                    (raise
                                                                    (Goto__L_exc
                                                                    void))
                                                                    end)
                                                                   end in
                                                  void)
                                                  with
                                                  Goto__L_exc jessie_4 ->
                                                  (let jessie_69 = (_L:
                                                                   begin
                                                                     void;
                                                                    (if 
                                                                    ((ge_int_ 
                                                                    (integer_of_int32 !v)) 
                                                                    (integer_of_int32 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !j)))))
                                                                    then
                                                                    (let jessie_65 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_62:
                                                                    begin
                                                                      
                                                                    (let jessie_68 = 
                                                                    (let jessie_66 = 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !i_7)) in
                                                                    (let jessie_67 = 
                                                                    ((safe_acc_ !int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !j))) in
                                                                    (((safe_upd_ int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !i_7))) jessie_67))) in
                                                                    void);
                                                                    (C_63:
                                                                    begin
                                                                      
                                                                    (i_7 := !j);
                                                                    !i_7
                                                                    end)
                                                                    end)
                                                                   end) in
                                                  void) end;
                                                (raise
                                                 (Loop_continue_exc
                                                 void))
                                               end in
                              void)
                              with
                              Loop_continue_exc jessie_7 ->
                              void end
                            done
                            with
                            Goto_while_1_break_exc jessie_5 ->
                            (while_1_break: void) end;
                           (C_65:
                           (let jessie_71 = ((shift heap) (integer_of_int32 !i_7)) in
                           (let jessie_72 = !v in
                           begin
                             (((safe_upd_ int_P_int_M) ((shift heap) 
                                                        (integer_of_int32 !i_7))) jessie_72);
                            ((safe_acc_ !int_P_int_M) jessie_71)
                           end)))
                          end)
                         end) in
        void)
       else void);
       (jessie_returned_value := !res);
       (raise Return)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (JC_26:
     ((JC_25:
      ((C_67:
       ((C_69:
        eq_int(integer_of_int32(size), sub_int(integer_of_int32(size@), (1))))
       and ((C_70:
            is_max_bag(model_0(size, heap, int_P_int_M),
            integer_of_int32(result)))
           and (C_71:
               (model_0(size, heap, int_P_int_M) = add_bag(integer_of_int32(result),
                                                   model_0(size, heap,
                                                   int_P_int_M)))))))
      and (valid_heap(heap, int_P_alloc_table, size, heap)
          and (size_inv(size, size, heap)
              and is_heap_0(size, heap, int_P_int_M, size, heap)))))
     and (JC_24:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_all(pset_singleton(heap))))))) }

let pop_safety =
 fun (tt : unit) ->
  { (JC_21:
    ((C_66: gt_int(integer_of_int32(size), (0)))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let res = ref (any_int32 void) in
     (let v = ref (any_int32 void) in
     (let i_7 = ref (any_int32 void) in
     (let j = ref (any_int32 void) in
     (C_34:
     begin
       (let jessie_40 = (res := ((safe_acc_ !int_P_int_M) ((shift heap) (0)))) in
       void);
      (C_37:
      begin
        (let jessie_41 = (size := (C_36:
                                  (int32_of_integer_ (C_35:
                                                     ((sub_int (integer_of_int32 !size)) (1)))))) in
        void);
       (if ((neq_int_ (integer_of_int32 !size)) (0))
       then
        (let jessie_56 = (C_39:
                         begin
                           (let jessie_42 = (v := (C_38:
                                                  (((((bound_acc_ !int_P_int_M) heap) 
                                                     (integer_of_int32 !size)) (0)) (99)))) in
                           void);
                          (C_40:
                          begin
                            (let jessie_43 = (i_7 := (safe_int32_of_integer_ (0))) in
                            void);
                           try
                            while true do
                            { invariant
                                (C_41:
                                ((C_42: le_int((0), integer_of_int32(i_7)))
                                and (C_43:
                                    le_int(integer_of_int32(i_7),
                                    integer_of_int32(size)))))
                              variant (C_44 : sub_int(integer_of_int32(size),
                                              integer_of_int32(i_7))) }
                             try
                              (let jessie_53 = begin
                                                 try
                                                  (let jessie_47 = begin
                                                                     
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !i_7)) 
                                                                    (integer_of_int32 !size))
                                                                    then void
                                                                    else
                                                                    (let jessie_44 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void));
                                                                    (C_49:
                                                                    begin
                                                                      
                                                                    (let jessie_45 = 
                                                                    (j := 
                                                                    (C_48:
                                                                    (int32_of_integer_ 
                                                                    (C_47:
                                                                    ((add_int 
                                                                    (integer_of_int32 
                                                                    (C_46:
                                                                    (int32_of_integer_ 
                                                                    (C_45:
                                                                    ((mul_int (2)) 
                                                                    (integer_of_int32 !i_7))))))) (1)))))) in
                                                                    void);
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 !j)) 
                                                                    (integer_of_int32 
                                                                    (C_58:
                                                                    (int32_of_integer_ 
                                                                    (C_57:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !size)) (1)))))))
                                                                    then
                                                                    (if 
                                                                    ((lt_int_ 
                                                                    (integer_of_int32 
                                                                    (C_56:
                                                                    (((((bound_acc_ !int_P_int_M) heap) 
                                                                    (integer_of_int32 !j)) (0)) (99))))) 
                                                                    (integer_of_int32 
                                                                    (C_55:
                                                                    (((((bound_acc_ !int_P_int_M) heap) 
                                                                    (integer_of_int32 
                                                                    (C_54:
                                                                    (int32_of_integer_ 
                                                                    (C_53:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1))))))) (0)) (99)))))
                                                                    then
                                                                    (C_52:
                                                                    (let jessie_46 = 
                                                                    (j := 
                                                                    (C_51:
                                                                    (int32_of_integer_ 
                                                                    (C_50:
                                                                    ((add_int 
                                                                    (integer_of_int32 !j)) (1)))))) in
                                                                    void))
                                                                    else void)
                                                                    else void);
                                                                    (raise
                                                                    (Goto__L_exc
                                                                    void))
                                                                    end)
                                                                   end in
                                                  void)
                                                  with
                                                  Goto__L_exc jessie_4 ->
                                                  (let jessie_52 = (_L:
                                                                   begin
                                                                     void;
                                                                    (if 
                                                                    ((ge_int_ 
                                                                    (integer_of_int32 !v)) 
                                                                    (integer_of_int32 
                                                                    (C_59:
                                                                    (((((bound_acc_ !int_P_int_M) heap) 
                                                                    (integer_of_int32 !j)) (0)) (99)))))
                                                                    then
                                                                    (let jessie_48 = 
                                                                    (raise
                                                                    (Goto_while_1_break_exc
                                                                    void)) in
                                                                    void)
                                                                    else void);
                                                                    (C_62:
                                                                    begin
                                                                      
                                                                    (let jessie_51 = 
                                                                    (let jessie_49 = 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !i_7)) in
                                                                    (let jessie_50 = 
                                                                    (C_60:
                                                                    (((((bound_acc_ !int_P_int_M) heap) 
                                                                    (integer_of_int32 !j)) (0)) (99))) in
                                                                    (JC_28:
                                                                    ((((((bound_upd_ int_P_int_M) heap) 
                                                                    (integer_of_int32 !i_7)) (0)) (99)) jessie_50)))) in
                                                                    void);
                                                                    (C_63:
                                                                    begin
                                                                      
                                                                    (i_7 := !j);
                                                                    !i_7
                                                                    end)
                                                                    end)
                                                                   end) in
                                                  void) end;
                                                (raise
                                                 (Loop_continue_exc
                                                 void))
                                               end in
                              void)
                              with
                              Loop_continue_exc jessie_7 ->
                              void end
                            done
                            with
                            Goto_while_1_break_exc jessie_5 ->
                            (while_1_break: void) end;
                           (C_65:
                           (let jessie_54 = ((shift heap) (integer_of_int32 !i_7)) in
                           (let jessie_55 = !v in
                           begin
                             (JC_29:
                             ((((((bound_upd_ int_P_int_M) heap) (integer_of_int32 !i_7)) (0)) (99)) jessie_55));
                            ((safe_acc_ !int_P_int_M) jessie_54)
                           end)))
                          end)
                         end) in
        void)
       else void);
       (jessie_returned_value := !res);
       (raise Return)
      end)
     end)))));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { (JC_23:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }

let push_ensures_default_1 =
 fun (x_3 : int32) ->
  { (JC_6:
    ((C_27: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  try
   begin
     (let i_6 = ref (any_int32 void) in
     (let parent = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_24 = (i_6 := !size) in void);
      try
       while true do
       { invariant
           (C_4:
           ((C_7: le_int((0), integer_of_int32(i_6)))
           and ((C_8: le_int(integer_of_int32(i_6), integer_of_int32(size)))
               and ((C_9:
                    (eq_int(integer_of_int32(i_6), integer_of_int32(size)) ->
                     (is_heap(tree_of_array(int_P_int_M, heap, (0),
                              integer_of_int32(size)))
                     and (model_0(size, heap, int_P_int_M) = model_0(size,
                                                             heap,
                                                             int_P_int_M@init)))))
                   and (C_10:
                       (lt_int(integer_of_int32(i_6), integer_of_int32(size)) ->
                        (is_heap(tree_of_array(int_P_int_M, heap, (0),
                                 add_int(integer_of_int32(size), (1))))
                        and (bag_of_tree(tree_of_array(int_P_int_M, heap,
                                         (0),
                                         add_int(integer_of_int32(size), (1)))) = 
                            add_bag(integer_of_int32(select(int_P_int_M,
                                                     shift(heap,
                                                     integer_of_int32(i_6)))),
                            model_0(size, heap, int_P_int_M@init))))))))))
          }
        try
         (let jessie_33 = begin
                            (let jessie_32 = begin
                                               (if ((gt_int_ (integer_of_int32 !i_6)) (0))
                                               then void
                                               else
                                                (let jessie_25 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void));
                                              (C_16:
                                              begin
                                                (let jessie_26 = (parent := 
                                                                  (safe_int32_of_integer_ 
                                                                   (C_14:
                                                                   ((div_int_ 
                                                                    (integer_of_int32 
                                                                    (safe_int32_of_integer_ 
                                                                    (C_12:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_6)) (1)))))) (2))))) in
                                                void);
                                               (C_18:
                                               begin
                                                 (let jessie_27 = (p := 
                                                                   ((safe_acc_ !int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !parent)))) in
                                                 void);
                                                (if ((ge_int_ (integer_of_int32 !p)) 
                                                     (integer_of_int32 x_3))
                                                then
                                                 (let jessie_28 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void)
                                                else void);
                                                (C_20:
                                                begin
                                                  (let jessie_31 = (let jessie_29 = 
                                                                   ((shift heap) 
                                                                    (integer_of_int32 !i_6)) in
                                                                   (let jessie_30 = !p in
                                                                   (((safe_upd_ int_P_int_M) 
                                                                    ((shift heap) 
                                                                    (integer_of_int32 !i_6))) jessie_30))) in
                                                  void);
                                                 (C_21:
                                                 begin
                                                   (i_6 := !parent); !i_6
                                                 end)
                                                end)
                                               end)
                                              end)
                                             end in
                            void);
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_3 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (C_23:
      begin
        (let jessie_36 = (let jessie_34 = ((shift heap) (integer_of_int32 !i_6)) in
                         (let jessie_35 = x_3 in
                         (((safe_upd_ int_P_int_M) ((shift heap) (integer_of_int32 !i_6))) jessie_35))) in
        void);
       (C_26:
       begin
         (let jessie_37 = (size := (safe_int32_of_integer_ (C_24:
                                                           ((add_int 
                                                             (integer_of_int32 !size)) (1))))) in
         void);
        (raise Return)
       end)
      end)
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_11:
     ((JC_10:
      ((C_28:
       (model_0(size, heap, int_P_int_M) = add_bag(integer_of_int32(x_3),
                                           model_0(size, heap, int_P_int_M))))
      and (valid_heap(heap, int_P_alloc_table, size, heap)
          and (size_inv(size, size, heap)
              and is_heap_0(size, heap, int_P_int_M, size, heap)))))
     and (JC_9:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_all(pset_singleton(heap))))))) }

let push_safety =
 fun (x_3 : int32) ->
  { (JC_6:
    ((C_27: lt_int(integer_of_int32(size), sub_int((100), (1))))
    and (valid_heap(heap, int_P_alloc_table, size, heap)
        and (size_inv(size, size, heap)
            and is_heap_0(size, heap, int_P_int_M, size, heap))))) }
  (init:
  try
   begin
     (let i_6 = ref (any_int32 void) in
     (let parent = ref (any_int32 void) in
     (let p = ref (any_int32 void) in
     (C_3:
     begin
       (let jessie_10 = (i_6 := !size) in void);
      try
       while true do
       { invariant
           (C_4:
           ((C_7: le_int((0), integer_of_int32(i_6)))
           and ((C_8: le_int(integer_of_int32(i_6), integer_of_int32(size)))
               and ((C_9:
                    (eq_int(integer_of_int32(i_6), integer_of_int32(size)) ->
                     (is_heap(tree_of_array(int_P_int_M, heap, (0),
                              integer_of_int32(size)))
                     and (model_0(size, heap, int_P_int_M) = model_0(size,
                                                             heap,
                                                             int_P_int_M@init)))))
                   and (C_10:
                       (lt_int(integer_of_int32(i_6), integer_of_int32(size)) ->
                        (is_heap(tree_of_array(int_P_int_M, heap, (0),
                                 add_int(integer_of_int32(size), (1))))
                        and (bag_of_tree(tree_of_array(int_P_int_M, heap,
                                         (0),
                                         add_int(integer_of_int32(size), (1)))) = 
                            add_bag(integer_of_int32(select(int_P_int_M,
                                                     shift(heap,
                                                     integer_of_int32(i_6)))),
                            model_0(size, heap, int_P_int_M@init))))))))))
         variant (C_11 : integer_of_int32((C_11 : i_6))) }
        try
         (let jessie_19 = begin
                            (let jessie_18 = begin
                                               (if ((gt_int_ (integer_of_int32 !i_6)) (0))
                                               then void
                                               else
                                                (let jessie_11 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void));
                                              (C_16:
                                              begin
                                                (let jessie_12 = (parent := 
                                                                  (C_15:
                                                                  (int32_of_integer_ 
                                                                   (C_14:
                                                                   ((div_int_ 
                                                                    (integer_of_int32 
                                                                    (C_13:
                                                                    (int32_of_integer_ 
                                                                    (C_12:
                                                                    ((sub_int 
                                                                    (integer_of_int32 !i_6)) (1))))))) (2)))))) in
                                                void);
                                               (C_18:
                                               begin
                                                 (let jessie_13 = (p := 
                                                                   (C_17:
                                                                   (((((bound_acc_ !int_P_int_M) heap) 
                                                                    (integer_of_int32 !parent)) (0)) (99)))) in
                                                 void);
                                                (if ((ge_int_ (integer_of_int32 !p)) 
                                                     (integer_of_int32 x_3))
                                                then
                                                 (let jessie_14 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void)
                                                else void);
                                                (C_20:
                                                begin
                                                  (let jessie_17 = (let jessie_15 = 
                                                                   ((shift heap) 
                                                                    (integer_of_int32 !i_6)) in
                                                                   (let jessie_16 = !p in
                                                                   (JC_13:
                                                                   ((((((bound_upd_ int_P_int_M) heap) 
                                                                    (integer_of_int32 !i_6)) (0)) (99)) jessie_16)))) in
                                                  void);
                                                 (C_21:
                                                 begin
                                                   (i_6 := !parent); !i_6
                                                 end)
                                                end)
                                               end)
                                              end)
                                             end in
                            void);
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_3 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_1 ->
       (while_0_break: void) end;
      (C_23:
      begin
        (let jessie_22 = (let jessie_20 = ((shift heap) (integer_of_int32 !i_6)) in
                         (let jessie_21 = x_3 in
                         (JC_14:
                         ((((((bound_upd_ int_P_int_M) heap) (integer_of_int32 !i_6)) (0)) (99)) jessie_21)))) in
        void);
       (C_26:
       begin
         (let jessie_23 = (size := (C_25:
                                   (int32_of_integer_ (C_24:
                                                      ((add_int (integer_of_int32 !size)) (1)))))) in
         void);
        (raise Return)
       end)
      end)
     end))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_8:
    (valid_heap(heap, int_P_alloc_table, size, heap)
    and (size_inv(size, size, heap)
        and is_heap_0(size, heap, int_P_int_M, size, heap)))) }


