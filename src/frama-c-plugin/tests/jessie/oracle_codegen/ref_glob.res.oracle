rm -f ref_glob.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only ref_glob.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs ref_glob.cloc ref_glob.jc
Normalized expression:
(((\offset_min(t)) <= 0) && ((\offset_max(t)) >= 2))

Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{ { (C_2: { ((C_1: p.int_M) = 1); (return) }) }
}

Normalized expression:
(C_3: ((C_4: ((\offset_min(p)) <= 0)) && (C_5: ((\offset_max(p)) >= 0))))

Normalized expression:
(C_6: (p.int_M == 1))

Normalized expression:
p.int_M

Normalized expression:
true

Normalized expression:
{ { (C_8: { ((C_7: x.int_M) = 1); (return) }) }
}

Normalized expression:
(C_9: (x.int_M == 1))

Normalized expression:
x.int_M

Normalized expression:
true

Normalized expression:
{ { (C_10: { g{}(x); (return) }) }
}

Normalized expression:
(C_11: (x.int_M == 1))

Normalized expression:
x.int_M

Normalized expression:
true

Normalized expression:
{
{
  (C_14:
     {
     ((C_13: (C_12: plas.c2).int_M) = 2);
       (C_16:
          {
          g{}((C_15: plas.c1)); (C_18: { g{}((C_17: plas.c2)); (return) })
          })
     })
  }
}

Normalized expression:
(C_19:
   ((C_20: ((\offset_min(plas)) <= 0)) && (C_21: ((\offset_max(plas)) >= 0))))

Normalized expression:
(C_22: ((C_23: (plas.c1.int_M == 1)) && (C_24: (plas.c2.int_M == 1))))

Normalized expression:
plas.c1.int_M

Normalized expression:
plas.c2.int_M

Normalized expression:
true

Normalized expression:
{ { (C_27: { ((C_26: (C_25: p.int_xM).int_M) = 2); (return) }) }
}

Normalized expression:
(C_28:
   (((C_30: ((\offset_min(p)) <= 0)) && (C_31: ((\offset_max(p)) >= 0))) &&
      ((C_33: ((\offset_min(p.int_xM)) <= 0)) &&
         (C_34: ((\offset_max(p.int_xM)) >= 0)))))

Normalized expression:
(C_35: (p.int_xM.int_M == 2))

Normalized expression:
p.int_xM.int_M

Normalized expression:
true

Generating Why function g
Generating Why function f1
Generating Why function f2
Generating Why function f4
Generating Why function h
cat why/ref_glob.why
type __anonstruct_las_1

type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type int_xP

type uint16

type uint32

type uint64

type uint8

type void_P

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic __anonstruct_las_1_tag:  -> __anonstruct_las_1 tag_id

axiom __anonstruct_las_1_int : (int_of_tag(__anonstruct_las_1_tag) = (1))

axiom __anonstruct_las_1_parenttag_bottom :
 parenttag(__anonstruct_las_1_tag, bottom_tag)

logic x:  -> int_P pointer

axiom __anonstruct_las_1_tags :
 (forall x:__anonstruct_las_1 pointer.
  (forall __anonstruct_las_1_tag_table:__anonstruct_las_1 tag_table.
   instanceof(__anonstruct_las_1_tag_table, x, __anonstruct_las_1_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

logic int_xP_tag:  -> int_xP tag_id

axiom int_xP_int : (int_of_tag(int_xP_tag) = (1))

axiom int_xP_parenttag_bottom : parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags :
 (forall x:int_xP pointer.
  (forall int_xP_tag_table:int_xP tag_table.
   instanceof(int_xP_tag_table, x, int_xP_tag)))

logic plas:  -> __anonstruct_las_1 pointer

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic t:  -> int_P pointer

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table,
 int_P_alloc_table:int_P alloc_table,
 __anonstruct_las_1_c1:(__anonstruct_las_1,
 int_P pointer) memory,
 __anonstruct_las_1_c2:(__anonstruct_las_1,
 int_P pointer) memory) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and ((offset_max(__anonstruct_las_1_alloc_table, p) = b)
     and (valid_struct_int_P(select(__anonstruct_las_1_c1, p), (0), (0),
          int_P_alloc_table)
         and valid_struct_int_P(select(__anonstruct_las_1_c2, p), (0), (0),
             int_P_alloc_table))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate valid_struct_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

predicate valid_t(t:int_P pointer,
 int_P_alloc_table:int_P alloc_table,
 t:int_P pointer,
 plas:__anonstruct_las_1 pointer,
 x:int_P pointer) =
 (le_int(offset_min(int_P_alloc_table, t), (0))
 and ge_int(offset_max(int_P_alloc_table, t), (2)))

predicate valid_variant___anonstruct_las_1(p:__anonstruct_las_1 pointer,
 a:int,
 b:int,
 __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table) =
 ((offset_min(__anonstruct_las_1_alloc_table, p) = a)
 and (offset_max(__anonstruct_las_1_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate valid_variant_void_P(p:void_P pointer,
 a:int,
 b:int,
 void_P_alloc_table:void_P alloc_table) =
 ((offset_min(void_P_alloc_table, p) = a)
 and (offset_max(void_P_alloc_table, p) = b))

logic void_P_tag:  -> void_P tag_id

axiom void_P_int : (int_of_tag(void_P_tag) = (1))

axiom void_P_parenttag_bottom : parenttag(void_P_tag, bottom_tag)

axiom void_P_tags :
 (forall x:void_P pointer.
  (forall void_P_tag_table:void_P tag_table.
   instanceof(void_P_tag_table, x, void_P_tag)))

parameter __anonstruct_las_1_alloc_table : __anonstruct_las_1 alloc_table ref

parameter __anonstruct_las_1_c1 :
 (__anonstruct_las_1,
 int_P pointer) memory ref

parameter __anonstruct_las_1_c2 :
 (__anonstruct_las_1,
 int_P pointer) memory ref

parameter __anonstruct_las_1_tag_table : __anonstruct_las_1 tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter alloc___anonstruct_las_1 :
 n:int ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     __anonstruct_las_1_c1:(__anonstruct_las_1,
      int_P pointer) memory ref ->
      __anonstruct_las_1_c2:(__anonstruct_las_1,
       int_P pointer) memory ref ->
       { ge_int(n, (0))} __anonstruct_las_1 pointer
       reads __anonstruct_las_1_alloc_table,__anonstruct_las_1_c1,__anonstruct_las_1_c2,int_P_alloc_table
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table
       { (valid_struct___anonstruct_las_1(result, (0), sub_int(n, (1)),
          __anonstruct_las_1_alloc_table, int_P_alloc_table,
          __anonstruct_las_1_c1, __anonstruct_las_1_c2)
         and (instanceof(__anonstruct_las_1_tag_table, result,
              __anonstruct_las_1_tag)
             and (alloc_extends(__anonstruct_las_1_alloc_table@,
                  __anonstruct_las_1_alloc_table)
                 and alloc_extern(__anonstruct_las_1_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter int_xP_alloc_table : int_xP alloc_table ref

parameter int_xP_tag_table : int_xP tag_table ref

parameter alloc_int_xP :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { ge_int(n, (0))} int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), sub_int(n, (1)), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter alloc_one___anonstruct_las_1 :
 tt:unit ->
  __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
   __anonstruct_las_1_alloc_table:__anonstruct_las_1 alloc_table ref ->
    int_P_alloc_table:int_P alloc_table ref ->
     __anonstruct_las_1_c1:(__anonstruct_las_1,
      int_P pointer) memory ref ->
      __anonstruct_las_1_c2:(__anonstruct_las_1,
       int_P pointer) memory ref ->
       { } __anonstruct_las_1 pointer
       reads __anonstruct_las_1_alloc_table,__anonstruct_las_1_c1,__anonstruct_las_1_c2,int_P_alloc_table
       writes __anonstruct_las_1_alloc_table,__anonstruct_las_1_tag_table
       { (valid_struct___anonstruct_las_1(result, (0), (0),
          __anonstruct_las_1_alloc_table, int_P_alloc_table,
          __anonstruct_las_1_c1, __anonstruct_las_1_c2)
         and (instanceof(__anonstruct_las_1_tag_table, result,
              __anonstruct_las_1_tag)
             and (alloc_extends(__anonstruct_las_1_alloc_table@,
                  __anonstruct_las_1_alloc_table)
                 and alloc_extern(__anonstruct_las_1_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_int_xP :
 tt:unit ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { } int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), (0), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter void_P_alloc_table : void_P alloc_table ref

parameter void_P_tag_table : void_P tag_table ref

parameter alloc_one_void_P :
 tt:unit ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { } void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), (0), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter alloc_void_P :
 n:int ->
  void_P_alloc_table:void_P alloc_table ref ->
   void_P_alloc_table:void_P alloc_table ref ->
    { ge_int(n, (0))} void_P pointer reads void_P_alloc_table
    writes void_P_alloc_table,void_P_tag_table
    { (valid_struct_void_P(result, (0), sub_int(n, (1)), void_P_alloc_table)
      and (instanceof(void_P_tag_table, result, void_P_tag)
          and (alloc_extends(void_P_alloc_table@, void_P_alloc_table)
              and alloc_extern(void_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int_P_int_M : (int_P, int32) memory ref

parameter f1 :
 tt:unit ->
  { (JC_8: valid_t(t, int_P_alloc_table, t, plas, x))} unit
  reads int_P_alloc_table,int_P_int_M writes int_P_int_M
  { ((JC_10: valid_t(t, int_P_alloc_table, t, plas, x))
    and ((true = true) ->
         (JC_13:
         ((JC_12:
          ((C_9: eq_int(integer_of_int32(select(int_P_int_M, x)), (1)))
          and valid_t(t, int_P_alloc_table, t, plas, x)))
         and (JC_11:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_singleton(x))))))) }

parameter f2 :
 tt:unit ->
  { (JC_14: valid_t(t, int_P_alloc_table, t, plas, x))} unit
  reads int_P_alloc_table,int_P_int_M,int_P_tag_table writes int_P_int_M
  { ((JC_16: valid_t(t, int_P_alloc_table, t, plas, x))
    and ((true = true) ->
         (JC_19:
         ((JC_18:
          ((C_11: eq_int(integer_of_int32(select(int_P_int_M, x)), (1)))
          and valid_t(t, int_P_alloc_table, t, plas, x)))
         and (JC_17:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_singleton(x))))))) }

parameter f4 :
 tt:unit ->
  { (JC_22:
    ((C_19:
     ((C_20: le_int(offset_min(__anonstruct_las_1_alloc_table, plas), (0)))
     and (C_21:
         ge_int(offset_max(__anonstruct_las_1_alloc_table, plas), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x)))}
  unit
  reads __anonstruct_las_1_alloc_table,__anonstruct_las_1_c1,__anonstruct_las_1_c2,int_P_alloc_table,int_P_int_M,int_P_tag_table
  writes int_P_int_M
  { ((JC_24: valid_t(t, int_P_alloc_table, t, plas, x))
    and ((true = true) ->
         (JC_27:
         ((JC_26:
          ((C_22:
           ((C_23:
            eq_int(integer_of_int32(select(int_P_int_M,
                                    select(__anonstruct_las_1_c1, plas))),
            (1)))
           and (C_24:
               eq_int(integer_of_int32(select(int_P_int_M,
                                       select(__anonstruct_las_1_c2, plas))),
               (1)))))
          and valid_t(t, int_P_alloc_table, t, plas, x)))
         and (JC_25:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_union(pset_deref(__anonstruct_las_1_c2,
                        pset_singleton(plas)),
             pset_deref(__anonstruct_las_1_c1, pset_singleton(plas))))))))) }

parameter g :
 p:int_P pointer ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x)))}
  unit reads int_P_alloc_table,int_P_int_M,int_P_tag_table writes int_P_int_M
  { ((JC_3: valid_t(t, int_P_alloc_table, t, plas, x))
    and ((true = true) ->
         (JC_6:
         ((JC_5:
          ((C_6: eq_int(integer_of_int32(select(int_P_int_M, p)), (1)))
          and valid_t(t, int_P_alloc_table, t, plas, x)))
         and (JC_4:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_singleton(p))))))) }

parameter int_xP_int_xM : (int_xP, int_P pointer) memory ref

parameter h :
 p_0:int_xP pointer ->
  { (JC_32:
    ((C_28:
     ((C_30: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
     and ((C_31: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
         and ((C_33:
              le_int(offset_min(int_P_alloc_table,
                     select(int_xP_int_xM, p_0)),
              (0)))
             and (C_34:
                 ge_int(offset_max(int_P_alloc_table,
                        select(int_xP_int_xM, p_0)),
                 (0)))))))
    and valid_t(t, int_P_alloc_table, t, plas, x)))}
  unit
  reads int_P_alloc_table,int_P_int_M,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
  writes int_P_int_M
  { ((JC_34: valid_t(t, int_P_alloc_table, t, plas, x))
    and ((true = true) ->
         (JC_37:
         ((JC_36:
          ((C_35:
           eq_int(integer_of_int32(select(int_P_int_M,
                                   select(int_xP_int_xM, p_0))),
           (2)))
          and valid_t(t, int_P_alloc_table, t, plas, x)))
         and (JC_35:
             not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
             pset_deref(int_xP_int_xM, pset_singleton(p_0)))))))) }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let f1_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_8: valid_t(t, int_P_alloc_table, t, plas, x)) }
  (init:
  try
   begin
     (C_8:
     begin
       (let jessie_12 = (let jessie_10 = x in
                        (let jessie_11 = (safe_int32_of_integer_ (1)) in
                        (((safe_upd_ int_P_int_M) x) jessie_11))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_13:
     ((JC_12:
      ((C_9: eq_int(integer_of_int32(select(int_P_int_M, x)), (1)))
      and valid_t(t, int_P_alloc_table, t, plas, x)))
     and (JC_11:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_singleton(x)))))) }

let f1_safety =
 fun (tt : unit) ->
  { (JC_8: valid_t(t, int_P_alloc_table, t, plas, x)) }
  (init:
  try
   begin
     (C_8:
     begin
       (let jessie_9 = (let jessie_7 = x in
                       (let jessie_8 = (safe_int32_of_integer_ (1)) in
                       (((safe_upd_ int_P_int_M) x) jessie_8))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_10: valid_t(t, int_P_alloc_table, t, plas, x)) }

let f2_ensures_default_2 =
 fun (tt : unit) ->
  { (JC_14: valid_t(t, int_P_alloc_table, t, plas, x)) }
  (init:
  try
   begin
     (C_10: begin   (JC_21: (g x)); (raise Return) end); (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_19:
     ((JC_18:
      ((C_11: eq_int(integer_of_int32(select(int_P_int_M, x)), (1)))
      and valid_t(t, int_P_alloc_table, t, plas, x)))
     and (JC_17:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_singleton(x)))))) }

let f2_safety =
 fun (tt : unit) ->
  { (JC_14: valid_t(t, int_P_alloc_table, t, plas, x)) }
  (init:
  try
   begin
     (C_10: begin   (JC_20: (g x)); (raise Return) end); (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_16: valid_t(t, int_P_alloc_table, t, plas, x)) }

let f4_ensures_default_3 =
 fun (tt : unit) ->
  { (JC_22:
    ((C_19:
     ((C_20: le_int(offset_min(__anonstruct_las_1_alloc_table, plas), (0)))
     and (C_21:
         ge_int(offset_max(__anonstruct_las_1_alloc_table, plas), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_14:
     begin
       (let jessie_22 = (let jessie_20 = ((safe_acc_ !__anonstruct_las_1_c2) plas) in
                        (let jessie_21 = (safe_int32_of_integer_ (2)) in
                        (((safe_upd_ int_P_int_M) ((safe_acc_ !__anonstruct_las_1_c2) plas)) jessie_21))) in
       void);
      (C_16:
      begin
        (JC_30: (g ((safe_acc_ !__anonstruct_las_1_c1) plas)));
       (C_18:
       begin
         (JC_31: (g ((safe_acc_ !__anonstruct_las_1_c2) plas)));
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_27:
     ((JC_26:
      ((C_22:
       ((C_23:
        eq_int(integer_of_int32(select(int_P_int_M,
                                select(__anonstruct_las_1_c1, plas))),
        (1)))
       and (C_24:
           eq_int(integer_of_int32(select(int_P_int_M,
                                   select(__anonstruct_las_1_c2, plas))),
           (1)))))
      and valid_t(t, int_P_alloc_table, t, plas, x)))
     and (JC_25:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_union(pset_deref(__anonstruct_las_1_c2, pset_singleton(plas)),
         pset_deref(__anonstruct_las_1_c1, pset_singleton(plas)))))))) }

let f4_safety =
 fun (tt : unit) ->
  { (JC_22:
    ((C_19:
     ((C_20: le_int(offset_min(__anonstruct_las_1_alloc_table, plas), (0)))
     and (C_21:
         ge_int(offset_max(__anonstruct_las_1_alloc_table, plas), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_14:
     begin
       (let jessie_17 = (let jessie_15 = (C_12:
                                         (((acc_ !__anonstruct_las_1_alloc_table) !__anonstruct_las_1_c2) plas)) in
                        (let jessie_16 = (safe_int32_of_integer_ (2)) in
                        (((safe_upd_ int_P_int_M) (C_12:
                                                  (((acc_ !__anonstruct_las_1_alloc_table) !__anonstruct_las_1_c2) plas))) jessie_16))) in
       void);
      (C_16:
      begin
        (JC_28:
        (g (C_15:
           (((acc_ !__anonstruct_las_1_alloc_table) !__anonstruct_las_1_c1) plas))));
       (C_18:
       begin
         (JC_29:
         (g (C_17:
            (((acc_ !__anonstruct_las_1_alloc_table) !__anonstruct_las_1_c2) plas))));
        (raise Return)
       end)
      end)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_24: valid_t(t, int_P_alloc_table, t, plas, x)) }

let g_ensures_default =
 fun (p : int_P pointer) ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_6 = (let jessie_4 = p in
                       (let jessie_5 = (safe_int32_of_integer_ (1)) in
                       (((safe_upd_ int_P_int_M) p) jessie_5))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_6:
     ((JC_5:
      ((C_6: eq_int(integer_of_int32(select(int_P_int_M, p)), (1)))
      and valid_t(t, int_P_alloc_table, t, plas, x)))
     and (JC_4:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_singleton(p)))))) }

let g_safety =
 fun (p : int_P pointer) ->
  { (JC_1:
    ((C_3:
     ((C_4: le_int(offset_min(int_P_alloc_table, p), (0)))
     and (C_5: ge_int(offset_max(int_P_alloc_table, p), (0)))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_3 = (let jessie_1 = p in
                       (let jessie_2 = (safe_int32_of_integer_ (1)) in
                       (JC_7:
                       ((((upd_ !int_P_alloc_table) int_P_int_M) p) jessie_2)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_3: valid_t(t, int_P_alloc_table, t, plas, x)) }

let h_ensures_default_4 =
 fun (p_0 : int_xP pointer) ->
  { (JC_32:
    ((C_28:
     ((C_30: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
     and ((C_31: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
         and ((C_33:
              le_int(offset_min(int_P_alloc_table,
                     select(int_xP_int_xM, p_0)),
              (0)))
             and (C_34:
                 ge_int(offset_max(int_P_alloc_table,
                        select(int_xP_int_xM, p_0)),
                 (0)))))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_27:
     begin
       (let jessie_30 = (let jessie_28 = ((safe_acc_ !int_xP_int_xM) p_0) in
                        (let jessie_29 = (safe_int32_of_integer_ (2)) in
                        (((safe_upd_ int_P_int_M) ((safe_acc_ !int_xP_int_xM) p_0)) jessie_29))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_37:
     ((JC_36:
      ((C_35:
       eq_int(integer_of_int32(select(int_P_int_M,
                               select(int_xP_int_xM, p_0))),
       (2)))
      and valid_t(t, int_P_alloc_table, t, plas, x)))
     and (JC_35:
         not_assigns(int_P_alloc_table@, int_P_int_M@, int_P_int_M,
         pset_deref(int_xP_int_xM, pset_singleton(p_0))))))) }

let h_safety =
 fun (p_0 : int_xP pointer) ->
  { (JC_32:
    ((C_28:
     ((C_30: le_int(offset_min(int_xP_alloc_table, p_0), (0)))
     and ((C_31: ge_int(offset_max(int_xP_alloc_table, p_0), (0)))
         and ((C_33:
              le_int(offset_min(int_P_alloc_table,
                     select(int_xP_int_xM, p_0)),
              (0)))
             and (C_34:
                 ge_int(offset_max(int_P_alloc_table,
                        select(int_xP_int_xM, p_0)),
                 (0)))))))
    and valid_t(t, int_P_alloc_table, t, plas, x))) }
  (init:
  try
   begin
     (C_27:
     begin
       (let jessie_27 = (let jessie_25 = (C_25:
                                         (((acc_ !int_xP_alloc_table) !int_xP_int_xM) p_0)) in
                        (let jessie_26 = (safe_int32_of_integer_ (2)) in
                        (JC_38:
                        ((((upd_ !int_P_alloc_table) int_P_int_M) (C_25:
                                                                  (((acc_ !int_xP_alloc_table) !int_xP_int_xM) p_0))) jessie_26)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { (JC_34: valid_t(t, int_P_alloc_table, t, plas, x)) }


