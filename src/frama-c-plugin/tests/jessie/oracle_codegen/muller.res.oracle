rm -f muller.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only muller.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs muller.cloc muller.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
(t + i).int_M

Normalized expression:
(\forall integer i,
   (\forall integer j,
      (\forall int_P[..] t, ((i < j) ==> (num_of_pos{Here}(i, j, t) == 0)))))

Normalized expression:
(\forall integer i,
   (\forall integer j,
      (\forall int_P[..] t,
         (((i <= j) && ((t + j).int_M < 0)) ==>
            (num_of_pos{Here}(i, j, t) ==
               (num_of_pos{Here}(i, (j - 1), t) + 1))))))

Normalized expression:
(\forall integer i,
   (\forall integer j,
      (\forall int_P[..] t,
         (((i <= j) && (not ((t + j).int_M < 0))) ==>
            (num_of_pos{Here}(i, j, t) == num_of_pos{Here}(i, (j - 1), t))))))

Normalized expression:
(\forall integer i,
   (\forall integer j,
      (\forall integer k,
         (\forall integer l,
            (\forall int_P[..] t,
               ((((j > k) && (k <= l)) && ((t + k).int_M < 0)) ==>
                  (num_of_pos{Here}(i, j, t) > num_of_pos{Here}(i, l, t))))))))

Normalized expression:
{
(let int32 count in
   {
   (let int32 i in
      {
      (let int_P[..] u in
         {
         (let int32 tmp_1 in
            {
            {
              (C_1:
                 {
                 (count = 0);
                   (C_2:
                      {
                      (i = 0);
                        (try {
                           (try loop
                                  invariant (C_3:
                                               (((((C_7: (0 <= i)) &&
                                                     (C_8: (i <= length))) &&
                                                    (C_9: (0 <= count))) &&
                                                   (C_10: (count <= i))) &&
                                                  (C_11:
                                                     (count ==
                                                        num_of_pos
                                                          {Here}
                                                          (0,
                                                          (i - 1),
                                                          t)))));
                                  variant (C_12: (length - i));
                                  (try {
                                     {
                                       {
                                         (TODO if);
                                           (TODO if);
                                           (C_20:
                                              {
                                              (i = (C_19: (TODO cast)))
                                              })
                                         }
                                       };
                                       (throw Loop_continue ())
                                     } with
                                     | Loop_continue jessie_4 -> ()
                                     | default -> ()) done with
                              | Loop_exit jessie_3 -> ()
                              | default -> ())
                           } with
                           | Goto_while_0_break jessie_1 -> {
                           (while_0_break: { () })
                           }
                           | default -> ());
                        (C_22:
                           {
                           (u = (C_21: (TODO alloc)));
                             (C_23:
                                {
                                (count = 0);
                                  (C_24:
                                     {
                                     (i = 0);
                                       (try {
                                          (try loop
                                                 invariant (C_25:
                                                              (((((C_29:
                                                                    (0 <= i)) &&
                                                                    (
                                                                    C_30:
                                                                    (i <=
                                                                    length))) &&
                                                                   (C_31:
                                                                    (0 <=
                                                                    count))) &&
                                                                  (C_32:
                                                                    (count <=
                                                                    i))) &&
                                                                 (C_33:
                                                                    (
                                                                    count ==
                                                                    num_of_pos
                                                                    {Here}
                                                                    (0,
                                                                    (i - 1),
                                                                    t)))));
                                                 variant (C_34: (length - i));
                                                 (try {
                                                    {
                                                      {
                                                        (TODO if);
                                                          (TODO if);
                                                          (C_48:
                                                             {
                                                             (i =
                                                                (C_47:
                                                                   (TODO cast)))
                                                             })
                                                        }
                                                      };
                                                      (throw Loop_continue ())
                                                    } with
                                                    | Loop_continue jessie_6 -> ()
                                                    | default -> ()) done with
                                             | Loop_exit jessie_5 -> ()
                                             | default -> ())
                                          } with
                                          | Goto_while_1_break jessie_2 -> {
                                          (while_1_break: { () })
                                          }
                                          | default -> ());
                                       (return)
                                     })
                                })
                           })
                      })
                 })
              }
            })
         })
      })
   })
}

Normalized expression:
(C_49:
   ((C_50: (length >= 0)) &&
      ((C_52: ((\offset_min(t)) <= 0)) &&
         (C_53: ((\offset_max(t)) >= (length - 1))))))

Generating Why function m
cat why/muller.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type uint16

type uint32

type uint64

type uint8

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic num_of_pos: (int_P, int32) memory, int, int, int_P pointer -> int

axiom full_separated_num_of_pos_int_M :
 (forall tmp:int_P pointer.
  (forall tmpval:int32.
   (forall t:int_P pointer.
    (forall j:int.
     (forall i:int.
      (forall int_P_int_M_t_2:(int_P,
       int32) memory.
       (full_separated(tmp, t) ->
        (num_of_pos(int_P_int_M_t_2, i, j, t) = num_of_pos(store(int_P_int_M_t_2,
                                                           tmp, tmpval),
                                                i, j, t)))))))))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_s_1_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_s_1_at_L, s) = strlen(char_P_char_M_s_1_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

axiom num_of_pos_empty :
 (forall int_P_int_M_t_12:(int_P,
  int32) memory.
  (forall i_7:int.
   (forall j_0:int.
    (forall t_1:int_P pointer.
     (gt_int(i_7, j_0) ->
      eq_int(num_of_pos(int_P_int_M_t_12, i_7, j_0, t_1), (0)))))))

axiom num_of_pos_false_case :
 (forall int_P_int_M_t_14:(int_P,
  int32) memory.
  (forall i_9:int.
   (forall j_2:int.
    (forall t_3:int_P pointer.
     ((le_int(i_9, j_2)
      and (not gt_int(integer_of_int32(select(int_P_int_M_t_14,
                                       shift(t_3, j_2))),
               (0)))) ->
      eq_int(num_of_pos(int_P_int_M_t_14, i_9, j_2, t_3),
      num_of_pos(int_P_int_M_t_14, i_9, sub_int(j_2, (1)), t_3)))))))

axiom num_of_pos_strictly_increasing :
 (forall int_P_int_M_t_15:(int_P,
  int32) memory.
  (forall i_10:int.
   (forall j_3:int.
    (forall k_0:int.
     (forall l:int.
      (forall t_4:int_P pointer.
       ((lt_int(j_3, k_0)
        and (le_int(k_0, l)
            and gt_int(integer_of_int32(select(int_P_int_M_t_15,
                                        shift(t_4, k_0))),
                (0)))) ->
        lt_int(num_of_pos(int_P_int_M_t_15, i_10, j_3, t_4),
        num_of_pos(int_P_int_M_t_15, i_10, l, t_4)))))))))

axiom num_of_pos_true_case :
 (forall int_P_int_M_t_13:(int_P,
  int32) memory.
  (forall i_8:int.
   (forall j_1:int.
    (forall t_2:int_P pointer.
     ((le_int(i_8, j_1)
      and gt_int(integer_of_int32(select(int_P_int_M_t_13, shift(t_2, j_1))),
          (0))) ->
      eq_int(num_of_pos(int_P_int_M_t_13, i_8, j_1, t_2),
      add_int(num_of_pos(int_P_int_M_t_13, i_8, sub_int(j_1, (1)), t_2), (1))))))))

axiom strlen_create :
 (forall char_P_char_M_s_10_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_5:int32.
    ((le_int((0), integer_of_int32(i_5))
     and eq_int(integer_of_int8(select(char_P_char_M_s_10_at_L,
                                shift(s_6, integer_of_int32(i_5)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_s_10_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_s_10_at_L, s_6)),
         integer_of_int32(i_5)))))))

axiom strlen_create2 :
 (forall char_P_char_M_s_11_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_6:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_6))
      and eq_int(integer_of_int8(select(char_P_char_M_s_11_at_L,
                                 shift(s_7, integer_of_int32(i_6)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_s_11_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_s_11_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_6), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_s_4_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and lt_int(integer_of_int32(i_0),
         integer_of_int32(strlen(char_P_char_M_s_4_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_s_4_at_L,
                             shift(s_0, integer_of_int32(i_0)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_s_5_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_s_5_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_s_5_at_L,
                                           s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_s_6_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_s_6_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_s_6_at_L,
                                     shift(s_2, integer_of_int32(i_1)))),
             (0)))) ->
     lt_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_s_6_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_s_9_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and le_int(integer_of_int32(i_4),
         integer_of_int32(strlen(char_P_char_M_s_9_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_s_9_at_L,
                             shift(s_5, integer_of_int32(i_4)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_s_9_at_L, s_5)),
     integer_of_int32(i_4)))))))

axiom strlen_sup :
 (forall char_P_char_M_s_8_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and eq_int(integer_of_int8(select(char_P_char_M_s_8_at_L,
                                shift(s_4, integer_of_int32(i_3)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_s_8_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_s_8_at_L, s_4)),
         integer_of_int32(i_3)))))))

axiom strlen_zero :
 (forall char_P_char_M_s_7_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and (le_int(integer_of_int32(i_2),
          integer_of_int32(strlen(char_P_char_M_s_7_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_s_7_at_L,
                                    shift(s_3, integer_of_int32(i_2)))),
             (0)))) ->
     eq_int(integer_of_int32(i_2),
     integer_of_int32(strlen(char_P_char_M_s_7_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter m :
 t_0:int_P pointer ->
  length:int32 ->
   int_P_t_3_alloc_table:int_P alloc_table ->
    int_P_int_M_t_3:(int_P,
     int32) memory ->
     { (C_49:
       ((C_50: ge_int(integer_of_int32(length), (0)))
       and ((C_52: le_int(offset_min(int_P_t_3_alloc_table, t_0), (0)))
           and (C_53:
               ge_int(offset_max(int_P_t_3_alloc_table, t_0),
               sub_int(integer_of_int32(length), (1)))))))}
     unit reads int_P_tag_table writes int_P_tag_table { true }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let m_safety =
 fun (t_0 : int_P pointer) (length : int32) (int_P_int_M_t_3 : (int_P,
     int32) memory) (int_P_t_3_alloc_table : int_P alloc_table) ->
  { (C_49:
    ((C_50: ge_int(integer_of_int32(length), (0)))
    and ((C_52: le_int(offset_min(int_P_t_3_alloc_table, t_0), (0)))
        and (C_53:
            ge_int(offset_max(int_P_t_3_alloc_table, t_0),
            sub_int(integer_of_int32(length), (1))))))) }
  (init:
  try
   begin
     (let int_P_u_16_alloc_table = ref (any_alloc_table void) in
     (let int_P_int_M_u_16 = ref (any_memory void) in
     (let count = ref (any_int32 void) in
     (let i_11 = ref (any_int32 void) in
     (let u = ref (any_pointer void) in
     (let tmp_1 = ref (any_int32 void) in
     (C_1:
     begin
       (let jessie_7 = (count := (safe_int32_of_integer_ (0))) in void);
      (C_2:
      begin
        (let jessie_8 = (i_11 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant
            (C_3:
            ((C_7: le_int((0), integer_of_int32(i_11)))
            and ((C_8:
                 le_int(integer_of_int32(i_11), integer_of_int32(length)))
                and ((C_9: le_int((0), integer_of_int32(count)))
                    and ((C_10:
                         le_int(integer_of_int32(count),
                         integer_of_int32(i_11)))
                        and (C_11:
                            eq_int(integer_of_int32(count),
                            num_of_pos(int_P_int_M_t_3, (0),
                            sub_int(integer_of_int32(i_11), (1)), t_0))))))))
          variant (C_12 : sub_int(integer_of_int32(length),
                          integer_of_int32(i_11))) }
         try
          (let jessie_12 = begin
                             (let jessie_11 = begin
                                                (if ((lt_int_ (integer_of_int32 !i_11)) 
                                                     (integer_of_int32 length))
                                                then void
                                                else
                                                 (let jessie_9 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                 void));
                                               (if ((gt_int_ (integer_of_int32 
                                                              (C_17:
                                                              ((((offset_acc_ int_P_t_3_alloc_table) int_P_int_M_t_3) t_0) 
                                                               (integer_of_int32 !i_11))))) (0))
                                               then
                                                (C_15:
                                                (let jessie_10 = (count := 
                                                                  (C_14:
                                                                  (int32_of_integer_ 
                                                                   (C_13:
                                                                   ((add_int 
                                                                    (integer_of_int32 !count)) (1)))))) in
                                                void))
                                               else void);
                                               (C_20:
                                               begin
                                                 (i_11 := (C_19:
                                                          (int32_of_integer_ 
                                                           (C_18:
                                                           ((add_int 
                                                             (integer_of_int32 !i_11)) (1))))));
                                                !i_11
                                               end)
                                              end in
                             void);
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_4 ->
          void end
        done
        with
        Goto_while_0_break_exc jessie_1 ->
        (while_0_break: void) end;
       (C_22:
       begin
         (let jessie_14 = (u := (C_21:
                                (((alloc_int_P (integer_of_int32 !count)) int_P_u_16_alloc_table) int_P_u_16_alloc_table))) in
         void);
        (C_23:
        begin
          (let jessie_15 = (count := (safe_int32_of_integer_ (0))) in void);
         (C_24:
         begin
           (let jessie_16 = (i_11 := (safe_int32_of_integer_ (0))) in void);
          try
           while true do
           { invariant
               (C_25:
               ((C_29: le_int((0), integer_of_int32(i_11)))
               and ((C_30:
                    le_int(integer_of_int32(i_11), integer_of_int32(length)))
                   and ((C_31: le_int((0), integer_of_int32(count)))
                       and ((C_32:
                            le_int(integer_of_int32(count),
                            integer_of_int32(i_11)))
                           and (C_33:
                               eq_int(integer_of_int32(count),
                               num_of_pos(int_P_int_M_t_3, (0),
                               sub_int(integer_of_int32(i_11), (1)), t_0))))))))
             variant (C_34 : sub_int(integer_of_int32(length),
                             integer_of_int32(i_11))) }
            try
             (let jessie_24 = begin
                                (let jessie_23 = begin
                                                   (if ((lt_int_ (integer_of_int32 !i_11)) 
                                                        (integer_of_int32 length))
                                                   then void
                                                   else
                                                    (let jessie_17 = 
                                                    (raise
                                                     (Goto_while_1_break_exc
                                                     void)) in
                                                    void));
                                                  (if ((gt_int_ (integer_of_int32 
                                                                 (C_45:
                                                                 ((((offset_acc_ int_P_t_3_alloc_table) int_P_int_M_t_3) t_0) 
                                                                  (integer_of_int32 !i_11))))) (0))
                                                  then
                                                   (let jessie_22 = (C_35:
                                                                    begin
                                                                      
                                                                    (let jessie_18 = 
                                                                    (tmp_1 := !count) in
                                                                    void);
                                                                    (C_38:
                                                                    begin
                                                                      
                                                                    (let jessie_19 = 
                                                                    (count := 
                                                                    (C_37:
                                                                    (int32_of_integer_ 
                                                                    (C_36:
                                                                    ((add_int 
                                                                    (integer_of_int32 !count)) (1)))))) in
                                                                    void);
                                                                    (C_43:
                                                                    (let jessie_20 = 
                                                                    (C_41:
                                                                    ((shift !u) 
                                                                    (integer_of_int32 !tmp_1))) in
                                                                    (let jessie_21 = 
                                                                    (C_40:
                                                                    ((((offset_acc_ int_P_t_3_alloc_table) int_P_int_M_t_3) t_0) 
                                                                    (integer_of_int32 !i_11))) in
                                                                    begin
                                                                      
                                                                    (JC_5:
                                                                    (((((offset_upd_ !int_P_u_16_alloc_table) int_P_int_M_u_16) !u) 
                                                                    (integer_of_int32 !tmp_1)) jessie_21));
                                                                    ((safe_acc_ !int_P_int_M_u_16) jessie_20)
                                                                    end)))
                                                                    end)
                                                                    end) in
                                                   void)
                                                  else void);
                                                  (C_48:
                                                  begin
                                                    (i_11 := (C_47:
                                                             (int32_of_integer_ 
                                                              (C_46:
                                                              ((add_int 
                                                                (integer_of_int32 !i_11)) (1))))));
                                                   !i_11
                                                  end)
                                                 end in
                                void);
                               (raise (Loop_continue_exc void))
                              end in
             void)
             with
             Loop_continue_exc jessie_6 ->
             void end
           done
           with
           Goto_while_1_break_exc jessie_2 ->
           (while_1_break: void) end;
          (raise Return)
         end)
        end)
       end)
      end)
     end)))))));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


