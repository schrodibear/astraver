rm -f trace.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only trace.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs trace.cloc trace.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{ { (C_2: { ((C_1: this.f) = 0); (return) }) }
}

Normalized expression:
(C_3: (this.f == 0))

Normalized expression:
true

Normalized expression:
{
(let int32 __retres in
   {
   {
     {
       (assert (C_4: ((C_5: (x >= 0)) && (C_6: (x > 9))))); ()
       };
       (C_9: { (__retres = (C_8: (TODO cast))); (return __retres) })
     }
   })
}

Normalized expression:
(C_10: (x < 0))

Normalized expression:
{
(let int32 y in
   {
   (let int32 __retres in
      {
      (try {
         (TODO if); (C_17: { (__retres = y) })
         } with
         | Goto_return_label jessie_1 -> {
         (return_label: { (return __retres) })
         }
         | default -> ())
      })
   })
}

Normalized expression:
(C_18:
   ((C_19: (0 > x)) &&
      ((C_21: (x > 100)) && ((C_23: (100 > 200)) && (C_24: (200 > 300))))))

Normalized expression:
(C_25:
   ((((C_28: (0 > x)) && (C_29: (x > 100))) && (C_30: (\result != 0))) &&
      (C_31: (\result < 10))))

Normalized expression:
true

Normalized expression:
{
(let int32 tmp in { { (C_33: { (tmp = (C_32: m2{}(x))); (return tmp) }) } })
}

Normalized expression:
(C_34: ((C_35: (x >= 0)) && (C_36: (x > 50))))

Normalized expression:
{
(let int32 y in
   {
   {
     (C_37:
        {
        (y = x);
          (try {
             (try loop
                    invariant (C_38: ((C_39: (0 <= y)) && (C_40: (y <= x))));
                    variant (C_41: y);
                    (try {
                       {
                         { (TODO if); (C_44: { (y = (C_43: (TODO cast))) }) }
                         };
                         (throw Loop_continue ())
                       } with
                       | Loop_continue jessie_4 -> ()
                       | default -> ()) done with
                | Loop_exit jessie_3 -> ()
                | default -> ())
             } with
             | Goto_while_0_break jessie_2 -> {
             (while_0_break: { () })
             }
             | default -> ());
          (return)
        })
     }
   })
}

Normalized expression:
{
(let int32 y in
   {
   {
     (C_45:
        {
        (y = x);
          (try {
             (try loop
                    invariant (C_46: (y == x));
                    variant (C_47: y);
                    (try {
                       {
                         { (TODO if); (C_50: { (y = (C_49: (TODO cast))) }) }
                         };
                         (throw Loop_continue ())
                       } with
                       | Loop_continue jessie_7 -> ()
                       | default -> ()) done with
                | Loop_exit jessie_6 -> ()
                | default -> ())
             } with
             | Goto_while_1_break jessie_5 -> {
             (while_1_break: { () })
             }
             | default -> ());
          (return)
        })
     }
   })
}

Normalized expression:
{
(let int8 __retres in
   {
   {
     (C_57:
        {
        (x = (C_56: (TODO cast)));
          (C_61:
             {
             (x = (C_60: (TODO cast)));
               (C_65: { (__retres = (C_64: (TODO cast))); (return __retres) })
             })
        })
     }
   })
}

Normalized expression:
{
(let int32 __retres in
   {
   { (C_67: { (__retres = (C_66: p.f)); (return __retres) }) }
   })
}

Normalized expression:
{ { (C_69: { ((C_68: p.f) = 0); (return) }) }
}

Normalized expression:
(C_70: (p.f == 0))

Normalized expression:
p.f

Normalized expression:
true

Generating Why function trace
Generating Why function m1
Generating Why function m2
Generating Why function m3
Generating Why function m4
Generating Why function m5
Generating Why function m6
Generating Why function m7
Generating Why function m8
cat why/trace.why
type S

type _bool

type char_P

type int16

type int32

type int64

type int8

type uint16

type uint32

type uint64

type uint8

exception Goto_return_label_exc of unit

exception Goto_while_0_break_exc of unit

exception Goto_while_1_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic S_tag:  -> S tag_id

axiom S_int : (int_of_tag(S_tag) = (1))

axiom S_parenttag_bottom : parenttag(S_tag, bottom_tag)

axiom S_tags :
 (forall x:S pointer.
  (forall S_tag_table:S tag_table. instanceof(S_tag_table, x, S_tag)))

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_S(p:S pointer,
 a:int,
 b:int,
 S_alloc_table:S alloc_table) =
 ((offset_min(S_alloc_table, p) = a) and (offset_max(S_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

parameter S_alloc_table : S alloc_table ref

parameter S_f : (S, int32) memory ref

parameter S_tag_table : S tag_table ref

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter alloc_S :
 n:int ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { ge_int(n, (0))} S pointer reads S_alloc_table
    writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), sub_int(n, (1)), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_S :
 tt:unit ->
  S_alloc_table:S alloc_table ref ->
   S_alloc_table:S alloc_table ref ->
    { } S pointer reads S_alloc_table writes S_alloc_table,S_tag_table
    { (valid_struct_S(result, (0), (0), S_alloc_table)
      and (instanceof(S_tag_table, result, S_tag)
          and (alloc_extends(S_alloc_table@, S_alloc_table)
              and alloc_extern(S_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter m1 :
 x:int32 -> { (C_10: gt_int(integer_of_int32(x), (0)))} int32 { true }

parameter m2 :
 x_0:int32 ->
  { (C_18:
    ((C_19: lt_int((0), integer_of_int32(x_0)))
    and ((C_21: lt_int(integer_of_int32(x_0), (100)))
        and ((C_23: lt_int((100), (200))) and (C_24: lt_int((200), (300)))))))}
  int32
  { ((true = true) ->
     (C_25:
     ((C_28: lt_int((0), integer_of_int32(x_0)))
     and ((C_29: lt_int(integer_of_int32(x_0), (100)))
         and ((C_30: neq_int(integer_of_int32(result), (0)))
             and (C_31: gt_int(integer_of_int32(result), (10)))))))) }

parameter m3 :
 x_1:int32 ->
  { (C_34:
    ((C_35: ge_int(integer_of_int32(x_1), (0)))
    and (C_36: lt_int(integer_of_int32(x_1), (50)))))}
  int32 { true }

parameter m4 : x_2:int32 -> { (JC_11: true)} unit { true }

parameter m5 : x_3:int32 -> { (JC_16: true)} unit { true }

parameter m6 : x_4:int8 -> { (JC_21: true)} int8 { true }

parameter m7 :
 p:S pointer ->
  { (JC_24: true)} int32 reads S_alloc_table,S_f,S_tag_table { true }

parameter m8 :
 p_0:S pointer ->
  { (JC_27: true)} unit reads S_alloc_table,S_f,S_tag_table writes S_f
  { ((true = true) ->
     (JC_31:
     ((C_70: eq_int(integer_of_int32(select(S_f, p_0)), (0)))
     and (JC_30: not_assigns(S_alloc_table@, S_f@, S_f, pset_singleton(p_0)))))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter trace :
 this:S pointer ->
  { (JC_1: true)} unit reads S_alloc_table,S_f,S_tag_table writes S_f
  { ((true = true) ->
     (C_3: eq_int(integer_of_int32(select(S_f, this)), (0)))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let m1_safety =
 fun (x : int32) ->
  { (C_10: gt_int(integer_of_int32(x), (0))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres = ref (any_int32 void) in
     begin
       (assert
       { (C_4:
         ((C_5: ge_int(integer_of_int32(x), (0)))
         and (C_6: lt_int(integer_of_int32(x), (9))))) };
       void);
      void;
      (C_9:
      begin
        (let jessie_14 = (__retres := (C_8:
                                      (int32_of_integer_ (C_7:
                                                         ((add_int (integer_of_int32 x)) (1)))))) in
        void);
       (jessie_returned_value := !__retres);
       (raise Return)
      end)
     end);
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let m2_ensures_default_1 =
 fun (x_0 : int32) ->
  { (C_18:
    ((C_19: lt_int((0), integer_of_int32(x_0)))
    and ((C_21: lt_int(integer_of_int32(x_0), (100)))
        and ((C_23: lt_int((100), (200))) and (C_24: lt_int((200), (300))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (let jessie_23 = begin
                         (if ((lt_int_ (integer_of_int32 x_0)) (50))
                         then
                          (let jessie_21 = (C_16:
                                           begin
                                             (let jessie_20 = (__retres_0 := 
                                                               (safe_int32_of_integer_ 
                                                                (C_14:
                                                                ((add_int 
                                                                  (integer_of_int32 x_0)) (1))))) in
                                             void);
                                            (raise
                                             (Goto_return_label_exc
                                             void))
                                           end) in
                          void)
                         else
                          (C_13:
                          (let jessie_22 = (y := (safe_int32_of_integer_ 
                                                  (C_11:
                                                  ((sub_int (integer_of_int32 x_0)) (1))))) in
                          void)));
                        (C_17: begin   (__retres_0 := !y); !__retres_0 end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_0); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_25:
     ((C_28: lt_int((0), integer_of_int32(x_0)))
     and ((C_29: lt_int(integer_of_int32(x_0), (100)))
         and ((C_30: neq_int(integer_of_int32(result), (0)))
             and (C_31: gt_int(integer_of_int32(result), (10)))))))) }

let m2_safety =
 fun (x_0 : int32) ->
  { (C_18:
    ((C_19: lt_int((0), integer_of_int32(x_0)))
    and ((C_21: lt_int(integer_of_int32(x_0), (100)))
        and ((C_23: lt_int((100), (200))) and (C_24: lt_int((200), (300))))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let y = ref (any_int32 void) in
     (let __retres_0 = ref (any_int32 void) in
     try
      (let jessie_19 = begin
                         (if ((lt_int_ (integer_of_int32 x_0)) (50))
                         then
                          (let jessie_17 = (C_16:
                                           begin
                                             (let jessie_16 = (__retres_0 := 
                                                               (C_15:
                                                               (int32_of_integer_ 
                                                                (C_14:
                                                                ((add_int 
                                                                  (integer_of_int32 x_0)) (1)))))) in
                                             void);
                                            (raise
                                             (Goto_return_label_exc
                                             void))
                                           end) in
                          void)
                         else
                          (C_13:
                          (let jessie_18 = (y := (C_12:
                                                 (int32_of_integer_ (C_11:
                                                                    ((sub_int 
                                                                    (integer_of_int32 x_0)) (1)))))) in
                          void)));
                        (C_17: begin   (__retres_0 := !y); !__retres_0 end)
                       end in
      void)
      with
      Goto_return_label_exc jessie_1 ->
      (return_label:
      begin   (jessie_returned_value := !__retres_0); (raise Return) end) end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let m3_safety =
 fun (x_1 : int32) ->
  { (C_34:
    ((C_35: ge_int(integer_of_int32(x_1), (0)))
    and (C_36: lt_int(integer_of_int32(x_1), (50))))) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let tmp = ref (any_int32 void) in
     (C_33:
     begin
       (let jessie_24 = (tmp := (C_32: (m2 x_1))) in void);
      (jessie_returned_value := !tmp);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let m4_safety =
 fun (x_2 : int32) ->
  { (JC_12: true) }
  (init:
  try
   begin
     (let y_0 = ref (any_int32 void) in
     (C_37:
     begin
       (let jessie_26 = (y_0 := x_2) in void);
      try
       while true do
       { invariant
           (C_38:
           ((C_39: le_int((0), integer_of_int32(y_0)))
           and (C_40: le_int(integer_of_int32(y_0), integer_of_int32(x_2)))))
         variant (C_41 : integer_of_int32((C_41 : y_0))) }
        try
         (let jessie_29 = begin
                            (let jessie_28 = begin
                                               (if ((gt_int_ (integer_of_int32 !y_0)) (0))
                                               then void
                                               else
                                                (let jessie_27 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                void));
                                              (C_44:
                                              begin
                                                (y_0 := (C_43:
                                                        (int32_of_integer_ 
                                                         (C_42:
                                                         ((sub_int (integer_of_int32 !y_0)) (1))))));
                                               !y_0
                                              end)
                                             end in
                            void);
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_4 ->
         void end
       done
       with
       Goto_while_0_break_exc jessie_2 ->
       (while_0_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let m5_safety =
 fun (x_3 : int32) ->
  { (JC_17: true) }
  (init:
  try
   begin
     (let y_1 = ref (any_int32 void) in
     (C_45:
     begin
       (let jessie_34 = (y_1 := x_3) in void);
      try
       while true do
       { invariant
           (C_46: eq_int(integer_of_int32(y_1), integer_of_int32(x_3)))
         variant (C_47 : integer_of_int32((C_47 : y_1))) }
        try
         (let jessie_37 = begin
                            (let jessie_36 = begin
                                               (if ((gt_int_ (integer_of_int32 !y_1)) (0))
                                               then void
                                               else
                                                (let jessie_35 = (raise
                                                                  (Goto_while_1_break_exc
                                                                  void)) in
                                                void));
                                              (C_50:
                                              begin
                                                (y_1 := (C_49:
                                                        (int32_of_integer_ 
                                                         (C_48:
                                                         ((sub_int (integer_of_int32 !y_1)) (1))))));
                                               !y_1
                                              end)
                                             end in
                            void);
                           (raise (Loop_continue_exc void))
                          end in
         void)
         with
         Loop_continue_exc jessie_7 ->
         void end
       done
       with
       Goto_while_1_break_exc jessie_5 ->
       (while_1_break: void) end;
      (raise Return)
     end));
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let m6_safety =
 fun (x_4 : int8) ->
  { (JC_22: true) }
  (let mutable_x_4 = ref x_4 in
  (init:
  (let jessie_returned_value = ref (any_int8 void) in
  try
   begin
     (let __retres_1 = ref (any_int8 void) in
     (C_57:
     begin
       (let jessie_42 = (mutable_x_4 := (C_56:
                                        (int8_of_integer_ (C_55:
                                                          ((add_int (integer_of_int32 
                                                                    (C_54:
                                                                    (int32_of_integer_ 
                                                                    (integer_of_int8 !mutable_x_4))))) 
                                                           (integer_of_int32 
                                                            (C_53:
                                                            (int32_of_integer_ 
                                                             (C_52:
                                                             ((add_int 
                                                               (integer_of_int32 
                                                                (C_51:
                                                                (int32_of_integer_ 
                                                                 (integer_of_int8 !mutable_x_4))))) (1))))))))))) in
       void);
      (C_61:
      begin
        (let jessie_43 = (mutable_x_4 := (C_60:
                                         (int8_of_integer_ (C_59:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (C_58:
                                                              (int32_of_integer_ 
                                                               (integer_of_int8 !mutable_x_4))))) (1)))))) in
        void);
       (C_65:
       begin
         (let jessie_44 = (__retres_1 := (C_64:
                                         (int8_of_integer_ (C_63:
                                                           ((add_int 
                                                             (integer_of_int32 
                                                              (C_62:
                                                              (int32_of_integer_ 
                                                               (integer_of_int8 !mutable_x_4))))) (2)))))) in
         void);
        (jessie_returned_value := !__retres_1);
        (raise Return)
       end)
      end)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end)))
  { true }

let m7_safety =
 fun (p : S pointer) ->
  { (JC_25: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let __retres_2 = ref (any_int32 void) in
     (C_67:
     begin
       (let jessie_48 = (__retres_2 := (C_66:
                                       (((acc_ !S_alloc_table) !S_f) p))) in
       void);
      (jessie_returned_value := !__retres_2);
      (raise Return)
     end));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let m8_ensures_default_2 =
 fun (p_0 : S pointer) ->
  { (JC_28: true) }
  (init:
  try
   begin
     (C_69:
     begin
       (let jessie_55 = (let jessie_53 = p_0 in
                        (let jessie_54 = (safe_int32_of_integer_ (0)) in
                        (((safe_upd_ S_f) p_0) jessie_54))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (JC_31:
     ((C_70: eq_int(integer_of_int32(select(S_f, p_0)), (0)))
     and (JC_30: not_assigns(S_alloc_table@, S_f@, S_f, pset_singleton(p_0)))))) }

let m8_safety =
 fun (p_0 : S pointer) ->
  { (JC_28: true) }
  (init:
  try
   begin
     (C_69:
     begin
       (let jessie_52 = (let jessie_50 = p_0 in
                        (let jessie_51 = (safe_int32_of_integer_ (0)) in
                        (JC_32:
                        ((((upd_ !S_alloc_table) S_f) p_0) jessie_51)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }

let trace_ensures_default =
 fun (this : S pointer) ->
  { (JC_2: true) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_13 = (let jessie_11 = this in
                        (let jessie_12 = (safe_int32_of_integer_ (0)) in
                        (((safe_upd_ S_f) this) jessie_12))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { ((true = true) ->
     (C_3: eq_int(integer_of_int32(select(S_f, this)), (0)))) }

let trace_safety =
 fun (this : S pointer) ->
  { (JC_2: true) }
  (init:
  try
   begin
     (C_2:
     begin
       (let jessie_10 = (let jessie_8 = this in
                        (let jessie_9 = (safe_int32_of_integer_ (0)) in
                        (JC_4: ((((upd_ !S_alloc_table) S_f) this) jessie_9)))) in
       void);
      (raise Return)
     end);
    (raise Return)
   end
   with
   Return ->
   void end)
  { true }


