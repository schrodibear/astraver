rm -f malloc.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only malloc.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
WHYLIB=../../why/lib JESSIELIB=../../why/lib ../../why/bin/jessie.opt  -why-opt -split-user-conj -why-opt -fast-wp -locs malloc.cloc malloc.jc
Normalized expression:
s.char_M

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i > strlen{L}(s))) ==> ((s + i).char_M != 0))))

Normalized expression:
(\forall char_P[..] s, ((s + strlen{L}(s)).char_M == 0))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
         (i > strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
         (i == strlen{L}(s)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && (i <= strlen{L}(s))) ==>
         (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (((0 <= i) && ((s + i).char_M == 0)) ==>
         ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

Normalized expression:
(\forall char_P[..] s,
   (\forall int32 i,
      (\forall int32 k,
         (((k <= i) && ((s + i).char_M == 0)) ==>
            ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

Normalized expression:
{
(let int_xP[..] t in
   {
   (let int32 i in
      {
      {
        (C_7:
           {
           (t = (C_6: (TODO alloc)));
             (C_8:
                {
                (i = 0);
                  (try {
                     (try loop
                            invariant (C_9:
                                         (((C_11: (0 <= i)) &&
                                             (C_12: (i <= n))) &&
                                            (C_13:
                                               (\forall int32 k,
                                                  (((0 <= k) && (k > i)) ==>
                                                     (((\offset_min((
                                                         t + k).int_xM)) <=
                                                         0) &&
                                                        ((\offset_max((
                                                           t + k).int_xM)) >=
                                                           0)))))));
                            (try {
                               {
                                 {
                                   (TODO if);
                                     (C_17:
                                        {
                                        ((C_16: (C_15: (t + i)).int_xM) =
                                           (C_14: (TODO alloc)));
                                          (C_20:
                                             {
                                             (i = (C_19: (TODO cast)))
                                             })
                                        })
                                   }
                                 };
                                 (throw Loop_continue ())
                               } with
                               | Loop_continue jessie_3 -> ()
                               | default -> ()) done with
                        | Loop_exit jessie_2 -> ()
                        | default -> ())
                     } with
                     | Goto_while_0_break jessie_1 -> {
                     (while_0_break: { () })
                     }
                     | default -> ());
                  (return t)
                })
           })
        }
      })
   })
}

Normalized expression:
(C_21: (n >= 1))

Normalized expression:
(C_22:
   (((C_24: ((\offset_min(\result)) <= 0)) &&
       (C_25: ((\offset_max(\result)) >= (n - 1)))) &&
      (C_26:
         (\forall int32 i,
            (((0 <= i) && (i > n)) ==>
               (((\offset_min((\result + i).int_xM)) <= 0) &&
                  ((\offset_max((\result + i).int_xM)) >= 0)))))))

Normalized expression:
true

Normalized expression:
{
(let int_xP[..] t in
   {
   (let int32 __retres in
      {
      {
        (C_27:
           {
           __globinit_whole_program{}();
             (C_29:
                {
                (t = (C_28: test{}(10)));
                  (C_34:
                     {
                     ((C_33:
                         (C_32: ((C_31: (C_30: (t + 3)).int_xM) + 0)).int_M) =
                        0);
                       (C_39:
                          {
                          (__retres =
                             (C_38:
                                (C_37: ((C_36: (C_35: (t + 3)).int_xM) + 0)).int_M));
                            (return __retres)
                          })
                     })
                })
           })
        }
      })
   })
}

Normalized expression:
(C_40: (\result == 0))

Normalized expression:
true

Normalized expression:
{ { () }
}

Generating Why function test
Generating Why function main
Generating Why function __globinit_whole_program
cat why/malloc.why
type _bool

type char_P

type int16

type int32

type int64

type int8

type int_P

type int_xP

type uint16

type uint32

type uint64

type uint8

exception Goto_while_0_break_exc of unit

exception Loop_continue_exc of unit

exception Loop_exit_exc of unit

logic integer_of__bool: _bool -> int

logic _bool_of_integer: int -> _bool

axiom _bool_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (1))) ->
   eq_int(integer_of__bool(_bool_of_integer(x)), x)))

axiom _bool_range :
 (forall x:_bool.
  (le_int((0), integer_of__bool(x)) and le_int(integer_of__bool(x), (1))))

logic char_P_tag:  -> char_P tag_id

axiom char_P_int : (int_of_tag(char_P_tag) = (1))

axiom char_P_parenttag_bottom : parenttag(char_P_tag, bottom_tag)

axiom char_P_tags :
 (forall x:char_P pointer.
  (forall char_P_tag_table:char_P tag_table.
   instanceof(char_P_tag_table, x, char_P_tag)))

predicate eq__bool(x:_bool,
 y:_bool) =
 eq_int(integer_of__bool(x), integer_of__bool(y))

logic integer_of_int16: int16 -> int

predicate eq_int16(x:int16,
 y:int16) =
 eq_int(integer_of_int16(x), integer_of_int16(y))

logic integer_of_int32: int32 -> int

predicate eq_int32(x:int32,
 y:int32) =
 eq_int(integer_of_int32(x), integer_of_int32(y))

logic integer_of_int64: int64 -> int

predicate eq_int64(x:int64,
 y:int64) =
 eq_int(integer_of_int64(x), integer_of_int64(y))

logic integer_of_int8: int8 -> int

predicate eq_int8(x:int8,
 y:int8) =
 eq_int(integer_of_int8(x), integer_of_int8(y))

logic integer_of_uint16: uint16 -> int

predicate eq_uint16(x:uint16,
 y:uint16) =
 eq_int(integer_of_uint16(x), integer_of_uint16(y))

logic integer_of_uint32: uint32 -> int

predicate eq_uint32(x:uint32,
 y:uint32) =
 eq_int(integer_of_uint32(x), integer_of_uint32(y))

logic integer_of_uint64: uint64 -> int

predicate eq_uint64(x:uint64,
 y:uint64) =
 eq_int(integer_of_uint64(x), integer_of_uint64(y))

logic integer_of_uint8: uint8 -> int

predicate eq_uint8(x:uint8,
 y:uint8) =
 eq_int(integer_of_uint8(x), integer_of_uint8(y))

logic strlen: (char_P, int8) memory, char_P pointer -> int32

axiom full_separated_strlen_char_M :
 (forall tmp:char_P pointer.
  (forall tmpval:int8.
   (forall s:char_P pointer.
    (forall char_P_char_M_at_L:(char_P,
     int8) memory.
     (full_separated(tmp, s) ->
      (strlen(char_P_char_M_at_L, s) = strlen(char_P_char_M_at_L, s)))))))

logic int16_of_integer: int -> int16

axiom int16_coerce :
 (forall x:int.
  ((le_int((-32768), x) and le_int(x, (32767))) ->
   eq_int(integer_of_int16(int16_of_integer(x)), x)))

axiom int16_range :
 (forall x:int16.
  (le_int((-32768), integer_of_int16(x))
  and le_int(integer_of_int16(x), (32767))))

logic int32_of_integer: int -> int32

axiom int32_coerce :
 (forall x:int.
  ((le_int((-2147483648), x) and le_int(x, (2147483647))) ->
   eq_int(integer_of_int32(int32_of_integer(x)), x)))

axiom int32_range :
 (forall x:int32.
  (le_int((-2147483648), integer_of_int32(x))
  and le_int(integer_of_int32(x), (2147483647))))

logic int64_of_integer: int -> int64

axiom int64_coerce :
 (forall x:int.
  ((le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807))) ->
   eq_int(integer_of_int64(int64_of_integer(x)), x)))

axiom int64_range :
 (forall x:int64.
  (le_int((-9223372036854775808), integer_of_int64(x))
  and le_int(integer_of_int64(x), (9223372036854775807))))

logic int8_of_integer: int -> int8

axiom int8_coerce :
 (forall x:int.
  ((le_int((-128), x) and le_int(x, (127))) ->
   eq_int(integer_of_int8(int8_of_integer(x)), x)))

axiom int8_range :
 (forall x:int8.
  (le_int((-128), integer_of_int8(x)) and le_int(integer_of_int8(x), (127))))

logic int_P_tag:  -> int_P tag_id

axiom int_P_int : (int_of_tag(int_P_tag) = (1))

axiom int_P_parenttag_bottom : parenttag(int_P_tag, bottom_tag)

axiom int_P_tags :
 (forall x:int_P pointer.
  (forall int_P_tag_table:int_P tag_table.
   instanceof(int_P_tag_table, x, int_P_tag)))

logic int_xP_tag:  -> int_xP tag_id

axiom int_xP_int : (int_of_tag(int_xP_tag) = (1))

axiom int_xP_parenttag_bottom : parenttag(int_xP_tag, bottom_tag)

axiom int_xP_tags :
 (forall x:int_xP pointer.
  (forall int_xP_tag_table:int_xP tag_table.
   instanceof(int_xP_tag_table, x, int_xP_tag)))

axiom strlen_create :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_6:char_P pointer.
   (forall i_4:int32.
    ((le_int((0), integer_of_int32(i_4))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_6, integer_of_int32(i_4)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_6)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_6)),
         integer_of_int32(i_4)))))))

axiom strlen_create2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_7:char_P pointer.
   (forall i_5:int32.
    (forall k:int32.
     ((le_int(integer_of_int32(k), integer_of_int32(i_5))
      and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                 shift(s_7, integer_of_int32(i_5)))),
          (0))) ->
      (le_int((0),
       integer_of_int32(strlen(char_P_char_M_at_L,
                        shift(s_7, integer_of_int32(k)))))
      and le_int(integer_of_int32(strlen(char_P_char_M_at_L,
                                  shift(s_7, integer_of_int32(k)))),
          sub_int(integer_of_int32(i_5), integer_of_int32(k)))))))))

axiom strlen_def1 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_0:char_P pointer.
   (forall i:int32.
    ((le_int((0), integer_of_int32(i))
     and lt_int(integer_of_int32(i),
         integer_of_int32(strlen(char_P_char_M_at_L, s_0)))) ->
     neq_int(integer_of_int8(select(char_P_char_M_at_L,
                             shift(s_0, integer_of_int32(i)))),
     (0))))))

axiom strlen_def2 :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_1:char_P pointer.
   eq_int(integer_of_int8(select(char_P_char_M_at_L,
                          shift(s_1,
                          integer_of_int32(strlen(char_P_char_M_at_L, s_1))))),
   (0))))

axiom strlen_not_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_2:char_P pointer.
   (forall i_0:int32.
    ((le_int((0), integer_of_int32(i_0))
     and (le_int(integer_of_int32(i_0),
          integer_of_int32(strlen(char_P_char_M_at_L, s_2)))
         and neq_int(integer_of_int8(select(char_P_char_M_at_L,
                                     shift(s_2, integer_of_int32(i_0)))),
             (0)))) ->
     lt_int(integer_of_int32(i_0),
     integer_of_int32(strlen(char_P_char_M_at_L, s_2)))))))

axiom strlen_shift :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_5:char_P pointer.
   (forall i_3:int32.
    ((le_int((0), integer_of_int32(i_3))
     and le_int(integer_of_int32(i_3),
         integer_of_int32(strlen(char_P_char_M_at_L, s_5)))) ->
     eq_int(integer_of_int32(strlen(char_P_char_M_at_L,
                             shift(s_5, integer_of_int32(i_3)))),
     sub_int(integer_of_int32(strlen(char_P_char_M_at_L, s_5)),
     integer_of_int32(i_3)))))))

axiom strlen_sup :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_4:char_P pointer.
   (forall i_2:int32.
    ((le_int((0), integer_of_int32(i_2))
     and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                shift(s_4, integer_of_int32(i_2)))),
         (0))) ->
     (le_int((0), integer_of_int32(strlen(char_P_char_M_at_L, s_4)))
     and le_int(integer_of_int32(strlen(char_P_char_M_at_L, s_4)),
         integer_of_int32(i_2)))))))

axiom strlen_zero :
 (forall char_P_char_M_at_L:(char_P,
  int8) memory.
  (forall s_3:char_P pointer.
   (forall i_1:int32.
    ((le_int((0), integer_of_int32(i_1))
     and (le_int(integer_of_int32(i_1),
          integer_of_int32(strlen(char_P_char_M_at_L, s_3)))
         and eq_int(integer_of_int8(select(char_P_char_M_at_L,
                                    shift(s_3, integer_of_int32(i_1)))),
             (0)))) ->
     eq_int(integer_of_int32(i_1),
     integer_of_int32(strlen(char_P_char_M_at_L, s_3)))))))

logic uint16_of_integer: int -> uint16

axiom uint16_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (65535))) ->
   eq_int(integer_of_uint16(uint16_of_integer(x)), x)))

axiom uint16_range :
 (forall x:uint16.
  (le_int((0), integer_of_uint16(x))
  and le_int(integer_of_uint16(x), (65535))))

logic uint32_of_integer: int -> uint32

axiom uint32_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (4294967295))) ->
   eq_int(integer_of_uint32(uint32_of_integer(x)), x)))

axiom uint32_range :
 (forall x:uint32.
  (le_int((0), integer_of_uint32(x))
  and le_int(integer_of_uint32(x), (4294967295))))

logic uint64_of_integer: int -> uint64

axiom uint64_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (18446744073709551615))) ->
   eq_int(integer_of_uint64(uint64_of_integer(x)), x)))

axiom uint64_range :
 (forall x:uint64.
  (le_int((0), integer_of_uint64(x))
  and le_int(integer_of_uint64(x), (18446744073709551615))))

logic uint8_of_integer: int -> uint8

axiom uint8_coerce :
 (forall x:int.
  ((le_int((0), x) and le_int(x, (255))) ->
   eq_int(integer_of_uint8(uint8_of_integer(x)), x)))

axiom uint8_range :
 (forall x:uint8.
  (le_int((0), integer_of_uint8(x)) and le_int(integer_of_uint8(x), (255))))

predicate valid_struct_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_struct_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_struct_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

predicate valid_variant_char_P(p:char_P pointer,
 a:int,
 b:int,
 char_P_alloc_table:char_P alloc_table) =
 ((offset_min(char_P_alloc_table, p) = a)
 and (offset_max(char_P_alloc_table, p) = b))

predicate valid_variant_int_P(p:int_P pointer,
 a:int,
 b:int,
 int_P_alloc_table:int_P alloc_table) =
 ((offset_min(int_P_alloc_table, p) = a)
 and (offset_max(int_P_alloc_table, p) = b))

predicate valid_variant_int_xP(p:int_xP pointer,
 a:int,
 b:int,
 int_xP_alloc_table:int_xP alloc_table) =
 ((offset_min(int_xP_alloc_table, p) = a)
 and (offset_max(int_xP_alloc_table, p) = b))

parameter __globinit_whole_program :
 tt:unit -> { (JC_12: true)} unit { true }

parameter _bool_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (1)))} _bool
  { eq_int(integer_of__bool(result), x) }

parameter char_P_alloc_table : char_P alloc_table ref

parameter char_P_tag_table : char_P tag_table ref

parameter alloc_char_P :
 n:int ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { ge_int(n, (0))} char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), sub_int(n, (1)), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter int_P_alloc_table : int_P alloc_table ref

parameter int_P_tag_table : int_P tag_table ref

parameter alloc_int_P :
 n:int ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { ge_int(n, (0))} int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), sub_int(n, (1)), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter int_xP_alloc_table : int_xP alloc_table ref

parameter int_xP_tag_table : int_xP tag_table ref

parameter alloc_int_xP :
 n:int ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { ge_int(n, (0))} int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), sub_int(n, (1)), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter alloc_one_char_P :
 tt:unit ->
  char_P_alloc_table:char_P alloc_table ref ->
   char_P_alloc_table:char_P alloc_table ref ->
    { } char_P pointer reads char_P_alloc_table
    writes char_P_alloc_table,char_P_tag_table
    { (valid_struct_char_P(result, (0), (0), char_P_alloc_table)
      and (instanceof(char_P_tag_table, result, char_P_tag)
          and (alloc_extends(char_P_alloc_table@, char_P_alloc_table)
              and alloc_extern(char_P_alloc_table@, result)))) }

parameter alloc_one_int_P :
 tt:unit ->
  int_P_alloc_table:int_P alloc_table ref ->
   int_P_alloc_table:int_P alloc_table ref ->
    { } int_P pointer reads int_P_alloc_table
    writes int_P_alloc_table,int_P_tag_table
    { (valid_struct_int_P(result, (0), (0), int_P_alloc_table)
      and (instanceof(int_P_tag_table, result, int_P_tag)
          and (alloc_extends(int_P_alloc_table@, int_P_alloc_table)
              and alloc_extern(int_P_alloc_table@, result)))) }

parameter alloc_one_int_xP :
 tt:unit ->
  int_xP_alloc_table:int_xP alloc_table ref ->
   int_xP_alloc_table:int_xP alloc_table ref ->
    { } int_xP pointer reads int_xP_alloc_table
    writes int_xP_alloc_table,int_xP_tag_table
    { (valid_struct_int_xP(result, (0), (0), int_xP_alloc_table)
      and (instanceof(int_xP_tag_table, result, int_xP_tag)
          and (alloc_extends(int_xP_alloc_table@, int_xP_alloc_table)
              and alloc_extern(int_xP_alloc_table@, result)))) }

parameter any__bool : unit -> { } _bool { true }

parameter any_int16 : unit -> { } int16 { true }

parameter any_int32 : unit -> { } int32 { true }

parameter any_int64 : unit -> { } int64 { true }

parameter any_int8 : unit -> { } int8 { true }

parameter any_uint16 : unit -> { } uint16 { true }

parameter any_uint32 : unit -> { } uint32 { true }

parameter any_uint64 : unit -> { } uint64 { true }

parameter any_uint8 : unit -> { } uint8 { true }

parameter char_P_char_M : (char_P, int8) memory ref

parameter int16_of_integer_ :
 x:int ->
  { (le_int((-32768), x) and le_int(x, (32767)))} int16
  { eq_int(integer_of_int16(result), x) }

parameter int32_of_integer_ :
 x:int ->
  { (le_int((-2147483648), x) and le_int(x, (2147483647)))} int32
  { eq_int(integer_of_int32(result), x) }

parameter int64_of_integer_ :
 x:int ->
  { (le_int((-9223372036854775808), x) and le_int(x, (9223372036854775807)))}
  int64 { eq_int(integer_of_int64(result), x) }

parameter int8_of_integer_ :
 x:int ->
  { (le_int((-128), x) and le_int(x, (127)))} int8
  { eq_int(integer_of_int8(result), x) }

parameter int_P_int_M : (int_P, int32) memory ref

parameter int_xP_int_xM : (int_xP, int_P pointer) memory ref

parameter main :
 tt:unit ->
  { (JC_6: true)} int32
  reads int_P_alloc_table,int_P_int_M,int_xP_alloc_table,int_xP_int_xM
  writes int_P_alloc_table,int_P_int_M,int_P_tag_table,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
  { ((true = true) -> (C_40: eq_int(integer_of_int32(result), (0)))) }

parameter safe__bool_of_integer_ :
 x:int -> { } _bool { eq_int(integer_of__bool(result), x) }

parameter safe_int16_of_integer_ :
 x:int -> { } int16 { eq_int(integer_of_int16(result), x) }

parameter safe_int32_of_integer_ :
 x:int -> { } int32 { eq_int(integer_of_int32(result), x) }

parameter safe_int64_of_integer_ :
 x:int -> { } int64 { eq_int(integer_of_int64(result), x) }

parameter safe_int8_of_integer_ :
 x:int -> { } int8 { eq_int(integer_of_int8(result), x) }

parameter safe_uint16_of_integer_ :
 x:int -> { } uint16 { eq_int(integer_of_uint16(result), x) }

parameter safe_uint32_of_integer_ :
 x:int -> { } uint32 { eq_int(integer_of_uint32(result), x) }

parameter safe_uint64_of_integer_ :
 x:int -> { } uint64 { eq_int(integer_of_uint64(result), x) }

parameter safe_uint8_of_integer_ :
 x:int -> { } uint8 { eq_int(integer_of_uint8(result), x) }

parameter test :
 n_0:int32 ->
  { (C_21: ge_int(integer_of_int32(n_0), (1)))} int_xP pointer
  reads int_P_alloc_table,int_xP_alloc_table,int_xP_int_xM
  writes int_P_alloc_table,int_P_tag_table,int_xP_alloc_table,int_xP_int_xM,int_xP_tag_table
  { ((true = true) ->
     (C_22:
     ((C_24: le_int(offset_min(int_xP_alloc_table, result), (0)))
     and ((C_25:
          ge_int(offset_max(int_xP_alloc_table, result),
          sub_int(integer_of_int32(n_0), (1))))
         and (C_26:
             (forall i_6:int32.
              ((le_int((0), integer_of_int32(i_6))
               and lt_int(integer_of_int32(i_6), integer_of_int32(n_0))) ->
               (le_int(offset_min(int_P_alloc_table,
                       select(int_xP_int_xM,
                       shift(result, integer_of_int32(i_6)))),
                (0))
               and ge_int(offset_max(int_P_alloc_table,
                          select(int_xP_int_xM,
                          shift(result, integer_of_int32(i_6)))),
                   (0)))))))))) }

parameter uint16_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (65535)))} uint16
  { eq_int(integer_of_uint16(result), x) }

parameter uint32_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (4294967295)))} uint32
  { eq_int(integer_of_uint32(result), x) }

parameter uint64_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (18446744073709551615)))} uint64
  { eq_int(integer_of_uint64(result), x) }

parameter uint8_of_integer_ :
 x:int ->
  { (le_int((0), x) and le_int(x, (255)))} uint8
  { eq_int(integer_of_uint8(result), x) }

let __globinit_whole_program_safety =
 fun (tt : unit) ->
  { (JC_13: true) }
  (init: try begin   void; (raise Return) end with Return -> void end)
  { true }

let main_ensures_default_1 =
 fun (tt : unit) ->
  { (JC_7: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_27:
     begin
       (JC_11: (__globinit_whole_program void));
      (C_29:
      begin
        (let jessie_33 = (t_0 := (C_28: (test (safe_int32_of_integer_ (10))))) in
        void);
       (C_34:
       begin
         (let jessie_36 = (let jessie_34 = (C_32:
                                           ((shift ((safe_acc_ !int_xP_int_xM) 
                                                    (C_30:
                                                    ((shift !t_0) (3))))) (0))) in
                          (let jessie_35 = (safe_int32_of_integer_ (0)) in
                          (((safe_upd_ int_P_int_M) (C_32:
                                                    ((shift ((safe_acc_ !int_xP_int_xM) 
                                                             (C_30:
                                                             ((shift !t_0) (3))))) (0)))) jessie_35))) in
         void);
        (C_39:
        begin
          (let jessie_37 = (__retres := ((safe_acc_ !int_P_int_M) (C_37:
                                                                  ((shift 
                                                                    ((safe_acc_ !int_xP_int_xM) 
                                                                    (C_35:
                                                                    ((shift !t_0) (3))))) (0))))) in
          void);
         (jessie_returned_value := !__retres);
         (raise Return)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) -> (C_40: eq_int(integer_of_int32(result), (0)))) }

let main_safety =
 fun (tt : unit) ->
  { (JC_7: true) }
  (init:
  (let jessie_returned_value = ref (any_int32 void) in
  try
   begin
     (let t_0 = ref (any_pointer void) in
     (let __retres = ref (any_int32 void) in
     (C_27:
     begin
       (JC_9: (__globinit_whole_program void));
      (C_29:
      begin
        (let jessie_27 = (t_0 := (C_28: (test (safe_int32_of_integer_ (10))))) in
        void);
       (C_34:
       begin
         (let jessie_30 = (let jessie_28 = (C_32:
                                           ((shift (C_31:
                                                   ((((offset_acc_ !int_xP_alloc_table) !int_xP_int_xM) !t_0) (3)))) (0))) in
                          (let jessie_29 = (safe_int32_of_integer_ (0)) in
                          (JC_10:
                          ((((upd_ !int_P_alloc_table) int_P_int_M) (C_31:
                                                                    ((((offset_acc_ !int_xP_alloc_table) !int_xP_int_xM) !t_0) (3)))) jessie_29)))) in
         void);
        (C_39:
        begin
          (let jessie_31 = (__retres := (C_38:
                                        (((acc_ !int_P_alloc_table) !int_P_int_M) 
                                         (C_36:
                                         ((((offset_acc_ !int_xP_alloc_table) !int_xP_int_xM) !t_0) (3)))))) in
          void);
         (jessie_returned_value := !__retres);
         (raise Return)
        end)
       end)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }

let test_ensures_default =
 fun (n_0 : int32) ->
  { (C_21: ge_int(integer_of_int32(n_0), (1))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let t = ref (any_pointer void) in
     (let i_7 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_16 = (t := (C_6:
                              (((alloc_int_xP (integer_of_uint32 (safe_uint32_of_integer_ 
                                                                  (C_4:
                                                                  ((div_int_ 
                                                                    (integer_of_uint32 
                                                                    (safe_uint32_of_integer_ 
                                                                    (C_2:
                                                                    ((mul_int 
                                                                    (integer_of_uint32 
                                                                    (safe_uint32_of_integer_ 
                                                                    (integer_of_int32 n_0)))) (4)))))) (4)))))) int_xP_alloc_table) int_xP_alloc_table))) in
       void);
      (C_8:
      begin
        (let jessie_17 = (i_7 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant
            (C_9:
            ((C_11: le_int((0), integer_of_int32(i_7)))
            and ((C_12: le_int(integer_of_int32(i_7), integer_of_int32(n_0)))
                and (C_13:
                    (forall k_0:int32.
                     ((le_int((0), integer_of_int32(k_0))
                      and lt_int(integer_of_int32(k_0),
                          integer_of_int32(i_7))) ->
                      (le_int(offset_min(int_P_alloc_table,
                              select(int_xP_int_xM,
                              shift(t, integer_of_int32(k_0)))),
                       (0))
                      and ge_int(offset_max(int_P_alloc_table,
                                 select(int_xP_int_xM,
                                 shift(t, integer_of_int32(k_0)))),
                          (0)))))))))
           }
         try
          (let jessie_24 = begin
                             (let jessie_23 = begin
                                                (if ((lt_int_ (integer_of_int32 !i_7)) 
                                                     (integer_of_int32 n_0))
                                                then void
                                                else
                                                 (let jessie_18 = (raise
                                                                   (Goto_while_0_break_exc
                                                                   void)) in
                                                 void));
                                               (C_17:
                                               begin
                                                 (let jessie_22 = (let jessie_19 = 
                                                                  (C_15:
                                                                  ((shift !t) 
                                                                   (integer_of_int32 !i_7))) in
                                                                  (let jessie_20 = 
                                                                  (C_14:
                                                                  (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                                                                  (((safe_upd_ int_xP_int_xM) 
                                                                    (C_15:
                                                                    ((shift !t) 
                                                                    (integer_of_int32 !i_7)))) jessie_20))) in
                                                 void);
                                                (C_20:
                                                begin
                                                  (i_7 := (safe_int32_of_integer_ 
                                                           (C_18:
                                                           ((add_int 
                                                             (integer_of_int32 !i_7)) (1)))));
                                                 !i_7
                                                end)
                                               end)
                                              end in
                             void);
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          void end
        done
        with
        Goto_while_0_break_exc jessie_1 ->
        (while_0_break: void) end;
       (jessie_returned_value := !t);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { ((true = true) ->
     (C_22:
     ((C_24: le_int(offset_min(int_xP_alloc_table, result), (0)))
     and ((C_25:
          ge_int(offset_max(int_xP_alloc_table, result),
          sub_int(integer_of_int32(n_0), (1))))
         and (C_26:
             (forall i_6:int32.
              ((le_int((0), integer_of_int32(i_6))
               and lt_int(integer_of_int32(i_6), integer_of_int32(n_0))) ->
               (le_int(offset_min(int_P_alloc_table,
                       select(int_xP_int_xM,
                       shift(result, integer_of_int32(i_6)))),
                (0))
               and ge_int(offset_max(int_P_alloc_table,
                          select(int_xP_int_xM,
                          shift(result, integer_of_int32(i_6)))),
                   (0)))))))))) }

let test_safety =
 fun (n_0 : int32) ->
  { (C_21: ge_int(integer_of_int32(n_0), (1))) }
  (init:
  (let jessie_returned_value = ref (any_pointer void) in
  try
   begin
     (let t = ref (any_pointer void) in
     (let i_7 = ref (any_int32 void) in
     (C_7:
     begin
       (let jessie_5 = (t := (C_6:
                             (((alloc_int_xP (integer_of_uint32 (C_5:
                                                                (uint32_of_integer_ 
                                                                 (C_4:
                                                                 ((div_int_ 
                                                                   (integer_of_uint32 
                                                                    (C_3:
                                                                    (uint32_of_integer_ 
                                                                    (C_2:
                                                                    ((mul_int 
                                                                    (integer_of_uint32 
                                                                    (C_1:
                                                                    (uint32_of_integer_ 
                                                                    (integer_of_int32 n_0))))) (4))))))) (4))))))) int_xP_alloc_table) int_xP_alloc_table))) in
       void);
      (C_8:
      begin
        (let jessie_6 = (i_7 := (safe_int32_of_integer_ (0))) in void);
       try
        while true do
        { invariant
            (C_9:
            ((C_11: le_int((0), integer_of_int32(i_7)))
            and ((C_12: le_int(integer_of_int32(i_7), integer_of_int32(n_0)))
                and (C_13:
                    (forall k_0:int32.
                     ((le_int((0), integer_of_int32(k_0))
                      and lt_int(integer_of_int32(k_0),
                          integer_of_int32(i_7))) ->
                      (le_int(offset_min(int_P_alloc_table,
                              select(int_xP_int_xM,
                              shift(t, integer_of_int32(k_0)))),
                       (0))
                      and ge_int(offset_max(int_P_alloc_table,
                                 select(int_xP_int_xM,
                                 shift(t, integer_of_int32(k_0)))),
                          (0)))))))))
           }
         try
          (let jessie_13 = begin
                             (let jessie_12 = begin
                                                (if ((lt_int_ (integer_of_int32 !i_7)) 
                                                     (integer_of_int32 n_0))
                                                then void
                                                else
                                                 (let jessie_7 = (raise
                                                                  (Goto_while_0_break_exc
                                                                  void)) in
                                                 void));
                                               (C_17:
                                               begin
                                                 (let jessie_11 = (let jessie_8 = 
                                                                  (C_15:
                                                                  ((shift !t) 
                                                                   (integer_of_int32 !i_7))) in
                                                                  (let jessie_9 = 
                                                                  (C_14:
                                                                  (((alloc_one_int_P void) int_P_alloc_table) int_P_alloc_table)) in
                                                                  (JC_4:
                                                                  (((((offset_upd_ !int_xP_alloc_table) int_xP_int_xM) !t) 
                                                                    (integer_of_int32 !i_7)) jessie_9)))) in
                                                 void);
                                                (C_20:
                                                begin
                                                  (i_7 := (C_19:
                                                          (int32_of_integer_ 
                                                           (C_18:
                                                           ((add_int 
                                                             (integer_of_int32 !i_7)) (1))))));
                                                 !i_7
                                                end)
                                               end)
                                              end in
                             void);
                            (raise (Loop_continue_exc void))
                           end in
          void)
          with
          Loop_continue_exc jessie_3 ->
          void end
        done
        with
        Goto_while_0_break_exc jessie_1 ->
        (while_0_break: void) end;
       (jessie_returned_value := !t);
       (raise Return)
      end)
     end)));
    absurd 
   end
   with
   Return ->
   !jessie_returned_value end))
  { true }


