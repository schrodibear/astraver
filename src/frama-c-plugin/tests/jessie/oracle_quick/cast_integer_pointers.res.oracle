rm -f cast_integer_pointers.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only cast_integer_pointers.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat cast_integer_pointers.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag signed_char_P = void_P with {
  int8 signed_char_M;
}

tag unsigned_char_P = void_P with {
  uint8 unsigned_char_M;
}

tag int_P = void_P with {
  int32 int_M;
}

tag unsigned_int_P = void_P with {
  uint32 unsigned_int_M;
}

tag char_P = void_P with {
  int8 char_M;
}

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 uint_to_int(unsigned_int_P[..] up)
  requires (C_5 : ((C_6 : (\offset_min(up) <= 0)) &&
                    (C_7 : (\offset_max(up) >= 0))));
behavior identity:
  assumes (up.unsigned_int_M <= 2147483647);
  ensures (C_8 : (\result == up.unsigned_int_M));
{  
   (var int_P[..] ip);
   
   (var int32 __retres);
   
   {  (C_2 : (ip = (C_1 : (up :> int_P))));
      (C_4 : (__retres = (C_3 : ip.int_M)));
      
      (return __retres)
   }
}

unit init_uint_through_int(unsigned_int_P[..] uarr)
  requires (C_19 : ((C_20 : (\offset_min(uarr) <= 0)) &&
                     (C_21 : (\offset_max(uarr) >= 9))));
{  
   (var int_P[..] cur);
   
   (var int32 i);
   
   {  (C_10 : (cur = (C_9 : (uarr :> int_P))));
      (C_11 : (i = 0));
      
      {  
         invariant (C_12 : (i >= 0));
         while (true)
         {  
            {  (if (i < 10) then () else 
               (goto while_0_break));
               (C_15 : ((C_14 : (C_13 : (cur + i)).int_M) = 0));
               (C_18 : (i = (C_17 : ((C_16 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}

int32 uchar_ptr(unsigned_char_P[..] p)
  requires (C_25 : ((C_26 : (\offset_min(p) <= 0)) &&
                     (C_27 : (\offset_max(p) >= 0))));
{  
   (var int32 __retres);
   
   {  (C_24 : (__retres = (C_23 : ((C_22 : p.unsigned_char_M) :> int32))));
      
      (return __retres)
   }
}

int32 schar_ptr(signed_char_P[..] p)
  requires (C_31 : ((C_32 : (\offset_min(p) <= 0)) &&
                     (C_33 : (\offset_max(p) >= 0))));
{  
   (var int32 __retres);
   
   {  (C_30 : (__retres = (C_29 : ((C_28 : p.signed_char_M) :> int32))));
      
      (return __retres)
   }
}

int32 char_ptr(char_P[..] p)
  requires (C_44 : ((C_45 : (\offset_min(p) <= 0)) &&
                     (C_46 : (\offset_max(p) >= 0))));
{  
   (var int32 tmp);
   
   (var int32 tmp_0);
   
   (var int32 __retres);
   
   {  (if ((C_39 : ((C_38 : p.char_M) :> int32)) > 127) then 
      {  (C_36 : (tmp = (C_35 : uchar_ptr((C_34 : (p :> unsigned_char_P))))));
         (C_37 : (__retres = tmp));
         
         (goto return_label)
      } else ());
      (C_42 : (tmp_0 = (C_41 : schar_ptr((C_40 : (p :> signed_char_P))))));
      (C_43 : (__retres = tmp_0));
      (return_label : 
      (return __retres))
   }
}
