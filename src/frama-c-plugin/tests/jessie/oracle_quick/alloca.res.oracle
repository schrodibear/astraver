rm -f alloca.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only alloca.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat alloca.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_u :
((\offset_min(u) <= 0) && (\offset_max(u) >= 3))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 f()
behavior default:
  assumes true;
  ensures (C_12 : (\result == 3));
{  
   (var int_P[0..2] t);
   
   (var int32 __retres);
   
   {  (C_2 : (t = (C_1 : (new int_P[3]))));
      (C_4 : ((C_3 : (t + 0).int_M) = 1));
      (C_6 : ((C_5 : (t + 1).int_M) = 2));
      (C_8 : ((C_7 : (t + 2).int_M) = 3));
      (C_10 : (__retres = (C_9 : (t + 2).int_M)));
      
      {  (C_11 : (free(t)));
         
         (return __retres)
      }
   }
}

int32 g()
behavior default_1:
  assumes true;
  ensures (C_24 : (\result == 3));
{  
   (var int_P[0..2] t);
   
   (var int32 __retres);
   
   {  (C_14 : (t = (C_13 : (new int_P[3]))));
      (C_16 : ((C_15 : (t + 0).int_M) = 1));
      (C_18 : ((C_17 : (t + 1).int_M) = 2));
      (C_20 : ((C_19 : (t + 2).int_M) = 3));
      (C_22 : (__retres = (C_21 : (t + 2).int_M)));
      
      {  (C_23 : (free(t)));
         
         (return __retres)
      }
   }
}

int_P[0..3] u;

int32 h()
  requires (C_38 : ((u + 2).int_M == 12));
behavior default_2:
  assumes true;
  ensures (C_39 : (\result == 12));
{  
   (var int_P[0..3] t);
   
   (var int32 __retres);
   
   {  (C_26 : (t = (C_25 : (new int_P[4]))));
      (C_28 : ((C_27 : (t + 0).int_M) = 1));
      (C_30 : ((C_29 : (t + 1).int_M) = 2));
      (C_32 : ((C_31 : (t + 2).int_M) = 3));
      (C_34 : ((C_33 : (t + 3).int_M) = 4));
      (C_36 : (__retres = (C_35 : (u + 2).int_M)));
      
      {  (C_37 : (free(t)));
         
         (return __retres)
      }
   }
}

int32 two_local_arrays()
behavior default_3:
  assumes true;
  ensures (C_67 : (\result == 3));
{  
   (var int_P[0..3] t);
   
   (var int_P[0..4] u_0);
   
   (var int32 __retres);
   
   {  (C_41 : (t = (C_40 : (new int_P[4]))));
      (C_43 : (u_0 = (C_42 : (new int_P[5]))));
      (C_45 : ((C_44 : (t + 0).int_M) = 1));
      (C_47 : ((C_46 : (t + 1).int_M) = 2));
      (C_49 : ((C_48 : (t + 2).int_M) = 3));
      (C_51 : ((C_50 : (t + 3).int_M) = 4));
      
      {  (C_53 : ((C_52 : (u_0 + 0).int_M) = 0));
         ();
         ()
      };
      
      {  (C_55 : ((C_54 : (u_0 + 1).int_M) = 0));
         ();
         ()
      };
      (C_58 : ((C_57 : (u_0 + 2).int_M) = (C_56 : (t + 2).int_M)));
      
      {  (C_60 : ((C_59 : (u_0 + 3).int_M) = 0));
         ();
         ()
      };
      
      {  (C_62 : ((C_61 : (u_0 + 4).int_M) = 0));
         ();
         ()
      };
      (C_64 : (__retres = (C_63 : (u_0 + 2).int_M)));
      
      {  (C_65 : (free(t)));
         (C_66 : (free(u_0)));
         
         (return __retres)
      }
   }
}

int32 two_local_arrays_not_alias()
behavior default_4:
  assumes true;
  ensures (C_80 : (\result == 3));
{  
   (var int_P[0..4] t);
   
   (var int_P[0..5] v);
   
   (var int32 __retres);
   
   {  (C_69 : (t = (C_68 : (new int_P[5]))));
      (C_71 : (v = (C_70 : (new int_P[6]))));
      (C_73 : ((C_72 : (t + 4).int_M) = 3));
      (C_75 : ((C_74 : (v + 4).int_M) = 1));
      (C_77 : (__retres = (C_76 : (t + 4).int_M)));
      
      {  (C_78 : (free(t)));
         (C_79 : (free(v)));
         
         (return __retres)
      }
   }
}
