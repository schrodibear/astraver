rm -f enum.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only enum.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat enum.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag enum___anonenum_color_1_P = {
  __anonenum_color_1 enum___anonenum_color_1_M;
}

type enum___anonenum_color_1_P = [enum___anonenum_color_1_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

type E = 1..4

type __anonenum_color_1 = 0..2

type I = 0..2

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit f()
behavior default:
  assumes true;
  ensures (C_1 : (4 == 4));
{  
   {  
      (return ())
   }
}

int32 g(E e)
behavior default_1:
  assumes true;
  ensures (C_4 : ((C_5 : (1 <= \result)) && (C_6 : (\result <= 4))));
{  
   (var int32 __retres);
   
   {  (C_3 : (__retres = (C_2 : (e :> int32))));
      
      (return __retres)
   }
}

unit h(enum___anonenum_color_1_P[..] t)
  requires (C_12 : ((C_13 : (\offset_min(t) <= 0)) &&
                     (C_14 : (\offset_max(t) >= 9))));
behavior default_2:
  assumes true;
  ensures (C_15 : ((((t + 2).enum___anonenum_color_1_M == 0) ||
                     ((t + 2).enum___anonenum_color_1_M == 1)) ||
                    ((t + 2).enum___anonenum_color_1_M == 2)));
{  
   {  (C_11 : ((C_10 : (C_9 : (t + 2)).enum___anonenum_color_1_M) = (C_8 : 
                                                                    (C_7 : 
                                                                    (t +
                                                                    0)).enum___anonenum_color_1_M)));
      
      (return ())
   }
}

unit enum_as_array_index(int_P[..] t)
  requires (C_19 : ((C_20 : (\offset_min(t) <= 0)) &&
                     (C_21 : (\offset_max(t) >= 2))));
behavior default_3:
  assumes true;
  ensures (C_22 : ((t + 1).int_M == 0));
{  
   {  (C_18 : ((C_17 : (C_16 : (t + 1)).int_M) = 0));
      
      (return ())
   }
}
