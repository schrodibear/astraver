rm -f minix3_strcpy.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only minix3_strcpy.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat minix3_strcpy.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

char_P[..] strcpy(char_P[..] ret, char_P[..] s2)
{  
   (var char_P[..] s1);
   
   (var char_P[..] tmp);
   
   (var int8 tmp_0);
   
   (var char_P[..] tmp_1);
   
   (var int32 __jc_off_s2);
   
   (var int32 __jc_off_s1);
   
   (var int32 __jc_off_tmp);
   
   (var int32 __jc_off_tmp_1);
   
   {  (C_1 : (__jc_off_s2 = 0));
      (C_2 : (__jc_off_s1 = 0));
      
      {  
         invariant (C_3 : true);
         while (true)
         {  
            {  (C_4 : (__jc_off_tmp = __jc_off_s1));
               (C_7 : (__jc_off_s1 = (C_6 : ((C_5 : (__jc_off_s1 + 1)) :> int32))));
               (C_8 : (__jc_off_tmp_1 = __jc_off_s2));
               (C_11 : (__jc_off_s2 = (C_10 : ((C_9 : (__jc_off_s2 + 1)) :> int32))));
               
               {  
                  (assert (C_12 : (hint : (strlen(s2) >= __jc_off_tmp_1))));
                  (C_15 : (tmp_0 = (C_14 : (C_13 : (s2 + __jc_off_tmp_1)).char_M)))
               };
               (C_18 : ((C_17 : (C_16 : (ret + __jc_off_tmp)).char_M) = tmp_0));
               (if (tmp_0 != 0) then () else 
               (goto while_0_break))
            }
         };
         (while_0_break : ())
      };
      
      (return ret)
   }
}
