rm -f all.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only all.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat all.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_t :
((\offset_min(t) <= 0) && (\offset_max(t) >= 2))

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 x;

int32 y;

unit f1()
behavior default:
  assumes true;
  ensures (C_2 : (x == 0));
{  
   {  (C_1 : (x = 0));
      
      (return ())
   }
}

unit f2()
  requires (C_6 : (x == 0));
behavior default_1:
  assumes true;
  ensures (C_7 : (x == 1));
{  
   {  (C_5 : (x = (C_4 : ((C_3 : (x + 1)) :> int32))));
      
      (return ())
   }
}

unit f3()
  requires (C_11 : (x == 0));
behavior default_2:
  assumes true;
  ensures (C_12 : (x == 1));
{  
   {  (C_10 : (x = (C_9 : ((C_8 : (x + 1)) :> int32))));
      
      (return ())
   }
}

unit f4()
  requires (C_18 : (x == 0));
behavior default_3:
  assumes true;
  ensures (C_19 : ((C_20 : (x == 1)) && (C_21 : (y == 0))));
{  
   (var int32 tmp);
   
   {  (C_13 : (tmp = x));
      (C_16 : (x = (C_15 : ((C_14 : (x + 1)) :> int32))));
      (C_17 : (y = tmp));
      
      (return ())
   }
}

unit f5()
  requires (C_26 : (x == 0));
behavior default_4:
  assumes true;
  ensures (C_27 : ((C_28 : (x == 1)) && (C_29 : (y == 1))));
{  
   {  (C_24 : (x = (C_23 : ((C_22 : (x + 1)) :> int32))));
      (C_25 : (y = x));
      
      (return ())
   }
}

unit f6()
  requires (C_33 : (x == 1));
behavior default_5:
  assumes true;
  ensures (C_34 : (x == 3));
{  
   {  (C_32 : (x = (C_31 : ((C_30 : (x + 2)) :> int32))));
      
      (return ())
   }
}

unit f7a()
  requires (C_37 : (x == 0));
behavior default_6:
  assumes true;
  ensures (C_38 : (y == 1));
{  
   {  (if (x == 0) then (C_36 : (y = 1)) else (C_35 : (y = 2)));
      
      (return ())
   }
}

unit f7b()
  requires (C_41 : (x != 0));
behavior default_7:
  assumes true;
  ensures (C_42 : (y == 2));
{  
   {  (if (x == 0) then (C_40 : (y = 1)) else (C_39 : (y = 2)));
      
      (return ())
   }
}

int_P[0..2] t;

unit t1()
  requires (C_45 : ((t + 0).int_M == 1));
behavior default_8:
  assumes true;
  ensures (C_46 : (y == 1));
{  
   {  (C_44 : (y = (C_43 : (t + 0).int_M)));
      
      (return ())
   }
}

unit t2()
  requires (C_53 : ((C_54 : (x == 0)) && (C_55 : ((t + 0).int_M == 1))));
behavior default_9:
  assumes true;
  ensures (C_56 : (y == 1));
{  
   (var int32 tmp);
   
   {  (C_47 : (tmp = x));
      (C_50 : (x = (C_49 : ((C_48 : (x + 1)) :> int32))));
      (C_52 : (y = (C_51 : (t + tmp).int_M)));
      
      (return ())
   }
}

unit t3()
  requires (C_62 : ((C_63 : (x == 0)) && (C_64 : ((t + 1).int_M == 1))));
behavior default_10:
  assumes true;
  ensures (C_65 : (y == 1));
{  
   {  (C_59 : (x = (C_58 : ((C_57 : (x + 1)) :> int32))));
      (C_61 : (y = (C_60 : (t + x).int_M)));
      
      (return ())
   }
}
