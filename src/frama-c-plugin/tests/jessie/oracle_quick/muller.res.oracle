rm -f muller.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only muller.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat muller.jc
# IntModel = bounded
# InvariantPolicy = Arguments
# SeparationPolicy = Regions

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

logic integer num_of_pos{Here}(integer i, integer j, int_P[..] t) reads 
(t +
  i).int_M;

axiom num_of_pos_empty{Here} :
(\forall integer i;
  (\forall integer j;
    (\forall int_P[..] t;
      ((i > j) ==> (num_of_pos{Here}(i, j, t) == 0)))))

axiom num_of_pos_true_case{Here} :
(\forall integer i;
  (\forall integer j;
    (\forall int_P[..] t;
      (((i <= j) && ((t + j).int_M > 0)) ==>
        (num_of_pos{Here}(i, j, t) == (num_of_pos{Here}(i, (j - 1), t) + 1))))))

axiom num_of_pos_strictly_increasing{Here} :
(\forall integer i;
  (\forall integer j;
    (\forall integer k;
      (\forall integer l;
        (\forall int_P[..] t;
          ((((j < k) && (k <= l)) && ((t + k).int_M > 0)) ==>
            (num_of_pos{Here}(i, j, t) < num_of_pos{Here}(i, l, t))))))))

unit m(int_P[..] t, int32 length)
  requires (C_49 : ((C_50 : (length >= 0)) &&
                     ((C_52 : (\offset_min(t) <= 0)) &&
                       (C_53 : (\offset_max(t) >= (length - 1))))));
{  
   (var int32 count);
   
   (var int32 i);
   
   (var int_P[..] u);
   
   (var int32 tmp_0);
   
   {  (C_1 : (count = 0));
      (C_2 : (i = 0));
      
      {  
         invariant (C_3 : (((((C_7 : (0 <= i)) && (C_8 : (i <= length))) &&
                              (C_9 : (0 <= count))) &&
                             (C_10 : (count <= i))) &&
                            (C_11 : (count ==
                                      num_of_pos{Here}(0, (i - 1), t)))));
         variant (C_12 : (length - i));
         while (true)
         {  
            {  (if (i < length) then () else 
               (goto while_0_break));
               (if ((C_17 : (C_16 : (t + i)).int_M) > 0) then (C_15 : (count = 
                                                              (C_14 : (
                                                              (C_13 : 
                                                              (count +
                                                                1)) :> int32)))) else ());
               (C_20 : (i = (C_19 : ((C_18 : (i + 1)) :> int32))))
            }
         };
         (while_0_break : ())
      };
      (C_22 : (u = (C_21 : (new int_P[count]))));
      (C_23 : (count = 0));
      (C_24 : (i = 0));
      
      {  
         invariant (C_25 : (((((C_29 : (0 <= i)) && (C_30 : (i <= length))) &&
                               (C_31 : (0 <= count))) &&
                              (C_32 : (count <= i))) &&
                             (C_33 : (count ==
                                       num_of_pos{Here}(0, (i - 1), t)))));
         variant (C_34 : (length - i));
         while (true)
         {  
            {  (if (i < length) then () else 
               (goto while_1_break));
               (if ((C_45 : (C_44 : (t + i)).int_M) > 0) then 
               {  (C_35 : (tmp_0 = count));
                  (C_38 : (count = (C_37 : ((C_36 : (count + 1)) :> int32))));
                  (C_43 : ((C_42 : (C_41 : (u + tmp_0)).int_M) = (C_40 : 
                                                                 (C_39 : 
                                                                 (t +
                                                                   i)).int_M)))
               } else ());
               (C_48 : (i = (C_47 : ((C_46 : (i + 1)) :> int32))))
            }
         };
         (while_1_break : ())
      };
      
      (return ())
   }
}
