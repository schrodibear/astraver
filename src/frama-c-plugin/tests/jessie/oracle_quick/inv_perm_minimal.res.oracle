rm -f inv_perm_minimal.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only inv_perm_minimal.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat inv_perm_minimal.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit safety(int_P[..] t, int32 n)
  requires (C_47 : (((C_49 : (n >= 1)) &&
                      ((C_51 : (\offset_min(t) <= 1)) &&
                        (C_52 : (\offset_max(t) >= n)))) &&
                     (C_53 : (\forall int32 k;
                               (((1 <= k) && (k <= n)) ==>
                                 ((1 <= (t + k).int_M) &&
                                   ((t + k).int_M <= n)))))));
{  
   (var int32 m);
   
   (var int32 j);
   
   (var int32 i);
   
   {  (C_1 : (m = n));
      (C_2 : (j = -1));
      
      {  
         invariant (C_3 : ((((C_6 : (1 <= m)) && (C_7 : (m <= n))) &&
                             ((C_9 : ((- n) <= j)) && (C_10 : (j <= (- 1))))) &&
                            (C_11 : (\forall int32 k;
                                      (((1 <= k) && (k <= n)) ==>
                                        ((((- n) <= (t + k).int_M) &&
                                           ((t + k).int_M <= (- 1))) ||
                                          ((1 <= (t + k).int_M) &&
                                            ((t + k).int_M <= n))))))));
         while (true)
         {  
            {  (C_14 : (i = (C_13 : (C_12 : (t + m)).int_M)));
               (if (i > 0) then 
               {  
                  {  
                     invariant (C_15 : (((((C_19 : (1 <= m)) &&
                                            (C_20 : (m <= n))) &&
                                           ((C_22 : (1 <= i)) &&
                                             (C_23 : (i <= n)))) &&
                                          ((C_25 : ((- n) <= j)) &&
                                            (C_26 : (j <= (- 1))))) &&
                                         (C_27 : (\forall int32 k;
                                                   (((1 <= k) && (k <= n)) ==>
                                                     ((((- n) <=
                                                         (t + k).int_M) &&
                                                        ((t + k).int_M <=
                                                          (- 1))) ||
                                                       ((1 <= (t + k).int_M) &&
                                                         ((t + k).int_M <= n))))))));
                     while (true)
                     {  
                        {  (C_30 : ((C_29 : (C_28 : (t + m)).int_M) = j));
                           (C_33 : (j = (C_32 : ((C_31 : (- m)) :> int32))));
                           (C_34 : (m = i));
                           (C_37 : (i = (C_36 : (C_35 : (t + m)).int_M)));
                           (if (i > 0) then () else 
                           (goto while_1_break))
                        }
                     };
                     (while_1_break : ())
                  };
                  (C_38 : (i = j))
               } else ());
               (C_43 : ((C_42 : (C_41 : (t + m)).int_M) = (C_40 : ((C_39 : 
                                                                   (- i)) :> int32))));
               (C_46 : (m = (C_45 : ((C_44 : (m - 1)) :> int32))));
               (if (m > 0) then () else 
               (goto while_0_break))
            }
         };
         (while_0_break : ())
      };
      
      (return ())
   }
}
