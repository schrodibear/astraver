rm -f string_basic.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only string_basic.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat string_basic.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_gtoto :
((\offset_min(gtoto) <= 0) && (\offset_max(gtoto) >= 4))

invariant valid___string_toto :
((\offset_min(__string_toto) <= 0) && (\offset_max(__string_toto) >= 4))

char_P[0..4] __string_toto;

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int32 endsat(char_P[..] p, int32 i)
  requires (C_6 : ((C_7 : (\offset_min(p) <= i)) &&
                    (C_8 : (\offset_max(p) >= i))));
behavior ok:
  assumes ((p + i).char_M == 0);
  ensures (C_9 : (\result == 1));
behavior ko:
  assumes ((p + i).char_M != 0);
  ensures (C_10 : (\result == 0));
{  
   (var int32 __retres);
   
   {  (if ((C_4 : ((C_3 : (C_2 : (p + i)).char_M) :> int32)) == 0) then 
      {  ();
         (C_1 : (__retres = 1));
         
         (goto return_label)
      } else ());
      (C_5 : (__retres = 0));
      (return_label : 
      (return __retres))
   }
}

char_P[0..4] gtoto;

unit test1()
{  
   (var int32 r1);
   
   {  (C_12 : (r1 = (C_11 : endsat(gtoto, 4))));
      
      {  
         (assert (C_13 : (r1 == 1)));
         ()
      };
      
      (return ())
   }
}

unit test2()
{  
   (var char_P[0..4] ltoto);
   
   (var int32 r1);
   
   {  (C_15 : (ltoto = (C_14 : (new char_P[5]))));
      (C_17 : ((C_16 : (ltoto + 0).char_M) = 116));
      (C_19 : ((C_18 : (ltoto + 1).char_M) = 111));
      (C_21 : ((C_20 : (ltoto + 2).char_M) = 116));
      (C_23 : ((C_22 : (ltoto + 3).char_M) = 111));
      
      {  (C_25 : ((C_24 : (ltoto + 4).char_M) = 0));
         ();
         ()
      };
      (C_27 : (r1 = (C_26 : endsat(ltoto, 4))));
      
      {  
         (assert (C_28 : (r1 == 1)));
         ()
      };
      
      {  (C_29 : (free(ltoto)));
         
         (return ())
      }
   }
}

char_P[..] gptoto;

unit test1ptr()
{  
   (var int32 r1);
   
   {  (C_31 : (r1 = (C_30 : endsat(gptoto, 4))));
      
      {  
         (assert (C_32 : (r1 == 1)));
         ()
      };
      
      (return ())
   }
}

unit test2ptr()
{  
   (var char_P[..] lptoto);
   
   (var int32 r1);
   
   {  (C_33 : (lptoto = __string_toto));
      (C_35 : (r1 = (C_34 : endsat(lptoto, 4))));
      
      {  
         (assert (C_36 : (r1 == 1)));
         ()
      };
      
      (return ())
   }
}
