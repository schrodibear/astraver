rm -f binary_search.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only binary_search.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat binary_search.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

lemma mean_1 :
(\forall int32 x;
  (\forall int32 y;
    ((x <= y) ==> ((x <= ((x + y) / 2)) && (((x + y) / 2) <= y)))))

int32 binary_search(int_P[..] t, int32 n, int32 v)
  requires (C_37 : (((C_39 : (n >= 0)) &&
                      ((C_41 : (\offset_min(t) <= 0)) &&
                        (C_42 : (\offset_max(t) >= (n - 1))))) &&
                     (C_43 : (\forall int32 k1;
                               (\forall int32 k2;
                                 (((0 <= k1) &&
                                    ((k1 <= k2) && (k2 <= (n - 1)))) ==>
                                   ((t + k1).int_M <= (t + k2).int_M)))))));
behavior default:
  assumes true;
  ensures (C_44 : (((\result >= 0) && ((t + \result).int_M == v)) ||
                    ((\result == (- 1)) &&
                      (\forall int32 k;
                        (((0 <= k) && (k < n)) ==> ((t + k).int_M != v))))));
{  
   (var int32 l);
   
   (var int32 u);
   
   (var int32 p);
   
   (var int32 m);
   
   {  (C_1 : (l = 0));
      (C_4 : (u = (C_3 : ((C_2 : (n - 1)) :> int32))));
      (C_5 : (p = -1));
      
      {  
         invariant (C_6 : (((((C_10 : (0 <= l)) && (C_11 : (u <= (n - 1)))) &&
                              ((C_13 : ((- 1) <= p)) &&
                                (C_14 : (p <= (n - 1))))) &&
                             (C_15 : ((p == (- 1)) ==>
                                       (\forall int32 k;
                                         (((0 <= k) && (k < n)) ==>
                                           (((t + k).int_M == v) ==>
                                             ((l <= k) && (k <= u)))))))) &&
                            (C_16 : ((p >= 0) ==> ((t + p).int_M == v)))));
         variant (C_17 : (u - l));
         while (true)
         {  
            {  (if (l <= u) then () else 
               (goto while_0_break));
               (C_22 : (m = (C_21 : ((C_20 : ((C_19 : ((C_18 : (l + u)) :> int32)) /
                                               2)) :> int32))));
               
               {  
                  (assert (C_23 : ((C_24 : (l <= m)) && (C_25 : (m <= u)))));
                  ()
               };
               (if ((C_36 : (C_35 : (t + m)).int_M) < v) then (C_34 : (l = 
                                                              (C_33 : (
                                                              (C_32 : 
                                                              (m + 1)) :> int32)))) else 
               (if ((C_31 : (C_30 : (t + m)).int_M) > v) then (C_29 : (u = 
                                                              (C_28 : (
                                                              (C_27 : 
                                                              (m - 1)) :> int32)))) else 
               {  (C_26 : (p = m));
                  
                  (goto while_0_break)
               }))
            }
         };
         (while_0_break : ())
      };
      
      (return p)
   }
}
