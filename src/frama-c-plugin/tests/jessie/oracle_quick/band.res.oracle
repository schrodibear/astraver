rm -f band.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only band.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat band.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

int16 ValueA;

invariant tev :
((0 <= ValueA) && (ValueA <= 10))

int16 ValueB;

invariant ev :
((0 <= ValueB) && (ValueB <= 10))

int16 returnValue;

invariant eev :
((0 <= returnValue) && (returnValue <= 10))

int16 test1()
behavior default:
  assumes true;
  assigns returnValue;
  ensures (C_6 : (\result >= 0));
{  
   {  (C_5 : (returnValue = (C_4 : ((C_3 : ((C_2 : (ValueA :> int32)) &
                                             (C_1 : (ValueB :> int32)))) :> int16))));
      
      (return returnValue)
   }
}

int16 test2()
behavior default_1:
  assumes true;
  assigns returnValue;
  ensures (C_17 : (\result >= 0));
{  
   {  (C_11 : (returnValue = (C_10 : ((C_9 : ((C_8 : (ValueA :> int32)) &
                                               (C_7 : (ValueB :> int32)))) :> int16))));
      (if ((C_15 : (returnValue :> int32)) < 0) then (C_14 : (returnValue = 0)) else 
      (if ((C_13 : (returnValue :> int32)) > 10) then (C_12 : (returnValue = 0)) else ()));
      
      (goto _L);
      (C_16 : (returnValue = 0));
      (_L : ());
      
      (return returnValue)
   }
}

int16 test3()
behavior default_2:
  assumes true;
  assigns returnValue;
  ensures (C_19 : (\result >= 0));
{  
   {  (C_18 : (returnValue = returnValue));
      
      (return returnValue)
   }
}
