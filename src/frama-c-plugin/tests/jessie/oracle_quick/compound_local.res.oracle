rm -f compound_local.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only compound_local.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat compound_local.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

tag S = {
  int_P[0] i; 
  int_P[..] p;
}

type S = [S]

tag T = {
  int32 ti; 
  int32 tj;
}

type T = [T]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

unit f(S[..] s)
  requires (C_18 : (((C_20 : (\offset_min(s) <= 0)) &&
                      (C_21 : (\offset_max(s) >= 0))) &&
                     ((C_23 : (\offset_min(s.p) <= 0)) &&
                       (C_24 : (\offset_max(s.p) >= 0)))));
behavior default:
  assumes true;
  ensures (C_25 : ((C_26 : (s.i.int_M == 1)) && (C_27 : (s.p.int_M == 2))));
{  
   (var int_P[..] tmp);
   
   {  (C_2 : (tmp = (C_1 : s.p)));
      (C_5 : ((C_4 : s.p) = (C_3 : s.i)));
      (C_8 : ((C_7 : (C_6 : s.i).int_M) = 2));
      (C_12 : ((C_11 : tmp.int_M) = (C_10 : (C_9 : s.p).int_M)));
      (C_14 : ((C_13 : s.p) = tmp));
      (C_17 : ((C_16 : (C_15 : s.i).int_M) = 1));
      
      (return ())
   }
}

unit fc(T[..] t)
  requires (C_41 : ((C_42 : (\offset_min(t) <= 0)) &&
                     (C_43 : (\offset_max(t) >= 0))));
behavior default_1:
  assumes true;
  ensures (C_44 : ((C_45 : (t.ti == 1)) && (C_46 : (t.tj == 2))));
{  
   (var T[0] tmp);
   
   {  (C_29 : (tmp = (C_28 : (new T[1]))));
      (C_31 : ((C_30 : tmp.ti) = 1));
      (C_33 : ((C_32 : tmp.tj) = 2));
      
      {  (C_36 : ((C_35 : t.ti) = (C_34 : tmp.ti)));
         (C_39 : ((C_38 : t.tj) = (C_37 : tmp.tj)))
      };
      
      {  (C_40 : (free(tmp)));
         
         (return ())
      }
   }
}
