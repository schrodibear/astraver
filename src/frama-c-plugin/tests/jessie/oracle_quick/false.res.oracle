rm -f false.jc
../../bin/toplevel.opt -jessie-analysis  -jessie-gen-only false.c
Parsing
Cleaning unused parts
Symbolic link
Starting semantical analysis
cat false.jc
# IntModel = bounded
# InvariantPolicy = Arguments

type _bool = 0..1

type int8 = -128..127

type uint8 = 0..255

type int32 = -2147483648..2147483647

type uint32 = 0..4294967295

type int16 = -32768..32767

type uint16 = 0..65535

type int64 = -9223372036854775808..9223372036854775807

type uint64 = 0..18446744073709551615

tag char_P = {
  int8 char_M;
}

type char_P = [char_P]

tag int_P = {
  int32 int_M;
}

type int_P = [int_P]

tag void_P = {
  unit void_M;
}

type void_P = [void_P]

invariant valid_zz :
((\offset_min(zz) <= 0) && (\offset_max(zz) >= 0))

invariant valid_y :
((\offset_min(y) <= 0) && (\offset_max(y) >= 4))

invariant valid_x :
((\offset_min(x) <= 0) && (\offset_max(x) >= 3))

tag u = {
  int32 xxx;
}

type u = [u]

tag v = {
  u[0] xx; 
  int_P[0..4] yy;
}

type v = [v]

logic int32 strlen{L}(char_P[..] s) reads s.char_M;

axiom strlen_def1{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i < strlen{L}(s))) ==> ((s + i).char_M != 0))))

axiom strlen_def2{L} :
(\forall char_P[..] s;
  ((s + strlen{L}(s)).char_M == 0))

axiom strlen_not_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M != 0)) ==>
      (i < strlen{L}(s)))))

axiom strlen_zero{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    ((((0 <= i) && (i <= strlen{L}(s))) && ((s + i).char_M == 0)) ==>
      (i == strlen{L}(s)))))

axiom strlen_sup{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_shift{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && (i <= strlen{L}(s))) ==>
      (strlen{L}((s + i)) == (strlen{L}(s) - i)))))

axiom strlen_create{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (((0 <= i) && ((s + i).char_M == 0)) ==>
      ((0 <= strlen{L}(s)) && (strlen{L}(s) <= i)))))

axiom strlen_create2{L} :
(\forall char_P[..] s;
  (\forall int32 i;
    (\forall int32 k;
      (((k <= i) && ((s + i).char_M == 0)) ==>
        ((0 <= strlen{L}((s + k))) && (strlen{L}((s + k)) <= (i - k)))))))

v[..] z;

u[0] zz;

int_P[0..3] x;

int_P[0..4] y;

unit false0()
behavior default:
  assumes true;
  ensures (C_1 : false);
{  
   {  
      (return ())
   }
}

unit false1()
{  
   {  (C_4 : ((C_3 : ((C_2 : z.yy) + 5).int_M) = 3));
      
      (return ())
   }
}

unit false2()
{  
   {  (C_6 : ((C_5 : (x + -1).int_M) = 1));
      
      (return ())
   }
}

unit false3()
{  
   {  (C_8 : ((C_7 : (y + 5).int_M) = 2));
      
      (return ())
   }
}
